"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/utils/algorand.ts":
/*!*******************************!*\
  !*** ./src/utils/algorand.ts ***!
  \*******************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ALGOD_PORT: function() { return /* binding */ ALGOD_PORT; },\n/* harmony export */   ALGOD_SERVER: function() { return /* binding */ ALGOD_SERVER; },\n/* harmony export */   ALGOD_TOKEN: function() { return /* binding */ ALGOD_TOKEN; },\n/* harmony export */   APP_ID: function() { return /* binding */ APP_ID; },\n/* harmony export */   buildCreateProjectTxn: function() { return /* binding */ buildCreateProjectTxn; },\n/* harmony export */   claimRefund: function() { return /* binding */ claimRefund; },\n/* harmony export */   contributeToProject: function() { return /* binding */ contributeToProject; },\n/* harmony export */   createProject: function() { return /* binding */ createProject; },\n/* harmony export */   formatAlgoAmount: function() { return /* binding */ formatAlgoAmount; },\n/* harmony export */   formatTimestamp: function() { return /* binding */ formatTimestamp; },\n/* harmony export */   getAlgodClient: function() { return /* binding */ getAlgodClient; },\n/* harmony export */   getProgressPercentage: function() { return /* binding */ getProgressPercentage; },\n/* harmony export */   getProjects: function() { return /* binding */ getProjects; },\n/* harmony export */   getTimeRemaining: function() { return /* binding */ getTimeRemaining; },\n/* harmony export */   mintRewardNFT: function() { return /* binding */ mintRewardNFT; },\n/* harmony export */   optInToApp: function() { return /* binding */ optInToApp; },\n/* harmony export */   parseAlgoAmount: function() { return /* binding */ parseAlgoAmount; },\n/* harmony export */   submitSignedTransaction: function() { return /* binding */ submitSignedTransaction; },\n/* harmony export */   waitForConfirmation: function() { return /* binding */ waitForConfirmation; },\n/* harmony export */   withdrawFunds: function() { return /* binding */ withdrawFunds; }\n/* harmony export */ });\n/* harmony import */ var algosdk__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! algosdk */ \"(app-pages-browser)/./node_modules/algosdk/dist/esm/index.js\");\n/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"(app-pages-browser)/./node_modules/buffer/index.js\")[\"Buffer\"];\n\n// Algorand Testnet configuration\nconst ALGOD_TOKEN = \"\";\nconst ALGOD_SERVER = \"https://testnet-api.algonode.cloud\";\nconst ALGOD_PORT = 443;\n// Application configuration\nconst APP_ID = 746106150 // Latest deployed smart contract ID\n;\nconst getAlgodClient = ()=>{\n    return new algosdk__WEBPACK_IMPORTED_MODULE_0__[\"default\"].Algodv2(ALGOD_TOKEN, ALGOD_SERVER, ALGOD_PORT);\n};\nconst formatAlgoAmount = (microAlgos)=>{\n    return (microAlgos / 1000000).toFixed(2);\n};\nconst parseAlgoAmount = (algos)=>{\n    return Math.floor(parseFloat(algos) * 1000000);\n};\nconst formatTimestamp = (timestamp)=>{\n    return new Date(timestamp * 1000).toLocaleDateString();\n};\nconst getTimeRemaining = (deadline)=>{\n    const now = Math.floor(Date.now() / 1000);\n    const remaining = deadline - now;\n    if (remaining <= 0) {\n        return \"Expired\";\n    }\n    const days = Math.floor(remaining / 86400);\n    const hours = Math.floor(remaining % 86400 / 3600);\n    const minutes = Math.floor(remaining % 3600 / 60);\n    if (days > 0) {\n        return \"\".concat(days, \"d \").concat(hours, \"h \").concat(minutes, \"m\");\n    } else if (hours > 0) {\n        return \"\".concat(hours, \"h \").concat(minutes, \"m\");\n    } else {\n        return \"\".concat(minutes, \"m\");\n    }\n};\nconst getProgressPercentage = (collected, target)=>{\n    if (target === 0) return 0;\n    return Math.min(collected / target * 100, 100);\n};\nconst waitForConfirmation = async (client, txid)=>{\n    const status = await client.status().do();\n    let lastRound = status[\"last-round\"];\n    while(true){\n        try {\n            const pendingInfo = await client.pendingTransactionInformation(txid).do();\n            if (pendingInfo[\"confirmed-round\"] && pendingInfo[\"confirmed-round\"] > 0) {\n                return pendingInfo;\n            }\n            lastRound++;\n            await client.statusAfterBlock(lastRound).do();\n        } catch (e) {\n            console.error(\"Error waiting for confirmation:\", e);\n            throw e;\n        }\n    }\n};\nconst createProject = async (client, sender, privateKey, appId, projectData)=>{\n    const params = await client.getTransactionParams().do();\n    const appArgs = [\n        new Uint8Array(Buffer.from(\"create\")),\n        new Uint8Array(Buffer.from(projectData.name)),\n        new Uint8Array(Buffer.from(projectData.description)),\n        algosdk__WEBPACK_IMPORTED_MODULE_0__[\"default\"].encodeUint64(projectData.targetAmount),\n        algosdk__WEBPACK_IMPORTED_MODULE_0__[\"default\"].encodeUint64(projectData.deadline),\n        new Uint8Array(Buffer.from(projectData.category))\n    ];\n    const txn = algosdk__WEBPACK_IMPORTED_MODULE_0__[\"default\"].makeApplicationNoOpTxn(sender, params, appId, appArgs);\n    const signedTxn = txn.signTxn(privateKey);\n    const txId = await client.sendRawTransaction(signedTxn).do();\n    await waitForConfirmation(client, txId.txId);\n    return txId.txId;\n};\n// Build an unsigned app call txn for 'create' action to be signed by a wallet\nconst buildCreateProjectTxn = async (client, sender, appId, data)=>{\n    const params = await client.getTransactionParams().do();\n    const appArgs = [\n        new Uint8Array(Buffer.from(\"create\")),\n        new Uint8Array(Buffer.from(data.name)),\n        new Uint8Array(Buffer.from(data.description)),\n        algosdk__WEBPACK_IMPORTED_MODULE_0__[\"default\"].encodeUint64(data.targetAmount),\n        algosdk__WEBPACK_IMPORTED_MODULE_0__[\"default\"].encodeUint64(data.deadline),\n        new Uint8Array(Buffer.from(data.category))\n    ];\n    return algosdk__WEBPACK_IMPORTED_MODULE_0__[\"default\"].makeApplicationNoOpTxn(sender, params, appId, appArgs);\n};\n// Submit signed transaction bytes and wait for confirmation\nconst submitSignedTransaction = async (client, signed)=>{\n    const bytesArray = Array.isArray(signed) ? signed : [\n        signed\n    ];\n    const txId = await client.sendRawTransaction(bytesArray).do();\n    await waitForConfirmation(client, txId.txId);\n    return txId.txId;\n};\nconst contributeToProject = async (client, sender, privateKey, appId, projectId, amount)=>{\n    const params = await client.getTransactionParams().do();\n    // Get app address\n    const appInfo = await client.getApplicationByID(appId).do();\n    const appAddress = appInfo[\"params\"][\"creator\"];\n    // Create payment transaction\n    const paymentTxn = algosdk__WEBPACK_IMPORTED_MODULE_0__[\"default\"].makePaymentTxnWithSuggestedParams(sender, appAddress, amount, undefined, undefined, params);\n    // Create app call transaction\n    const appTxn = algosdk__WEBPACK_IMPORTED_MODULE_0__[\"default\"].makeApplicationNoOpTxn(sender, params, appId, [\n        new Uint8Array(Buffer.from(\"contribute\")),\n        algosdk__WEBPACK_IMPORTED_MODULE_0__[\"default\"].encodeUint64(projectId)\n    ]);\n    // Group transactions\n    const group = algosdk__WEBPACK_IMPORTED_MODULE_0__[\"default\"].assignGroupID([\n        paymentTxn,\n        appTxn\n    ]);\n    const signedPayment = algosdk__WEBPACK_IMPORTED_MODULE_0__[\"default\"].signTransaction(paymentTxn, privateKey);\n    const signedApp = algosdk__WEBPACK_IMPORTED_MODULE_0__[\"default\"].signTransaction(appTxn, privateKey);\n    const txId = await client.sendRawTransaction([\n        signedPayment.blob,\n        signedApp.blob\n    ]).do();\n    await waitForConfirmation(client, txId.txId);\n    return txId.txId;\n};\n// Get projects from blockchain\nconst getProjects = async (client, appId)=>{\n    try {\n        console.log(\"\\uD83D\\uDD0D Getting app info for ID:\", appId);\n        const appInfo = await client.getApplicationByID(appId).do();\n        console.log(\"\\uD83D\\uDCF1 App info received:\", appInfo);\n        const globalState = appInfo.params.globalState || appInfo.params[\"global-state\"] || [];\n        console.log(\"\\uD83C\\uDF0D Global state:\", globalState);\n        // Debug: Print all keys\n        console.log(\"\\uD83D\\uDD11 All keys in global state:\");\n        globalState.forEach((item, index)=>{\n            const decodedKey = Buffer.from(item.key, \"base64\").toString();\n            const value = item.value.bytes ? Buffer.from(item.value.bytes, \"base64\").toString() : item.value.uint;\n            console.log(\"  \".concat(index, ': \"').concat(decodedKey, '\" = ').concat(value));\n        });\n        // Extract project count\n        const projectCountState = globalState.find((item)=>Buffer.from(item.key, \"base64\").toString() === \"project_count\");\n        const projectCount = projectCountState ? projectCountState.value.uint : 0;\n        console.log(\"\\uD83D\\uDCCA Project count found:\", projectCount);\n        const projects = [];\n        // Get each project's data\n        for(let i = 0; i < projectCount; i++){\n            console.log(\"\\uD83D\\uDD0D Processing project \".concat(i));\n            const getProjectValue = (suffix)=>{\n                // Exact key patterns from terminal output\n                const possibleKeys = [\n                    \"p__\".concat(suffix)\n                ];\n                for (const keyPattern of possibleKeys){\n                    const state = globalState.find((item)=>Buffer.from(item.key, \"base64\").toString() === keyPattern);\n                    if (state) {\n                        console.log(\"✅ Found key: \".concat(keyPattern, \" = \").concat(state.value.bytes ? Buffer.from(state.value.bytes, \"base64\").toString() : state.value.uint));\n                        return state.value.bytes ? Buffer.from(state.value.bytes, \"base64\").toString() : state.value.uint;\n                    }\n                }\n                console.log(\"❌ Key not found for suffix: \".concat(suffix, \", tried: \").concat(possibleKeys.join(\", \")));\n                return null;\n            };\n            const name = getProjectValue(\"name\");\n            const description = getProjectValue(\"desc\") || getProjectValue(\"description\") || \"No description available\";\n            const creator = getProjectValue(\"creator\");\n            const target = getProjectValue(\"target\");\n            const deadline = getProjectValue(\"deadline\") || Math.floor(Date.now() / 1000) + 86400 * 30 // Default 30 days\n            ;\n            const collected = getProjectValue(\"collected\") || 0;\n            const category = getProjectValue(\"category\") || \"General\";\n            const active = getProjectValue(\"active\") !== null ? getProjectValue(\"active\") : 1 // Default active\n            ;\n            console.log(\"\\uD83D\\uDCDD Project \".concat(i, \" extracted data:\"), {\n                name,\n                description,\n                creator,\n                target,\n                deadline,\n                collected,\n                category,\n                active\n            });\n            // Create project even if some fields are missing\n            if (name && target) {\n                projects.push({\n                    id: i,\n                    name,\n                    description,\n                    creator,\n                    targetAmount: target,\n                    deadline,\n                    collectedAmount: collected,\n                    category,\n                    threshold: 0,\n                    active: active === 1\n                });\n            }\n        }\n        return projects;\n    } catch (error) {\n        console.error(\"Error fetching projects:\", error);\n        return [];\n    }\n};\nconst withdrawFunds = async (client, sender, privateKey, appId, projectId)=>{\n    const params = await client.getTransactionParams().do();\n    const appArgs = [\n        new Uint8Array(Buffer.from(\"withdraw\")),\n        algosdk__WEBPACK_IMPORTED_MODULE_0__[\"default\"].encodeUint64(projectId)\n    ];\n    const txn = algosdk__WEBPACK_IMPORTED_MODULE_0__[\"default\"].makeApplicationNoOpTxn(sender, params, appId, appArgs);\n    const signedTxn = txn.signTxn(privateKey);\n    const txId = await client.sendRawTransaction(signedTxn).do();\n    await waitForConfirmation(client, txId.txId);\n    return txId.txId;\n};\nconst claimRefund = async (client, sender, privateKey, appId, projectId)=>{\n    const params = await client.getTransactionParams().do();\n    const appArgs = [\n        new Uint8Array(Buffer.from(\"refund\")),\n        algosdk__WEBPACK_IMPORTED_MODULE_0__[\"default\"].encodeUint64(projectId)\n    ];\n    const txn = algosdk__WEBPACK_IMPORTED_MODULE_0__[\"default\"].makeApplicationNoOpTxn(sender, params, appId, appArgs);\n    const signedTxn = txn.signTxn(privateKey);\n    const txId = await client.sendRawTransaction(signedTxn).do();\n    await waitForConfirmation(client, txId.txId);\n    return txId.txId;\n};\nconst mintRewardNFT = async (client, sender, privateKey, appId, projectId)=>{\n    const params = await client.getTransactionParams().do();\n    const appArgs = [\n        new Uint8Array(Buffer.from(\"mint_nft\")),\n        algosdk__WEBPACK_IMPORTED_MODULE_0__[\"default\"].encodeUint64(projectId)\n    ];\n    const txn = algosdk__WEBPACK_IMPORTED_MODULE_0__[\"default\"].makeApplicationNoOpTxn(sender, params, appId, appArgs);\n    const signedTxn = txn.signTxn(privateKey);\n    const txId = await client.sendRawTransaction(signedTxn).do();\n    await waitForConfirmation(client, txId.txId);\n    return txId.txId;\n};\nconst optInToApp = async (client, sender, privateKey, appId)=>{\n    const params = await client.getTransactionParams().do();\n    const txn = algosdk__WEBPACK_IMPORTED_MODULE_0__[\"default\"].makeApplicationOptInTxn(sender, params, appId);\n    const signedTxn = txn.signTxn(privateKey);\n    const txId = await client.sendRawTransaction(signedTxn).do();\n    await waitForConfirmation(client, txId.txId);\n    return txId.txId;\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/utils/algorand.ts\n"));

/***/ })

});