"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/algosdk";
exports.ids = ["vendor-chunks/algosdk"];
exports.modules = {

/***/ "(ssr)/./node_modules/algosdk/dist/esm/abi/abi_type.js":
/*!*******************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/abi/abi_type.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ABIAddressType: () => (/* binding */ ABIAddressType),\n/* harmony export */   ABIArrayDynamicType: () => (/* binding */ ABIArrayDynamicType),\n/* harmony export */   ABIArrayStaticType: () => (/* binding */ ABIArrayStaticType),\n/* harmony export */   ABIBoolType: () => (/* binding */ ABIBoolType),\n/* harmony export */   ABIByteType: () => (/* binding */ ABIByteType),\n/* harmony export */   ABIStringType: () => (/* binding */ ABIStringType),\n/* harmony export */   ABITupleType: () => (/* binding */ ABITupleType),\n/* harmony export */   ABIType: () => (/* binding */ ABIType),\n/* harmony export */   ABIUfixedType: () => (/* binding */ ABIUfixedType),\n/* harmony export */   ABIUintType: () => (/* binding */ ABIUintType),\n/* harmony export */   ADDR_BYTE_SIZE: () => (/* binding */ ADDR_BYTE_SIZE),\n/* harmony export */   LENGTH_ENCODE_BYTE_SIZE: () => (/* binding */ LENGTH_ENCODE_BYTE_SIZE),\n/* harmony export */   MAX_LEN: () => (/* binding */ MAX_LEN),\n/* harmony export */   SINGLE_BOOL_SIZE: () => (/* binding */ SINGLE_BOOL_SIZE),\n/* harmony export */   SINGLE_BYTE_SIZE: () => (/* binding */ SINGLE_BYTE_SIZE)\n/* harmony export */ });\n/* harmony import */ var _encoding_address_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../encoding/address.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/address.js\");\n/* harmony import */ var _encoding_bigint_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../encoding/bigint.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/bigint.js\");\n/* harmony import */ var _utils_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/utils.js */ \"(ssr)/./node_modules/algosdk/dist/esm/utils/utils.js\");\n/* eslint-disable no-bitwise */ /* eslint-disable no-use-before-define */ /* eslint-disable class-methods-use-this */ /**\n    //ABI-Types: uint<N>: An N-bit unsigned integer (8 <= N <= 512 and N % 8 = 0).\n    // | byte (alias for uint8)\n    // | ufixed <N> x <M> (8 <= N <= 512, N % 8 = 0, and 0 < M <= 160)\n    // | bool\n    // | address (alias for byte[32])\n    // | <type> [<N>]\n    // | <type> []\n    // | string\n    // | (T1, ..., Tn)\n*/ \n\n\nconst MAX_LEN = 2 ** 16 - 1;\nconst ADDR_BYTE_SIZE = 32;\nconst SINGLE_BYTE_SIZE = 1;\nconst SINGLE_BOOL_SIZE = 1;\nconst LENGTH_ENCODE_BYTE_SIZE = 2;\nconst staticArrayRegexp = /^([a-z\\d[\\](),]+)\\[(0|[1-9][\\d]*)]$/;\nconst ufixedRegexp = /^ufixed([1-9][\\d]*)x([1-9][\\d]*)$/;\nclass ABIType {\n    // De-serializes the ABI type from a string using the ABI specs\n    static from(str) {\n        if (str.endsWith(\"[]\")) {\n            const arrayArgType = ABIType.from(str.slice(0, str.length - 2));\n            return new ABIArrayDynamicType(arrayArgType);\n        }\n        if (str.endsWith(\"]\")) {\n            const stringMatches = str.match(staticArrayRegexp);\n            // Match the string itself, array element type, then array length\n            if (!stringMatches || stringMatches.length !== 3) {\n                throw new Error(`malformed static array string: ${str}`);\n            }\n            // Parse static array using regex\n            const arrayLengthStr = stringMatches[2];\n            const arrayLength = parseInt(arrayLengthStr, 10);\n            if (arrayLength > MAX_LEN) {\n                throw new Error(`array length exceeds limit ${MAX_LEN}`);\n            }\n            // Parse the array element type\n            const arrayType = ABIType.from(stringMatches[1]);\n            return new ABIArrayStaticType(arrayType, arrayLength);\n        }\n        if (str.startsWith(\"uint\")) {\n            // Checks if the parsed number contains only digits, no whitespaces\n            const digitsOnly = (s)=>[\n                    ...s\n                ].every((c)=>\"0123456789\".includes(c));\n            const typeSizeStr = str.slice(4, str.length);\n            if (!digitsOnly(typeSizeStr)) {\n                throw new Error(`malformed uint string: ${typeSizeStr}`);\n            }\n            const typeSize = parseInt(typeSizeStr, 10);\n            if (typeSize > MAX_LEN) {\n                throw new Error(`malformed uint string: ${typeSize}`);\n            }\n            return new ABIUintType(typeSize);\n        }\n        if (str === \"byte\") {\n            return new ABIByteType();\n        }\n        if (str.startsWith(\"ufixed\")) {\n            const stringMatches = str.match(ufixedRegexp);\n            if (!stringMatches || stringMatches.length !== 3) {\n                throw new Error(`malformed ufixed type: ${str}`);\n            }\n            const ufixedSize = parseInt(stringMatches[1], 10);\n            const ufixedPrecision = parseInt(stringMatches[2], 10);\n            return new ABIUfixedType(ufixedSize, ufixedPrecision);\n        }\n        if (str === \"bool\") {\n            return new ABIBoolType();\n        }\n        if (str === \"address\") {\n            return new ABIAddressType();\n        }\n        if (str === \"string\") {\n            return new ABIStringType();\n        }\n        if (str.length >= 2 && str[0] === \"(\" && str[str.length - 1] === \")\") {\n            const tupleContent = ABITupleType.parseTupleContent(str.slice(1, str.length - 1));\n            const tupleTypes = [];\n            for(let i = 0; i < tupleContent.length; i++){\n                const ti = ABIType.from(tupleContent[i]);\n                tupleTypes.push(ti);\n            }\n            return new ABITupleType(tupleTypes);\n        }\n        throw new Error(`cannot convert a string ${str} to an ABI type`);\n    }\n}\nclass ABIUintType extends ABIType {\n    constructor(size){\n        super();\n        if (size % 8 !== 0 || size < 8 || size > 512) {\n            throw new Error(`unsupported uint type bitSize: ${size}`);\n        }\n        this.bitSize = size;\n    }\n    toString() {\n        return `uint${this.bitSize}`;\n    }\n    equals(other) {\n        return other instanceof ABIUintType && this.bitSize === other.bitSize;\n    }\n    isDynamic() {\n        return false;\n    }\n    byteLen() {\n        return this.bitSize / 8;\n    }\n    encode(value) {\n        if (typeof value !== \"bigint\" && typeof value !== \"number\") {\n            throw new Error(`Cannot encode value as uint${this.bitSize}: ${value}`);\n        }\n        if (value >= BigInt(2 ** this.bitSize) || value < BigInt(0)) {\n            throw new Error(`${value} is not a non-negative int or too big to fit in size uint${this.bitSize}`);\n        }\n        if (typeof value === \"number\" && !Number.isSafeInteger(value)) {\n            throw new Error(`${value} should be converted into a BigInt before it is encoded`);\n        }\n        return (0,_encoding_bigint_js__WEBPACK_IMPORTED_MODULE_1__.bigIntToBytes)(value, this.bitSize / 8);\n    }\n    decode(byteString) {\n        if (byteString.length !== this.bitSize / 8) {\n            throw new Error(`byte string must correspond to a uint${this.bitSize}`);\n        }\n        return (0,_encoding_bigint_js__WEBPACK_IMPORTED_MODULE_1__.bytesToBigInt)(byteString);\n    }\n}\nclass ABIUfixedType extends ABIType {\n    constructor(size, denominator){\n        super();\n        if (size % 8 !== 0 || size < 8 || size > 512) {\n            throw new Error(`unsupported ufixed type bitSize: ${size}`);\n        }\n        if (denominator > 160 || denominator < 1) {\n            throw new Error(`unsupported ufixed type precision: ${denominator}`);\n        }\n        this.bitSize = size;\n        this.precision = denominator;\n    }\n    toString() {\n        return `ufixed${this.bitSize}x${this.precision}`;\n    }\n    equals(other) {\n        return other instanceof ABIUfixedType && this.bitSize === other.bitSize && this.precision === other.precision;\n    }\n    isDynamic() {\n        return false;\n    }\n    byteLen() {\n        return this.bitSize / 8;\n    }\n    encode(value) {\n        if (typeof value !== \"bigint\" && typeof value !== \"number\") {\n            throw new Error(`Cannot encode value as ${this.toString()}: ${value}`);\n        }\n        if (value >= BigInt(2 ** this.bitSize) || value < BigInt(0)) {\n            throw new Error(`${value} is not a non-negative int or too big to fit in size ${this.toString()}`);\n        }\n        if (typeof value === \"number\" && !Number.isSafeInteger(value)) {\n            throw new Error(`${value} should be converted into a BigInt before it is encoded`);\n        }\n        return (0,_encoding_bigint_js__WEBPACK_IMPORTED_MODULE_1__.bigIntToBytes)(value, this.bitSize / 8);\n    }\n    decode(byteString) {\n        if (byteString.length !== this.bitSize / 8) {\n            throw new Error(`byte string must correspond to a ${this.toString()}`);\n        }\n        return (0,_encoding_bigint_js__WEBPACK_IMPORTED_MODULE_1__.bytesToBigInt)(byteString);\n    }\n}\nclass ABIAddressType extends ABIType {\n    toString() {\n        return \"address\";\n    }\n    equals(other) {\n        return other instanceof ABIAddressType;\n    }\n    isDynamic() {\n        return false;\n    }\n    byteLen() {\n        return ADDR_BYTE_SIZE;\n    }\n    encode(value) {\n        if (typeof value === \"string\") {\n            const decodedAddress = (0,_encoding_address_js__WEBPACK_IMPORTED_MODULE_0__.decodeAddress)(value);\n            return decodedAddress.publicKey;\n        }\n        if (value instanceof _encoding_address_js__WEBPACK_IMPORTED_MODULE_0__.Address) {\n            return value.publicKey;\n        }\n        if (value instanceof Uint8Array) {\n            if (value.byteLength !== 32) {\n                throw new Error(`byte string must be 32 bytes long for an address`);\n            }\n            return value;\n        }\n        throw new Error(`Cannot encode value as ${this.toString()}: ${value}`);\n    }\n    decode(byteString) {\n        if (byteString.byteLength !== 32) {\n            throw new Error(`byte string must be 32 bytes long for an address`);\n        }\n        return (0,_encoding_address_js__WEBPACK_IMPORTED_MODULE_0__.encodeAddress)(byteString);\n    }\n}\nclass ABIBoolType extends ABIType {\n    toString() {\n        return \"bool\";\n    }\n    equals(other) {\n        return other instanceof ABIBoolType;\n    }\n    isDynamic() {\n        return false;\n    }\n    byteLen() {\n        return SINGLE_BOOL_SIZE;\n    }\n    encode(value) {\n        if (typeof value !== \"boolean\") {\n            throw new Error(`Cannot encode value as bool: ${value}`);\n        }\n        if (value) {\n            return new Uint8Array([\n                128\n            ]);\n        }\n        return new Uint8Array([\n            0\n        ]);\n    }\n    decode(byteString) {\n        if (byteString.byteLength !== 1) {\n            throw new Error(`bool string must be 1 byte long`);\n        }\n        const value = byteString[0];\n        if (value === 128) {\n            return true;\n        }\n        if (value === 0) {\n            return false;\n        }\n        throw new Error(`boolean could not be decoded from the byte string`);\n    }\n}\nclass ABIByteType extends ABIType {\n    toString() {\n        return \"byte\";\n    }\n    equals(other) {\n        return other instanceof ABIByteType;\n    }\n    isDynamic() {\n        return false;\n    }\n    byteLen() {\n        return SINGLE_BYTE_SIZE;\n    }\n    encode(value) {\n        if (typeof value !== \"number\" && typeof value !== \"bigint\") {\n            throw new Error(`Cannot encode value as byte: ${value}`);\n        }\n        if (typeof value === \"bigint\") {\n            // eslint-disable-next-line no-param-reassign\n            value = Number(value);\n        }\n        if (value < 0 || value > 255) {\n            throw new Error(`${value} cannot be encoded into a byte`);\n        }\n        return new Uint8Array([\n            value\n        ]);\n    }\n    decode(byteString) {\n        if (byteString.byteLength !== 1) {\n            throw new Error(`byte string must be 1 byte long`);\n        }\n        return byteString[0];\n    }\n}\nclass ABIStringType extends ABIType {\n    toString() {\n        return \"string\";\n    }\n    equals(other) {\n        return other instanceof ABIStringType;\n    }\n    isDynamic() {\n        return true;\n    }\n    byteLen() {\n        throw new Error(`${this.toString()} is a dynamic type`);\n    }\n    encode(value) {\n        if (typeof value !== \"string\" && !(value instanceof Uint8Array)) {\n            throw new Error(`Cannot encode value as string: ${value}`);\n        }\n        let encodedBytes;\n        if (typeof value === \"string\") {\n            encodedBytes = new TextEncoder().encode(value);\n        } else {\n            encodedBytes = value;\n        }\n        const encodedLength = (0,_encoding_bigint_js__WEBPACK_IMPORTED_MODULE_1__.bigIntToBytes)(encodedBytes.length, LENGTH_ENCODE_BYTE_SIZE);\n        const mergedBytes = new Uint8Array(encodedBytes.length + LENGTH_ENCODE_BYTE_SIZE);\n        mergedBytes.set(encodedLength);\n        mergedBytes.set(encodedBytes, LENGTH_ENCODE_BYTE_SIZE);\n        return mergedBytes;\n    }\n    decode(byteString) {\n        if (byteString.length < LENGTH_ENCODE_BYTE_SIZE) {\n            throw new Error(`byte string is too short to be decoded. Actual length is ${byteString.length}, but expected at least ${LENGTH_ENCODE_BYTE_SIZE}`);\n        }\n        const view = new DataView(byteString.buffer, byteString.byteOffset, LENGTH_ENCODE_BYTE_SIZE);\n        const byteLength = view.getUint16(0);\n        const byteValue = byteString.slice(LENGTH_ENCODE_BYTE_SIZE, byteString.length);\n        if (byteLength !== byteValue.length) {\n            throw new Error(`string length bytes do not match the actual length of string. Expected ${byteLength}, got ${byteValue.length}`);\n        }\n        return new TextDecoder(\"utf-8\").decode(byteValue);\n    }\n}\nclass ABIArrayStaticType extends ABIType {\n    constructor(argType, arrayLength){\n        super();\n        if (arrayLength < 0) {\n            throw new Error(`static array must have a non negative length: ${arrayLength}`);\n        }\n        this.childType = argType;\n        this.staticLength = arrayLength;\n    }\n    toString() {\n        return `${this.childType.toString()}[${this.staticLength}]`;\n    }\n    equals(other) {\n        return other instanceof ABIArrayStaticType && this.staticLength === other.staticLength && this.childType.equals(other.childType);\n    }\n    isDynamic() {\n        return this.childType.isDynamic();\n    }\n    byteLen() {\n        if (this.childType.constructor === ABIBoolType) {\n            return Math.ceil(this.staticLength / 8);\n        }\n        return this.staticLength * this.childType.byteLen();\n    }\n    encode(value) {\n        if (!Array.isArray(value) && !(value instanceof Uint8Array)) {\n            throw new Error(`Cannot encode value as ${this.toString()}: ${value}`);\n        }\n        if (value.length !== this.staticLength) {\n            throw new Error(`Value array does not match static array length. Expected ${this.staticLength}, got ${value.length}`);\n        }\n        const convertedTuple = this.toABITupleType();\n        return convertedTuple.encode(value);\n    }\n    decode(byteString) {\n        const convertedTuple = this.toABITupleType();\n        return convertedTuple.decode(byteString);\n    }\n    toABITupleType() {\n        return new ABITupleType(Array(this.staticLength).fill(this.childType));\n    }\n}\nclass ABIArrayDynamicType extends ABIType {\n    constructor(argType){\n        super();\n        this.childType = argType;\n    }\n    toString() {\n        return `${this.childType.toString()}[]`;\n    }\n    equals(other) {\n        return other instanceof ABIArrayDynamicType && this.childType.equals(other.childType);\n    }\n    isDynamic() {\n        return true;\n    }\n    byteLen() {\n        throw new Error(`${this.toString()} is a dynamic type`);\n    }\n    encode(value) {\n        if (!Array.isArray(value) && !(value instanceof Uint8Array)) {\n            throw new Error(`Cannot encode value as ${this.toString()}: ${value}`);\n        }\n        const convertedTuple = this.toABITupleType(value.length);\n        const encodedTuple = convertedTuple.encode(value);\n        const encodedLength = (0,_encoding_bigint_js__WEBPACK_IMPORTED_MODULE_1__.bigIntToBytes)(convertedTuple.childTypes.length, LENGTH_ENCODE_BYTE_SIZE);\n        const mergedBytes = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_2__.concatArrays)(encodedLength, encodedTuple);\n        return mergedBytes;\n    }\n    decode(byteString) {\n        const view = new DataView(byteString.buffer, 0, LENGTH_ENCODE_BYTE_SIZE);\n        const byteLength = view.getUint16(0);\n        const convertedTuple = this.toABITupleType(byteLength);\n        return convertedTuple.decode(byteString.slice(LENGTH_ENCODE_BYTE_SIZE, byteString.length));\n    }\n    toABITupleType(length) {\n        return new ABITupleType(Array(length).fill(this.childType));\n    }\n}\nclass ABITupleType extends ABIType {\n    constructor(argTypes){\n        super();\n        if (argTypes.length >= MAX_LEN) {\n            throw new Error(\"tuple type child type number larger than maximum uint16 error\");\n        }\n        this.childTypes = argTypes;\n    }\n    toString() {\n        const typeStrings = [];\n        for(let i = 0; i < this.childTypes.length; i++){\n            typeStrings[i] = this.childTypes[i].toString();\n        }\n        return `(${typeStrings.join(\",\")})`;\n    }\n    equals(other) {\n        return other instanceof ABITupleType && this.childTypes.length === other.childTypes.length && this.childTypes.every((child, index)=>child.equals(other.childTypes[index]));\n    }\n    isDynamic() {\n        const isDynamic = (child)=>child.isDynamic();\n        return this.childTypes.some(isDynamic);\n    }\n    byteLen() {\n        let size = 0;\n        for(let i = 0; i < this.childTypes.length; i++){\n            if (this.childTypes[i].constructor === ABIBoolType) {\n                const after = findBoolLR(this.childTypes, i, 1);\n                const boolNum = after + 1;\n                i += after;\n                size += Math.trunc((boolNum + 7) / 8);\n            } else {\n                const childByteSize = this.childTypes[i].byteLen();\n                size += childByteSize;\n            }\n        }\n        return size;\n    }\n    encode(value) {\n        if (!Array.isArray(value) && !(value instanceof Uint8Array)) {\n            throw new Error(`Cannot encode value as ${this.toString()}: ${value}`);\n        }\n        const values = Array.from(value);\n        if (value.length > MAX_LEN) {\n            throw new Error(\"length of tuple array should not exceed a uint16\");\n        }\n        const tupleTypes = this.childTypes;\n        const heads = [];\n        const tails = [];\n        const isDynamicIndex = new Map();\n        let i = 0;\n        while(i < tupleTypes.length){\n            const tupleType = tupleTypes[i];\n            if (tupleType.isDynamic()) {\n                // Head is not pre-determined for dynamic types; store a placeholder for now\n                isDynamicIndex.set(heads.length, true);\n                heads.push(new Uint8Array([\n                    0,\n                    0\n                ]));\n                tails.push(tupleType.encode(values[i]));\n            } else {\n                if (tupleType.constructor === ABIBoolType) {\n                    const before = findBoolLR(tupleTypes, i, -1);\n                    let after = findBoolLR(tupleTypes, i, 1);\n                    // Pack bytes to heads and tails\n                    if (before % 8 !== 0) {\n                        throw new Error(\"expected before index should have number of bool mod 8 equal 0\");\n                    }\n                    after = Math.min(7, after);\n                    const compressedInt = compressMultipleBool(values.slice(i, i + after + 1));\n                    heads.push((0,_encoding_bigint_js__WEBPACK_IMPORTED_MODULE_1__.bigIntToBytes)(compressedInt, 1));\n                    i += after;\n                } else {\n                    const encodedTupleValue = tupleType.encode(values[i]);\n                    heads.push(encodedTupleValue);\n                }\n                isDynamicIndex.set(i, false);\n                tails.push(new Uint8Array());\n            }\n            i += 1;\n        }\n        // Adjust head lengths for dynamic types\n        let headLength = 0;\n        for (const headElement of heads){\n            headLength += headElement.length;\n        }\n        // encode any placeholders for dynamic types\n        let tailLength = 0;\n        for(let j = 0; j < heads.length; j++){\n            if (isDynamicIndex.get(j)) {\n                const headValue = headLength + tailLength;\n                if (headValue > MAX_LEN) {\n                    throw new Error(`byte length of ${headValue} should not exceed a uint16`);\n                }\n                heads[j] = (0,_encoding_bigint_js__WEBPACK_IMPORTED_MODULE_1__.bigIntToBytes)(headValue, LENGTH_ENCODE_BYTE_SIZE);\n            }\n            tailLength += tails[j].length;\n        }\n        return (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_2__.concatArrays)(...heads, ...tails);\n    }\n    decode(byteString) {\n        const tupleTypes = this.childTypes;\n        const dynamicSegments = [];\n        const valuePartition = [];\n        let i = 0;\n        let iterIndex = 0;\n        const view = new DataView(byteString.buffer);\n        while(i < tupleTypes.length){\n            const tupleType = tupleTypes[i];\n            if (tupleType.isDynamic()) {\n                if (byteString.slice(iterIndex, byteString.length).length < LENGTH_ENCODE_BYTE_SIZE) {\n                    throw new Error(\"dynamic type in tuple is too short to be decoded\");\n                }\n                // Since LENGTH_ENCODE_BYTE_SIZE is 2 and indices are at most 2 bytes,\n                // we can use getUint16 using the iterIndex offset.\n                const dynamicIndex = view.getUint16(iterIndex);\n                if (dynamicSegments.length > 0) {\n                    dynamicSegments[dynamicSegments.length - 1].right = dynamicIndex;\n                    // Check that right side of segment is greater than the left side\n                    if (dynamicIndex < dynamicSegments[dynamicSegments.length - 1].left) {\n                        throw new Error(\"dynamic index segment miscalculation: left is greater than right index\");\n                    }\n                }\n                // Since we do not know where the current dynamic element ends, put a placeholder and update later\n                const seg = {\n                    left: dynamicIndex,\n                    right: -1\n                };\n                dynamicSegments.push(seg);\n                valuePartition.push(null);\n                iterIndex += LENGTH_ENCODE_BYTE_SIZE;\n            } else {\n                // eslint-disable-next-line no-lonely-if\n                if (tupleType.constructor === ABIBoolType) {\n                    const before = findBoolLR(this.childTypes, i, -1);\n                    let after = findBoolLR(this.childTypes, i, 1);\n                    if (before % 8 !== 0) {\n                        throw new Error(\"expected before bool number mod 8 === 0\");\n                    }\n                    after = Math.min(7, after);\n                    // Parse bool in a byte to multiple byte strings\n                    for(let boolIndex = 0; boolIndex <= after; boolIndex++){\n                        const boolMask = 0x80 >> boolIndex;\n                        if ((byteString[iterIndex] & boolMask) > 0) {\n                            valuePartition.push(new Uint8Array([\n                                128\n                            ]));\n                        } else {\n                            valuePartition.push(new Uint8Array([\n                                0\n                            ]));\n                        }\n                    }\n                    i += after;\n                    iterIndex += 1;\n                } else {\n                    const currLen = tupleType.byteLen();\n                    valuePartition.push(byteString.slice(iterIndex, iterIndex + currLen));\n                    iterIndex += currLen;\n                }\n            }\n            if (i !== tupleTypes.length - 1 && iterIndex >= byteString.length) {\n                throw new Error(\"input byte not enough to decode\");\n            }\n            i += 1;\n        }\n        if (dynamicSegments.length > 0) {\n            dynamicSegments[dynamicSegments.length - 1].right = byteString.length;\n            iterIndex = byteString.length;\n        }\n        if (iterIndex < byteString.length) {\n            throw new Error(\"input byte not fully consumed\");\n        }\n        // Check segment indices are valid\n        // If the dynamic segment are not consecutive and well-ordered, we return error\n        for(let j = 0; j < dynamicSegments.length; j++){\n            const seg = dynamicSegments[j];\n            if (seg.left > seg.right) {\n                throw new Error(\"dynamic segment should display a [l, r] space with l <= r\");\n            }\n            if (j !== dynamicSegments.length - 1 && seg.right !== dynamicSegments[j + 1].left) {\n                throw new Error(\"dynamic segment should be consecutive\");\n            }\n        }\n        // Check dynamic element partitions\n        let segIndex = 0;\n        for(let j = 0; j < tupleTypes.length; j++){\n            if (tupleTypes[j].isDynamic()) {\n                valuePartition[j] = byteString.slice(dynamicSegments[segIndex].left, dynamicSegments[segIndex].right);\n                segIndex += 1;\n            }\n        }\n        // Decode each tuple element\n        const returnValues = [];\n        for(let j = 0; j < tupleTypes.length; j++){\n            const valueTi = tupleTypes[j].decode(valuePartition[j]);\n            returnValues.push(valueTi);\n        }\n        return returnValues;\n    }\n    static parseTupleContent(str) {\n        if (str.length === 0) {\n            return [];\n        }\n        if (str.endsWith(\",\") || str.startsWith(\",\")) {\n            throw new Error(\"tuple string should not start with comma\");\n        }\n        if (str.includes(\",,\")) {\n            throw new Error(\"tuple string should not have consecutive commas\");\n        }\n        const tupleStrings = [];\n        let depth = 0;\n        let word = \"\";\n        for (const char of str){\n            word += char;\n            if (char === \"(\") {\n                depth += 1;\n            } else if (char === \")\") {\n                depth -= 1;\n            } else if (char === \",\") {\n                // If the comma is at depth 0, then append the word as token.\n                if (depth === 0) {\n                    tupleStrings.push(word.slice(0, word.length - 1));\n                    word = \"\";\n                }\n            }\n        }\n        if (word.length !== 0) {\n            tupleStrings.push(word);\n        }\n        if (depth !== 0) {\n            throw new Error(\"tuple string has mismatched parentheses\");\n        }\n        return tupleStrings;\n    }\n}\n// compressMultipleBool compresses consecutive bool values into a byte in ABI tuple / array value.\nfunction compressMultipleBool(valueList) {\n    let res = 0;\n    if (valueList.length > 8) {\n        throw new Error(\"value list passed in should be no greater than length 8\");\n    }\n    for(let i = 0; i < valueList.length; i++){\n        const boolVal = valueList[i];\n        if (typeof boolVal !== \"boolean\") {\n            throw new Error(\"non-boolean values cannot be compressed into a byte\");\n        }\n        if (boolVal) {\n            res |= 1 << 7 - i;\n        }\n    }\n    return res;\n}\n// Assume that the current index on the list of type is an ABI bool type.\n// It returns the difference between the current index and the index of the furthest consecutive Bool type.\nfunction findBoolLR(typeList, index, delta) {\n    let until = 0;\n    while(true){\n        const curr = index + delta * until;\n        if (typeList[curr].constructor === ABIBoolType) {\n            if (curr !== typeList.length - 1 && delta === 1) {\n                until += 1;\n            } else if (curr > 0 && delta === -1) {\n                until += 1;\n            } else {\n                break;\n            }\n        } else {\n            until -= 1;\n            break;\n        }\n    }\n    return until;\n} //# sourceMappingURL=abi_type.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/abi/abi_type.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/abi/contract.js":
/*!*******************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/abi/contract.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ABIContract: () => (/* binding */ ABIContract)\n/* harmony export */ });\n/* harmony import */ var _method_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./method.js */ \"(ssr)/./node_modules/algosdk/dist/esm/abi/method.js\");\n\nclass ABIContract {\n    constructor(params){\n        if (typeof params.name !== \"string\" || !Array.isArray(params.methods) || params.networks && typeof params.networks !== \"object\") {\n            throw new Error(\"Invalid ABIContract parameters\");\n        }\n        this.name = params.name;\n        this.description = params.desc;\n        this.networks = params.networks ? {\n            ...params.networks\n        } : {};\n        this.methods = params.methods.map((method)=>new _method_js__WEBPACK_IMPORTED_MODULE_0__.ABIMethod(method));\n        this.events = params.events;\n    }\n    toJSON() {\n        return {\n            name: this.name,\n            desc: this.description,\n            networks: this.networks,\n            methods: this.methods.map((method)=>method.toJSON()),\n            events: this.events\n        };\n    }\n    getMethodByName(name) {\n        return (0,_method_js__WEBPACK_IMPORTED_MODULE_0__.getMethodByName)(this.methods, name);\n    }\n} //# sourceMappingURL=contract.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9hYmkvY29udHJhY3QuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBeUQ7QUFDbEQsTUFBTUU7SUFDVEMsWUFBWUMsTUFBTSxDQUFFO1FBQ2hCLElBQUksT0FBT0EsT0FBT0MsSUFBSSxLQUFLLFlBQ3ZCLENBQUNDLE1BQU1DLE9BQU8sQ0FBQ0gsT0FBT0ksT0FBTyxLQUM1QkosT0FBT0ssUUFBUSxJQUFJLE9BQU9MLE9BQU9LLFFBQVEsS0FBSyxVQUFXO1lBQzFELE1BQU0sSUFBSUMsTUFBTTtRQUNwQjtRQUNBLElBQUksQ0FBQ0wsSUFBSSxHQUFHRCxPQUFPQyxJQUFJO1FBQ3ZCLElBQUksQ0FBQ00sV0FBVyxHQUFHUCxPQUFPUSxJQUFJO1FBQzlCLElBQUksQ0FBQ0gsUUFBUSxHQUFHTCxPQUFPSyxRQUFRLEdBQUc7WUFBRSxHQUFHTCxPQUFPSyxRQUFRO1FBQUMsSUFBSSxDQUFDO1FBQzVELElBQUksQ0FBQ0QsT0FBTyxHQUFHSixPQUFPSSxPQUFPLENBQUNLLEdBQUcsQ0FBQyxDQUFDQyxTQUFXLElBQUlkLGlEQUFTQSxDQUFDYztRQUM1RCxJQUFJLENBQUNDLE1BQU0sR0FBR1gsT0FBT1csTUFBTTtJQUMvQjtJQUNBQyxTQUFTO1FBQ0wsT0FBTztZQUNIWCxNQUFNLElBQUksQ0FBQ0EsSUFBSTtZQUNmTyxNQUFNLElBQUksQ0FBQ0QsV0FBVztZQUN0QkYsVUFBVSxJQUFJLENBQUNBLFFBQVE7WUFDdkJELFNBQVMsSUFBSSxDQUFDQSxPQUFPLENBQUNLLEdBQUcsQ0FBQyxDQUFDQyxTQUFXQSxPQUFPRSxNQUFNO1lBQ25ERCxRQUFRLElBQUksQ0FBQ0EsTUFBTTtRQUN2QjtJQUNKO0lBQ0FkLGdCQUFnQkksSUFBSSxFQUFFO1FBQ2xCLE9BQU9KLDJEQUFlQSxDQUFDLElBQUksQ0FBQ08sT0FBTyxFQUFFSDtJQUN6QztBQUNKLEVBQ0Esb0NBQW9DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWxnb3JhbmQtY3Jvd2RmdW5kaW5nLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vYWJpL2NvbnRyYWN0LmpzPzBkMjAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQUJJTWV0aG9kLCBnZXRNZXRob2RCeU5hbWUgfSBmcm9tICcuL21ldGhvZC5qcyc7XG5leHBvcnQgY2xhc3MgQUJJQ29udHJhY3Qge1xuICAgIGNvbnN0cnVjdG9yKHBhcmFtcykge1xuICAgICAgICBpZiAodHlwZW9mIHBhcmFtcy5uYW1lICE9PSAnc3RyaW5nJyB8fFxuICAgICAgICAgICAgIUFycmF5LmlzQXJyYXkocGFyYW1zLm1ldGhvZHMpIHx8XG4gICAgICAgICAgICAocGFyYW1zLm5ldHdvcmtzICYmIHR5cGVvZiBwYXJhbXMubmV0d29ya3MgIT09ICdvYmplY3QnKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIEFCSUNvbnRyYWN0IHBhcmFtZXRlcnMnKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm5hbWUgPSBwYXJhbXMubmFtZTtcbiAgICAgICAgdGhpcy5kZXNjcmlwdGlvbiA9IHBhcmFtcy5kZXNjO1xuICAgICAgICB0aGlzLm5ldHdvcmtzID0gcGFyYW1zLm5ldHdvcmtzID8geyAuLi5wYXJhbXMubmV0d29ya3MgfSA6IHt9O1xuICAgICAgICB0aGlzLm1ldGhvZHMgPSBwYXJhbXMubWV0aG9kcy5tYXAoKG1ldGhvZCkgPT4gbmV3IEFCSU1ldGhvZChtZXRob2QpKTtcbiAgICAgICAgdGhpcy5ldmVudHMgPSBwYXJhbXMuZXZlbnRzO1xuICAgIH1cbiAgICB0b0pTT04oKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBuYW1lOiB0aGlzLm5hbWUsXG4gICAgICAgICAgICBkZXNjOiB0aGlzLmRlc2NyaXB0aW9uLFxuICAgICAgICAgICAgbmV0d29ya3M6IHRoaXMubmV0d29ya3MsXG4gICAgICAgICAgICBtZXRob2RzOiB0aGlzLm1ldGhvZHMubWFwKChtZXRob2QpID0+IG1ldGhvZC50b0pTT04oKSksXG4gICAgICAgICAgICBldmVudHM6IHRoaXMuZXZlbnRzLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBnZXRNZXRob2RCeU5hbWUobmFtZSkge1xuICAgICAgICByZXR1cm4gZ2V0TWV0aG9kQnlOYW1lKHRoaXMubWV0aG9kcywgbmFtZSk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29udHJhY3QuanMubWFwIl0sIm5hbWVzIjpbIkFCSU1ldGhvZCIsImdldE1ldGhvZEJ5TmFtZSIsIkFCSUNvbnRyYWN0IiwiY29uc3RydWN0b3IiLCJwYXJhbXMiLCJuYW1lIiwiQXJyYXkiLCJpc0FycmF5IiwibWV0aG9kcyIsIm5ldHdvcmtzIiwiRXJyb3IiLCJkZXNjcmlwdGlvbiIsImRlc2MiLCJtYXAiLCJtZXRob2QiLCJldmVudHMiLCJ0b0pTT04iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/abi/contract.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/abi/index.js":
/*!****************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/abi/index.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ABIAddressType: () => (/* reexport safe */ _abi_type_js__WEBPACK_IMPORTED_MODULE_0__.ABIAddressType),\n/* harmony export */   ABIArrayDynamicType: () => (/* reexport safe */ _abi_type_js__WEBPACK_IMPORTED_MODULE_0__.ABIArrayDynamicType),\n/* harmony export */   ABIArrayStaticType: () => (/* reexport safe */ _abi_type_js__WEBPACK_IMPORTED_MODULE_0__.ABIArrayStaticType),\n/* harmony export */   ABIBoolType: () => (/* reexport safe */ _abi_type_js__WEBPACK_IMPORTED_MODULE_0__.ABIBoolType),\n/* harmony export */   ABIByteType: () => (/* reexport safe */ _abi_type_js__WEBPACK_IMPORTED_MODULE_0__.ABIByteType),\n/* harmony export */   ABIContract: () => (/* reexport safe */ _contract_js__WEBPACK_IMPORTED_MODULE_1__.ABIContract),\n/* harmony export */   ABIInterface: () => (/* reexport safe */ _interface_js__WEBPACK_IMPORTED_MODULE_2__.ABIInterface),\n/* harmony export */   ABIMethod: () => (/* reexport safe */ _method_js__WEBPACK_IMPORTED_MODULE_3__.ABIMethod),\n/* harmony export */   ABIReferenceType: () => (/* reexport safe */ _reference_js__WEBPACK_IMPORTED_MODULE_5__.ABIReferenceType),\n/* harmony export */   ABIStringType: () => (/* reexport safe */ _abi_type_js__WEBPACK_IMPORTED_MODULE_0__.ABIStringType),\n/* harmony export */   ABITransactionType: () => (/* reexport safe */ _transaction_js__WEBPACK_IMPORTED_MODULE_4__.ABITransactionType),\n/* harmony export */   ABITupleType: () => (/* reexport safe */ _abi_type_js__WEBPACK_IMPORTED_MODULE_0__.ABITupleType),\n/* harmony export */   ABIType: () => (/* reexport safe */ _abi_type_js__WEBPACK_IMPORTED_MODULE_0__.ABIType),\n/* harmony export */   ABIUfixedType: () => (/* reexport safe */ _abi_type_js__WEBPACK_IMPORTED_MODULE_0__.ABIUfixedType),\n/* harmony export */   ABIUintType: () => (/* reexport safe */ _abi_type_js__WEBPACK_IMPORTED_MODULE_0__.ABIUintType),\n/* harmony export */   ADDR_BYTE_SIZE: () => (/* reexport safe */ _abi_type_js__WEBPACK_IMPORTED_MODULE_0__.ADDR_BYTE_SIZE),\n/* harmony export */   LENGTH_ENCODE_BYTE_SIZE: () => (/* reexport safe */ _abi_type_js__WEBPACK_IMPORTED_MODULE_0__.LENGTH_ENCODE_BYTE_SIZE),\n/* harmony export */   MAX_LEN: () => (/* reexport safe */ _abi_type_js__WEBPACK_IMPORTED_MODULE_0__.MAX_LEN),\n/* harmony export */   SINGLE_BOOL_SIZE: () => (/* reexport safe */ _abi_type_js__WEBPACK_IMPORTED_MODULE_0__.SINGLE_BOOL_SIZE),\n/* harmony export */   SINGLE_BYTE_SIZE: () => (/* reexport safe */ _abi_type_js__WEBPACK_IMPORTED_MODULE_0__.SINGLE_BYTE_SIZE),\n/* harmony export */   abiCheckTransactionType: () => (/* reexport safe */ _transaction_js__WEBPACK_IMPORTED_MODULE_4__.abiCheckTransactionType),\n/* harmony export */   abiTypeIsReference: () => (/* reexport safe */ _reference_js__WEBPACK_IMPORTED_MODULE_5__.abiTypeIsReference),\n/* harmony export */   abiTypeIsTransaction: () => (/* reexport safe */ _transaction_js__WEBPACK_IMPORTED_MODULE_4__.abiTypeIsTransaction),\n/* harmony export */   getMethodByName: () => (/* reexport safe */ _method_js__WEBPACK_IMPORTED_MODULE_3__.getMethodByName)\n/* harmony export */ });\n/* harmony import */ var _abi_type_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./abi_type.js */ \"(ssr)/./node_modules/algosdk/dist/esm/abi/abi_type.js\");\n/* harmony import */ var _contract_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./contract.js */ \"(ssr)/./node_modules/algosdk/dist/esm/abi/contract.js\");\n/* harmony import */ var _interface_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./interface.js */ \"(ssr)/./node_modules/algosdk/dist/esm/abi/interface.js\");\n/* harmony import */ var _method_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./method.js */ \"(ssr)/./node_modules/algosdk/dist/esm/abi/method.js\");\n/* harmony import */ var _transaction_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./transaction.js */ \"(ssr)/./node_modules/algosdk/dist/esm/abi/transaction.js\");\n/* harmony import */ var _reference_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./reference.js */ \"(ssr)/./node_modules/algosdk/dist/esm/abi/reference.js\");\n\n\n\n\n\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9hYmkvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQThCO0FBQ0E7QUFDQztBQUNIO0FBQ0s7QUFDRixDQUMvQixpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hbGdvcmFuZC1jcm93ZGZ1bmRpbmctZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9hYmkvaW5kZXguanM/NzRiMyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tICcuL2FiaV90eXBlLmpzJztcbmV4cG9ydCAqIGZyb20gJy4vY29udHJhY3QuanMnO1xuZXhwb3J0ICogZnJvbSAnLi9pbnRlcmZhY2UuanMnO1xuZXhwb3J0ICogZnJvbSAnLi9tZXRob2QuanMnO1xuZXhwb3J0ICogZnJvbSAnLi90cmFuc2FjdGlvbi5qcyc7XG5leHBvcnQgKiBmcm9tICcuL3JlZmVyZW5jZS5qcyc7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/abi/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/abi/interface.js":
/*!********************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/abi/interface.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ABIInterface: () => (/* binding */ ABIInterface)\n/* harmony export */ });\n/* harmony import */ var _method_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./method.js */ \"(ssr)/./node_modules/algosdk/dist/esm/abi/method.js\");\n\nclass ABIInterface {\n    constructor(params){\n        if (typeof params.name !== \"string\" || !Array.isArray(params.methods)) {\n            throw new Error(\"Invalid ABIInterface parameters\");\n        }\n        this.name = params.name;\n        this.description = params.desc;\n        this.methods = params.methods.map((method)=>new _method_js__WEBPACK_IMPORTED_MODULE_0__.ABIMethod(method));\n    }\n    toJSON() {\n        return {\n            name: this.name,\n            desc: this.description,\n            methods: this.methods.map((method)=>method.toJSON())\n        };\n    }\n    getMethodByName(name) {\n        return (0,_method_js__WEBPACK_IMPORTED_MODULE_0__.getMethodByName)(this.methods, name);\n    }\n} //# sourceMappingURL=interface.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9hYmkvaW50ZXJmYWNlLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXlEO0FBQ2xELE1BQU1FO0lBQ1RDLFlBQVlDLE1BQU0sQ0FBRTtRQUNoQixJQUFJLE9BQU9BLE9BQU9DLElBQUksS0FBSyxZQUFZLENBQUNDLE1BQU1DLE9BQU8sQ0FBQ0gsT0FBT0ksT0FBTyxHQUFHO1lBQ25FLE1BQU0sSUFBSUMsTUFBTTtRQUNwQjtRQUNBLElBQUksQ0FBQ0osSUFBSSxHQUFHRCxPQUFPQyxJQUFJO1FBQ3ZCLElBQUksQ0FBQ0ssV0FBVyxHQUFHTixPQUFPTyxJQUFJO1FBQzlCLElBQUksQ0FBQ0gsT0FBTyxHQUFHSixPQUFPSSxPQUFPLENBQUNJLEdBQUcsQ0FBQyxDQUFDQyxTQUFXLElBQUliLGlEQUFTQSxDQUFDYTtJQUNoRTtJQUNBQyxTQUFTO1FBQ0wsT0FBTztZQUNIVCxNQUFNLElBQUksQ0FBQ0EsSUFBSTtZQUNmTSxNQUFNLElBQUksQ0FBQ0QsV0FBVztZQUN0QkYsU0FBUyxJQUFJLENBQUNBLE9BQU8sQ0FBQ0ksR0FBRyxDQUFDLENBQUNDLFNBQVdBLE9BQU9DLE1BQU07UUFDdkQ7SUFDSjtJQUNBYixnQkFBZ0JJLElBQUksRUFBRTtRQUNsQixPQUFPSiwyREFBZUEsQ0FBQyxJQUFJLENBQUNPLE9BQU8sRUFBRUg7SUFDekM7QUFDSixFQUNBLHFDQUFxQyIsInNvdXJjZXMiOlsid2VicGFjazovL2FsZ29yYW5kLWNyb3dkZnVuZGluZy1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9hbGdvc2RrL2Rpc3QvZXNtL2FiaS9pbnRlcmZhY2UuanM/OGZlMCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBQklNZXRob2QsIGdldE1ldGhvZEJ5TmFtZSB9IGZyb20gJy4vbWV0aG9kLmpzJztcbmV4cG9ydCBjbGFzcyBBQklJbnRlcmZhY2Uge1xuICAgIGNvbnN0cnVjdG9yKHBhcmFtcykge1xuICAgICAgICBpZiAodHlwZW9mIHBhcmFtcy5uYW1lICE9PSAnc3RyaW5nJyB8fCAhQXJyYXkuaXNBcnJheShwYXJhbXMubWV0aG9kcykpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBBQklJbnRlcmZhY2UgcGFyYW1ldGVycycpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubmFtZSA9IHBhcmFtcy5uYW1lO1xuICAgICAgICB0aGlzLmRlc2NyaXB0aW9uID0gcGFyYW1zLmRlc2M7XG4gICAgICAgIHRoaXMubWV0aG9kcyA9IHBhcmFtcy5tZXRob2RzLm1hcCgobWV0aG9kKSA9PiBuZXcgQUJJTWV0aG9kKG1ldGhvZCkpO1xuICAgIH1cbiAgICB0b0pTT04oKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBuYW1lOiB0aGlzLm5hbWUsXG4gICAgICAgICAgICBkZXNjOiB0aGlzLmRlc2NyaXB0aW9uLFxuICAgICAgICAgICAgbWV0aG9kczogdGhpcy5tZXRob2RzLm1hcCgobWV0aG9kKSA9PiBtZXRob2QudG9KU09OKCkpLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBnZXRNZXRob2RCeU5hbWUobmFtZSkge1xuICAgICAgICByZXR1cm4gZ2V0TWV0aG9kQnlOYW1lKHRoaXMubWV0aG9kcywgbmFtZSk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW50ZXJmYWNlLmpzLm1hcCJdLCJuYW1lcyI6WyJBQklNZXRob2QiLCJnZXRNZXRob2RCeU5hbWUiLCJBQklJbnRlcmZhY2UiLCJjb25zdHJ1Y3RvciIsInBhcmFtcyIsIm5hbWUiLCJBcnJheSIsImlzQXJyYXkiLCJtZXRob2RzIiwiRXJyb3IiLCJkZXNjcmlwdGlvbiIsImRlc2MiLCJtYXAiLCJtZXRob2QiLCJ0b0pTT04iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/abi/interface.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/abi/method.js":
/*!*****************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/abi/method.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ABIMethod: () => (/* binding */ ABIMethod),\n/* harmony export */   getMethodByName: () => (/* binding */ getMethodByName)\n/* harmony export */ });\n/* harmony import */ var _nacl_naclWrappers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../nacl/naclWrappers.js */ \"(ssr)/./node_modules/algosdk/dist/esm/nacl/naclWrappers.js\");\n/* harmony import */ var _abi_type_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./abi_type.js */ \"(ssr)/./node_modules/algosdk/dist/esm/abi/abi_type.js\");\n/* harmony import */ var _transaction_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./transaction.js */ \"(ssr)/./node_modules/algosdk/dist/esm/abi/transaction.js\");\n/* harmony import */ var _reference_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./reference.js */ \"(ssr)/./node_modules/algosdk/dist/esm/abi/reference.js\");\n\n\n\n\nfunction parseMethodSignature(signature) {\n    const argsStart = signature.indexOf(\"(\");\n    if (argsStart === -1) {\n        throw new Error(`Invalid method signature: ${signature}`);\n    }\n    let argsEnd = -1;\n    let depth = 0;\n    for(let i = argsStart; i < signature.length; i++){\n        const char = signature[i];\n        if (char === \"(\") {\n            depth += 1;\n        } else if (char === \")\") {\n            if (depth === 0) {\n                break;\n            }\n            depth -= 1;\n            if (depth === 0) {\n                argsEnd = i;\n                break;\n            }\n        }\n    }\n    if (argsEnd === -1) {\n        throw new Error(`Invalid method signature: ${signature}`);\n    }\n    return {\n        name: signature.slice(0, argsStart),\n        args: _abi_type_js__WEBPACK_IMPORTED_MODULE_1__.ABITupleType.parseTupleContent(signature.slice(argsStart + 1, argsEnd)),\n        returns: signature.slice(argsEnd + 1)\n    };\n}\nclass ABIMethod {\n    constructor(params){\n        if (typeof params.name !== \"string\" || typeof params.returns !== \"object\" || !Array.isArray(params.args)) {\n            throw new Error(\"Invalid ABIMethod parameters\");\n        }\n        this.name = params.name;\n        this.description = params.desc;\n        this.args = params.args.map(({ type, name, desc })=>{\n            if ((0,_transaction_js__WEBPACK_IMPORTED_MODULE_2__.abiTypeIsTransaction)(type) || (0,_reference_js__WEBPACK_IMPORTED_MODULE_3__.abiTypeIsReference)(type)) {\n                return {\n                    type,\n                    name,\n                    description: desc\n                };\n            }\n            return {\n                type: _abi_type_js__WEBPACK_IMPORTED_MODULE_1__.ABIType.from(type),\n                name,\n                description: desc\n            };\n        });\n        this.returns = {\n            type: params.returns.type === \"void\" ? params.returns.type : _abi_type_js__WEBPACK_IMPORTED_MODULE_1__.ABIType.from(params.returns.type),\n            description: params.returns.desc\n        };\n        this.events = params.events;\n        this.readonly = params.readonly;\n    }\n    getSignature() {\n        const args = this.args.map((arg)=>arg.type.toString()).join(\",\");\n        const returns = this.returns.type.toString();\n        return `${this.name}(${args})${returns}`;\n    }\n    getSelector() {\n        const hash = (0,_nacl_naclWrappers_js__WEBPACK_IMPORTED_MODULE_0__.genericHash)(this.getSignature());\n        return new Uint8Array(hash.slice(0, 4));\n    }\n    txnCount() {\n        let count = 1;\n        for (const arg of this.args){\n            if (typeof arg.type === \"string\" && (0,_transaction_js__WEBPACK_IMPORTED_MODULE_2__.abiTypeIsTransaction)(arg.type)) {\n                count += 1;\n            }\n        }\n        return count;\n    }\n    toJSON() {\n        return {\n            name: this.name,\n            desc: this.description,\n            args: this.args.map(({ type, name, description })=>({\n                    type: type.toString(),\n                    name,\n                    desc: description\n                })),\n            returns: {\n                type: this.returns.type.toString(),\n                desc: this.returns.description\n            },\n            events: this.events,\n            readonly: this.readonly\n        };\n    }\n    static fromSignature(signature) {\n        const { name, args, returns } = parseMethodSignature(signature);\n        return new ABIMethod({\n            name,\n            args: args.map((arg)=>({\n                    type: arg\n                })),\n            returns: {\n                type: returns\n            }\n        });\n    }\n}\nfunction getMethodByName(methods, name) {\n    if (methods === null || !Array.isArray(methods) || !methods.every((item)=>item instanceof ABIMethod)) throw new Error(\"Methods list provided is null or not the correct type\");\n    const filteredMethods = methods.filter((m)=>m.name === name);\n    if (filteredMethods.length > 1) throw new Error(`found ${filteredMethods.length} methods with the same name ${filteredMethods.map((m)=>m.getSignature()).join(\",\")}`);\n    if (filteredMethods.length === 0) throw new Error(`found 0 methods with the name ${name}`);\n    return filteredMethods[0];\n} //# sourceMappingURL=method.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/abi/method.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/abi/reference.js":
/*!********************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/abi/reference.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ABIReferenceType: () => (/* binding */ ABIReferenceType),\n/* harmony export */   abiTypeIsReference: () => (/* binding */ abiTypeIsReference)\n/* harmony export */ });\nvar ABIReferenceType;\n(function(ABIReferenceType) {\n    /**\n     * Account reference type\n     */ ABIReferenceType[\"account\"] = \"account\";\n    /**\n     * Application reference type\n     */ ABIReferenceType[\"application\"] = \"application\";\n    /**\n     * Asset reference type\n     */ ABIReferenceType[\"asset\"] = \"asset\";\n})(ABIReferenceType || (ABIReferenceType = {}));\nfunction abiTypeIsReference(type) {\n    return type === ABIReferenceType.account || type === ABIReferenceType.application || type === ABIReferenceType.asset;\n} //# sourceMappingURL=reference.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9hYmkvcmVmZXJlbmNlLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQU8sSUFBSUEsaUJBQWlCO0FBQzNCLFVBQVVBLGdCQUFnQjtJQUN2Qjs7S0FFQyxHQUNEQSxnQkFBZ0IsQ0FBQyxVQUFVLEdBQUc7SUFDOUI7O0tBRUMsR0FDREEsZ0JBQWdCLENBQUMsY0FBYyxHQUFHO0lBQ2xDOztLQUVDLEdBQ0RBLGdCQUFnQixDQUFDLFFBQVEsR0FBRztBQUNoQyxHQUFHQSxvQkFBcUJBLENBQUFBLG1CQUFtQixDQUFDO0FBQ3JDLFNBQVNDLG1CQUFtQkMsSUFBSTtJQUNuQyxPQUFRQSxTQUFTRixpQkFBaUJHLE9BQU8sSUFDckNELFNBQVNGLGlCQUFpQkksV0FBVyxJQUNyQ0YsU0FBU0YsaUJBQWlCSyxLQUFLO0FBQ3ZDLEVBQ0EscUNBQXFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWxnb3JhbmQtY3Jvd2RmdW5kaW5nLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vYWJpL3JlZmVyZW5jZS5qcz80MDQ2Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB2YXIgQUJJUmVmZXJlbmNlVHlwZTtcbihmdW5jdGlvbiAoQUJJUmVmZXJlbmNlVHlwZSkge1xuICAgIC8qKlxuICAgICAqIEFjY291bnQgcmVmZXJlbmNlIHR5cGVcbiAgICAgKi9cbiAgICBBQklSZWZlcmVuY2VUeXBlW1wiYWNjb3VudFwiXSA9IFwiYWNjb3VudFwiO1xuICAgIC8qKlxuICAgICAqIEFwcGxpY2F0aW9uIHJlZmVyZW5jZSB0eXBlXG4gICAgICovXG4gICAgQUJJUmVmZXJlbmNlVHlwZVtcImFwcGxpY2F0aW9uXCJdID0gXCJhcHBsaWNhdGlvblwiO1xuICAgIC8qKlxuICAgICAqIEFzc2V0IHJlZmVyZW5jZSB0eXBlXG4gICAgICovXG4gICAgQUJJUmVmZXJlbmNlVHlwZVtcImFzc2V0XCJdID0gXCJhc3NldFwiO1xufSkoQUJJUmVmZXJlbmNlVHlwZSB8fCAoQUJJUmVmZXJlbmNlVHlwZSA9IHt9KSk7XG5leHBvcnQgZnVuY3Rpb24gYWJpVHlwZUlzUmVmZXJlbmNlKHR5cGUpIHtcbiAgICByZXR1cm4gKHR5cGUgPT09IEFCSVJlZmVyZW5jZVR5cGUuYWNjb3VudCB8fFxuICAgICAgICB0eXBlID09PSBBQklSZWZlcmVuY2VUeXBlLmFwcGxpY2F0aW9uIHx8XG4gICAgICAgIHR5cGUgPT09IEFCSVJlZmVyZW5jZVR5cGUuYXNzZXQpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVmZXJlbmNlLmpzLm1hcCJdLCJuYW1lcyI6WyJBQklSZWZlcmVuY2VUeXBlIiwiYWJpVHlwZUlzUmVmZXJlbmNlIiwidHlwZSIsImFjY291bnQiLCJhcHBsaWNhdGlvbiIsImFzc2V0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/abi/reference.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/abi/transaction.js":
/*!**********************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/abi/transaction.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ABITransactionType: () => (/* binding */ ABITransactionType),\n/* harmony export */   abiCheckTransactionType: () => (/* binding */ abiCheckTransactionType),\n/* harmony export */   abiTypeIsTransaction: () => (/* binding */ abiTypeIsTransaction)\n/* harmony export */ });\nvar ABITransactionType;\n(function(ABITransactionType) {\n    /**\n     * Any transaction type\n     */ ABITransactionType[\"any\"] = \"txn\";\n    /**\n     * Payment transaction type\n     */ ABITransactionType[\"pay\"] = \"pay\";\n    /**\n     * Key registration transaction type\n     */ ABITransactionType[\"keyreg\"] = \"keyreg\";\n    /**\n     * Asset configuration transaction type\n     */ ABITransactionType[\"acfg\"] = \"acfg\";\n    /**\n     * Asset transfer transaction type\n     */ ABITransactionType[\"axfer\"] = \"axfer\";\n    /**\n     * Asset freeze transaction type\n     */ ABITransactionType[\"afrz\"] = \"afrz\";\n    /**\n     * Application transaction type\n     */ ABITransactionType[\"appl\"] = \"appl\";\n})(ABITransactionType || (ABITransactionType = {}));\nfunction abiTypeIsTransaction(type) {\n    return type === ABITransactionType.any || type === ABITransactionType.pay || type === ABITransactionType.keyreg || type === ABITransactionType.acfg || type === ABITransactionType.axfer || type === ABITransactionType.afrz || type === ABITransactionType.appl;\n}\nfunction abiCheckTransactionType(type, txn) {\n    if (type === ABITransactionType.any) {\n        return true;\n    }\n    return txn.type ? txn.type.toString() === type.toString() : false;\n} //# sourceMappingURL=transaction.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9hYmkvdHJhbnNhY3Rpb24uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQU8sSUFBSUEsbUJBQW1CO0FBQzdCLFVBQVVBLGtCQUFrQjtJQUN6Qjs7S0FFQyxHQUNEQSxrQkFBa0IsQ0FBQyxNQUFNLEdBQUc7SUFDNUI7O0tBRUMsR0FDREEsa0JBQWtCLENBQUMsTUFBTSxHQUFHO0lBQzVCOztLQUVDLEdBQ0RBLGtCQUFrQixDQUFDLFNBQVMsR0FBRztJQUMvQjs7S0FFQyxHQUNEQSxrQkFBa0IsQ0FBQyxPQUFPLEdBQUc7SUFDN0I7O0tBRUMsR0FDREEsa0JBQWtCLENBQUMsUUFBUSxHQUFHO0lBQzlCOztLQUVDLEdBQ0RBLGtCQUFrQixDQUFDLE9BQU8sR0FBRztJQUM3Qjs7S0FFQyxHQUNEQSxrQkFBa0IsQ0FBQyxPQUFPLEdBQUc7QUFDakMsR0FBR0Esc0JBQXVCQSxDQUFBQSxxQkFBcUIsQ0FBQztBQUN6QyxTQUFTQyxxQkFBcUJDLElBQUk7SUFDckMsT0FBUUEsU0FBU0YsbUJBQW1CRyxHQUFHLElBQ25DRCxTQUFTRixtQkFBbUJJLEdBQUcsSUFDL0JGLFNBQVNGLG1CQUFtQkssTUFBTSxJQUNsQ0gsU0FBU0YsbUJBQW1CTSxJQUFJLElBQ2hDSixTQUFTRixtQkFBbUJPLEtBQUssSUFDakNMLFNBQVNGLG1CQUFtQlEsSUFBSSxJQUNoQ04sU0FBU0YsbUJBQW1CUyxJQUFJO0FBQ3hDO0FBQ08sU0FBU0Msd0JBQXdCUixJQUFJLEVBQUVTLEdBQUc7SUFDN0MsSUFBSVQsU0FBU0YsbUJBQW1CRyxHQUFHLEVBQUU7UUFDakMsT0FBTztJQUNYO0lBQ0EsT0FBT1EsSUFBSVQsSUFBSSxHQUFHUyxJQUFJVCxJQUFJLENBQUNVLFFBQVEsT0FBT1YsS0FBS1UsUUFBUSxLQUFLO0FBQ2hFLEVBQ0EsdUNBQXVDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWxnb3JhbmQtY3Jvd2RmdW5kaW5nLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vYWJpL3RyYW5zYWN0aW9uLmpzPzUwYTciXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHZhciBBQklUcmFuc2FjdGlvblR5cGU7XG4oZnVuY3Rpb24gKEFCSVRyYW5zYWN0aW9uVHlwZSkge1xuICAgIC8qKlxuICAgICAqIEFueSB0cmFuc2FjdGlvbiB0eXBlXG4gICAgICovXG4gICAgQUJJVHJhbnNhY3Rpb25UeXBlW1wiYW55XCJdID0gXCJ0eG5cIjtcbiAgICAvKipcbiAgICAgKiBQYXltZW50IHRyYW5zYWN0aW9uIHR5cGVcbiAgICAgKi9cbiAgICBBQklUcmFuc2FjdGlvblR5cGVbXCJwYXlcIl0gPSBcInBheVwiO1xuICAgIC8qKlxuICAgICAqIEtleSByZWdpc3RyYXRpb24gdHJhbnNhY3Rpb24gdHlwZVxuICAgICAqL1xuICAgIEFCSVRyYW5zYWN0aW9uVHlwZVtcImtleXJlZ1wiXSA9IFwia2V5cmVnXCI7XG4gICAgLyoqXG4gICAgICogQXNzZXQgY29uZmlndXJhdGlvbiB0cmFuc2FjdGlvbiB0eXBlXG4gICAgICovXG4gICAgQUJJVHJhbnNhY3Rpb25UeXBlW1wiYWNmZ1wiXSA9IFwiYWNmZ1wiO1xuICAgIC8qKlxuICAgICAqIEFzc2V0IHRyYW5zZmVyIHRyYW5zYWN0aW9uIHR5cGVcbiAgICAgKi9cbiAgICBBQklUcmFuc2FjdGlvblR5cGVbXCJheGZlclwiXSA9IFwiYXhmZXJcIjtcbiAgICAvKipcbiAgICAgKiBBc3NldCBmcmVlemUgdHJhbnNhY3Rpb24gdHlwZVxuICAgICAqL1xuICAgIEFCSVRyYW5zYWN0aW9uVHlwZVtcImFmcnpcIl0gPSBcImFmcnpcIjtcbiAgICAvKipcbiAgICAgKiBBcHBsaWNhdGlvbiB0cmFuc2FjdGlvbiB0eXBlXG4gICAgICovXG4gICAgQUJJVHJhbnNhY3Rpb25UeXBlW1wiYXBwbFwiXSA9IFwiYXBwbFwiO1xufSkoQUJJVHJhbnNhY3Rpb25UeXBlIHx8IChBQklUcmFuc2FjdGlvblR5cGUgPSB7fSkpO1xuZXhwb3J0IGZ1bmN0aW9uIGFiaVR5cGVJc1RyYW5zYWN0aW9uKHR5cGUpIHtcbiAgICByZXR1cm4gKHR5cGUgPT09IEFCSVRyYW5zYWN0aW9uVHlwZS5hbnkgfHxcbiAgICAgICAgdHlwZSA9PT0gQUJJVHJhbnNhY3Rpb25UeXBlLnBheSB8fFxuICAgICAgICB0eXBlID09PSBBQklUcmFuc2FjdGlvblR5cGUua2V5cmVnIHx8XG4gICAgICAgIHR5cGUgPT09IEFCSVRyYW5zYWN0aW9uVHlwZS5hY2ZnIHx8XG4gICAgICAgIHR5cGUgPT09IEFCSVRyYW5zYWN0aW9uVHlwZS5heGZlciB8fFxuICAgICAgICB0eXBlID09PSBBQklUcmFuc2FjdGlvblR5cGUuYWZyeiB8fFxuICAgICAgICB0eXBlID09PSBBQklUcmFuc2FjdGlvblR5cGUuYXBwbCk7XG59XG5leHBvcnQgZnVuY3Rpb24gYWJpQ2hlY2tUcmFuc2FjdGlvblR5cGUodHlwZSwgdHhuKSB7XG4gICAgaWYgKHR5cGUgPT09IEFCSVRyYW5zYWN0aW9uVHlwZS5hbnkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiB0eG4udHlwZSA/IHR4bi50eXBlLnRvU3RyaW5nKCkgPT09IHR5cGUudG9TdHJpbmcoKSA6IGZhbHNlO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHJhbnNhY3Rpb24uanMubWFwIl0sIm5hbWVzIjpbIkFCSVRyYW5zYWN0aW9uVHlwZSIsImFiaVR5cGVJc1RyYW5zYWN0aW9uIiwidHlwZSIsImFueSIsInBheSIsImtleXJlZyIsImFjZmciLCJheGZlciIsImFmcnoiLCJhcHBsIiwiYWJpQ2hlY2tUcmFuc2FjdGlvblR5cGUiLCJ0eG4iLCJ0b1N0cmluZyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/abi/transaction.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/account.js":
/*!**************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/account.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ generateAccount)\n/* harmony export */ });\n/* harmony import */ var _nacl_naclWrappers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./nacl/naclWrappers.js */ \"(ssr)/./node_modules/algosdk/dist/esm/nacl/naclWrappers.js\");\n/* harmony import */ var _encoding_address_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./encoding/address.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/address.js\");\n\n\n/**\n * generateAccount returns a new Algorand address and its corresponding secret key\n */ function generateAccount() {\n    const keys = _nacl_naclWrappers_js__WEBPACK_IMPORTED_MODULE_0__.keyPair();\n    const addr = new _encoding_address_js__WEBPACK_IMPORTED_MODULE_1__.Address(keys.publicKey);\n    return {\n        addr,\n        sk: keys.secretKey\n    };\n} //# sourceMappingURL=account.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9hY2NvdW50LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUErQztBQUNDO0FBQ2hEOztDQUVDLEdBQ2MsU0FBU0U7SUFDcEIsTUFBTUMsT0FBT0gsMERBQVk7SUFDekIsTUFBTUssT0FBTyxJQUFJSix5REFBT0EsQ0FBQ0UsS0FBS0csU0FBUztJQUN2QyxPQUFPO1FBQUVEO1FBQU1FLElBQUlKLEtBQUtLLFNBQVM7SUFBQztBQUN0QyxFQUNBLG1DQUFtQyIsInNvdXJjZXMiOlsid2VicGFjazovL2FsZ29yYW5kLWNyb3dkZnVuZGluZy1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9hbGdvc2RrL2Rpc3QvZXNtL2FjY291bnQuanM/OGI1ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBuYWNsIGZyb20gJy4vbmFjbC9uYWNsV3JhcHBlcnMuanMnO1xuaW1wb3J0IHsgQWRkcmVzcyB9IGZyb20gJy4vZW5jb2RpbmcvYWRkcmVzcy5qcyc7XG4vKipcbiAqIGdlbmVyYXRlQWNjb3VudCByZXR1cm5zIGEgbmV3IEFsZ29yYW5kIGFkZHJlc3MgYW5kIGl0cyBjb3JyZXNwb25kaW5nIHNlY3JldCBrZXlcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2VuZXJhdGVBY2NvdW50KCkge1xuICAgIGNvbnN0IGtleXMgPSBuYWNsLmtleVBhaXIoKTtcbiAgICBjb25zdCBhZGRyID0gbmV3IEFkZHJlc3Moa2V5cy5wdWJsaWNLZXkpO1xuICAgIHJldHVybiB7IGFkZHIsIHNrOiBrZXlzLnNlY3JldEtleSB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YWNjb3VudC5qcy5tYXAiXSwibmFtZXMiOlsibmFjbCIsIkFkZHJlc3MiLCJnZW5lcmF0ZUFjY291bnQiLCJrZXlzIiwia2V5UGFpciIsImFkZHIiLCJwdWJsaWNLZXkiLCJzayIsInNlY3JldEtleSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/account.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/appAccess.js":
/*!****************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/appAccess.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   convertIndicesToResourceReferences: () => (/* binding */ convertIndicesToResourceReferences),\n/* harmony export */   foreignArraysToResourceReferences: () => (/* binding */ foreignArraysToResourceReferences),\n/* harmony export */   resourceReferencesToEncodingData: () => (/* binding */ resourceReferencesToEncodingData)\n/* harmony export */ });\n/* harmony import */ var _encoding_address_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./encoding/address.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/address.js\");\n/* harmony import */ var _utils_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/utils.js */ \"(ssr)/./node_modules/algosdk/dist/esm/utils/utils.js\");\n\n\n/**\n * resourceReferencesToEncodingData translates an array of ResourceReferences into an array of encoding data\n * maps.\n */ function resourceReferencesToEncodingData(appIndex, references) {\n    const accessList = [];\n    function ensure(target) {\n        for(let idx = 0; idx < accessList.length; idx++){\n            const a = accessList[idx];\n            if (a.get(\"d\") === target.address && a.get(\"s\") === target.assetIndex && a.get(\"p\") === target.appIndex) {\n                return idx + 1; // 1-based index\n            }\n        }\n        if (target.address) {\n            accessList.push(new Map([\n                [\n                    \"d\",\n                    target.address\n                ]\n            ]));\n        }\n        if (target.assetIndex) {\n            accessList.push(new Map([\n                [\n                    \"s\",\n                    target.assetIndex\n                ]\n            ]));\n        }\n        if (target.appIndex) {\n            accessList.push(new Map([\n                [\n                    \"p\",\n                    target.appIndex\n                ]\n            ]));\n        }\n        return accessList.length; // length is 1-based position of new element\n    }\n    const zeroAddr = _encoding_address_js__WEBPACK_IMPORTED_MODULE_0__.Address.zeroAddress();\n    for (const rr of references){\n        if (rr.address || rr.assetIndex || rr.appIndex) {\n            ensure(rr);\n            continue;\n        }\n        if (rr.holding) {\n            const h = rr.holding;\n            let addrIdx = 0;\n            if (h.address && !h.address.equals(zeroAddr)) {\n                addrIdx = ensure({\n                    address: h.address\n                });\n            }\n            const assetIdx = ensure({\n                assetIndex: h.assetIndex\n            });\n            accessList.push(new Map([\n                [\n                    \"h\",\n                    new Map([\n                        [\n                            \"d\",\n                            addrIdx\n                        ],\n                        [\n                            \"s\",\n                            assetIdx\n                        ]\n                    ])\n                ]\n            ]));\n            continue;\n        }\n        if (rr.locals) {\n            const l = rr.locals;\n            let addrIdx = 0;\n            if (l.address && !l.address.equals(zeroAddr)) {\n                addrIdx = ensure({\n                    address: l.address\n                });\n            }\n            let appIdx = 0;\n            if (l.appIndex && BigInt(l.appIndex) !== appIndex) {\n                appIdx = ensure({\n                    appIndex: l.appIndex\n                });\n            }\n            accessList.push(new Map([\n                [\n                    \"l\",\n                    new Map([\n                        [\n                            \"d\",\n                            addrIdx\n                        ],\n                        [\n                            \"p\",\n                            appIdx\n                        ]\n                    ])\n                ]\n            ]));\n            continue;\n        }\n        if (rr.box) {\n            const b = rr.box;\n            let appIdx = 0;\n            if (b.appIndex && BigInt(b.appIndex) !== appIndex) {\n                appIdx = ensure({\n                    appIndex: b.appIndex\n                });\n            }\n            accessList.push(new Map([\n                [\n                    \"b\",\n                    new Map([\n                        [\n                            \"i\",\n                            appIdx\n                        ],\n                        [\n                            \"n\",\n                            b.name\n                        ]\n                    ])\n                ]\n            ]));\n        }\n    }\n    return accessList;\n}\nfunction convertIndicesToResourceReferences(accessList) {\n    const references = [];\n    for (const item of accessList){\n        const address = item.get(\"d\");\n        const assetIndex = item.get(\"s\");\n        const appIndex = item.get(\"p\");\n        if (address) {\n            references.push({\n                address\n            });\n            continue;\n        }\n        if (assetIndex) {\n            references.push({\n                assetIndex\n            });\n            continue;\n        }\n        if (appIndex) {\n            references.push({\n                appIndex\n            });\n            continue;\n        }\n        const holding = item.get(\"h\");\n        if (holding) {\n            const hAddressIndex = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureSafeUnsignedInteger)(holding.get(\"d\") ?? 0);\n            const hAssetIndex = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureSafeUnsignedInteger)(holding.get(\"s\"));\n            if (!hAssetIndex) {\n                throw new Error(`Holding missing asset index: ${holding}`);\n            }\n            const hAddress = hAddressIndex === 0 ? _encoding_address_js__WEBPACK_IMPORTED_MODULE_0__.Address.zeroAddress() : references[hAddressIndex - 1].address;\n            const asset = references[hAssetIndex - 1].assetIndex;\n            references.push({\n                holding: {\n                    address: hAddress,\n                    assetIndex: asset\n                }\n            });\n            continue;\n        }\n        const locals = item.get(\"l\");\n        if (locals) {\n            const lAddressIndex = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureSafeUnsignedInteger)(locals.get(\"d\") ?? 0);\n            const lAppIndex = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureSafeUnsignedInteger)(locals.get(\"p\") ?? 0);\n            const lAddress = lAddressIndex === 0 ? _encoding_address_js__WEBPACK_IMPORTED_MODULE_0__.Address.zeroAddress() : references[lAddressIndex - 1].address;\n            const app = lAppIndex === 0 ? BigInt(0) : references[lAppIndex - 1].appIndex;\n            references.push({\n                locals: {\n                    address: lAddress,\n                    appIndex: app\n                }\n            });\n            continue;\n        }\n        const box = item.get(\"b\");\n        if (box) {\n            const bAppIndex = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureSafeUnsignedInteger)(box.get(\"i\") ?? 0);\n            const name = box.get(\"n\");\n            if (!name) {\n                throw new Error(`Box missing name: ${box}`);\n            }\n            const app = bAppIndex === 0 ? BigInt(0) : references[bAppIndex - 1].appIndex;\n            references.push({\n                box: {\n                    appIndex: app,\n                    name\n                }\n            });\n        }\n    }\n    return references;\n}\n/**\n * foreignArraysToResourceReferences makes a single array of ResourceReferences from various foreign resource arrays.\n * Note, runtime representation of ResourceReference uses addresses, app and asset identifiers, not indexes.\n *\n * @param accounts - optional array of accounts\n * @param foreignAssets - optional array of foreign assets\n * @param foreignApps - optional array of foreign apps\n * @param holdings - optional array of holdings\n * @param locals - optional array of locals\n * @param boxes - optional array of boxes\n */ function foreignArraysToResourceReferences({ appIndex, accounts, foreignAssets, foreignApps, holdings, locals, boxes }) {\n    const accessList = [];\n    function ensureAddress(addr) {\n        let addr2;\n        if (typeof addr === \"string\") {\n            if (addr === \"\") {\n                return;\n            }\n            addr2 = _encoding_address_js__WEBPACK_IMPORTED_MODULE_0__.Address.fromString(addr);\n        } else {\n            addr2 = addr;\n        }\n        if (addr2.equals(_encoding_address_js__WEBPACK_IMPORTED_MODULE_0__.Address.zeroAddress())) {\n            return;\n        }\n        let addrFound = false;\n        for (const rr of accessList){\n            if (!rr.address) {\n                continue;\n            }\n            let rrAddress = rr.address;\n            if (typeof rr.address === \"string\") {\n                rrAddress = _encoding_address_js__WEBPACK_IMPORTED_MODULE_0__.Address.fromString(rr.address);\n            }\n            if (rrAddress.equals(addr2)) {\n                addrFound = true;\n                break;\n            }\n        }\n        if (!addrFound) {\n            accessList.push({\n                address: addr\n            });\n        }\n    }\n    function ensureAsset(asset) {\n        let assetFound = false;\n        for (const rr of accessList){\n            if (rr.assetIndex === asset) {\n                assetFound = true;\n                break;\n            }\n        }\n        if (!assetFound) {\n            accessList.push({\n                assetIndex: asset\n            });\n        }\n    }\n    function ensureApp(app) {\n        let appFound = false;\n        for (const rr of accessList){\n            if (rr.appIndex === app) {\n                appFound = true;\n                break;\n            }\n        }\n        if (!appFound) {\n            accessList.push({\n                appIndex: app\n            });\n        }\n    }\n    for (const acct of accounts ?? []){\n        ensureAddress(acct);\n    }\n    for (const asset of foreignAssets ?? []){\n        ensureAsset(asset);\n    }\n    for (const app of foreignApps ?? []){\n        ensureApp(app);\n    }\n    for (const holding of holdings ?? []){\n        if (holding.address) {\n            ensureAddress(holding.address);\n        }\n        ensureAsset(holding.assetIndex);\n        accessList.push({\n            holding\n        });\n    }\n    for (const local of locals ?? []){\n        if (local.address) {\n            ensureAddress(local.address);\n        }\n        if (local.appIndex && BigInt(local.appIndex) !== appIndex) {\n            ensureApp(local.appIndex);\n        }\n        accessList.push({\n            locals: local\n        });\n    }\n    for (const box of boxes ?? []){\n        if (box.appIndex && BigInt(box.appIndex) !== appIndex) {\n            ensureApp(box.appIndex);\n        }\n        accessList.push({\n            box\n        });\n    }\n    return accessList;\n} //# sourceMappingURL=appAccess.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/appAccess.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/boxStorage.js":
/*!*****************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/boxStorage.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   boxReferencesToEncodingData: () => (/* binding */ boxReferencesToEncodingData)\n/* harmony export */ });\nfunction boxReferenceToEncodingData(reference, foreignApps, appIndex) {\n    const referenceId = BigInt(reference.appIndex);\n    const referenceName = reference.name;\n    const isOwnReference = referenceId === BigInt(0) || referenceId === appIndex;\n    // Foreign apps start from index 1; index 0 is its own app ID.\n    const index = foreignApps.indexOf(referenceId) + 1;\n    // Check if the app referenced is itself after checking the foreign apps array.\n    // If index is zero, then the app ID was not found in the foreign apps array\n    // or the foreign apps array was null.\n    if (index === 0 && !isOwnReference) {\n        // Error if the app is trying to reference a foreign app that was not in\n        // its own foreign apps array.\n        throw new Error(`Box ref with appId ${referenceId} not in foreign-apps`);\n    }\n    return new Map([\n        [\n            \"i\",\n            index\n        ],\n        [\n            \"n\",\n            referenceName\n        ]\n    ]);\n}\n/**\n * boxReferencesToEncodingData translates an array of BoxReferences into an array of encoding data\n * maps.\n */ function boxReferencesToEncodingData(references, foreignApps, appIndex) {\n    const appIndexBigInt = BigInt(appIndex);\n    const foreignAppsBigInt = foreignApps.map(BigInt);\n    return references.map((bx)=>boxReferenceToEncodingData(bx, foreignAppsBigInt, appIndexBigInt));\n} //# sourceMappingURL=boxStorage.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9ib3hTdG9yYWdlLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxTQUFTQSwyQkFBMkJDLFNBQVMsRUFBRUMsV0FBVyxFQUFFQyxRQUFRO0lBQ2hFLE1BQU1DLGNBQWNDLE9BQU9KLFVBQVVFLFFBQVE7SUFDN0MsTUFBTUcsZ0JBQWdCTCxVQUFVTSxJQUFJO0lBQ3BDLE1BQU1DLGlCQUFpQkosZ0JBQWdCQyxPQUFPLE1BQU1ELGdCQUFnQkQ7SUFDcEUsOERBQThEO0lBQzlELE1BQU1NLFFBQVFQLFlBQVlRLE9BQU8sQ0FBQ04sZUFBZTtJQUNqRCwrRUFBK0U7SUFDL0UsNEVBQTRFO0lBQzVFLHNDQUFzQztJQUN0QyxJQUFJSyxVQUFVLEtBQUssQ0FBQ0QsZ0JBQWdCO1FBQ2hDLHdFQUF3RTtRQUN4RSw4QkFBOEI7UUFDOUIsTUFBTSxJQUFJRyxNQUFNLENBQUMsbUJBQW1CLEVBQUVQLFlBQVksb0JBQW9CLENBQUM7SUFDM0U7SUFDQSxPQUFPLElBQUlRLElBQUk7UUFDWDtZQUFDO1lBQUtIO1NBQU07UUFDWjtZQUFDO1lBQUtIO1NBQWM7S0FDdkI7QUFDTDtBQUNBOzs7Q0FHQyxHQUNNLFNBQVNPLDRCQUE0QkMsVUFBVSxFQUFFWixXQUFXLEVBQUVDLFFBQVE7SUFDekUsTUFBTVksaUJBQWlCVixPQUFPRjtJQUM5QixNQUFNYSxvQkFBb0JkLFlBQVllLEdBQUcsQ0FBQ1o7SUFDMUMsT0FBT1MsV0FBV0csR0FBRyxDQUFDLENBQUNDLEtBQU9sQiwyQkFBMkJrQixJQUFJRixtQkFBbUJEO0FBQ3BGLEVBQ0Esc0NBQXNDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWxnb3JhbmQtY3Jvd2RmdW5kaW5nLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vYm94U3RvcmFnZS5qcz9hZTA3Il0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIGJveFJlZmVyZW5jZVRvRW5jb2RpbmdEYXRhKHJlZmVyZW5jZSwgZm9yZWlnbkFwcHMsIGFwcEluZGV4KSB7XG4gICAgY29uc3QgcmVmZXJlbmNlSWQgPSBCaWdJbnQocmVmZXJlbmNlLmFwcEluZGV4KTtcbiAgICBjb25zdCByZWZlcmVuY2VOYW1lID0gcmVmZXJlbmNlLm5hbWU7XG4gICAgY29uc3QgaXNPd25SZWZlcmVuY2UgPSByZWZlcmVuY2VJZCA9PT0gQmlnSW50KDApIHx8IHJlZmVyZW5jZUlkID09PSBhcHBJbmRleDtcbiAgICAvLyBGb3JlaWduIGFwcHMgc3RhcnQgZnJvbSBpbmRleCAxOyBpbmRleCAwIGlzIGl0cyBvd24gYXBwIElELlxuICAgIGNvbnN0IGluZGV4ID0gZm9yZWlnbkFwcHMuaW5kZXhPZihyZWZlcmVuY2VJZCkgKyAxO1xuICAgIC8vIENoZWNrIGlmIHRoZSBhcHAgcmVmZXJlbmNlZCBpcyBpdHNlbGYgYWZ0ZXIgY2hlY2tpbmcgdGhlIGZvcmVpZ24gYXBwcyBhcnJheS5cbiAgICAvLyBJZiBpbmRleCBpcyB6ZXJvLCB0aGVuIHRoZSBhcHAgSUQgd2FzIG5vdCBmb3VuZCBpbiB0aGUgZm9yZWlnbiBhcHBzIGFycmF5XG4gICAgLy8gb3IgdGhlIGZvcmVpZ24gYXBwcyBhcnJheSB3YXMgbnVsbC5cbiAgICBpZiAoaW5kZXggPT09IDAgJiYgIWlzT3duUmVmZXJlbmNlKSB7XG4gICAgICAgIC8vIEVycm9yIGlmIHRoZSBhcHAgaXMgdHJ5aW5nIHRvIHJlZmVyZW5jZSBhIGZvcmVpZ24gYXBwIHRoYXQgd2FzIG5vdCBpblxuICAgICAgICAvLyBpdHMgb3duIGZvcmVpZ24gYXBwcyBhcnJheS5cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBCb3ggcmVmIHdpdGggYXBwSWQgJHtyZWZlcmVuY2VJZH0gbm90IGluIGZvcmVpZ24tYXBwc2ApO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IE1hcChbXG4gICAgICAgIFsnaScsIGluZGV4XSxcbiAgICAgICAgWyduJywgcmVmZXJlbmNlTmFtZV0sXG4gICAgXSk7XG59XG4vKipcbiAqIGJveFJlZmVyZW5jZXNUb0VuY29kaW5nRGF0YSB0cmFuc2xhdGVzIGFuIGFycmF5IG9mIEJveFJlZmVyZW5jZXMgaW50byBhbiBhcnJheSBvZiBlbmNvZGluZyBkYXRhXG4gKiBtYXBzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gYm94UmVmZXJlbmNlc1RvRW5jb2RpbmdEYXRhKHJlZmVyZW5jZXMsIGZvcmVpZ25BcHBzLCBhcHBJbmRleCkge1xuICAgIGNvbnN0IGFwcEluZGV4QmlnSW50ID0gQmlnSW50KGFwcEluZGV4KTtcbiAgICBjb25zdCBmb3JlaWduQXBwc0JpZ0ludCA9IGZvcmVpZ25BcHBzLm1hcChCaWdJbnQpO1xuICAgIHJldHVybiByZWZlcmVuY2VzLm1hcCgoYngpID0+IGJveFJlZmVyZW5jZVRvRW5jb2RpbmdEYXRhKGJ4LCBmb3JlaWduQXBwc0JpZ0ludCwgYXBwSW5kZXhCaWdJbnQpKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJveFN0b3JhZ2UuanMubWFwIl0sIm5hbWVzIjpbImJveFJlZmVyZW5jZVRvRW5jb2RpbmdEYXRhIiwicmVmZXJlbmNlIiwiZm9yZWlnbkFwcHMiLCJhcHBJbmRleCIsInJlZmVyZW5jZUlkIiwiQmlnSW50IiwicmVmZXJlbmNlTmFtZSIsIm5hbWUiLCJpc093blJlZmVyZW5jZSIsImluZGV4IiwiaW5kZXhPZiIsIkVycm9yIiwiTWFwIiwiYm94UmVmZXJlbmNlc1RvRW5jb2RpbmdEYXRhIiwicmVmZXJlbmNlcyIsImFwcEluZGV4QmlnSW50IiwiZm9yZWlnbkFwcHNCaWdJbnQiLCJtYXAiLCJieCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/boxStorage.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/client/client.js":
/*!********************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/client/client.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HTTPClient: () => (/* binding */ HTTPClient),\n/* harmony export */   HTTPClientResponse: () => (/* binding */ HTTPClientResponse)\n/* harmony export */ });\n/* harmony import */ var _utils_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/utils.js */ \"(ssr)/./node_modules/algosdk/dist/esm/utils/utils.js\");\n/* harmony import */ var _urlTokenBaseHTTPClient_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./urlTokenBaseHTTPClient.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/urlTokenBaseHTTPClient.js\");\n\n\nclass HTTPClientResponse {\n    constructor(options){\n        this.body = options.body;\n        this.text = options.text;\n        this.format = options.format;\n        this.headers = options.headers;\n        this.status = options.status;\n        this.ok = options.ok;\n    }\n    /**\n     * Returns the response body as a string, ready to be parsed as JSON.\n     */ getJSONText() {\n        if (this.text === undefined) {\n            throw new Error(`Response body does not contain JSON data. Format is ${this.format}`);\n        }\n        return this.text;\n    }\n    /**\n     * Parses the response body as JSON with the given options.\n     */ parseBodyAsJSON(jsonOptions) {\n        if (this.text === undefined) {\n            throw new Error(`Response body does not contain JSON data. Format is ${this.format}`);\n        }\n        // eslint-disable-next-line no-use-before-define\n        return HTTPClient.parseJSON(this.text, this.status, jsonOptions);\n    }\n}\n/**\n * Remove falsy values or values with a length of 0 from an object.\n */ function removeFalsyOrEmpty(obj) {\n    for(const key in obj){\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            // eslint-disable-next-line no-param-reassign\n            if (!obj[key] || obj[key].length === 0) delete obj[key];\n        }\n    }\n    return obj;\n}\n/**\n * Create a new object with lower-case keys\n * See https://codereview.stackexchange.com/a/162418\n * Used to ensure all headers are lower-case and to work more easily with them\n */ function tolowerCaseKeys(o) {\n    /* eslint-disable no-param-reassign,no-return-assign,no-sequences */ return Object.keys(o).reduce((c, k)=>(c[k.toLowerCase()] = o[k], c), {});\n/* eslint-enable no-param-reassign,no-return-assign,no-sequences */ }\n/**\n * getAcceptFormat returns the correct Accept header depending on the\n * requested format.\n */ function getAcceptFormat(query) {\n    if (query !== undefined && Object.prototype.hasOwnProperty.call(query, \"format\")) {\n        switch(query.format){\n            case \"msgpack\":\n                return \"application/msgpack\";\n            case \"json\":\n            default:\n                return \"application/json\";\n        }\n    } else return \"application/json\";\n}\n/**\n * HTTPClient is a wrapper around a BaseHTTPClient\n * It takes care of setting the proper \"Accept\" header and of\n * decoding the JSON outputs.\n */ class HTTPClient {\n    constructor(bcOrTokenHeader, baseServer, port, defaultHeaders = {}){\n        if (baseServer !== undefined) {\n            this.bc = new _urlTokenBaseHTTPClient_js__WEBPACK_IMPORTED_MODULE_1__.URLTokenBaseHTTPClient(bcOrTokenHeader, baseServer, port, defaultHeaders);\n        } else {\n            this.bc = bcOrTokenHeader;\n        }\n    }\n    /**\n     * Parse JSON using utils.parseJSON\n     *\n     * @param text - JSON data\n     * @param status - Status of the response (used in case parseJSON fails)\n     * @param jsonOptions - Options object to use to decode JSON responses. See\n     *   utils.parseJSON for the options available.\n     */ static parseJSON(text, status, jsonOptions) {\n        try {\n            if (!text) {\n                return null;\n            }\n            return _utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.parseJSON(text, jsonOptions);\n        } catch (err_) {\n            const err = err_;\n            // return the raw response if the response parsing fails\n            err.rawResponse = text || null;\n            // return the http status code if the response parsing fails\n            err.statusCode = status;\n            throw err;\n        }\n    }\n    /**\n     * Serialize the data according to the requestHeaders\n     * Assumes that requestHeaders contain a key \"content-type\"\n     * If the content-type is \"application/json\", data is JSON serialized\n     * Otherwise, data needs to be either an UTF-8 string that is converted to an Uint8Array\n     * or an Uint8Array\n     * @private\n     */ static serializeData(data, requestHeaders) {\n        if (!data) {\n            return new Uint8Array(0); // empty Uint8Array\n        }\n        if (requestHeaders[\"content-type\"] === \"application/json\") {\n            return new TextEncoder().encode(_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.stringifyJSON(data));\n        }\n        if (typeof data === \"string\") {\n            return new TextEncoder().encode(data);\n        }\n        if (data instanceof Uint8Array) {\n            return data;\n        }\n        throw new Error(\"provided data is neither a string nor a Uint8Array and content-type is not application/json\");\n    }\n    /**\n     * Convert a BaseHTTPClientResponse into a full HTTPClientResponse\n     * Parse the body in\n     * Modifies in place res and return the result\n     */ static prepareResponse(res, format) {\n        const { body } = res;\n        let text;\n        if (format !== \"application/msgpack\") {\n            text = body && new TextDecoder().decode(body) || \"\";\n        }\n        return new HTTPClientResponse({\n            ...res,\n            format,\n            text,\n            ok: Math.trunc(res.status / 100) === 2\n        });\n    }\n    /**\n     * Prepare an error with a response\n     * (the type of errors BaseHTTPClient are supposed to throw)\n     * by adding the status and preparing the internal response\n     * @private\n     */ static prepareResponseError(err) {\n        if (err.response) {\n            // eslint-disable-next-line no-param-reassign\n            err.response = HTTPClient.prepareResponse(err.response, \"application/json\");\n            // eslint-disable-next-line no-param-reassign\n            err.status = err.response.status;\n        }\n        return err;\n    }\n    /**\n     * Send a GET request.\n     *\n     * @param options - The options to use for the request.\n     * @param options.relativePath - The path of the request.\n     * @param options.query - An object containing the query parameters of the request.\n     * @param options.requestHeaders - An object containing additional request headers to use.\n     *   or not.\n     * @param options.customOptions - An object containing additional options to pass to the\n     *   underlying BaseHTTPClient instance.\n     * @returns Response object.\n     */ async get({ relativePath, query, requestHeaders, customOptions }) {\n        const format = getAcceptFormat(query);\n        const fullHeaders = {\n            ...requestHeaders ?? {},\n            accept: format\n        };\n        try {\n            const res = await this.bc.get(relativePath, query ? removeFalsyOrEmpty(query) : undefined, fullHeaders, customOptions);\n            return HTTPClient.prepareResponse(res, format);\n        } catch (err) {\n            throw HTTPClient.prepareResponseError(err);\n        }\n    }\n    /**\n     * Send a POST request.\n     * If no content-type present, adds the header \"content-type: application/json\"\n     * and data is serialized in JSON (if not empty)\n     * @param options - The options to use for the request.\n     */ async post({ relativePath, data, query, requestHeaders, customOptions }) {\n        const fullHeaders = {\n            \"content-type\": \"application/json\",\n            ...tolowerCaseKeys(requestHeaders ?? {})\n        };\n        try {\n            const res = await this.bc.post(relativePath, HTTPClient.serializeData(data, fullHeaders), query, fullHeaders, customOptions);\n            return HTTPClient.prepareResponse(res, \"application/json\");\n        } catch (err) {\n            throw HTTPClient.prepareResponseError(err);\n        }\n    }\n    /**\n     * Send a DELETE request.\n     * If no content-type present, adds the header \"content-type: application/json\"\n     * and data is serialized in JSON (if not empty)\n     * @param options - The options to use for the request.\n     */ async delete({ relativePath, data, requestHeaders, customOptions }) {\n        const fullHeaders = {\n            \"content-type\": \"application/json\",\n            ...tolowerCaseKeys(requestHeaders ?? {})\n        };\n        try {\n            const res = await this.bc.delete(relativePath, typeof data !== \"undefined\" ? HTTPClient.serializeData(data, fullHeaders) : undefined, undefined, fullHeaders, customOptions);\n            return HTTPClient.prepareResponse(res, \"application/json\");\n        } catch (err) {\n            throw HTTPClient.prepareResponseError(err);\n        }\n    }\n} //# sourceMappingURL=client.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/client/client.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/client/kmd.js":
/*!*****************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/client/kmd.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   KmdClient: () => (/* binding */ KmdClient)\n/* harmony export */ });\n/* harmony import */ var _encoding_binarydata_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../encoding/binarydata.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/binarydata.js\");\n/* harmony import */ var _types_intDecoding_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../types/intDecoding.js */ \"(ssr)/./node_modules/algosdk/dist/esm/types/intDecoding.js\");\n/* harmony import */ var _v2_serviceClient_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./v2/serviceClient.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/serviceClient.js\");\n\n\n\nclass KmdClient extends _v2_serviceClient_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"] {\n    constructor(token, baseServer = \"http://127.0.0.1\", port = 7833, headers = {}){\n        super(\"X-KMD-API-Token\", token, baseServer, port, headers);\n    }\n    async get(relativePath) {\n        const res = await this.c.get({\n            relativePath\n        });\n        return res.parseBodyAsJSON({\n            // Using SAFE for all KMD endpoints because no integers in responses should ever be too big\n            intDecoding: _types_intDecoding_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].SAFE\n        });\n    }\n    async delete(relativePath, data) {\n        const res = await this.c.delete({\n            relativePath,\n            data\n        });\n        return res.parseBodyAsJSON({\n            // Using SAFE for all KMD endpoints because no integers in responses should ever be too big\n            intDecoding: _types_intDecoding_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].SAFE\n        });\n    }\n    async post(relativePath, data) {\n        const res = await this.c.post({\n            relativePath,\n            data\n        });\n        return res.parseBodyAsJSON({\n            // Using SAFE for all KMD endpoints because no integers in responses should ever be too big\n            intDecoding: _types_intDecoding_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].SAFE\n        });\n    }\n    /**\n     * version returns a VersionResponse containing a list of kmd API versions supported by this running kmd instance.\n     */ async versions() {\n        return this.get(\"/versions\");\n    }\n    /**\n     * listWallets returns a ListWalletsResponse containing the list of wallets known to kmd. Using a wallet ID\n     * returned from this endpoint, you can initialize a wallet handle with client.InitWalletHandle\n     */ async listWallets() {\n        return this.get(\"/v1/wallets\");\n    }\n    /**\n     * createWallet creates a wallet with the specified name, password, driver,\n     * and master derivation key. If the master derivation key is blank, one is\n     * generated internally to kmd. CreateWallet returns a CreateWalletResponse\n     * containing information about the new wallet.\n     * @param walletName\n     * @param walletPassword\n     * @param walletDriverName\n     * @param walletMDK\n     */ async createWallet(walletName, walletPassword, walletMDK = new Uint8Array(), walletDriverName = \"sqlite\") {\n        const req = {\n            wallet_name: walletName,\n            wallet_driver_name: walletDriverName,\n            wallet_password: walletPassword,\n            master_derivation_key: (0,_encoding_binarydata_js__WEBPACK_IMPORTED_MODULE_0__.bytesToBase64)(walletMDK)\n        };\n        return this.post(\"/v1/wallet\", req);\n    }\n    /**\n     * initWalletHandle accepts a wallet ID and a wallet password, and returns an\n     * initWalletHandleResponse containing a wallet handle token. This wallet\n     * handle token can be used for subsequent operations on this wallet, like key\n     * generation, transaction signing, etc.. WalletHandleTokens expire after a\n     * configurable number of seconds, and must be renewed periodically with\n     * RenewWalletHandle. It is good practice to call ReleaseWalletHandle when\n     * you're done interacting with this wallet.\n     * @param walletID\n     * @param walletPassword\n     */ async initWalletHandle(walletID, walletPassword) {\n        const req = {\n            wallet_id: walletID,\n            wallet_password: walletPassword\n        };\n        return this.post(\"/v1/wallet/init\", req);\n    }\n    /**\n     * releaseWalletHandle invalidates the passed wallet handle token, making\n     * it unusuable for subsequent wallet operations.\n     * @param walletHandle\n     */ async releaseWalletHandle(walletHandle) {\n        const req = {\n            wallet_handle_token: walletHandle\n        };\n        return this.post(\"/v1/wallet/release\", req);\n    }\n    /**\n     * renewWalletHandle accepts a wallet handle and attempts to renew it, moving\n     * the expiration time to some number of seconds in the future. It returns a\n     * RenewWalletHandleResponse containing the walletHandle and the number of\n     * seconds until expiration\n     * @param walletHandle\n     */ async renewWalletHandle(walletHandle) {\n        const req = {\n            wallet_handle_token: walletHandle\n        };\n        return this.post(\"/v1/wallet/renew\", req);\n    }\n    /**\n     * renameWallet accepts a wallet ID, wallet password, and a new wallet name,\n     * and renames the underlying wallet.\n     * @param walletID\n     * @param walletPassword\n     * @param newWalletName\n     */ async renameWallet(walletID, walletPassword, newWalletName) {\n        const req = {\n            wallet_id: walletID,\n            wallet_password: walletPassword,\n            wallet_name: newWalletName\n        };\n        return this.post(\"/v1/wallet/rename\", req);\n    }\n    /**\n     * getWallet accepts a wallet handle and returns high level information about\n     * this wallet in a GetWalletResponse.\n     * @param walletHandle\n     */ async getWallet(walletHandle) {\n        const req = {\n            wallet_handle_token: walletHandle\n        };\n        return this.post(\"/v1/wallet/info\", req);\n    }\n    /**\n     * exportMasterDerivationKey accepts a wallet handle and a wallet password, and\n     * returns an ExportMasterDerivationKeyResponse containing the master\n     * derivation key. This key can be used as an argument to CreateWallet in\n     * order to recover the keys generated by this wallet. The master derivation\n     * key can be encoded as a sequence of words using the mnemonic library, and\n     * @param walletHandle\n     * @param walletPassword\n     */ async exportMasterDerivationKey(walletHandle, walletPassword) {\n        const req = {\n            wallet_handle_token: walletHandle,\n            wallet_password: walletPassword\n        };\n        const res = await this.post(\"/v1/master-key/export\", req);\n        return {\n            master_derivation_key: (0,_encoding_binarydata_js__WEBPACK_IMPORTED_MODULE_0__.base64ToBytes)(res.master_derivation_key)\n        };\n    }\n    /**\n     * importKey accepts a wallet handle and an ed25519 private key, and imports\n     * the key into the wallet. It returns an ImportKeyResponse containing the\n     * address corresponding to this private key.\n     * @param walletHandle\n     * @param secretKey\n     */ async importKey(walletHandle, secretKey) {\n        const req = {\n            wallet_handle_token: walletHandle,\n            private_key: (0,_encoding_binarydata_js__WEBPACK_IMPORTED_MODULE_0__.bytesToBase64)(secretKey)\n        };\n        return this.post(\"/v1/key/import\", req);\n    }\n    /**\n     * exportKey accepts a wallet handle, wallet password, and address, and returns\n     * an ExportKeyResponse containing the ed25519 private key corresponding to the\n     * address stored in the wallet.\n     * @param walletHandle\n     * @param walletPassword\n     * @param addr\n     */ async exportKey(walletHandle, walletPassword, addr) {\n        const req = {\n            wallet_handle_token: walletHandle,\n            address: addr,\n            wallet_password: walletPassword\n        };\n        const res = await this.post(\"/v1/key/export\", req);\n        return {\n            private_key: (0,_encoding_binarydata_js__WEBPACK_IMPORTED_MODULE_0__.base64ToBytes)(res.private_key)\n        };\n    }\n    /**\n     * generateKey accepts a wallet handle, and then generates the next key in the\n     * wallet using its internal master derivation key. Two wallets with the same\n     * master derivation key will generate the same sequence of keys.\n     * @param walletHandle\n     */ async generateKey(walletHandle) {\n        const req = {\n            wallet_handle_token: walletHandle,\n            display_mnemonic: false\n        };\n        return this.post(\"/v1/key\", req);\n    }\n    /**\n     * deleteKey accepts a wallet handle, wallet password, and address, and deletes\n     * the information about this address from the wallet (including address and\n     * secret key). If DeleteKey is called on a key generated using GenerateKey,\n     * the same key will not be generated again. However, if a wallet is recovered\n     * using the master derivation key, a key generated in this way can be\n     * recovered.\n     * @param walletHandle\n     * @param walletPassword\n     * @param addr\n     */ async deleteKey(walletHandle, walletPassword, addr) {\n        const req = {\n            wallet_handle_token: walletHandle,\n            address: addr,\n            wallet_password: walletPassword\n        };\n        return this.delete(\"/v1/key\", req);\n    }\n    /**\n     * ListKeys accepts a wallet handle and returns a ListKeysResponse containing\n     * all of the addresses for which this wallet contains secret keys.\n     * @param walletHandle\n     */ async listKeys(walletHandle) {\n        const req = {\n            wallet_handle_token: walletHandle\n        };\n        return this.post(\"/v1/key/list\", req);\n    }\n    /**\n     * signTransaction accepts a wallet handle, wallet password, and a transaction,\n     * and returns and SignTransactionResponse containing an encoded, signed\n     * transaction. The transaction is signed using the key corresponding to the\n     * Sender field.\n     * @param walletHandle\n     * @param walletPassword\n     * @param transaction\n     */ async signTransaction(walletHandle, walletPassword, transaction) {\n        const req = {\n            wallet_handle_token: walletHandle,\n            wallet_password: walletPassword,\n            transaction: (0,_encoding_binarydata_js__WEBPACK_IMPORTED_MODULE_0__.bytesToBase64)(transaction.toByte())\n        };\n        const res = await this.post(\"/v1/transaction/sign\", req);\n        return (0,_encoding_binarydata_js__WEBPACK_IMPORTED_MODULE_0__.base64ToBytes)(res.signed_transaction);\n    }\n    /**\n     * signTransactionWithSpecificPublicKey accepts a wallet handle, wallet password, a transaction, and a public key,\n     * and returns and SignTransactionResponse containing an encoded, signed\n     * transaction. The transaction is signed using the key corresponding to the\n     * publicKey arg.\n     * @param walletHandle\n     * @param walletPassword\n     * @param transaction\n     * @param publicKey - sign the txn with the key corresponding to publicKey (used for working with a rekeyed addr)\n     */ async signTransactionWithSpecificPublicKey(walletHandle, walletPassword, transaction, publicKey) {\n        const pk = (0,_encoding_binarydata_js__WEBPACK_IMPORTED_MODULE_0__.coerceToBytes)(publicKey);\n        const req = {\n            wallet_handle_token: walletHandle,\n            wallet_password: walletPassword,\n            transaction: (0,_encoding_binarydata_js__WEBPACK_IMPORTED_MODULE_0__.bytesToBase64)(transaction.toByte()),\n            public_key: (0,_encoding_binarydata_js__WEBPACK_IMPORTED_MODULE_0__.bytesToBase64)(pk)\n        };\n        const res = await this.post(\"/v1/transaction/sign\", req);\n        return (0,_encoding_binarydata_js__WEBPACK_IMPORTED_MODULE_0__.base64ToBytes)(res.signed_transaction);\n    }\n    /**\n     * listMultisig accepts a wallet handle and returns a ListMultisigResponse\n     * containing the multisig addresses whose preimages are stored in this wallet.\n     * A preimage is the information needed to reconstruct this multisig address,\n     * including multisig version information, threshold information, and a list\n     * of public keys.\n     * @param walletHandle\n     */ async listMultisig(walletHandle) {\n        const req = {\n            wallet_handle_token: walletHandle\n        };\n        return this.post(\"/v1/multisig/list\", req);\n    }\n    /**\n     * importMultisig accepts a wallet handle and the information required to\n     * generate a multisig address. It derives this address, and stores all of the\n     * information within the wallet. It returns a ImportMultisigResponse with the\n     * derived address.\n     * @param walletHandle\n     * @param version\n     * @param threshold\n     * @param pks\n     */ async importMultisig(walletHandle, version, threshold, pks) {\n        const req = {\n            wallet_handle_token: walletHandle,\n            multisig_version: version,\n            threshold,\n            pks\n        };\n        return this.post(\"/v1/multisig/import\", req);\n    }\n    /**\n     * exportMultisig accepts a wallet handle, wallet password, and multisig\n     * address, and returns an ExportMultisigResponse containing the stored\n     * multisig preimage. The preimage contains all of the information necessary\n     * to derive the multisig address, including version, threshold, and a list of\n     * public keys.\n     * @param walletHandle\n     * @param walletPassword\n     * @param addr\n     */ async exportMultisig(walletHandle, addr) {\n        const req = {\n            wallet_handle_token: walletHandle,\n            address: addr\n        };\n        return this.post(\"/v1/multisig/export\", req);\n    }\n    /**\n     * signMultisigTransaction accepts a wallet handle, wallet password,\n     * transaction, public key (*not* an address), and an optional partial\n     * MultisigSig. It looks up the secret key corresponding to the public key, and\n     * returns a SignMultisigTransactionResponse containing a MultisigSig with a\n     * signature by the secret key included.\n     * @param walletHandle\n     * @param pw\n     * @param tx\n     * @param pk\n     * @param partial\n     */ async signMultisigTransaction(walletHandle, pw, transaction, pk, partial) {\n        const pubkey = (0,_encoding_binarydata_js__WEBPACK_IMPORTED_MODULE_0__.coerceToBytes)(pk);\n        const req = {\n            wallet_handle_token: walletHandle,\n            transaction: (0,_encoding_binarydata_js__WEBPACK_IMPORTED_MODULE_0__.bytesToBase64)(transaction.toByte()),\n            public_key: (0,_encoding_binarydata_js__WEBPACK_IMPORTED_MODULE_0__.bytesToBase64)(pubkey),\n            partial_multisig: partial,\n            wallet_password: pw\n        };\n        return this.post(\"/v1/multisig/sign\", req);\n    }\n    /**\n     * deleteMultisig accepts a wallet handle, wallet password, and multisig\n     * address, and deletes the information about this multisig address from the\n     * wallet (including address and secret key).\n     * @param walletHandle\n     * @param walletPassword\n     * @param addr\n     */ async deleteMultisig(walletHandle, walletPassword, addr) {\n        const req = {\n            wallet_handle_token: walletHandle,\n            address: addr,\n            wallet_password: walletPassword\n        };\n        return this.delete(\"/v1/multisig\", req);\n    }\n} //# sourceMappingURL=kmd.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/client/kmd.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/client/urlTokenBaseHTTPClient.js":
/*!************************************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/client/urlTokenBaseHTTPClient.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   URLTokenBaseHTTPClient: () => (/* binding */ URLTokenBaseHTTPClient)\n/* harmony export */ });\nclass URLTokenBaseHTTPError extends Error {\n    constructor(message, response){\n        super(message);\n        this.response = response;\n        this.name = \"URLTokenBaseHTTPError\";\n        this.response = response;\n    }\n}\n/**\n * Implementation of BaseHTTPClient that uses a URL and a token\n * and make the REST queries using fetch.\n * This is the default implementation of BaseHTTPClient.\n *\n * Additional fetch options can be configured by using the `customOptions` parameter on\n * get/post/delete requests.\n */ class URLTokenBaseHTTPClient {\n    constructor(tokenHeader, baseServer, port, defaultHeaders = {}){\n        this.defaultHeaders = defaultHeaders;\n        // Append a trailing slash so we can use relative paths. Without the trailing\n        // slash, the last path segment will be replaced by the relative path. See\n        // usage in `addressWithPath`.\n        const fixedBaseServer = baseServer.endsWith(\"/\") ? baseServer : `${baseServer}/`;\n        const baseServerURL = new URL(fixedBaseServer);\n        if (typeof port !== \"undefined\") {\n            baseServerURL.port = port.toString();\n        }\n        if (baseServerURL.protocol.length === 0) {\n            throw new Error(\"Invalid base server URL, protocol must be defined.\");\n        }\n        this.baseURL = baseServerURL;\n        this.tokenHeader = tokenHeader;\n    }\n    /**\n     * Compute the URL for a path relative to the instance's address\n     * @param relativePath - A path string\n     * @param query - An optional key-value object of query parameters to add to the URL. If the\n     *   relativePath already has query parameters on it, the additional parameters defined here will\n     *   be added to the URL without modifying those (unless a key collision occurs).\n     * @returns A URL string\n     */ getURL(relativePath, query) {\n        let fixedRelativePath;\n        if (relativePath.startsWith(\"./\")) {\n            fixedRelativePath = relativePath;\n        } else if (relativePath.startsWith(\"/\")) {\n            fixedRelativePath = `.${relativePath}`;\n        } else {\n            fixedRelativePath = `./${relativePath}`;\n        }\n        const address = new URL(fixedRelativePath, this.baseURL);\n        if (query) {\n            for (const [key, value] of Object.entries(query)){\n                address.searchParams.set(key, value.toString());\n            }\n        }\n        return address.toString();\n    }\n    static formatFetchResponseHeaders(headers) {\n        const headersObj = {};\n        headers.forEach((key, value)=>{\n            headersObj[key] = value;\n        });\n        return headersObj;\n    }\n    static async checkHttpError(res) {\n        if (res.ok) {\n            return;\n        }\n        let body;\n        let bodyErrorMessage;\n        try {\n            body = new Uint8Array(await res.arrayBuffer());\n            const decoded = JSON.parse(new TextDecoder().decode(body));\n            if (decoded.message) {\n                bodyErrorMessage = decoded.message;\n            }\n        } catch (_) {\n        // ignore any error that happened while we are parsing the error response\n        }\n        let message = `Network request error. Received status ${res.status} (${res.statusText})`;\n        if (bodyErrorMessage) {\n            message += `: ${bodyErrorMessage}`;\n        }\n        throw new URLTokenBaseHTTPError(message, {\n            body: body ?? new Uint8Array(),\n            status: res.status,\n            headers: URLTokenBaseHTTPClient.formatFetchResponseHeaders(res.headers)\n        });\n    }\n    static async formatFetchResponse(res) {\n        await this.checkHttpError(res);\n        return {\n            body: new Uint8Array(await res.arrayBuffer()),\n            status: res.status,\n            headers: URLTokenBaseHTTPClient.formatFetchResponseHeaders(res.headers)\n        };\n    }\n    async get(relativePath, query, requestHeaders, customOptions) {\n        // Expand headers for use in fetch\n        const headers = {\n            ...this.tokenHeader,\n            ...this.defaultHeaders,\n            ...requestHeaders ?? {}\n        };\n        const res = await fetch(this.getURL(relativePath, query), {\n            headers,\n            ...customOptions ?? {}\n        });\n        return URLTokenBaseHTTPClient.formatFetchResponse(res);\n    }\n    async post(relativePath, data, query, requestHeaders, customOptions) {\n        // Expand headers for use in fetch\n        const headers = {\n            ...this.tokenHeader,\n            ...this.defaultHeaders,\n            ...requestHeaders ?? {}\n        };\n        const res = await fetch(this.getURL(relativePath, query), {\n            method: \"POST\",\n            body: data,\n            headers,\n            ...customOptions ?? {}\n        });\n        return URLTokenBaseHTTPClient.formatFetchResponse(res);\n    }\n    async delete(relativePath, data, query, requestHeaders, customOptions) {\n        // Expand headers for use in fetch\n        const headers = {\n            ...this.tokenHeader,\n            ...this.defaultHeaders,\n            ...requestHeaders ?? {}\n        };\n        const res = await fetch(this.getURL(relativePath, query), {\n            method: \"DELETE\",\n            body: data,\n            headers,\n            ...customOptions ?? {}\n        });\n        return URLTokenBaseHTTPClient.formatFetchResponse(res);\n    }\n} //# sourceMappingURL=urlTokenBaseHTTPClient.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/client/urlTokenBaseHTTPClient.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/accountApplicationInformation.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/client/v2/algod/accountApplicationInformation.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ AccountApplicationInformation)\n/* harmony export */ });\n/* harmony import */ var _jsonrequest_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../jsonrequest.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/jsonrequest.js\");\n/* harmony import */ var _encoding_encoding_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../encoding/encoding.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/encoding.js\");\n/* harmony import */ var _models_types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./models/types.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/models/types.js\");\n\n\n\nclass AccountApplicationInformation extends _jsonrequest_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(c, account, applicationID){\n        super(c);\n        this.account = account.toString();\n        this.applicationID = BigInt(applicationID);\n    }\n    path() {\n        return `/v2/accounts/${this.account}/applications/${this.applicationID}`;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    prepare(response) {\n        return (0,_encoding_encoding_js__WEBPACK_IMPORTED_MODULE_1__.decodeJSON)(response.getJSONText(), _models_types_js__WEBPACK_IMPORTED_MODULE_2__.AccountApplicationResponse);\n    }\n} //# sourceMappingURL=accountApplicationInformation.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9jbGllbnQvdjIvYWxnb2QvYWNjb3VudEFwcGxpY2F0aW9uSW5mb3JtYXRpb24uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUE0QztBQUNlO0FBQ0k7QUFDaEQsTUFBTUcsc0NBQXNDSCx1REFBV0E7SUFDbEVJLFlBQVlDLENBQUMsRUFBRUMsT0FBTyxFQUFFQyxhQUFhLENBQUU7UUFDbkMsS0FBSyxDQUFDRjtRQUNOLElBQUksQ0FBQ0MsT0FBTyxHQUFHQSxRQUFRRSxRQUFRO1FBQy9CLElBQUksQ0FBQ0QsYUFBYSxHQUFHRSxPQUFPRjtJQUNoQztJQUNBRyxPQUFPO1FBQ0gsT0FBTyxDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUNKLE9BQU8sQ0FBQyxjQUFjLEVBQUUsSUFBSSxDQUFDQyxhQUFhLENBQUMsQ0FBQztJQUM1RTtJQUNBLGtEQUFrRDtJQUNsREksUUFBUUMsUUFBUSxFQUFFO1FBQ2QsT0FBT1gsaUVBQVVBLENBQUNXLFNBQVNDLFdBQVcsSUFBSVgsd0VBQTBCQTtJQUN4RTtBQUNKLEVBQ0EseURBQXlEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWxnb3JhbmQtY3Jvd2RmdW5kaW5nLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vY2xpZW50L3YyL2FsZ29kL2FjY291bnRBcHBsaWNhdGlvbkluZm9ybWF0aW9uLmpzP2YyNTIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEpTT05SZXF1ZXN0IGZyb20gJy4uL2pzb25yZXF1ZXN0LmpzJztcbmltcG9ydCB7IGRlY29kZUpTT04gfSBmcm9tICcuLi8uLi8uLi9lbmNvZGluZy9lbmNvZGluZy5qcyc7XG5pbXBvcnQgeyBBY2NvdW50QXBwbGljYXRpb25SZXNwb25zZSB9IGZyb20gJy4vbW9kZWxzL3R5cGVzLmpzJztcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFjY291bnRBcHBsaWNhdGlvbkluZm9ybWF0aW9uIGV4dGVuZHMgSlNPTlJlcXVlc3Qge1xuICAgIGNvbnN0cnVjdG9yKGMsIGFjY291bnQsIGFwcGxpY2F0aW9uSUQpIHtcbiAgICAgICAgc3VwZXIoYyk7XG4gICAgICAgIHRoaXMuYWNjb3VudCA9IGFjY291bnQudG9TdHJpbmcoKTtcbiAgICAgICAgdGhpcy5hcHBsaWNhdGlvbklEID0gQmlnSW50KGFwcGxpY2F0aW9uSUQpO1xuICAgIH1cbiAgICBwYXRoKCkge1xuICAgICAgICByZXR1cm4gYC92Mi9hY2NvdW50cy8ke3RoaXMuYWNjb3VudH0vYXBwbGljYXRpb25zLyR7dGhpcy5hcHBsaWNhdGlvbklEfWA7XG4gICAgfVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjbGFzcy1tZXRob2RzLXVzZS10aGlzXG4gICAgcHJlcGFyZShyZXNwb25zZSkge1xuICAgICAgICByZXR1cm4gZGVjb2RlSlNPTihyZXNwb25zZS5nZXRKU09OVGV4dCgpLCBBY2NvdW50QXBwbGljYXRpb25SZXNwb25zZSk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YWNjb3VudEFwcGxpY2F0aW9uSW5mb3JtYXRpb24uanMubWFwIl0sIm5hbWVzIjpbIkpTT05SZXF1ZXN0IiwiZGVjb2RlSlNPTiIsIkFjY291bnRBcHBsaWNhdGlvblJlc3BvbnNlIiwiQWNjb3VudEFwcGxpY2F0aW9uSW5mb3JtYXRpb24iLCJjb25zdHJ1Y3RvciIsImMiLCJhY2NvdW50IiwiYXBwbGljYXRpb25JRCIsInRvU3RyaW5nIiwiQmlnSW50IiwicGF0aCIsInByZXBhcmUiLCJyZXNwb25zZSIsImdldEpTT05UZXh0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/accountApplicationInformation.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/accountAssetInformation.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/client/v2/algod/accountAssetInformation.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ AccountAssetInformation)\n/* harmony export */ });\n/* harmony import */ var _jsonrequest_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../jsonrequest.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/jsonrequest.js\");\n/* harmony import */ var _encoding_encoding_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../encoding/encoding.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/encoding.js\");\n/* harmony import */ var _models_types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./models/types.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/models/types.js\");\n\n\n\nclass AccountAssetInformation extends _jsonrequest_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(c, account, assetID){\n        super(c);\n        this.account = account.toString();\n        this.assetID = BigInt(assetID);\n    }\n    path() {\n        return `/v2/accounts/${this.account}/assets/${this.assetID}`;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    prepare(response) {\n        return (0,_encoding_encoding_js__WEBPACK_IMPORTED_MODULE_1__.decodeJSON)(response.getJSONText(), _models_types_js__WEBPACK_IMPORTED_MODULE_2__.AccountAssetResponse);\n    }\n} //# sourceMappingURL=accountAssetInformation.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9jbGllbnQvdjIvYWxnb2QvYWNjb3VudEFzc2V0SW5mb3JtYXRpb24uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUE0QztBQUNlO0FBQ0Y7QUFDMUMsTUFBTUcsZ0NBQWdDSCx1REFBV0E7SUFDNURJLFlBQVlDLENBQUMsRUFBRUMsT0FBTyxFQUFFQyxPQUFPLENBQUU7UUFDN0IsS0FBSyxDQUFDRjtRQUNOLElBQUksQ0FBQ0MsT0FBTyxHQUFHQSxRQUFRRSxRQUFRO1FBQy9CLElBQUksQ0FBQ0QsT0FBTyxHQUFHRSxPQUFPRjtJQUMxQjtJQUNBRyxPQUFPO1FBQ0gsT0FBTyxDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUNKLE9BQU8sQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDQyxPQUFPLENBQUMsQ0FBQztJQUNoRTtJQUNBLGtEQUFrRDtJQUNsREksUUFBUUMsUUFBUSxFQUFFO1FBQ2QsT0FBT1gsaUVBQVVBLENBQUNXLFNBQVNDLFdBQVcsSUFBSVgsa0VBQW9CQTtJQUNsRTtBQUNKLEVBQ0EsbURBQW1EIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWxnb3JhbmQtY3Jvd2RmdW5kaW5nLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vY2xpZW50L3YyL2FsZ29kL2FjY291bnRBc3NldEluZm9ybWF0aW9uLmpzPzYwNWMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEpTT05SZXF1ZXN0IGZyb20gJy4uL2pzb25yZXF1ZXN0LmpzJztcbmltcG9ydCB7IGRlY29kZUpTT04gfSBmcm9tICcuLi8uLi8uLi9lbmNvZGluZy9lbmNvZGluZy5qcyc7XG5pbXBvcnQgeyBBY2NvdW50QXNzZXRSZXNwb25zZSB9IGZyb20gJy4vbW9kZWxzL3R5cGVzLmpzJztcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFjY291bnRBc3NldEluZm9ybWF0aW9uIGV4dGVuZHMgSlNPTlJlcXVlc3Qge1xuICAgIGNvbnN0cnVjdG9yKGMsIGFjY291bnQsIGFzc2V0SUQpIHtcbiAgICAgICAgc3VwZXIoYyk7XG4gICAgICAgIHRoaXMuYWNjb3VudCA9IGFjY291bnQudG9TdHJpbmcoKTtcbiAgICAgICAgdGhpcy5hc3NldElEID0gQmlnSW50KGFzc2V0SUQpO1xuICAgIH1cbiAgICBwYXRoKCkge1xuICAgICAgICByZXR1cm4gYC92Mi9hY2NvdW50cy8ke3RoaXMuYWNjb3VudH0vYXNzZXRzLyR7dGhpcy5hc3NldElEfWA7XG4gICAgfVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjbGFzcy1tZXRob2RzLXVzZS10aGlzXG4gICAgcHJlcGFyZShyZXNwb25zZSkge1xuICAgICAgICByZXR1cm4gZGVjb2RlSlNPTihyZXNwb25zZS5nZXRKU09OVGV4dCgpLCBBY2NvdW50QXNzZXRSZXNwb25zZSk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YWNjb3VudEFzc2V0SW5mb3JtYXRpb24uanMubWFwIl0sIm5hbWVzIjpbIkpTT05SZXF1ZXN0IiwiZGVjb2RlSlNPTiIsIkFjY291bnRBc3NldFJlc3BvbnNlIiwiQWNjb3VudEFzc2V0SW5mb3JtYXRpb24iLCJjb25zdHJ1Y3RvciIsImMiLCJhY2NvdW50IiwiYXNzZXRJRCIsInRvU3RyaW5nIiwiQmlnSW50IiwicGF0aCIsInByZXBhcmUiLCJyZXNwb25zZSIsImdldEpTT05UZXh0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/accountAssetInformation.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/accountInformation.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/client/v2/algod/accountInformation.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ AccountInformation)\n/* harmony export */ });\n/* harmony import */ var _jsonrequest_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../jsonrequest.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/jsonrequest.js\");\n/* harmony import */ var _encoding_encoding_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../encoding/encoding.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/encoding.js\");\n/* harmony import */ var _models_types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./models/types.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/models/types.js\");\n\n\n\nclass AccountInformation extends _jsonrequest_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(c, account){\n        super(c);\n        this.account = account.toString();\n    }\n    path() {\n        return `/v2/accounts/${this.account}`;\n    }\n    /**\n     * Exclude assets and application data from results\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountInfo = await algodClient.accountInformation(address)\n     *        .exclude('all')\n     *        .do();\n     * ```\n     *\n     * @param round\n     * @category query\n     */ exclude(exclude) {\n        this.query.exclude = exclude;\n        return this;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    prepare(response) {\n        return (0,_encoding_encoding_js__WEBPACK_IMPORTED_MODULE_1__.decodeJSON)(response.getJSONText(), _models_types_js__WEBPACK_IMPORTED_MODULE_2__.Account);\n    }\n} //# sourceMappingURL=accountInformation.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9jbGllbnQvdjIvYWxnb2QvYWNjb3VudEluZm9ybWF0aW9uLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBNEM7QUFDZTtBQUNmO0FBQzdCLE1BQU1HLDJCQUEyQkgsdURBQVdBO0lBQ3ZESSxZQUFZQyxDQUFDLEVBQUVDLE9BQU8sQ0FBRTtRQUNwQixLQUFLLENBQUNEO1FBQ04sSUFBSSxDQUFDQyxPQUFPLEdBQUdBLFFBQVFDLFFBQVE7SUFDbkM7SUFDQUMsT0FBTztRQUNILE9BQU8sQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDRixPQUFPLENBQUMsQ0FBQztJQUN6QztJQUNBOzs7Ozs7Ozs7Ozs7O0tBYUMsR0FDREcsUUFBUUEsT0FBTyxFQUFFO1FBQ2IsSUFBSSxDQUFDQyxLQUFLLENBQUNELE9BQU8sR0FBR0E7UUFDckIsT0FBTyxJQUFJO0lBQ2Y7SUFDQSxrREFBa0Q7SUFDbERFLFFBQVFDLFFBQVEsRUFBRTtRQUNkLE9BQU9YLGlFQUFVQSxDQUFDVyxTQUFTQyxXQUFXLElBQUlYLHFEQUFPQTtJQUNyRDtBQUNKLEVBQ0EsOENBQThDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWxnb3JhbmQtY3Jvd2RmdW5kaW5nLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vY2xpZW50L3YyL2FsZ29kL2FjY291bnRJbmZvcm1hdGlvbi5qcz8xM2Y4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBKU09OUmVxdWVzdCBmcm9tICcuLi9qc29ucmVxdWVzdC5qcyc7XG5pbXBvcnQgeyBkZWNvZGVKU09OIH0gZnJvbSAnLi4vLi4vLi4vZW5jb2RpbmcvZW5jb2RpbmcuanMnO1xuaW1wb3J0IHsgQWNjb3VudCB9IGZyb20gJy4vbW9kZWxzL3R5cGVzLmpzJztcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFjY291bnRJbmZvcm1hdGlvbiBleHRlbmRzIEpTT05SZXF1ZXN0IHtcbiAgICBjb25zdHJ1Y3RvcihjLCBhY2NvdW50KSB7XG4gICAgICAgIHN1cGVyKGMpO1xuICAgICAgICB0aGlzLmFjY291bnQgPSBhY2NvdW50LnRvU3RyaW5nKCk7XG4gICAgfVxuICAgIHBhdGgoKSB7XG4gICAgICAgIHJldHVybiBgL3YyL2FjY291bnRzLyR7dGhpcy5hY2NvdW50fWA7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEV4Y2x1ZGUgYXNzZXRzIGFuZCBhcHBsaWNhdGlvbiBkYXRhIGZyb20gcmVzdWx0c1xuICAgICAqXG4gICAgICogIyMjIyBFeGFtcGxlXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IGFkZHJlc3MgPSBcIlhCWUxTMkU2WUk2WFhMNUJXQ0FNT0E0R1RXSFhXRU5aTVg1VUhYTVJOV1dVUTdCWENZNVdDNVRFUEFcIjtcbiAgICAgKiBjb25zdCBhY2NvdW50SW5mbyA9IGF3YWl0IGFsZ29kQ2xpZW50LmFjY291bnRJbmZvcm1hdGlvbihhZGRyZXNzKVxuICAgICAqICAgICAgICAuZXhjbHVkZSgnYWxsJylcbiAgICAgKiAgICAgICAgLmRvKCk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcm91bmRcbiAgICAgKiBAY2F0ZWdvcnkgcXVlcnlcbiAgICAgKi9cbiAgICBleGNsdWRlKGV4Y2x1ZGUpIHtcbiAgICAgICAgdGhpcy5xdWVyeS5leGNsdWRlID0gZXhjbHVkZTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjbGFzcy1tZXRob2RzLXVzZS10aGlzXG4gICAgcHJlcGFyZShyZXNwb25zZSkge1xuICAgICAgICByZXR1cm4gZGVjb2RlSlNPTihyZXNwb25zZS5nZXRKU09OVGV4dCgpLCBBY2NvdW50KTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hY2NvdW50SW5mb3JtYXRpb24uanMubWFwIl0sIm5hbWVzIjpbIkpTT05SZXF1ZXN0IiwiZGVjb2RlSlNPTiIsIkFjY291bnQiLCJBY2NvdW50SW5mb3JtYXRpb24iLCJjb25zdHJ1Y3RvciIsImMiLCJhY2NvdW50IiwidG9TdHJpbmciLCJwYXRoIiwiZXhjbHVkZSIsInF1ZXJ5IiwicHJlcGFyZSIsInJlc3BvbnNlIiwiZ2V0SlNPTlRleHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/accountInformation.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/algod.js":
/*!****************************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/client/v2/algod/algod.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AlgodClient: () => (/* binding */ AlgodClient)\n/* harmony export */ });\n/* harmony import */ var _serviceClient_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../serviceClient.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/serviceClient.js\");\n/* harmony import */ var _models_types_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./models/types.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/models/types.js\");\n/* harmony import */ var _accountInformation_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./accountInformation.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/accountInformation.js\");\n/* harmony import */ var _accountAssetInformation_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./accountAssetInformation.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/accountAssetInformation.js\");\n/* harmony import */ var _accountApplicationInformation_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./accountApplicationInformation.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/accountApplicationInformation.js\");\n/* harmony import */ var _block_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./block.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/block.js\");\n/* harmony import */ var _compile_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./compile.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/compile.js\");\n/* harmony import */ var _dryrun_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./dryrun.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/dryrun.js\");\n/* harmony import */ var _genesis_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./genesis.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/genesis.js\");\n/* harmony import */ var _getAssetByID_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./getAssetByID.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/getAssetByID.js\");\n/* harmony import */ var _getApplicationByID_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./getApplicationByID.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/getApplicationByID.js\");\n/* harmony import */ var _getBlockHash_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./getBlockHash.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/getBlockHash.js\");\n/* harmony import */ var _getBlockTxids_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./getBlockTxids.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/getBlockTxids.js\");\n/* harmony import */ var _getApplicationBoxByName_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./getApplicationBoxByName.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/getApplicationBoxByName.js\");\n/* harmony import */ var _getApplicationBoxes_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./getApplicationBoxes.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/getApplicationBoxes.js\");\n/* harmony import */ var _healthCheck_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./healthCheck.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/healthCheck.js\");\n/* harmony import */ var _pendingTransactionInformation_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./pendingTransactionInformation.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/pendingTransactionInformation.js\");\n/* harmony import */ var _pendingTransactions_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./pendingTransactions.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/pendingTransactions.js\");\n/* harmony import */ var _pendingTransactionsByAddress_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./pendingTransactionsByAddress.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/pendingTransactionsByAddress.js\");\n/* harmony import */ var _getTransactionProof_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./getTransactionProof.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/getTransactionProof.js\");\n/* harmony import */ var _sendRawTransaction_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./sendRawTransaction.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/sendRawTransaction.js\");\n/* harmony import */ var _status_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./status.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/status.js\");\n/* harmony import */ var _statusAfterBlock_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./statusAfterBlock.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/statusAfterBlock.js\");\n/* harmony import */ var _suggestedParams_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./suggestedParams.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/suggestedParams.js\");\n/* harmony import */ var _supply_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./supply.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/supply.js\");\n/* harmony import */ var _versions_js__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./versions.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/versions.js\");\n/* harmony import */ var _lightBlockHeaderProof_js__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./lightBlockHeaderProof.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/lightBlockHeaderProof.js\");\n/* harmony import */ var _stateproof_js__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./stateproof.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/stateproof.js\");\n/* harmony import */ var _setSyncRound_js__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./setSyncRound.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/setSyncRound.js\");\n/* harmony import */ var _getSyncRound_js__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./getSyncRound.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/getSyncRound.js\");\n/* harmony import */ var _setBlockOffsetTimestamp_js__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./setBlockOffsetTimestamp.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/setBlockOffsetTimestamp.js\");\n/* harmony import */ var _getBlockOffsetTimestamp_js__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./getBlockOffsetTimestamp.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/getBlockOffsetTimestamp.js\");\n/* harmony import */ var _disassemble_js__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./disassemble.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/disassemble.js\");\n/* harmony import */ var _simulateTransaction_js__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./simulateTransaction.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/simulateTransaction.js\");\n/* harmony import */ var _signedTransaction_js__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ../../../signedTransaction.js */ \"(ssr)/./node_modules/algosdk/dist/esm/signedTransaction.js\");\n/* harmony import */ var _encoding_encoding_js__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ../../../encoding/encoding.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/encoding.js\");\n/* harmony import */ var _ready_js__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ./ready.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/ready.js\");\n/* harmony import */ var _unsetSyncRound_js__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! ./unsetSyncRound.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/unsetSyncRound.js\");\n/* harmony import */ var _getLedgerStateDeltaForTransactionGroup_js__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! ./getLedgerStateDeltaForTransactionGroup.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/getLedgerStateDeltaForTransactionGroup.js\");\n/* harmony import */ var _getLedgerStateDelta_js__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! ./getLedgerStateDelta.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/getLedgerStateDelta.js\");\n/* harmony import */ var _getTransactionGroupLedgerStateDeltasForRound_js__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! ./getTransactionGroupLedgerStateDeltasForRound.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/getTransactionGroupLedgerStateDeltasForRound.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Algod client connects an application to the Algorand blockchain. The algod client requires a valid algod REST endpoint IP address and algod token from an Algorand node that is connected to the network you plan to interact with.\n *\n * Algod is the main Algorand process for handling the blockchain. Messages between nodes are processed, the protocol steps are executed, and the blocks are written to disk. The algod process also exposes a REST API server that developers can use to communicate with the node and the network. Algod uses the data directory for storage and configuration information.\n *\n * #### Relevant Information\n * [How do I obtain an algod address and token?](https://developer.algorand.org/docs/archive/build-apps/setup/?from_query=algod#how-do-i-obtain-an-algod-address-and-token)\n *\n * [Run Algod in Postman OAS3](https://developer.algorand.org/docs/rest-apis/restendpoints/?from_query=algod#algod-indexer-and-kmd-rest-endpoints)\n */ class AlgodClient extends _serviceClient_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Create an AlgodClient from\n     * * either a token, baseServer, port, and optional headers\n     * * or a base client server for interoperability with external dApp wallets\n     *\n     * #### Example\n     * ```typescript\n     * const token  = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\";\n     * const server = \"http://localhost\";\n     * const port   = 4001;\n     * const algodClient = new algosdk.Algodv2(token, server, port);\n     * ```\n     * @remarks\n     * The above configuration is for a sandbox private network.\n     * For applications on production, you are encouraged to run your own node, or use an Algorand REST API provider with a dedicated API key.\n     *\n     * @param tokenOrBaseClient - The algod token from the Algorand node you are interacting with\n     * @param baseServer - REST endpoint\n     * @param port - Port number if specifically configured by the server\n     * @param headers - Optional headers\n     */ constructor(tokenOrBaseClient, baseServer, port, headers = {}){\n        super(\"X-Algo-API-Token\", tokenOrBaseClient, baseServer, port, headers);\n    }\n    /**\n     * Returns OK if healthy.\n     *\n     * #### Example\n     * ```typescript\n     * await algodClient.healthCheck().do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-health)\n     * @category GET\n     */ healthCheck() {\n        return new _healthCheck_js__WEBPACK_IMPORTED_MODULE_15__[\"default\"](this.c);\n    }\n    /**\n     * Retrieves the supported API versions, binary build versions, and genesis information.\n     *\n     * #### Example\n     * ```typescript\n     * const versionsDetails = await algodClient.versionsCheck().do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-versions)\n     * @category GET\n     */ versionsCheck() {\n        return new _versions_js__WEBPACK_IMPORTED_MODULE_25__[\"default\"](this.c);\n    }\n    /**\n     * Broadcasts a raw transaction to the network.\n     *\n     * #### Example\n     * ```typescript\n     * const { txid } = await algodClient.sendRawTransaction(signedTxns).do();\n     * const result = await waitForConfirmation(algodClient, txid, 3);\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#post-v2transactions)\n     *\n     * @remarks\n     * Often used with {@linkcode waitForConfirmation}\n     * @param stxOrStxs - Signed transactions\n     * @category POST\n     */ sendRawTransaction(stxOrStxs) {\n        return new _sendRawTransaction_js__WEBPACK_IMPORTED_MODULE_20__[\"default\"](this.c, stxOrStxs);\n    }\n    /**\n     * Returns the given account's status, balance and spendable amounts.\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountInfo = await algodClient.accountInformation(address).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-v2accountsaddress)\n     * @param account - The address of the account to look up.\n     * @category GET\n     */ accountInformation(account) {\n        return new _accountInformation_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"](this.c, account);\n    }\n    /**\n     * Returns the given account's asset information for a specific asset.\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const index = 60553466;\n     * const accountAssetInfo = await algodClient.accountAssetInformation(address, index).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-v2accountsaddress)\n     * @param account - The address of the account to look up.\n     * @param index - The asset ID to look up.\n     * @category GET\n     */ accountAssetInformation(account, index) {\n        return new _accountAssetInformation_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"](this.c, account, index);\n    }\n    /**\n     * Returns the given account's application information for a specific application.\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const index = 60553466;\n     * const accountInfo = await algodClient.accountApplicationInformation(address, index).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-v2accountsaddress)\n     * @param account - The address of the account to look up.\n     * @param index - The application ID to look up.\n     * @category GET\n     */ accountApplicationInformation(account, index) {\n        return new _accountApplicationInformation_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"](this.c, account, index);\n    }\n    /**\n     * Gets the block info for the given round.\n     *\n     * #### Example\n     * ```typescript\n     * const roundNumber = 18038133;\n     * const block = await algodClient.block(roundNumber).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-v2blocksround)\n     * @param roundNumber - The round number of the block to get.\n     * @category GET\n     */ block(roundNumber) {\n        return new _block_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"](this.c, roundNumber);\n    }\n    /**\n     * Get the block hash for the block on the given round.\n     *\n     * #### Example\n     * ```typescript\n     * const roundNumber = 18038133;\n     * const block = await algodClient.getBlockHash(roundNumber).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-v2blocksroundhash)\n     * @param roundNumber - The round number of the block to get.\n     * @category GET\n     */ getBlockHash(roundNumber) {\n        return new _getBlockHash_js__WEBPACK_IMPORTED_MODULE_11__[\"default\"](this.c, roundNumber);\n    }\n    /**\n     * Get the top level transaction IDs for the block on the given round.\n     *\n     * #### Example\n     * ```typescript\n     * const roundNumber = 18038133;\n     * const block = await algodClient.getBlockTxids(roundNumber).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-v2blocksroundtxids)\n     * @param roundNumber - The round number of the block to get.\n     * @category GET\n     */ getBlockTxids(roundNumber) {\n        return new _getBlockTxids_js__WEBPACK_IMPORTED_MODULE_12__[\"default\"](this.c, roundNumber);\n    }\n    /**\n     * Returns the transaction information for a specific pending transaction.\n     *\n     * #### Example\n     * ```typescript\n     * const txId = \"DRJS6R745A7GFVMXEXWP4TGVDGKW7VILFTA7HC2BR2GRLHNY5CTA\";\n     * const pending = await algodClient.pendingTransactionInformation(txId).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-v2transactionspendingtxid)\n     *\n     * @remarks\n     * <br><br>\n     * There are several cases when this might succeed:\n     * - transaction committed (committed round > 0)\n     * - transaction still in the pool (committed round = 0, pool error = \"\")\n     * - transaction removed from pool due to error (committed round = 0, pool error != \"\")\n     *\n     * Or the transaction may have happened sufficiently long ago that the node no longer remembers it, and this will return an error.\n     *\n     * @param txid - The TxID string of the pending transaction to look up.\n     * @category GET\n     */ pendingTransactionInformation(txid) {\n        return new _pendingTransactionInformation_js__WEBPACK_IMPORTED_MODULE_16__[\"default\"](this.c, txid);\n    }\n    /**\n     * Returns the list of pending transactions in the pool, sorted by priority, in decreasing order, truncated at the end at MAX.\n     * If MAX = 0, returns all pending transactions.\n     *\n     * #### Example 1\n     * ```typescript\n     * const pendingTxns = await algodClient.pendingTransactionsInformation().do();\n     * ```\n     *\n     * #### Example 2\n     * ```typescript\n     * const maxTxns = 5;\n     * const pendingTxns = await algodClient\n     *     .pendingTransactionsInformation()\n     *     .max(maxTxns)\n     *     .do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-v2transactionspending)\n     * @category GET\n     */ pendingTransactionsInformation() {\n        return new _pendingTransactions_js__WEBPACK_IMPORTED_MODULE_17__[\"default\"](this.c);\n    }\n    /**\n     * Returns the list of pending transactions sent by the address, sorted by priority, in decreasing order, truncated at the end at MAX.\n     * If MAX = 0, returns all pending transactions.\n     *\n     * #### Example 1\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const pendingTxnsByAddr = await algodClient.pendingTransactionByAddress(address).do();\n     * ```\n     *\n     * #### Example 2\n     * ```typescript\n     * const maxTxns = 5;\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const pendingTxns = await algodClient\n     *     .pendingTransactionByAddress(address)\n     *     .max(maxTxns)\n     *     .do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-v2accountsaddresstransactionspending)\n     * @param address - The address of the sender.\n     * @category GET\n     */ pendingTransactionByAddress(address) {\n        return new _pendingTransactionsByAddress_js__WEBPACK_IMPORTED_MODULE_18__[\"default\"](this.c, address);\n    }\n    /**\n     * Retrieves the StatusResponse from the running node.\n     *\n     * #### Example\n     * ```typescript\n     * const status = await algodClient.status().do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-v2status)\n     * @category GET\n     */ status() {\n        return new _status_js__WEBPACK_IMPORTED_MODULE_21__[\"default\"](this.c);\n    }\n    /**\n     * Waits for a specific round to occur then returns the `StatusResponse` for that round.\n     *\n     * #### Example\n     * ```typescript\n     * const round = 18038133;\n     * const statusAfterBlock = await algodClient.statusAfterBlock(round).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-v2statuswait-for-block-afterround)\n     * @param round - The number of the round to wait for.\n     * @category GET\n     */ statusAfterBlock(round) {\n        return new _statusAfterBlock_js__WEBPACK_IMPORTED_MODULE_22__[\"default\"](this.c, round);\n    }\n    /**\n     * Returns the common needed parameters for a new transaction.\n     *\n     * #### Example\n     * ```typescript\n     * const suggestedParams = await algodClient.getTransactionParams().do();\n     * const amountInMicroAlgos = algosdk.algosToMicroalgos(2); // 2 Algos\n     * const unsignedTxn = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n     *   sender: senderAddress,\n     *   receiver: receiverAddress,\n     *   amount: amountInMicroAlgos,\n     *   suggestedParams: suggestedParams,\n     * });\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-v2transactionsparams)\n     *\n     * @remarks\n     * Often used with\n     * {@linkcode makePaymentTxnWithSuggestedParamsFromObject}, {@linkcode algosToMicroalgos}\n     * @category GET\n     */ getTransactionParams() {\n        return new _suggestedParams_js__WEBPACK_IMPORTED_MODULE_23__[\"default\"](this.c);\n    }\n    /**\n     * Returns the supply details for the specified node's ledger.\n     *\n     * #### Example\n     * ```typescript\n     * const supplyDetails = await algodClient.supply().do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-v2ledgersupply)\n     * @category GET\n     */ supply() {\n        return new _supply_js__WEBPACK_IMPORTED_MODULE_24__[\"default\"](this.c);\n    }\n    /**\n     * Compiles TEAL source code to binary, returns base64 encoded program bytes and base32 SHA512_256 hash of program bytes (Address style).\n     *\n     * #### Example\n     * ```typescript\n     * const source = \"TEAL SOURCE CODE\";\n     * const compiledSmartContract = await algodClient.compile(source).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#post-v2tealcompile)\n     * @remarks\n     * This endpoint is only enabled when a node's configuration file sets `EnableDeveloperAPI` to true.\n     * @param source\n     * @category POST\n     */ compile(source) {\n        return new _compile_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"](this.c, source);\n    }\n    /**\n     * Given the program bytes, return the TEAL source code in plain text.\n     *\n     * #### Example\n     * ```typescript\n     * const bytecode = \"TEAL bytecode\";\n     * const disassembledSource = await algodClient.disassemble(bytecode).do();\n     * ```\n     *\n     * @remarks This endpoint is only enabled when a node's configuration file sets EnableDeveloperAPI to true.\n     * @param source\n     */ disassemble(source) {\n        return new _disassemble_js__WEBPACK_IMPORTED_MODULE_32__[\"default\"](this.c, source);\n    }\n    /**\n     * Provides debugging information for a transaction (or group).\n     *\n     * Executes TEAL program(s) in context and returns debugging information about the execution. This endpoint is only enabled when a node's configureation file sets `EnableDeveloperAPI` to true.\n     *\n     * #### Example\n     * ```typescript\n     * const dryRunResult = await algodClient.dryrun(dr).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#post-v2tealdryrun)\n     * @param dr\n     * @category POST\n     */ dryrun(dr) {\n        return new _dryrun_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"](this.c, dr);\n    }\n    /**\n     * Given an asset ID, return asset information including creator, name, total supply and\n     * special addresses.\n     *\n     * #### Example\n     * ```typescript\n     * const asset_id = 163650;\n     * const asset = await algodClient.getAssetByID(asset_id).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-v2assetsasset-id)\n     * @param index - The asset ID to look up.\n     * @category GET\n     */ getAssetByID(index) {\n        return new _getAssetByID_js__WEBPACK_IMPORTED_MODULE_9__[\"default\"](this.c, index);\n    }\n    /**\n     * Given an application ID, return the application information including creator, approval\n     * and clear programs, global and local schemas, and global state.\n     *\n     * #### Example\n     * ```typescript\n     * const index = 60553466;\n     * const app = await algodClient.getApplicationByID(index).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-v2applicationsapplication-id)\n     * @param index - The application ID to look up.\n     * @category GET\n     */ getApplicationByID(index) {\n        return new _getApplicationByID_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"](this.c, index);\n    }\n    /**\n     * Given an application ID and the box name (key), return the value stored in the box.\n     *\n     * #### Example\n     * ```typescript\n     * const index = 60553466;\n     * const boxName = Buffer.from(\"foo\");\n     * const boxResponse = await algodClient.getApplicationBoxByName(index, boxName).do();\n     * const boxValue = boxResponse.value;\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-v2applicationsapplication-idbox)\n     * @param index - The application ID to look up.\n     * @category GET\n     */ getApplicationBoxByName(index, boxName) {\n        return new _getApplicationBoxByName_js__WEBPACK_IMPORTED_MODULE_13__[\"default\"](this.c, index, boxName);\n    }\n    /**\n     * Given an application ID, return all the box names associated with the app.\n     *\n     * #### Example\n     * ```typescript\n     * const index = 60553466;\n     * const boxesResponse = await algodClient.getApplicationBoxes(index).max(3).do();\n     * const boxNames = boxesResponse.boxes.map(box => box.name);\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-v2applicationsapplication-idboxes)\n     * @param index - The application ID to look up.\n     * @category GET\n     */ getApplicationBoxes(index) {\n        return new _getApplicationBoxes_js__WEBPACK_IMPORTED_MODULE_14__[\"default\"](this.c, index);\n    }\n    /**\n     * Returns the entire genesis file.\n     *\n     * #### Example\n     * ```typescript\n     * const genesis = await algodClient.genesis().do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-genesis)\n     * @category GET\n     */ genesis() {\n        return new _genesis_js__WEBPACK_IMPORTED_MODULE_8__[\"default\"](this.c);\n    }\n    /**\n     * Returns a Merkle proof for a given transaction in a block.\n     *\n     * #### Example\n     * ```typescript\n     * const round = 18038133;\n     * const txId = \"MEUOC4RQJB23CQZRFRKYEI6WBO73VTTPST5A7B3S5OKBUY6LFUDA\";\n     * const proof = await algodClient.getTransactionProof(round, txId).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-v2blocksroundtransactionstxidproof)\n     * @param round - The round in which the transaction appears.\n     * @param txID - The transaction ID for which to generate a proof.\n     * @category GET\n     */ getTransactionProof(round, txID) {\n        return new _getTransactionProof_js__WEBPACK_IMPORTED_MODULE_19__[\"default\"](this.c, round, txID);\n    }\n    /**\n     * Gets a proof for a given light block header inside a state proof commitment.\n     *\n     * #### Example\n     * ```typescript\n     * const round = 11111111;\n     * const lightBlockHeaderProof = await algodClient.getLightBlockHeaderProof(round).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/v2#get-v2blocksroundlightheaderproof)\n     * @param round\n     */ getLightBlockHeaderProof(round) {\n        return new _lightBlockHeaderProof_js__WEBPACK_IMPORTED_MODULE_26__[\"default\"](this.c, round);\n    }\n    /**\n     * Gets a state proof that covers a given round.\n     *\n     * #### Example\n     * ```typescript\n     * const round = 11111111;\n     * const stateProof = await algodClient.getStateProof(round).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/v2#get-v2stateproofsround)\n     * @param round\n     */ getStateProof(round) {\n        return new _stateproof_js__WEBPACK_IMPORTED_MODULE_27__[\"default\"](this.c, round);\n    }\n    /**\n     * Simulate a list of a signed transaction objects being sent to the network.\n     *\n     * #### Example\n     * ```typescript\n     * const txn1 = algosdk.makePaymentTxnWithSuggestedParamsFromObject(txn1Params);\n     * const txn2 = algosdk.makePaymentTxnWithSuggestedParamsFromObject(txn2Params);\n     * const txgroup = algosdk.assignGroupID([txn1, txn2]);\n     *\n     * // Actually sign the first transaction\n     * const signedTxn1 = txgroup[0].signTxn(senderSk).blob;\n     * // Simulate does not require signed transactions -- use this method to encode an unsigned transaction\n     * const signedTxn2 = algosdk.encodeUnsignedSimulateTransaction(txgroup[1]);\n     *\n     * const resp = await client.simulateRawTransactions([signedTxn1, signedTxn2]).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#post-v2transactionssimulate)\n     * @param stxOrStxs\n     * @category POST\n     */ simulateRawTransactions(stxOrStxs) {\n        const txnObjects = [];\n        if (Array.isArray(stxOrStxs)) {\n            for (const stxn of stxOrStxs){\n                txnObjects.push(_encoding_encoding_js__WEBPACK_IMPORTED_MODULE_35__.decodeMsgpack(stxn, _signedTransaction_js__WEBPACK_IMPORTED_MODULE_34__.SignedTransaction));\n            }\n        } else {\n            txnObjects.push(_encoding_encoding_js__WEBPACK_IMPORTED_MODULE_35__.decodeMsgpack(stxOrStxs, _signedTransaction_js__WEBPACK_IMPORTED_MODULE_34__.SignedTransaction));\n        }\n        const request = new _models_types_js__WEBPACK_IMPORTED_MODULE_1__.SimulateRequest({\n            txnGroups: [\n                new _models_types_js__WEBPACK_IMPORTED_MODULE_1__.SimulateRequestTransactionGroup({\n                    txns: txnObjects\n                })\n            ]\n        });\n        return this.simulateTransactions(request);\n    }\n    /**\n     * Simulate transactions being sent to the network.\n     *\n     * #### Example\n     * ```typescript\n     * const txn1 = algosdk.makePaymentTxnWithSuggestedParamsFromObject(txn1Params);\n     * const txn2 = algosdk.makePaymentTxnWithSuggestedParamsFromObject(txn2Params);\n     * const txgroup = algosdk.assignGroupID([txn1, txn2]);\n     *\n     * // Actually sign the first transaction\n     * const signedTxn1 = txgroup[0].signTxn(senderSk).blob;\n     * // Simulate does not require signed transactions -- use this method to encode an unsigned transaction\n     * const signedTxn2 = algosdk.encodeUnsignedSimulateTransaction(txgroup[1]);\n     *\n     * const request = new modelsv2.SimulateRequest({\n     *  txnGroups: [\n     *    new modelsv2.SimulateRequestTransactionGroup({\n     *       // Must decode the signed txn bytes into an object\n     *       txns: [algosdk.decodeObj(signedTxn1), algosdk.decodeObj(signedTxn2)]\n     *     }),\n     *   ],\n     * });\n     * const resp = await client.simulateRawTransactions(request).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#post-v2transactionssimulate)\n     * @param request\n     * @category POST\n     */ simulateTransactions(request) {\n        return new _simulateTransaction_js__WEBPACK_IMPORTED_MODULE_33__[\"default\"](this.c, request);\n    }\n    /**\n     * Set the offset (in seconds) applied to the block timestamp when creating new blocks in devmode.\n     *\n     *  #### Example\n     *  ```typesecript\n     *  const offset = 60\n     *  await client.setBlockOffsetTimestamp(offset).do();\n     *  ```\n     *\n     [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#post-v2devmodeblocksoffsetoffset)\n     * @param offset\n     * @category POST\n     */ setBlockOffsetTimestamp(offset) {\n        return new _setBlockOffsetTimestamp_js__WEBPACK_IMPORTED_MODULE_30__[\"default\"](this.c, offset);\n    }\n    /**\n     * Get the offset (in seconds) applied to the block timestamp when creating new blocks in devmode.\n     *\n     *  #### Example\n     *  ```typesecript\n     *  const currentOffset = await client.getBlockOffsetTimestamp().do();\n     *  ```\n     *\n     [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-v2devmodeblocksoffset)\n     * @category GET\n     */ getBlockOffsetTimestamp() {\n        return new _getBlockOffsetTimestamp_js__WEBPACK_IMPORTED_MODULE_31__[\"default\"](this.c);\n    }\n    /**\n     * Set the sync round on the ledger (algod must have EnableFollowMode: true), restricting catchup.\n     *\n     *  #### Example\n     *  ```typesecript\n     *  const round = 10000\n     *  await client.setSyncRound(round).do();\n     *  ```\n     *\n     [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#post-v2ledgersyncround)\n     * @param round\n     * @category POST\n     */ setSyncRound(round) {\n        return new _setSyncRound_js__WEBPACK_IMPORTED_MODULE_28__[\"default\"](this.c, round);\n    }\n    /**\n     * Un-Set the sync round on the ledger (algod must have EnableFollowMode: true), removing the restriction on catchup.\n     *\n     *  #### Example\n     *  ```typesecript\n     *  await client.unsetSyncRound().do();\n     *  ```\n     *\n     [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#delete-v2ledgersync)\n     * @category DELETE\n     */ unsetSyncRound() {\n        return new _unsetSyncRound_js__WEBPACK_IMPORTED_MODULE_37__[\"default\"](this.c);\n    }\n    /**\n     * Get the current sync round on the ledger (algod must have EnableFollowMode: true).\n     *\n     *  #### Example\n     *  ```typesecript\n     *  const currentSyncRound = await client.getSyncRound().do();\n     *  ```\n     *\n     [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-v2ledgersync)\n     * @category GET\n     */ getSyncRound() {\n        return new _getSyncRound_js__WEBPACK_IMPORTED_MODULE_29__[\"default\"](this.c);\n    }\n    /**\n     * Ready check which returns 200 OK if algod is healthy and caught up\n     *\n     *  #### Example\n     *  ```typesecript\n     *  await client.ready().do();\n     *  ```\n     *\n     [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-ready)\n     * @category GET\n     */ ready() {\n        return new _ready_js__WEBPACK_IMPORTED_MODULE_36__[\"default\"](this.c);\n    }\n    /**\n     * GetLedgerStateDeltaForTransactionGroup returns the ledger delta for the txn group identified by id\n     *\n     * #### Example\n     * ```typescript\n     * const id = \"ABC123\";\n     * await client.getLedgerStateDeltaForTransactionGroup(id).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-v2deltastxngroupid)\n     * @param id txn ID or group ID to be searched for\n     * @category GET\n     */ getLedgerStateDeltaForTransactionGroup(id) {\n        return new _getLedgerStateDeltaForTransactionGroup_js__WEBPACK_IMPORTED_MODULE_38__[\"default\"](this.c, id);\n    }\n    /**\n     * GetLedgerStateDelta returns the ledger delta for the entire round\n     *\n     * #### Example\n     * ```typescript\n     * const round = 12345;\n     * await client.getLedgerStateDelta(round).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-v2deltasround)\n     * @param round the round number to be searched for\n     * @category GET\n     */ getLedgerStateDelta(round) {\n        return new _getLedgerStateDelta_js__WEBPACK_IMPORTED_MODULE_39__[\"default\"](this.c, round);\n    }\n    /**\n     * GetTransactionGroupLedgerStateDeltasForRound returns all ledger deltas for txn groups in the provided round\n     *\n     * #### Example\n     * ```typescript\n     * const round = 12345;\n     * await client.getTransactionGroupLedgerStateDeltasForRound(round).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-v2deltasroundtxngroup)\n     * @param round the round number to be searched for\n     * @category GET\n     */ getTransactionGroupLedgerStateDeltasForRound(round) {\n        return new _getTransactionGroupLedgerStateDeltasForRound_js__WEBPACK_IMPORTED_MODULE_40__[\"default\"](this.c, round);\n    }\n} //# sourceMappingURL=algod.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/algod.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/block.js":
/*!****************************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/client/v2/algod/block.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Block)\n/* harmony export */ });\n/* harmony import */ var _jsonrequest_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../jsonrequest.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/jsonrequest.js\");\n/* harmony import */ var _encoding_encoding_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../encoding/encoding.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/encoding.js\");\n/* harmony import */ var _models_types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./models/types.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/models/types.js\");\n\n\n\n/**\n * block gets the block info for the given round. this call may block\n */ class Block extends _jsonrequest_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(c, roundNumber){\n        super(c);\n        this.round = BigInt(roundNumber);\n        this.query = {\n            format: \"msgpack\"\n        };\n    }\n    path() {\n        return `/v2/blocks/${this.round}`;\n    }\n    /**\n     * If true, only the block header (exclusive of payset or certificate) may be included in response.\n     *\n     * #### Example\n     * ```typescript\n     *\n     * const roundNumber = 41000000;\n     *\n     * const blockResponse = await algodClient\n     *        .block(roundNumber)\n     *        .headerOnly(true)\n     *        .do();\n     * ```\n     *\n     * @param headerOnly - the flag indicating whether exclusively return header in response\n     * @category query\n     */ headerOnly(headerOnly) {\n        this.query[\"header-only\"] = headerOnly;\n        return this;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    prepare(response) {\n        return (0,_encoding_encoding_js__WEBPACK_IMPORTED_MODULE_1__.decodeMsgpack)(response.body, _models_types_js__WEBPACK_IMPORTED_MODULE_2__.BlockResponse);\n    }\n} //# sourceMappingURL=block.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9jbGllbnQvdjIvYWxnb2QvYmxvY2suanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUE0QztBQUNrQjtBQUNaO0FBQ2xEOztDQUVDLEdBQ2MsTUFBTUcsY0FBY0gsdURBQVdBO0lBQzFDSSxZQUFZQyxDQUFDLEVBQUVDLFdBQVcsQ0FBRTtRQUN4QixLQUFLLENBQUNEO1FBQ04sSUFBSSxDQUFDRSxLQUFLLEdBQUdDLE9BQU9GO1FBQ3BCLElBQUksQ0FBQ0csS0FBSyxHQUFHO1lBQUVDLFFBQVE7UUFBVTtJQUNyQztJQUNBQyxPQUFPO1FBQ0gsT0FBTyxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUNKLEtBQUssQ0FBQyxDQUFDO0lBQ3JDO0lBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7S0FnQkMsR0FDREssV0FBV0EsVUFBVSxFQUFFO1FBQ25CLElBQUksQ0FBQ0gsS0FBSyxDQUFDLGNBQWMsR0FBR0c7UUFDNUIsT0FBTyxJQUFJO0lBQ2Y7SUFDQSxrREFBa0Q7SUFDbERDLFFBQVFDLFFBQVEsRUFBRTtRQUNkLE9BQU9iLG9FQUFhQSxDQUFDYSxTQUFTQyxJQUFJLEVBQUViLDJEQUFhQTtJQUNyRDtBQUNKLEVBQ0EsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWxnb3JhbmQtY3Jvd2RmdW5kaW5nLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vY2xpZW50L3YyL2FsZ29kL2Jsb2NrLmpzPzhhZmUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEpTT05SZXF1ZXN0IGZyb20gJy4uL2pzb25yZXF1ZXN0LmpzJztcbmltcG9ydCB7IGRlY29kZU1zZ3BhY2sgfSBmcm9tICcuLi8uLi8uLi9lbmNvZGluZy9lbmNvZGluZy5qcyc7XG5pbXBvcnQgeyBCbG9ja1Jlc3BvbnNlIH0gZnJvbSAnLi9tb2RlbHMvdHlwZXMuanMnO1xuLyoqXG4gKiBibG9jayBnZXRzIHRoZSBibG9jayBpbmZvIGZvciB0aGUgZ2l2ZW4gcm91bmQuIHRoaXMgY2FsbCBtYXkgYmxvY2tcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQmxvY2sgZXh0ZW5kcyBKU09OUmVxdWVzdCB7XG4gICAgY29uc3RydWN0b3IoYywgcm91bmROdW1iZXIpIHtcbiAgICAgICAgc3VwZXIoYyk7XG4gICAgICAgIHRoaXMucm91bmQgPSBCaWdJbnQocm91bmROdW1iZXIpO1xuICAgICAgICB0aGlzLnF1ZXJ5ID0geyBmb3JtYXQ6ICdtc2dwYWNrJyB9O1xuICAgIH1cbiAgICBwYXRoKCkge1xuICAgICAgICByZXR1cm4gYC92Mi9ibG9ja3MvJHt0aGlzLnJvdW5kfWA7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIElmIHRydWUsIG9ubHkgdGhlIGJsb2NrIGhlYWRlciAoZXhjbHVzaXZlIG9mIHBheXNldCBvciBjZXJ0aWZpY2F0ZSkgbWF5IGJlIGluY2x1ZGVkIGluIHJlc3BvbnNlLlxuICAgICAqXG4gICAgICogIyMjIyBFeGFtcGxlXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqXG4gICAgICogY29uc3Qgcm91bmROdW1iZXIgPSA0MTAwMDAwMDtcbiAgICAgKlxuICAgICAqIGNvbnN0IGJsb2NrUmVzcG9uc2UgPSBhd2FpdCBhbGdvZENsaWVudFxuICAgICAqICAgICAgICAuYmxvY2socm91bmROdW1iZXIpXG4gICAgICogICAgICAgIC5oZWFkZXJPbmx5KHRydWUpXG4gICAgICogICAgICAgIC5kbygpO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQHBhcmFtIGhlYWRlck9ubHkgLSB0aGUgZmxhZyBpbmRpY2F0aW5nIHdoZXRoZXIgZXhjbHVzaXZlbHkgcmV0dXJuIGhlYWRlciBpbiByZXNwb25zZVxuICAgICAqIEBjYXRlZ29yeSBxdWVyeVxuICAgICAqL1xuICAgIGhlYWRlck9ubHkoaGVhZGVyT25seSkge1xuICAgICAgICB0aGlzLnF1ZXJ5WydoZWFkZXItb25seSddID0gaGVhZGVyT25seTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjbGFzcy1tZXRob2RzLXVzZS10aGlzXG4gICAgcHJlcGFyZShyZXNwb25zZSkge1xuICAgICAgICByZXR1cm4gZGVjb2RlTXNncGFjayhyZXNwb25zZS5ib2R5LCBCbG9ja1Jlc3BvbnNlKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ibG9jay5qcy5tYXAiXSwibmFtZXMiOlsiSlNPTlJlcXVlc3QiLCJkZWNvZGVNc2dwYWNrIiwiQmxvY2tSZXNwb25zZSIsIkJsb2NrIiwiY29uc3RydWN0b3IiLCJjIiwicm91bmROdW1iZXIiLCJyb3VuZCIsIkJpZ0ludCIsInF1ZXJ5IiwiZm9ybWF0IiwicGF0aCIsImhlYWRlck9ubHkiLCJwcmVwYXJlIiwicmVzcG9uc2UiLCJib2R5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/block.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/compile.js":
/*!******************************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/client/v2/algod/compile.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Compile),\n/* harmony export */   setHeaders: () => (/* binding */ setHeaders)\n/* harmony export */ });\n/* harmony import */ var _encoding_binarydata_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../encoding/binarydata.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/binarydata.js\");\n/* harmony import */ var _encoding_encoding_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../encoding/encoding.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/encoding.js\");\n/* harmony import */ var _models_types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./models/types.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/models/types.js\");\n/* harmony import */ var _jsonrequest_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../jsonrequest.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/jsonrequest.js\");\n\n\n\n\n/**\n * Sets the default header (if not previously set)\n * @param headers - A headers object\n */ function setHeaders(headers = {}) {\n    let hdrs = headers;\n    if (Object.keys(hdrs).every((key)=>key.toLowerCase() !== \"content-type\")) {\n        hdrs = {\n            ...headers\n        };\n        hdrs[\"Content-Type\"] = \"text/plain\";\n    }\n    return hdrs;\n}\n/**\n * Executes compile\n */ class Compile extends _jsonrequest_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"] {\n    constructor(c, source){\n        super(c);\n        this.source = source;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    path() {\n        return `/v2/teal/compile`;\n    }\n    sourcemap(map = true) {\n        this.query.sourcemap = map;\n        return this;\n    }\n    executeRequest(headers, customOptions) {\n        const txHeaders = setHeaders(headers);\n        return this.c.post({\n            relativePath: this.path(),\n            data: (0,_encoding_binarydata_js__WEBPACK_IMPORTED_MODULE_0__.coerceToBytes)(this.source),\n            query: this.query,\n            requestHeaders: txHeaders,\n            customOptions\n        });\n    }\n    // eslint-disable-next-line class-methods-use-this\n    prepare(response) {\n        return (0,_encoding_encoding_js__WEBPACK_IMPORTED_MODULE_1__.decodeJSON)(response.getJSONText(), _models_types_js__WEBPACK_IMPORTED_MODULE_2__.CompileResponse);\n    }\n} //# sourceMappingURL=compile.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9jbGllbnQvdjIvYWxnb2QvY29tcGlsZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBZ0U7QUFDTDtBQUNQO0FBQ1I7QUFDNUM7OztDQUdDLEdBQ00sU0FBU0ksV0FBV0MsVUFBVSxDQUFDLENBQUM7SUFDbkMsSUFBSUMsT0FBT0Q7SUFDWCxJQUFJRSxPQUFPQyxJQUFJLENBQUNGLE1BQU1HLEtBQUssQ0FBQyxDQUFDQyxNQUFRQSxJQUFJQyxXQUFXLE9BQU8saUJBQWlCO1FBQ3hFTCxPQUFPO1lBQUUsR0FBR0QsT0FBTztRQUFDO1FBQ3BCQyxJQUFJLENBQUMsZUFBZSxHQUFHO0lBQzNCO0lBQ0EsT0FBT0E7QUFDWDtBQUNBOztDQUVDLEdBQ2MsTUFBTU0sZ0JBQWdCVCx1REFBV0E7SUFDNUNVLFlBQVlDLENBQUMsRUFBRUMsTUFBTSxDQUFFO1FBQ25CLEtBQUssQ0FBQ0Q7UUFDTixJQUFJLENBQUNDLE1BQU0sR0FBR0E7SUFDbEI7SUFDQSxrREFBa0Q7SUFDbERDLE9BQU87UUFDSCxPQUFPLENBQUMsZ0JBQWdCLENBQUM7SUFDN0I7SUFDQUMsVUFBVUMsTUFBTSxJQUFJLEVBQUU7UUFDbEIsSUFBSSxDQUFDQyxLQUFLLENBQUNGLFNBQVMsR0FBR0M7UUFDdkIsT0FBTyxJQUFJO0lBQ2Y7SUFDQUUsZUFBZWYsT0FBTyxFQUFFZ0IsYUFBYSxFQUFFO1FBQ25DLE1BQU1DLFlBQVlsQixXQUFXQztRQUM3QixPQUFPLElBQUksQ0FBQ1MsQ0FBQyxDQUFDUyxJQUFJLENBQUM7WUFDZkMsY0FBYyxJQUFJLENBQUNSLElBQUk7WUFDdkJTLE1BQU16QixzRUFBYUEsQ0FBQyxJQUFJLENBQUNlLE1BQU07WUFDL0JJLE9BQU8sSUFBSSxDQUFDQSxLQUFLO1lBQ2pCTyxnQkFBZ0JKO1lBQ2hCRDtRQUNKO0lBQ0o7SUFDQSxrREFBa0Q7SUFDbERNLFFBQVFDLFFBQVEsRUFBRTtRQUNkLE9BQU8zQixpRUFBVUEsQ0FBQzJCLFNBQVNDLFdBQVcsSUFBSTNCLDZEQUFlQTtJQUM3RDtBQUNKLEVBQ0EsbUNBQW1DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWxnb3JhbmQtY3Jvd2RmdW5kaW5nLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vY2xpZW50L3YyL2FsZ29kL2NvbXBpbGUuanM/YzZlNSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjb2VyY2VUb0J5dGVzIH0gZnJvbSAnLi4vLi4vLi4vZW5jb2RpbmcvYmluYXJ5ZGF0YS5qcyc7XG5pbXBvcnQgeyBkZWNvZGVKU09OIH0gZnJvbSAnLi4vLi4vLi4vZW5jb2RpbmcvZW5jb2RpbmcuanMnO1xuaW1wb3J0IHsgQ29tcGlsZVJlc3BvbnNlIH0gZnJvbSAnLi9tb2RlbHMvdHlwZXMuanMnO1xuaW1wb3J0IEpTT05SZXF1ZXN0IGZyb20gJy4uL2pzb25yZXF1ZXN0LmpzJztcbi8qKlxuICogU2V0cyB0aGUgZGVmYXVsdCBoZWFkZXIgKGlmIG5vdCBwcmV2aW91c2x5IHNldClcbiAqIEBwYXJhbSBoZWFkZXJzIC0gQSBoZWFkZXJzIG9iamVjdFxuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0SGVhZGVycyhoZWFkZXJzID0ge30pIHtcbiAgICBsZXQgaGRycyA9IGhlYWRlcnM7XG4gICAgaWYgKE9iamVjdC5rZXlzKGhkcnMpLmV2ZXJ5KChrZXkpID0+IGtleS50b0xvd2VyQ2FzZSgpICE9PSAnY29udGVudC10eXBlJykpIHtcbiAgICAgICAgaGRycyA9IHsgLi4uaGVhZGVycyB9O1xuICAgICAgICBoZHJzWydDb250ZW50LVR5cGUnXSA9ICd0ZXh0L3BsYWluJztcbiAgICB9XG4gICAgcmV0dXJuIGhkcnM7XG59XG4vKipcbiAqIEV4ZWN1dGVzIGNvbXBpbGVcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29tcGlsZSBleHRlbmRzIEpTT05SZXF1ZXN0IHtcbiAgICBjb25zdHJ1Y3RvcihjLCBzb3VyY2UpIHtcbiAgICAgICAgc3VwZXIoYyk7XG4gICAgICAgIHRoaXMuc291cmNlID0gc291cmNlO1xuICAgIH1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY2xhc3MtbWV0aG9kcy11c2UtdGhpc1xuICAgIHBhdGgoKSB7XG4gICAgICAgIHJldHVybiBgL3YyL3RlYWwvY29tcGlsZWA7XG4gICAgfVxuICAgIHNvdXJjZW1hcChtYXAgPSB0cnVlKSB7XG4gICAgICAgIHRoaXMucXVlcnkuc291cmNlbWFwID0gbWFwO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgZXhlY3V0ZVJlcXVlc3QoaGVhZGVycywgY3VzdG9tT3B0aW9ucykge1xuICAgICAgICBjb25zdCB0eEhlYWRlcnMgPSBzZXRIZWFkZXJzKGhlYWRlcnMpO1xuICAgICAgICByZXR1cm4gdGhpcy5jLnBvc3Qoe1xuICAgICAgICAgICAgcmVsYXRpdmVQYXRoOiB0aGlzLnBhdGgoKSxcbiAgICAgICAgICAgIGRhdGE6IGNvZXJjZVRvQnl0ZXModGhpcy5zb3VyY2UpLFxuICAgICAgICAgICAgcXVlcnk6IHRoaXMucXVlcnksXG4gICAgICAgICAgICByZXF1ZXN0SGVhZGVyczogdHhIZWFkZXJzLFxuICAgICAgICAgICAgY3VzdG9tT3B0aW9ucyxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjbGFzcy1tZXRob2RzLXVzZS10aGlzXG4gICAgcHJlcGFyZShyZXNwb25zZSkge1xuICAgICAgICByZXR1cm4gZGVjb2RlSlNPTihyZXNwb25zZS5nZXRKU09OVGV4dCgpLCBDb21waWxlUmVzcG9uc2UpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbXBpbGUuanMubWFwIl0sIm5hbWVzIjpbImNvZXJjZVRvQnl0ZXMiLCJkZWNvZGVKU09OIiwiQ29tcGlsZVJlc3BvbnNlIiwiSlNPTlJlcXVlc3QiLCJzZXRIZWFkZXJzIiwiaGVhZGVycyIsImhkcnMiLCJPYmplY3QiLCJrZXlzIiwiZXZlcnkiLCJrZXkiLCJ0b0xvd2VyQ2FzZSIsIkNvbXBpbGUiLCJjb25zdHJ1Y3RvciIsImMiLCJzb3VyY2UiLCJwYXRoIiwic291cmNlbWFwIiwibWFwIiwicXVlcnkiLCJleGVjdXRlUmVxdWVzdCIsImN1c3RvbU9wdGlvbnMiLCJ0eEhlYWRlcnMiLCJwb3N0IiwicmVsYXRpdmVQYXRoIiwiZGF0YSIsInJlcXVlc3RIZWFkZXJzIiwicHJlcGFyZSIsInJlc3BvbnNlIiwiZ2V0SlNPTlRleHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/compile.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/disassemble.js":
/*!**********************************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/client/v2/algod/disassemble.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Disassemble),\n/* harmony export */   setHeaders: () => (/* binding */ setHeaders)\n/* harmony export */ });\n/* harmony import */ var _encoding_binarydata_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../encoding/binarydata.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/binarydata.js\");\n/* harmony import */ var _encoding_encoding_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../encoding/encoding.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/encoding.js\");\n/* harmony import */ var _models_types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./models/types.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/models/types.js\");\n/* harmony import */ var _jsonrequest_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../jsonrequest.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/jsonrequest.js\");\n\n\n\n\n/**\n * Sets the default header (if not previously set)\n * @param headers - A headers object\n */ function setHeaders(headers = {}) {\n    let hdrs = headers;\n    if (Object.keys(hdrs).every((key)=>key.toLowerCase() !== \"content-type\")) {\n        hdrs = {\n            ...headers\n        };\n        hdrs[\"Content-Type\"] = \"text/plain\";\n    }\n    return hdrs;\n}\n/**\n * Executes disassemble\n */ class Disassemble extends _jsonrequest_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"] {\n    constructor(c, source){\n        super(c);\n        this.source = source;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    path() {\n        return `/v2/teal/disassemble`;\n    }\n    executeRequest(headers, customOptions) {\n        const txHeaders = setHeaders(headers);\n        return this.c.post({\n            relativePath: this.path(),\n            data: (0,_encoding_binarydata_js__WEBPACK_IMPORTED_MODULE_0__.coerceToBytes)(this.source),\n            query: this.query,\n            requestHeaders: txHeaders,\n            customOptions\n        });\n    }\n    // eslint-disable-next-line class-methods-use-this\n    prepare(response) {\n        return (0,_encoding_encoding_js__WEBPACK_IMPORTED_MODULE_1__.decodeJSON)(response.getJSONText(), _models_types_js__WEBPACK_IMPORTED_MODULE_2__.DisassembleResponse);\n    }\n} //# sourceMappingURL=disassemble.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9jbGllbnQvdjIvYWxnb2QvZGlzYXNzZW1ibGUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQWdFO0FBQ0w7QUFDSDtBQUNaO0FBQzVDOzs7Q0FHQyxHQUNNLFNBQVNJLFdBQVdDLFVBQVUsQ0FBQyxDQUFDO0lBQ25DLElBQUlDLE9BQU9EO0lBQ1gsSUFBSUUsT0FBT0MsSUFBSSxDQUFDRixNQUFNRyxLQUFLLENBQUMsQ0FBQ0MsTUFBUUEsSUFBSUMsV0FBVyxPQUFPLGlCQUFpQjtRQUN4RUwsT0FBTztZQUFFLEdBQUdELE9BQU87UUFBQztRQUNwQkMsSUFBSSxDQUFDLGVBQWUsR0FBRztJQUMzQjtJQUNBLE9BQU9BO0FBQ1g7QUFDQTs7Q0FFQyxHQUNjLE1BQU1NLG9CQUFvQlQsdURBQVdBO0lBQ2hEVSxZQUFZQyxDQUFDLEVBQUVDLE1BQU0sQ0FBRTtRQUNuQixLQUFLLENBQUNEO1FBQ04sSUFBSSxDQUFDQyxNQUFNLEdBQUdBO0lBQ2xCO0lBQ0Esa0RBQWtEO0lBQ2xEQyxPQUFPO1FBQ0gsT0FBTyxDQUFDLG9CQUFvQixDQUFDO0lBQ2pDO0lBQ0FDLGVBQWVaLE9BQU8sRUFBRWEsYUFBYSxFQUFFO1FBQ25DLE1BQU1DLFlBQVlmLFdBQVdDO1FBQzdCLE9BQU8sSUFBSSxDQUFDUyxDQUFDLENBQUNNLElBQUksQ0FBQztZQUNmQyxjQUFjLElBQUksQ0FBQ0wsSUFBSTtZQUN2Qk0sTUFBTXRCLHNFQUFhQSxDQUFDLElBQUksQ0FBQ2UsTUFBTTtZQUMvQlEsT0FBTyxJQUFJLENBQUNBLEtBQUs7WUFDakJDLGdCQUFnQkw7WUFDaEJEO1FBQ0o7SUFDSjtJQUNBLGtEQUFrRDtJQUNsRE8sUUFBUUMsUUFBUSxFQUFFO1FBQ2QsT0FBT3pCLGlFQUFVQSxDQUFDeUIsU0FBU0MsV0FBVyxJQUFJekIsaUVBQW1CQTtJQUNqRTtBQUNKLEVBQ0EsdUNBQXVDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWxnb3JhbmQtY3Jvd2RmdW5kaW5nLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vY2xpZW50L3YyL2FsZ29kL2Rpc2Fzc2VtYmxlLmpzP2ZiZWUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY29lcmNlVG9CeXRlcyB9IGZyb20gJy4uLy4uLy4uL2VuY29kaW5nL2JpbmFyeWRhdGEuanMnO1xuaW1wb3J0IHsgZGVjb2RlSlNPTiB9IGZyb20gJy4uLy4uLy4uL2VuY29kaW5nL2VuY29kaW5nLmpzJztcbmltcG9ydCB7IERpc2Fzc2VtYmxlUmVzcG9uc2UgfSBmcm9tICcuL21vZGVscy90eXBlcy5qcyc7XG5pbXBvcnQgSlNPTlJlcXVlc3QgZnJvbSAnLi4vanNvbnJlcXVlc3QuanMnO1xuLyoqXG4gKiBTZXRzIHRoZSBkZWZhdWx0IGhlYWRlciAoaWYgbm90IHByZXZpb3VzbHkgc2V0KVxuICogQHBhcmFtIGhlYWRlcnMgLSBBIGhlYWRlcnMgb2JqZWN0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXRIZWFkZXJzKGhlYWRlcnMgPSB7fSkge1xuICAgIGxldCBoZHJzID0gaGVhZGVycztcbiAgICBpZiAoT2JqZWN0LmtleXMoaGRycykuZXZlcnkoKGtleSkgPT4ga2V5LnRvTG93ZXJDYXNlKCkgIT09ICdjb250ZW50LXR5cGUnKSkge1xuICAgICAgICBoZHJzID0geyAuLi5oZWFkZXJzIH07XG4gICAgICAgIGhkcnNbJ0NvbnRlbnQtVHlwZSddID0gJ3RleHQvcGxhaW4nO1xuICAgIH1cbiAgICByZXR1cm4gaGRycztcbn1cbi8qKlxuICogRXhlY3V0ZXMgZGlzYXNzZW1ibGVcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRGlzYXNzZW1ibGUgZXh0ZW5kcyBKU09OUmVxdWVzdCB7XG4gICAgY29uc3RydWN0b3IoYywgc291cmNlKSB7XG4gICAgICAgIHN1cGVyKGMpO1xuICAgICAgICB0aGlzLnNvdXJjZSA9IHNvdXJjZTtcbiAgICB9XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNsYXNzLW1ldGhvZHMtdXNlLXRoaXNcbiAgICBwYXRoKCkge1xuICAgICAgICByZXR1cm4gYC92Mi90ZWFsL2Rpc2Fzc2VtYmxlYDtcbiAgICB9XG4gICAgZXhlY3V0ZVJlcXVlc3QoaGVhZGVycywgY3VzdG9tT3B0aW9ucykge1xuICAgICAgICBjb25zdCB0eEhlYWRlcnMgPSBzZXRIZWFkZXJzKGhlYWRlcnMpO1xuICAgICAgICByZXR1cm4gdGhpcy5jLnBvc3Qoe1xuICAgICAgICAgICAgcmVsYXRpdmVQYXRoOiB0aGlzLnBhdGgoKSxcbiAgICAgICAgICAgIGRhdGE6IGNvZXJjZVRvQnl0ZXModGhpcy5zb3VyY2UpLFxuICAgICAgICAgICAgcXVlcnk6IHRoaXMucXVlcnksXG4gICAgICAgICAgICByZXF1ZXN0SGVhZGVyczogdHhIZWFkZXJzLFxuICAgICAgICAgICAgY3VzdG9tT3B0aW9ucyxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjbGFzcy1tZXRob2RzLXVzZS10aGlzXG4gICAgcHJlcGFyZShyZXNwb25zZSkge1xuICAgICAgICByZXR1cm4gZGVjb2RlSlNPTihyZXNwb25zZS5nZXRKU09OVGV4dCgpLCBEaXNhc3NlbWJsZVJlc3BvbnNlKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kaXNhc3NlbWJsZS5qcy5tYXAiXSwibmFtZXMiOlsiY29lcmNlVG9CeXRlcyIsImRlY29kZUpTT04iLCJEaXNhc3NlbWJsZVJlc3BvbnNlIiwiSlNPTlJlcXVlc3QiLCJzZXRIZWFkZXJzIiwiaGVhZGVycyIsImhkcnMiLCJPYmplY3QiLCJrZXlzIiwiZXZlcnkiLCJrZXkiLCJ0b0xvd2VyQ2FzZSIsIkRpc2Fzc2VtYmxlIiwiY29uc3RydWN0b3IiLCJjIiwic291cmNlIiwicGF0aCIsImV4ZWN1dGVSZXF1ZXN0IiwiY3VzdG9tT3B0aW9ucyIsInR4SGVhZGVycyIsInBvc3QiLCJyZWxhdGl2ZVBhdGgiLCJkYXRhIiwicXVlcnkiLCJyZXF1ZXN0SGVhZGVycyIsInByZXBhcmUiLCJyZXNwb25zZSIsImdldEpTT05UZXh0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/disassemble.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/dryrun.js":
/*!*****************************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/client/v2/algod/dryrun.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Dryrun)\n/* harmony export */ });\n/* harmony import */ var _encoding_encoding_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../encoding/encoding.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/encoding.js\");\n/* harmony import */ var _jsonrequest_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../jsonrequest.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/jsonrequest.js\");\n/* harmony import */ var _compile_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./compile.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/compile.js\");\n/* harmony import */ var _models_types_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./models/types.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/models/types.js\");\n\n\n\n\nclass Dryrun extends _jsonrequest_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"] {\n    constructor(c, dr){\n        super(c);\n        this.blob = (0,_encoding_encoding_js__WEBPACK_IMPORTED_MODULE_0__.encodeMsgpack)(dr);\n    }\n    // eslint-disable-next-line class-methods-use-this\n    path() {\n        return \"/v2/teal/dryrun\";\n    }\n    executeRequest(headers, customOptions) {\n        const txHeaders = (0,_compile_js__WEBPACK_IMPORTED_MODULE_2__.setHeaders)(headers);\n        return this.c.post({\n            relativePath: this.path(),\n            data: this.blob,\n            requestHeaders: txHeaders,\n            customOptions\n        });\n    }\n    // eslint-disable-next-line class-methods-use-this\n    prepare(response) {\n        return (0,_encoding_encoding_js__WEBPACK_IMPORTED_MODULE_0__.decodeJSON)(response.getJSONText(), _models_types_js__WEBPACK_IMPORTED_MODULE_3__.DryrunResponse);\n    }\n} //# sourceMappingURL=dryrun.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9jbGllbnQvdjIvYWxnb2QvZHJ5cnVuLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQTBFO0FBQzlCO0FBQ0Y7QUFDUztBQUNwQyxNQUFNSyxlQUFlSCx1REFBV0E7SUFDM0NJLFlBQVlDLENBQUMsRUFBRUMsRUFBRSxDQUFFO1FBQ2YsS0FBSyxDQUFDRDtRQUNOLElBQUksQ0FBQ0UsSUFBSSxHQUFHUixvRUFBYUEsQ0FBQ087SUFDOUI7SUFDQSxrREFBa0Q7SUFDbERFLE9BQU87UUFDSCxPQUFPO0lBQ1g7SUFDQUMsZUFBZUMsT0FBTyxFQUFFQyxhQUFhLEVBQUU7UUFDbkMsTUFBTUMsWUFBWVgsdURBQVVBLENBQUNTO1FBQzdCLE9BQU8sSUFBSSxDQUFDTCxDQUFDLENBQUNRLElBQUksQ0FBQztZQUNmQyxjQUFjLElBQUksQ0FBQ04sSUFBSTtZQUN2Qk8sTUFBTSxJQUFJLENBQUNSLElBQUk7WUFDZlMsZ0JBQWdCSjtZQUNoQkQ7UUFDSjtJQUNKO0lBQ0Esa0RBQWtEO0lBQ2xETSxRQUFRQyxRQUFRLEVBQUU7UUFDZCxPQUFPcEIsaUVBQVVBLENBQUNvQixTQUFTQyxXQUFXLElBQUlqQiw0REFBY0E7SUFDNUQ7QUFDSixFQUNBLGtDQUFrQyIsInNvdXJjZXMiOlsid2VicGFjazovL2FsZ29yYW5kLWNyb3dkZnVuZGluZy1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9hbGdvc2RrL2Rpc3QvZXNtL2NsaWVudC92Mi9hbGdvZC9kcnlydW4uanM/NDBiNiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBkZWNvZGVKU09OLCBlbmNvZGVNc2dwYWNrIH0gZnJvbSAnLi4vLi4vLi4vZW5jb2RpbmcvZW5jb2RpbmcuanMnO1xuaW1wb3J0IEpTT05SZXF1ZXN0IGZyb20gJy4uL2pzb25yZXF1ZXN0LmpzJztcbmltcG9ydCB7IHNldEhlYWRlcnMgfSBmcm9tICcuL2NvbXBpbGUuanMnO1xuaW1wb3J0IHsgRHJ5cnVuUmVzcG9uc2UgfSBmcm9tICcuL21vZGVscy90eXBlcy5qcyc7XG5leHBvcnQgZGVmYXVsdCBjbGFzcyBEcnlydW4gZXh0ZW5kcyBKU09OUmVxdWVzdCB7XG4gICAgY29uc3RydWN0b3IoYywgZHIpIHtcbiAgICAgICAgc3VwZXIoYyk7XG4gICAgICAgIHRoaXMuYmxvYiA9IGVuY29kZU1zZ3BhY2soZHIpO1xuICAgIH1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY2xhc3MtbWV0aG9kcy11c2UtdGhpc1xuICAgIHBhdGgoKSB7XG4gICAgICAgIHJldHVybiAnL3YyL3RlYWwvZHJ5cnVuJztcbiAgICB9XG4gICAgZXhlY3V0ZVJlcXVlc3QoaGVhZGVycywgY3VzdG9tT3B0aW9ucykge1xuICAgICAgICBjb25zdCB0eEhlYWRlcnMgPSBzZXRIZWFkZXJzKGhlYWRlcnMpO1xuICAgICAgICByZXR1cm4gdGhpcy5jLnBvc3Qoe1xuICAgICAgICAgICAgcmVsYXRpdmVQYXRoOiB0aGlzLnBhdGgoKSxcbiAgICAgICAgICAgIGRhdGE6IHRoaXMuYmxvYixcbiAgICAgICAgICAgIHJlcXVlc3RIZWFkZXJzOiB0eEhlYWRlcnMsXG4gICAgICAgICAgICBjdXN0b21PcHRpb25zLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNsYXNzLW1ldGhvZHMtdXNlLXRoaXNcbiAgICBwcmVwYXJlKHJlc3BvbnNlKSB7XG4gICAgICAgIHJldHVybiBkZWNvZGVKU09OKHJlc3BvbnNlLmdldEpTT05UZXh0KCksIERyeXJ1blJlc3BvbnNlKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kcnlydW4uanMubWFwIl0sIm5hbWVzIjpbImRlY29kZUpTT04iLCJlbmNvZGVNc2dwYWNrIiwiSlNPTlJlcXVlc3QiLCJzZXRIZWFkZXJzIiwiRHJ5cnVuUmVzcG9uc2UiLCJEcnlydW4iLCJjb25zdHJ1Y3RvciIsImMiLCJkciIsImJsb2IiLCJwYXRoIiwiZXhlY3V0ZVJlcXVlc3QiLCJoZWFkZXJzIiwiY3VzdG9tT3B0aW9ucyIsInR4SGVhZGVycyIsInBvc3QiLCJyZWxhdGl2ZVBhdGgiLCJkYXRhIiwicmVxdWVzdEhlYWRlcnMiLCJwcmVwYXJlIiwicmVzcG9uc2UiLCJnZXRKU09OVGV4dCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/dryrun.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/genesis.js":
/*!******************************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/client/v2/algod/genesis.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Genesis)\n/* harmony export */ });\n/* harmony import */ var _jsonrequest_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../jsonrequest.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/jsonrequest.js\");\n\nclass Genesis extends _jsonrequest_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    // eslint-disable-next-line class-methods-use-this\n    path() {\n        return \"/genesis\";\n    }\n    // eslint-disable-next-line class-methods-use-this\n    prepare(response) {\n        return response.getJSONText();\n    }\n} //# sourceMappingURL=genesis.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9jbGllbnQvdjIvYWxnb2QvZ2VuZXNpcy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUE0QztBQUM3QixNQUFNQyxnQkFBZ0JELHVEQUFXQTtJQUM1QyxrREFBa0Q7SUFDbERFLE9BQU87UUFDSCxPQUFPO0lBQ1g7SUFDQSxrREFBa0Q7SUFDbERDLFFBQVFDLFFBQVEsRUFBRTtRQUNkLE9BQU9BLFNBQVNDLFdBQVc7SUFDL0I7QUFDSixFQUNBLG1DQUFtQyIsInNvdXJjZXMiOlsid2VicGFjazovL2FsZ29yYW5kLWNyb3dkZnVuZGluZy1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9hbGdvc2RrL2Rpc3QvZXNtL2NsaWVudC92Mi9hbGdvZC9nZW5lc2lzLmpzP2Y3YjgiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEpTT05SZXF1ZXN0IGZyb20gJy4uL2pzb25yZXF1ZXN0LmpzJztcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEdlbmVzaXMgZXh0ZW5kcyBKU09OUmVxdWVzdCB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNsYXNzLW1ldGhvZHMtdXNlLXRoaXNcbiAgICBwYXRoKCkge1xuICAgICAgICByZXR1cm4gJy9nZW5lc2lzJztcbiAgICB9XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNsYXNzLW1ldGhvZHMtdXNlLXRoaXNcbiAgICBwcmVwYXJlKHJlc3BvbnNlKSB7XG4gICAgICAgIHJldHVybiByZXNwb25zZS5nZXRKU09OVGV4dCgpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdlbmVzaXMuanMubWFwIl0sIm5hbWVzIjpbIkpTT05SZXF1ZXN0IiwiR2VuZXNpcyIsInBhdGgiLCJwcmVwYXJlIiwicmVzcG9uc2UiLCJnZXRKU09OVGV4dCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/genesis.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/getApplicationBoxByName.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/client/v2/algod/getApplicationBoxByName.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ GetApplicationBoxByName)\n/* harmony export */ });\n/* harmony import */ var _encoding_binarydata_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../encoding/binarydata.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/binarydata.js\");\n/* harmony import */ var _encoding_encoding_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../encoding/encoding.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/encoding.js\");\n/* harmony import */ var _jsonrequest_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../jsonrequest.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/jsonrequest.js\");\n/* harmony import */ var _models_types_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./models/types.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/models/types.js\");\n\n\n\n\n/**\n * Given an application ID and the box name (key), return the value stored in the box.\n *\n * #### Example\n * ```typescript\n * const index = 60553466;\n * const boxName = Buffer.from(\"foo\");\n * const boxResponse = await algodClient.getApplicationBoxByName(index, boxName).do();\n * const boxValue = boxResponse.value;\n * ```\n *\n * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-v2applicationsapplication-idbox)\n * @param index - The application ID to look up.\n * @category GET\n */ class GetApplicationBoxByName extends _jsonrequest_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"] {\n    constructor(c, index, name){\n        super(c);\n        this.index = BigInt(index);\n        // Encode name in base64 format and append the encoding prefix.\n        const encodedName = (0,_encoding_binarydata_js__WEBPACK_IMPORTED_MODULE_0__.bytesToBase64)(name);\n        this.query.name = encodeURI(`b64:${encodedName}`);\n    }\n    /**\n     * @returns `/v2/applications/${index}/box`\n     */ path() {\n        return `/v2/applications/${this.index}/box`;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    prepare(response) {\n        return (0,_encoding_encoding_js__WEBPACK_IMPORTED_MODULE_1__.decodeJSON)(response.getJSONText(), _models_types_js__WEBPACK_IMPORTED_MODULE_3__.Box);\n    }\n} //# sourceMappingURL=getApplicationBoxByName.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9jbGllbnQvdjIvYWxnb2QvZ2V0QXBwbGljYXRpb25Cb3hCeU5hbWUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBZ0U7QUFDTDtBQUNmO0FBQ0o7QUFDeEM7Ozs7Ozs7Ozs7Ozs7O0NBY0MsR0FDYyxNQUFNSSxnQ0FBZ0NGLHVEQUFXQTtJQUM1REcsWUFBWUMsQ0FBQyxFQUFFQyxLQUFLLEVBQUVDLElBQUksQ0FBRTtRQUN4QixLQUFLLENBQUNGO1FBQ04sSUFBSSxDQUFDQyxLQUFLLEdBQUdFLE9BQU9GO1FBQ3BCLCtEQUErRDtRQUMvRCxNQUFNRyxjQUFjVixzRUFBYUEsQ0FBQ1E7UUFDbEMsSUFBSSxDQUFDRyxLQUFLLENBQUNILElBQUksR0FBR0ksVUFBVSxDQUFDLElBQUksRUFBRUYsWUFBWSxDQUFDO0lBQ3BEO0lBQ0E7O0tBRUMsR0FDREcsT0FBTztRQUNILE9BQU8sQ0FBQyxpQkFBaUIsRUFBRSxJQUFJLENBQUNOLEtBQUssQ0FBQyxJQUFJLENBQUM7SUFDL0M7SUFDQSxrREFBa0Q7SUFDbERPLFFBQVFDLFFBQVEsRUFBRTtRQUNkLE9BQU9kLGlFQUFVQSxDQUFDYyxTQUFTQyxXQUFXLElBQUliLGlEQUFHQTtJQUNqRDtBQUNKLEVBQ0EsbURBQW1EIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWxnb3JhbmQtY3Jvd2RmdW5kaW5nLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vY2xpZW50L3YyL2FsZ29kL2dldEFwcGxpY2F0aW9uQm94QnlOYW1lLmpzPzVkOGEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYnl0ZXNUb0Jhc2U2NCB9IGZyb20gJy4uLy4uLy4uL2VuY29kaW5nL2JpbmFyeWRhdGEuanMnO1xuaW1wb3J0IHsgZGVjb2RlSlNPTiB9IGZyb20gJy4uLy4uLy4uL2VuY29kaW5nL2VuY29kaW5nLmpzJztcbmltcG9ydCBKU09OUmVxdWVzdCBmcm9tICcuLi9qc29ucmVxdWVzdC5qcyc7XG5pbXBvcnQgeyBCb3ggfSBmcm9tICcuL21vZGVscy90eXBlcy5qcyc7XG4vKipcbiAqIEdpdmVuIGFuIGFwcGxpY2F0aW9uIElEIGFuZCB0aGUgYm94IG5hbWUgKGtleSksIHJldHVybiB0aGUgdmFsdWUgc3RvcmVkIGluIHRoZSBib3guXG4gKlxuICogIyMjIyBFeGFtcGxlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBjb25zdCBpbmRleCA9IDYwNTUzNDY2O1xuICogY29uc3QgYm94TmFtZSA9IEJ1ZmZlci5mcm9tKFwiZm9vXCIpO1xuICogY29uc3QgYm94UmVzcG9uc2UgPSBhd2FpdCBhbGdvZENsaWVudC5nZXRBcHBsaWNhdGlvbkJveEJ5TmFtZShpbmRleCwgYm94TmFtZSkuZG8oKTtcbiAqIGNvbnN0IGJveFZhbHVlID0gYm94UmVzcG9uc2UudmFsdWU7XG4gKiBgYGBcbiAqXG4gKiBbUmVzcG9uc2UgZGF0YSBzY2hlbWEgZGV0YWlsc10oaHR0cHM6Ly9kZXZlbG9wZXIuYWxnb3JhbmQub3JnL2RvY3MvcmVzdC1hcGlzL2FsZ29kLyNnZXQtdjJhcHBsaWNhdGlvbnNhcHBsaWNhdGlvbi1pZGJveClcbiAqIEBwYXJhbSBpbmRleCAtIFRoZSBhcHBsaWNhdGlvbiBJRCB0byBsb29rIHVwLlxuICogQGNhdGVnb3J5IEdFVFxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBHZXRBcHBsaWNhdGlvbkJveEJ5TmFtZSBleHRlbmRzIEpTT05SZXF1ZXN0IHtcbiAgICBjb25zdHJ1Y3RvcihjLCBpbmRleCwgbmFtZSkge1xuICAgICAgICBzdXBlcihjKTtcbiAgICAgICAgdGhpcy5pbmRleCA9IEJpZ0ludChpbmRleCk7XG4gICAgICAgIC8vIEVuY29kZSBuYW1lIGluIGJhc2U2NCBmb3JtYXQgYW5kIGFwcGVuZCB0aGUgZW5jb2RpbmcgcHJlZml4LlxuICAgICAgICBjb25zdCBlbmNvZGVkTmFtZSA9IGJ5dGVzVG9CYXNlNjQobmFtZSk7XG4gICAgICAgIHRoaXMucXVlcnkubmFtZSA9IGVuY29kZVVSSShgYjY0OiR7ZW5jb2RlZE5hbWV9YCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEByZXR1cm5zIGAvdjIvYXBwbGljYXRpb25zLyR7aW5kZXh9L2JveGBcbiAgICAgKi9cbiAgICBwYXRoKCkge1xuICAgICAgICByZXR1cm4gYC92Mi9hcHBsaWNhdGlvbnMvJHt0aGlzLmluZGV4fS9ib3hgO1xuICAgIH1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY2xhc3MtbWV0aG9kcy11c2UtdGhpc1xuICAgIHByZXBhcmUocmVzcG9uc2UpIHtcbiAgICAgICAgcmV0dXJuIGRlY29kZUpTT04ocmVzcG9uc2UuZ2V0SlNPTlRleHQoKSwgQm94KTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nZXRBcHBsaWNhdGlvbkJveEJ5TmFtZS5qcy5tYXAiXSwibmFtZXMiOlsiYnl0ZXNUb0Jhc2U2NCIsImRlY29kZUpTT04iLCJKU09OUmVxdWVzdCIsIkJveCIsIkdldEFwcGxpY2F0aW9uQm94QnlOYW1lIiwiY29uc3RydWN0b3IiLCJjIiwiaW5kZXgiLCJuYW1lIiwiQmlnSW50IiwiZW5jb2RlZE5hbWUiLCJxdWVyeSIsImVuY29kZVVSSSIsInBhdGgiLCJwcmVwYXJlIiwicmVzcG9uc2UiLCJnZXRKU09OVGV4dCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/getApplicationBoxByName.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/getApplicationBoxes.js":
/*!******************************************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/client/v2/algod/getApplicationBoxes.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ GetApplicationBoxes)\n/* harmony export */ });\n/* harmony import */ var _jsonrequest_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../jsonrequest.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/jsonrequest.js\");\n/* harmony import */ var _encoding_encoding_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../encoding/encoding.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/encoding.js\");\n/* harmony import */ var _models_types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./models/types.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/models/types.js\");\n\n\n\n/**\n * Given an application ID, return all the box names associated with the app.\n *\n * #### Example\n * ```typescript\n * const index = 60553466;\n * const boxesResponse = await algodClient.getApplicationBoxes(index).max(3).do();\n * const boxNames = boxesResponse.boxes.map(box => box.name);\n * ```\n *\n * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-v2applicationsapplication-idboxes)\n * @param index - The application ID to look up.\n * @category GET\n */ class GetApplicationBoxes extends _jsonrequest_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(c, index){\n        super(c);\n        this.index = BigInt(index);\n        this.query.max = 0;\n    }\n    /**\n     * @returns `/v2/applications/${index}/boxes`\n     */ path() {\n        return `/v2/applications/${this.index}/boxes`;\n    }\n    /**\n     * Limit results for pagination.\n     *\n     * #### Example\n     * ```typescript\n     * const maxResults = 20;\n     * const boxesResult = await algodClient\n     *        .GetApplicationBoxes(1234)\n     *        .limit(maxResults)\n     *        .do();\n     * ```\n     *\n     * @param limit - maximum number of results to return.\n     * @category query\n     */ max(max) {\n        this.query.max = max;\n        return this;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    prepare(response) {\n        return (0,_encoding_encoding_js__WEBPACK_IMPORTED_MODULE_1__.decodeJSON)(response.getJSONText(), _models_types_js__WEBPACK_IMPORTED_MODULE_2__.BoxesResponse);\n    }\n} //# sourceMappingURL=getApplicationBoxes.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9jbGllbnQvdjIvYWxnb2QvZ2V0QXBwbGljYXRpb25Cb3hlcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQTRDO0FBQ2U7QUFDVDtBQUNsRDs7Ozs7Ozs7Ozs7OztDQWFDLEdBQ2MsTUFBTUcsNEJBQTRCSCx1REFBV0E7SUFDeERJLFlBQVlDLENBQUMsRUFBRUMsS0FBSyxDQUFFO1FBQ2xCLEtBQUssQ0FBQ0Q7UUFDTixJQUFJLENBQUNDLEtBQUssR0FBR0MsT0FBT0Q7UUFDcEIsSUFBSSxDQUFDRSxLQUFLLENBQUNDLEdBQUcsR0FBRztJQUNyQjtJQUNBOztLQUVDLEdBQ0RDLE9BQU87UUFDSCxPQUFPLENBQUMsaUJBQWlCLEVBQUUsSUFBSSxDQUFDSixLQUFLLENBQUMsTUFBTSxDQUFDO0lBQ2pEO0lBQ0E7Ozs7Ozs7Ozs7Ozs7O0tBY0MsR0FDREcsSUFBSUEsR0FBRyxFQUFFO1FBQ0wsSUFBSSxDQUFDRCxLQUFLLENBQUNDLEdBQUcsR0FBR0E7UUFDakIsT0FBTyxJQUFJO0lBQ2Y7SUFDQSxrREFBa0Q7SUFDbERFLFFBQVFDLFFBQVEsRUFBRTtRQUNkLE9BQU9YLGlFQUFVQSxDQUFDVyxTQUFTQyxXQUFXLElBQUlYLDJEQUFhQTtJQUMzRDtBQUNKLEVBQ0EsK0NBQStDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWxnb3JhbmQtY3Jvd2RmdW5kaW5nLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vY2xpZW50L3YyL2FsZ29kL2dldEFwcGxpY2F0aW9uQm94ZXMuanM/MzcwOCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgSlNPTlJlcXVlc3QgZnJvbSAnLi4vanNvbnJlcXVlc3QuanMnO1xuaW1wb3J0IHsgZGVjb2RlSlNPTiB9IGZyb20gJy4uLy4uLy4uL2VuY29kaW5nL2VuY29kaW5nLmpzJztcbmltcG9ydCB7IEJveGVzUmVzcG9uc2UgfSBmcm9tICcuL21vZGVscy90eXBlcy5qcyc7XG4vKipcbiAqIEdpdmVuIGFuIGFwcGxpY2F0aW9uIElELCByZXR1cm4gYWxsIHRoZSBib3ggbmFtZXMgYXNzb2NpYXRlZCB3aXRoIHRoZSBhcHAuXG4gKlxuICogIyMjIyBFeGFtcGxlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBjb25zdCBpbmRleCA9IDYwNTUzNDY2O1xuICogY29uc3QgYm94ZXNSZXNwb25zZSA9IGF3YWl0IGFsZ29kQ2xpZW50LmdldEFwcGxpY2F0aW9uQm94ZXMoaW5kZXgpLm1heCgzKS5kbygpO1xuICogY29uc3QgYm94TmFtZXMgPSBib3hlc1Jlc3BvbnNlLmJveGVzLm1hcChib3ggPT4gYm94Lm5hbWUpO1xuICogYGBgXG4gKlxuICogW1Jlc3BvbnNlIGRhdGEgc2NoZW1hIGRldGFpbHNdKGh0dHBzOi8vZGV2ZWxvcGVyLmFsZ29yYW5kLm9yZy9kb2NzL3Jlc3QtYXBpcy9hbGdvZC8jZ2V0LXYyYXBwbGljYXRpb25zYXBwbGljYXRpb24taWRib3hlcylcbiAqIEBwYXJhbSBpbmRleCAtIFRoZSBhcHBsaWNhdGlvbiBJRCB0byBsb29rIHVwLlxuICogQGNhdGVnb3J5IEdFVFxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBHZXRBcHBsaWNhdGlvbkJveGVzIGV4dGVuZHMgSlNPTlJlcXVlc3Qge1xuICAgIGNvbnN0cnVjdG9yKGMsIGluZGV4KSB7XG4gICAgICAgIHN1cGVyKGMpO1xuICAgICAgICB0aGlzLmluZGV4ID0gQmlnSW50KGluZGV4KTtcbiAgICAgICAgdGhpcy5xdWVyeS5tYXggPSAwO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcmV0dXJucyBgL3YyL2FwcGxpY2F0aW9ucy8ke2luZGV4fS9ib3hlc2BcbiAgICAgKi9cbiAgICBwYXRoKCkge1xuICAgICAgICByZXR1cm4gYC92Mi9hcHBsaWNhdGlvbnMvJHt0aGlzLmluZGV4fS9ib3hlc2A7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIExpbWl0IHJlc3VsdHMgZm9yIHBhZ2luYXRpb24uXG4gICAgICpcbiAgICAgKiAjIyMjIEV4YW1wbGVcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogY29uc3QgbWF4UmVzdWx0cyA9IDIwO1xuICAgICAqIGNvbnN0IGJveGVzUmVzdWx0ID0gYXdhaXQgYWxnb2RDbGllbnRcbiAgICAgKiAgICAgICAgLkdldEFwcGxpY2F0aW9uQm94ZXMoMTIzNClcbiAgICAgKiAgICAgICAgLmxpbWl0KG1heFJlc3VsdHMpXG4gICAgICogICAgICAgIC5kbygpO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQHBhcmFtIGxpbWl0IC0gbWF4aW11bSBudW1iZXIgb2YgcmVzdWx0cyB0byByZXR1cm4uXG4gICAgICogQGNhdGVnb3J5IHF1ZXJ5XG4gICAgICovXG4gICAgbWF4KG1heCkge1xuICAgICAgICB0aGlzLnF1ZXJ5Lm1heCA9IG1heDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjbGFzcy1tZXRob2RzLXVzZS10aGlzXG4gICAgcHJlcGFyZShyZXNwb25zZSkge1xuICAgICAgICByZXR1cm4gZGVjb2RlSlNPTihyZXNwb25zZS5nZXRKU09OVGV4dCgpLCBCb3hlc1Jlc3BvbnNlKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nZXRBcHBsaWNhdGlvbkJveGVzLmpzLm1hcCJdLCJuYW1lcyI6WyJKU09OUmVxdWVzdCIsImRlY29kZUpTT04iLCJCb3hlc1Jlc3BvbnNlIiwiR2V0QXBwbGljYXRpb25Cb3hlcyIsImNvbnN0cnVjdG9yIiwiYyIsImluZGV4IiwiQmlnSW50IiwicXVlcnkiLCJtYXgiLCJwYXRoIiwicHJlcGFyZSIsInJlc3BvbnNlIiwiZ2V0SlNPTlRleHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/getApplicationBoxes.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/getApplicationByID.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/client/v2/algod/getApplicationByID.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ GetApplicationByID)\n/* harmony export */ });\n/* harmony import */ var _jsonrequest_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../jsonrequest.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/jsonrequest.js\");\n/* harmony import */ var _encoding_encoding_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../encoding/encoding.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/encoding.js\");\n/* harmony import */ var _models_types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./models/types.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/models/types.js\");\n\n\n\nclass GetApplicationByID extends _jsonrequest_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(c, index){\n        super(c);\n        this.index = BigInt(index);\n    }\n    path() {\n        return `/v2/applications/${this.index}`;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    prepare(response) {\n        return (0,_encoding_encoding_js__WEBPACK_IMPORTED_MODULE_1__.decodeJSON)(response.getJSONText(), _models_types_js__WEBPACK_IMPORTED_MODULE_2__.Application);\n    }\n} //# sourceMappingURL=getApplicationByID.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9jbGllbnQvdjIvYWxnb2QvZ2V0QXBwbGljYXRpb25CeUlELmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBNEM7QUFDZTtBQUNYO0FBQ2pDLE1BQU1HLDJCQUEyQkgsdURBQVdBO0lBQ3ZESSxZQUFZQyxDQUFDLEVBQUVDLEtBQUssQ0FBRTtRQUNsQixLQUFLLENBQUNEO1FBQ04sSUFBSSxDQUFDQyxLQUFLLEdBQUdDLE9BQU9EO0lBQ3hCO0lBQ0FFLE9BQU87UUFDSCxPQUFPLENBQUMsaUJBQWlCLEVBQUUsSUFBSSxDQUFDRixLQUFLLENBQUMsQ0FBQztJQUMzQztJQUNBLGtEQUFrRDtJQUNsREcsUUFBUUMsUUFBUSxFQUFFO1FBQ2QsT0FBT1QsaUVBQVVBLENBQUNTLFNBQVNDLFdBQVcsSUFBSVQseURBQVdBO0lBQ3pEO0FBQ0osRUFDQSw4Q0FBOEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hbGdvcmFuZC1jcm93ZGZ1bmRpbmctZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9jbGllbnQvdjIvYWxnb2QvZ2V0QXBwbGljYXRpb25CeUlELmpzPzdlNjkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEpTT05SZXF1ZXN0IGZyb20gJy4uL2pzb25yZXF1ZXN0LmpzJztcbmltcG9ydCB7IGRlY29kZUpTT04gfSBmcm9tICcuLi8uLi8uLi9lbmNvZGluZy9lbmNvZGluZy5qcyc7XG5pbXBvcnQgeyBBcHBsaWNhdGlvbiB9IGZyb20gJy4vbW9kZWxzL3R5cGVzLmpzJztcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEdldEFwcGxpY2F0aW9uQnlJRCBleHRlbmRzIEpTT05SZXF1ZXN0IHtcbiAgICBjb25zdHJ1Y3RvcihjLCBpbmRleCkge1xuICAgICAgICBzdXBlcihjKTtcbiAgICAgICAgdGhpcy5pbmRleCA9IEJpZ0ludChpbmRleCk7XG4gICAgfVxuICAgIHBhdGgoKSB7XG4gICAgICAgIHJldHVybiBgL3YyL2FwcGxpY2F0aW9ucy8ke3RoaXMuaW5kZXh9YDtcbiAgICB9XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNsYXNzLW1ldGhvZHMtdXNlLXRoaXNcbiAgICBwcmVwYXJlKHJlc3BvbnNlKSB7XG4gICAgICAgIHJldHVybiBkZWNvZGVKU09OKHJlc3BvbnNlLmdldEpTT05UZXh0KCksIEFwcGxpY2F0aW9uKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nZXRBcHBsaWNhdGlvbkJ5SUQuanMubWFwIl0sIm5hbWVzIjpbIkpTT05SZXF1ZXN0IiwiZGVjb2RlSlNPTiIsIkFwcGxpY2F0aW9uIiwiR2V0QXBwbGljYXRpb25CeUlEIiwiY29uc3RydWN0b3IiLCJjIiwiaW5kZXgiLCJCaWdJbnQiLCJwYXRoIiwicHJlcGFyZSIsInJlc3BvbnNlIiwiZ2V0SlNPTlRleHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/getApplicationByID.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/getAssetByID.js":
/*!***********************************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/client/v2/algod/getAssetByID.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ GetAssetByID)\n/* harmony export */ });\n/* harmony import */ var _jsonrequest_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../jsonrequest.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/jsonrequest.js\");\n/* harmony import */ var _encoding_encoding_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../encoding/encoding.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/encoding.js\");\n/* harmony import */ var _models_types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./models/types.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/models/types.js\");\n\n\n\nclass GetAssetByID extends _jsonrequest_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(c, index){\n        super(c);\n        this.index = BigInt(index);\n    }\n    path() {\n        return `/v2/assets/${this.index}`;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    prepare(response) {\n        return (0,_encoding_encoding_js__WEBPACK_IMPORTED_MODULE_1__.decodeJSON)(response.getJSONText(), _models_types_js__WEBPACK_IMPORTED_MODULE_2__.Asset);\n    }\n} //# sourceMappingURL=getAssetByID.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9jbGllbnQvdjIvYWxnb2QvZ2V0QXNzZXRCeUlELmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBNEM7QUFDZTtBQUNqQjtBQUMzQixNQUFNRyxxQkFBcUJILHVEQUFXQTtJQUNqREksWUFBWUMsQ0FBQyxFQUFFQyxLQUFLLENBQUU7UUFDbEIsS0FBSyxDQUFDRDtRQUNOLElBQUksQ0FBQ0MsS0FBSyxHQUFHQyxPQUFPRDtJQUN4QjtJQUNBRSxPQUFPO1FBQ0gsT0FBTyxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUNGLEtBQUssQ0FBQyxDQUFDO0lBQ3JDO0lBQ0Esa0RBQWtEO0lBQ2xERyxRQUFRQyxRQUFRLEVBQUU7UUFDZCxPQUFPVCxpRUFBVUEsQ0FBQ1MsU0FBU0MsV0FBVyxJQUFJVCxtREFBS0E7SUFDbkQ7QUFDSixFQUNBLHdDQUF3QyIsInNvdXJjZXMiOlsid2VicGFjazovL2FsZ29yYW5kLWNyb3dkZnVuZGluZy1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9hbGdvc2RrL2Rpc3QvZXNtL2NsaWVudC92Mi9hbGdvZC9nZXRBc3NldEJ5SUQuanM/ODhkZCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgSlNPTlJlcXVlc3QgZnJvbSAnLi4vanNvbnJlcXVlc3QuanMnO1xuaW1wb3J0IHsgZGVjb2RlSlNPTiB9IGZyb20gJy4uLy4uLy4uL2VuY29kaW5nL2VuY29kaW5nLmpzJztcbmltcG9ydCB7IEFzc2V0IH0gZnJvbSAnLi9tb2RlbHMvdHlwZXMuanMnO1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgR2V0QXNzZXRCeUlEIGV4dGVuZHMgSlNPTlJlcXVlc3Qge1xuICAgIGNvbnN0cnVjdG9yKGMsIGluZGV4KSB7XG4gICAgICAgIHN1cGVyKGMpO1xuICAgICAgICB0aGlzLmluZGV4ID0gQmlnSW50KGluZGV4KTtcbiAgICB9XG4gICAgcGF0aCgpIHtcbiAgICAgICAgcmV0dXJuIGAvdjIvYXNzZXRzLyR7dGhpcy5pbmRleH1gO1xuICAgIH1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY2xhc3MtbWV0aG9kcy11c2UtdGhpc1xuICAgIHByZXBhcmUocmVzcG9uc2UpIHtcbiAgICAgICAgcmV0dXJuIGRlY29kZUpTT04ocmVzcG9uc2UuZ2V0SlNPTlRleHQoKSwgQXNzZXQpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdldEFzc2V0QnlJRC5qcy5tYXAiXSwibmFtZXMiOlsiSlNPTlJlcXVlc3QiLCJkZWNvZGVKU09OIiwiQXNzZXQiLCJHZXRBc3NldEJ5SUQiLCJjb25zdHJ1Y3RvciIsImMiLCJpbmRleCIsIkJpZ0ludCIsInBhdGgiLCJwcmVwYXJlIiwicmVzcG9uc2UiLCJnZXRKU09OVGV4dCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/getAssetByID.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/getBlockHash.js":
/*!***********************************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/client/v2/algod/getBlockHash.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ GetBlockHash)\n/* harmony export */ });\n/* harmony import */ var _jsonrequest_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../jsonrequest.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/jsonrequest.js\");\n/* harmony import */ var _encoding_encoding_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../encoding/encoding.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/encoding.js\");\n/* harmony import */ var _models_types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./models/types.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/models/types.js\");\n\n\n\nclass GetBlockHash extends _jsonrequest_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(c, roundNumber){\n        super(c);\n        this.round = BigInt(roundNumber);\n    }\n    path() {\n        return `/v2/blocks/${this.round}/hash`;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    prepare(response) {\n        return (0,_encoding_encoding_js__WEBPACK_IMPORTED_MODULE_1__.decodeJSON)(response.getJSONText(), _models_types_js__WEBPACK_IMPORTED_MODULE_2__.BlockHashResponse);\n    }\n} //# sourceMappingURL=getBlockHash.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9jbGllbnQvdjIvYWxnb2QvZ2V0QmxvY2tIYXNoLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBNEM7QUFDZTtBQUNMO0FBQ3ZDLE1BQU1HLHFCQUFxQkgsdURBQVdBO0lBQ2pESSxZQUFZQyxDQUFDLEVBQUVDLFdBQVcsQ0FBRTtRQUN4QixLQUFLLENBQUNEO1FBQ04sSUFBSSxDQUFDRSxLQUFLLEdBQUdDLE9BQU9GO0lBQ3hCO0lBQ0FHLE9BQU87UUFDSCxPQUFPLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQ0YsS0FBSyxDQUFDLEtBQUssQ0FBQztJQUMxQztJQUNBLGtEQUFrRDtJQUNsREcsUUFBUUMsUUFBUSxFQUFFO1FBQ2QsT0FBT1YsaUVBQVVBLENBQUNVLFNBQVNDLFdBQVcsSUFBSVYsK0RBQWlCQTtJQUMvRDtBQUNKLEVBQ0Esd0NBQXdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWxnb3JhbmQtY3Jvd2RmdW5kaW5nLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vY2xpZW50L3YyL2FsZ29kL2dldEJsb2NrSGFzaC5qcz85ZDFhIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBKU09OUmVxdWVzdCBmcm9tICcuLi9qc29ucmVxdWVzdC5qcyc7XG5pbXBvcnQgeyBkZWNvZGVKU09OIH0gZnJvbSAnLi4vLi4vLi4vZW5jb2RpbmcvZW5jb2RpbmcuanMnO1xuaW1wb3J0IHsgQmxvY2tIYXNoUmVzcG9uc2UgfSBmcm9tICcuL21vZGVscy90eXBlcy5qcyc7XG5leHBvcnQgZGVmYXVsdCBjbGFzcyBHZXRCbG9ja0hhc2ggZXh0ZW5kcyBKU09OUmVxdWVzdCB7XG4gICAgY29uc3RydWN0b3IoYywgcm91bmROdW1iZXIpIHtcbiAgICAgICAgc3VwZXIoYyk7XG4gICAgICAgIHRoaXMucm91bmQgPSBCaWdJbnQocm91bmROdW1iZXIpO1xuICAgIH1cbiAgICBwYXRoKCkge1xuICAgICAgICByZXR1cm4gYC92Mi9ibG9ja3MvJHt0aGlzLnJvdW5kfS9oYXNoYDtcbiAgICB9XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNsYXNzLW1ldGhvZHMtdXNlLXRoaXNcbiAgICBwcmVwYXJlKHJlc3BvbnNlKSB7XG4gICAgICAgIHJldHVybiBkZWNvZGVKU09OKHJlc3BvbnNlLmdldEpTT05UZXh0KCksIEJsb2NrSGFzaFJlc3BvbnNlKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nZXRCbG9ja0hhc2guanMubWFwIl0sIm5hbWVzIjpbIkpTT05SZXF1ZXN0IiwiZGVjb2RlSlNPTiIsIkJsb2NrSGFzaFJlc3BvbnNlIiwiR2V0QmxvY2tIYXNoIiwiY29uc3RydWN0b3IiLCJjIiwicm91bmROdW1iZXIiLCJyb3VuZCIsIkJpZ0ludCIsInBhdGgiLCJwcmVwYXJlIiwicmVzcG9uc2UiLCJnZXRKU09OVGV4dCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/getBlockHash.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/getBlockOffsetTimestamp.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/client/v2/algod/getBlockOffsetTimestamp.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ GetBlockOffsetTimestamp)\n/* harmony export */ });\n/* harmony import */ var _jsonrequest_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../jsonrequest.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/jsonrequest.js\");\n/* harmony import */ var _encoding_encoding_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../encoding/encoding.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/encoding.js\");\n/* harmony import */ var _models_types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./models/types.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/models/types.js\");\n\n\n\nclass GetBlockOffsetTimestamp extends _jsonrequest_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    // eslint-disable-next-line class-methods-use-this\n    path() {\n        return `/v2/devmode/blocks/offset`;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    prepare(response) {\n        return (0,_encoding_encoding_js__WEBPACK_IMPORTED_MODULE_1__.decodeJSON)(response.getJSONText(), _models_types_js__WEBPACK_IMPORTED_MODULE_2__.GetBlockTimeStampOffsetResponse);\n    }\n} //# sourceMappingURL=getBlockOffsetTimestamp.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9jbGllbnQvdjIvYWxnb2QvZ2V0QmxvY2tPZmZzZXRUaW1lc3RhbXAuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUE0QztBQUNlO0FBQ1M7QUFDckQsTUFBTUcsZ0NBQWdDSCx1REFBV0E7SUFDNUQsa0RBQWtEO0lBQ2xESSxPQUFPO1FBQ0gsT0FBTyxDQUFDLHlCQUF5QixDQUFDO0lBQ3RDO0lBQ0Esa0RBQWtEO0lBQ2xEQyxRQUFRQyxRQUFRLEVBQUU7UUFDZCxPQUFPTCxpRUFBVUEsQ0FBQ0ssU0FBU0MsV0FBVyxJQUFJTCw2RUFBK0JBO0lBQzdFO0FBQ0osRUFDQSxtREFBbUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hbGdvcmFuZC1jcm93ZGZ1bmRpbmctZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9jbGllbnQvdjIvYWxnb2QvZ2V0QmxvY2tPZmZzZXRUaW1lc3RhbXAuanM/MzQ5NSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgSlNPTlJlcXVlc3QgZnJvbSAnLi4vanNvbnJlcXVlc3QuanMnO1xuaW1wb3J0IHsgZGVjb2RlSlNPTiB9IGZyb20gJy4uLy4uLy4uL2VuY29kaW5nL2VuY29kaW5nLmpzJztcbmltcG9ydCB7IEdldEJsb2NrVGltZVN0YW1wT2Zmc2V0UmVzcG9uc2UgfSBmcm9tICcuL21vZGVscy90eXBlcy5qcyc7XG5leHBvcnQgZGVmYXVsdCBjbGFzcyBHZXRCbG9ja09mZnNldFRpbWVzdGFtcCBleHRlbmRzIEpTT05SZXF1ZXN0IHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY2xhc3MtbWV0aG9kcy11c2UtdGhpc1xuICAgIHBhdGgoKSB7XG4gICAgICAgIHJldHVybiBgL3YyL2Rldm1vZGUvYmxvY2tzL29mZnNldGA7XG4gICAgfVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjbGFzcy1tZXRob2RzLXVzZS10aGlzXG4gICAgcHJlcGFyZShyZXNwb25zZSkge1xuICAgICAgICByZXR1cm4gZGVjb2RlSlNPTihyZXNwb25zZS5nZXRKU09OVGV4dCgpLCBHZXRCbG9ja1RpbWVTdGFtcE9mZnNldFJlc3BvbnNlKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nZXRCbG9ja09mZnNldFRpbWVzdGFtcC5qcy5tYXAiXSwibmFtZXMiOlsiSlNPTlJlcXVlc3QiLCJkZWNvZGVKU09OIiwiR2V0QmxvY2tUaW1lU3RhbXBPZmZzZXRSZXNwb25zZSIsIkdldEJsb2NrT2Zmc2V0VGltZXN0YW1wIiwicGF0aCIsInByZXBhcmUiLCJyZXNwb25zZSIsImdldEpTT05UZXh0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/getBlockOffsetTimestamp.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/getBlockTxids.js":
/*!************************************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/client/v2/algod/getBlockTxids.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ GetBlockTxids)\n/* harmony export */ });\n/* harmony import */ var _jsonrequest_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../jsonrequest.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/jsonrequest.js\");\n/* harmony import */ var _encoding_encoding_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../encoding/encoding.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/encoding.js\");\n/* harmony import */ var _models_types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./models/types.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/models/types.js\");\n\n\n\nclass GetBlockTxids extends _jsonrequest_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(c, roundNumber){\n        super(c);\n        this.round = BigInt(roundNumber);\n    }\n    path() {\n        return `/v2/blocks/${this.round}/txids`;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    prepare(response) {\n        return (0,_encoding_encoding_js__WEBPACK_IMPORTED_MODULE_1__.decodeJSON)(response.getJSONText(), _models_types_js__WEBPACK_IMPORTED_MODULE_2__.BlockTxidsResponse);\n    }\n} //# sourceMappingURL=getBlockTxids.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9jbGllbnQvdjIvYWxnb2QvZ2V0QmxvY2tUeGlkcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQTRDO0FBQ2U7QUFDSjtBQUN4QyxNQUFNRyxzQkFBc0JILHVEQUFXQTtJQUNsREksWUFBWUMsQ0FBQyxFQUFFQyxXQUFXLENBQUU7UUFDeEIsS0FBSyxDQUFDRDtRQUNOLElBQUksQ0FBQ0UsS0FBSyxHQUFHQyxPQUFPRjtJQUN4QjtJQUNBRyxPQUFPO1FBQ0gsT0FBTyxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUNGLEtBQUssQ0FBQyxNQUFNLENBQUM7SUFDM0M7SUFDQSxrREFBa0Q7SUFDbERHLFFBQVFDLFFBQVEsRUFBRTtRQUNkLE9BQU9WLGlFQUFVQSxDQUFDVSxTQUFTQyxXQUFXLElBQUlWLGdFQUFrQkE7SUFDaEU7QUFDSixFQUNBLHlDQUF5QyIsInNvdXJjZXMiOlsid2VicGFjazovL2FsZ29yYW5kLWNyb3dkZnVuZGluZy1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9hbGdvc2RrL2Rpc3QvZXNtL2NsaWVudC92Mi9hbGdvZC9nZXRCbG9ja1R4aWRzLmpzPzkxMzgiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEpTT05SZXF1ZXN0IGZyb20gJy4uL2pzb25yZXF1ZXN0LmpzJztcbmltcG9ydCB7IGRlY29kZUpTT04gfSBmcm9tICcuLi8uLi8uLi9lbmNvZGluZy9lbmNvZGluZy5qcyc7XG5pbXBvcnQgeyBCbG9ja1R4aWRzUmVzcG9uc2UgfSBmcm9tICcuL21vZGVscy90eXBlcy5qcyc7XG5leHBvcnQgZGVmYXVsdCBjbGFzcyBHZXRCbG9ja1R4aWRzIGV4dGVuZHMgSlNPTlJlcXVlc3Qge1xuICAgIGNvbnN0cnVjdG9yKGMsIHJvdW5kTnVtYmVyKSB7XG4gICAgICAgIHN1cGVyKGMpO1xuICAgICAgICB0aGlzLnJvdW5kID0gQmlnSW50KHJvdW5kTnVtYmVyKTtcbiAgICB9XG4gICAgcGF0aCgpIHtcbiAgICAgICAgcmV0dXJuIGAvdjIvYmxvY2tzLyR7dGhpcy5yb3VuZH0vdHhpZHNgO1xuICAgIH1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY2xhc3MtbWV0aG9kcy11c2UtdGhpc1xuICAgIHByZXBhcmUocmVzcG9uc2UpIHtcbiAgICAgICAgcmV0dXJuIGRlY29kZUpTT04ocmVzcG9uc2UuZ2V0SlNPTlRleHQoKSwgQmxvY2tUeGlkc1Jlc3BvbnNlKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nZXRCbG9ja1R4aWRzLmpzLm1hcCJdLCJuYW1lcyI6WyJKU09OUmVxdWVzdCIsImRlY29kZUpTT04iLCJCbG9ja1R4aWRzUmVzcG9uc2UiLCJHZXRCbG9ja1R4aWRzIiwiY29uc3RydWN0b3IiLCJjIiwicm91bmROdW1iZXIiLCJyb3VuZCIsIkJpZ0ludCIsInBhdGgiLCJwcmVwYXJlIiwicmVzcG9uc2UiLCJnZXRKU09OVGV4dCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/getBlockTxids.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/getLedgerStateDelta.js":
/*!******************************************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/client/v2/algod/getLedgerStateDelta.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ GetLedgerStateDelta)\n/* harmony export */ });\n/* harmony import */ var _jsonrequest_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../jsonrequest.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/jsonrequest.js\");\n/* harmony import */ var _encoding_encoding_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../encoding/encoding.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/encoding.js\");\n/* harmony import */ var _types_statedelta_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../types/statedelta.js */ \"(ssr)/./node_modules/algosdk/dist/esm/types/statedelta.js\");\n\n\n\nclass GetLedgerStateDelta extends _jsonrequest_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(c, round){\n        super(c);\n        this.round = BigInt(round);\n        this.query = {\n            format: \"msgpack\"\n        };\n    }\n    // eslint-disable-next-line class-methods-use-this\n    path() {\n        return `/v2/deltas/${this.round}`;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    prepare(response) {\n        return (0,_encoding_encoding_js__WEBPACK_IMPORTED_MODULE_1__.decodeMsgpack)(response.body, _types_statedelta_js__WEBPACK_IMPORTED_MODULE_2__.LedgerStateDelta);\n    }\n} //# sourceMappingURL=getLedgerStateDelta.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9jbGllbnQvdjIvYWxnb2QvZ2V0TGVkZ2VyU3RhdGVEZWx0YS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQTRDO0FBQ2tCO0FBQ0U7QUFDakQsTUFBTUcsNEJBQTRCSCx1REFBV0E7SUFDeERJLFlBQVlDLENBQUMsRUFBRUMsS0FBSyxDQUFFO1FBQ2xCLEtBQUssQ0FBQ0Q7UUFDTixJQUFJLENBQUNDLEtBQUssR0FBR0MsT0FBT0Q7UUFDcEIsSUFBSSxDQUFDRSxLQUFLLEdBQUc7WUFBRUMsUUFBUTtRQUFVO0lBQ3JDO0lBQ0Esa0RBQWtEO0lBQ2xEQyxPQUFPO1FBQ0gsT0FBTyxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUNKLEtBQUssQ0FBQyxDQUFDO0lBQ3JDO0lBQ0Esa0RBQWtEO0lBQ2xESyxRQUFRQyxRQUFRLEVBQUU7UUFDZCxPQUFPWCxvRUFBYUEsQ0FBQ1csU0FBU0MsSUFBSSxFQUFFWCxrRUFBZ0JBO0lBQ3hEO0FBQ0osRUFDQSwrQ0FBK0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hbGdvcmFuZC1jcm93ZGZ1bmRpbmctZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9jbGllbnQvdjIvYWxnb2QvZ2V0TGVkZ2VyU3RhdGVEZWx0YS5qcz9iZWU1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBKU09OUmVxdWVzdCBmcm9tICcuLi9qc29ucmVxdWVzdC5qcyc7XG5pbXBvcnQgeyBkZWNvZGVNc2dwYWNrIH0gZnJvbSAnLi4vLi4vLi4vZW5jb2RpbmcvZW5jb2RpbmcuanMnO1xuaW1wb3J0IHsgTGVkZ2VyU3RhdGVEZWx0YSB9IGZyb20gJy4uLy4uLy4uL3R5cGVzL3N0YXRlZGVsdGEuanMnO1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgR2V0TGVkZ2VyU3RhdGVEZWx0YSBleHRlbmRzIEpTT05SZXF1ZXN0IHtcbiAgICBjb25zdHJ1Y3RvcihjLCByb3VuZCkge1xuICAgICAgICBzdXBlcihjKTtcbiAgICAgICAgdGhpcy5yb3VuZCA9IEJpZ0ludChyb3VuZCk7XG4gICAgICAgIHRoaXMucXVlcnkgPSB7IGZvcm1hdDogJ21zZ3BhY2snIH07XG4gICAgfVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjbGFzcy1tZXRob2RzLXVzZS10aGlzXG4gICAgcGF0aCgpIHtcbiAgICAgICAgcmV0dXJuIGAvdjIvZGVsdGFzLyR7dGhpcy5yb3VuZH1gO1xuICAgIH1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY2xhc3MtbWV0aG9kcy11c2UtdGhpc1xuICAgIHByZXBhcmUocmVzcG9uc2UpIHtcbiAgICAgICAgcmV0dXJuIGRlY29kZU1zZ3BhY2socmVzcG9uc2UuYm9keSwgTGVkZ2VyU3RhdGVEZWx0YSk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2V0TGVkZ2VyU3RhdGVEZWx0YS5qcy5tYXAiXSwibmFtZXMiOlsiSlNPTlJlcXVlc3QiLCJkZWNvZGVNc2dwYWNrIiwiTGVkZ2VyU3RhdGVEZWx0YSIsIkdldExlZGdlclN0YXRlRGVsdGEiLCJjb25zdHJ1Y3RvciIsImMiLCJyb3VuZCIsIkJpZ0ludCIsInF1ZXJ5IiwiZm9ybWF0IiwicGF0aCIsInByZXBhcmUiLCJyZXNwb25zZSIsImJvZHkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/getLedgerStateDelta.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/getLedgerStateDeltaForTransactionGroup.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/client/v2/algod/getLedgerStateDeltaForTransactionGroup.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ GetLedgerStateDeltaForTransactionGroup)\n/* harmony export */ });\n/* harmony import */ var _jsonrequest_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../jsonrequest.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/jsonrequest.js\");\n/* harmony import */ var _encoding_encoding_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../encoding/encoding.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/encoding.js\");\n/* harmony import */ var _types_statedelta_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../types/statedelta.js */ \"(ssr)/./node_modules/algosdk/dist/esm/types/statedelta.js\");\n\n\n\nclass GetLedgerStateDeltaForTransactionGroup extends _jsonrequest_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(c, id){\n        super(c);\n        this.id = id;\n        this.query = {\n            format: \"msgpack\"\n        };\n    }\n    // eslint-disable-next-line class-methods-use-this\n    path() {\n        return `/v2/deltas/txn/group/${this.id}`;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    prepare(response) {\n        return (0,_encoding_encoding_js__WEBPACK_IMPORTED_MODULE_1__.decodeMsgpack)(response.body, _types_statedelta_js__WEBPACK_IMPORTED_MODULE_2__.LedgerStateDelta);\n    }\n} //# sourceMappingURL=getLedgerStateDeltaForTransactionGroup.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9jbGllbnQvdjIvYWxnb2QvZ2V0TGVkZ2VyU3RhdGVEZWx0YUZvclRyYW5zYWN0aW9uR3JvdXAuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUE0QztBQUNrQjtBQUNFO0FBQ2pELE1BQU1HLCtDQUErQ0gsdURBQVdBO0lBQzNFSSxZQUFZQyxDQUFDLEVBQUVDLEVBQUUsQ0FBRTtRQUNmLEtBQUssQ0FBQ0Q7UUFDTixJQUFJLENBQUNDLEVBQUUsR0FBR0E7UUFDVixJQUFJLENBQUNDLEtBQUssR0FBRztZQUFFQyxRQUFRO1FBQVU7SUFDckM7SUFDQSxrREFBa0Q7SUFDbERDLE9BQU87UUFDSCxPQUFPLENBQUMscUJBQXFCLEVBQUUsSUFBSSxDQUFDSCxFQUFFLENBQUMsQ0FBQztJQUM1QztJQUNBLGtEQUFrRDtJQUNsREksUUFBUUMsUUFBUSxFQUFFO1FBQ2QsT0FBT1Ysb0VBQWFBLENBQUNVLFNBQVNDLElBQUksRUFBRVYsa0VBQWdCQTtJQUN4RDtBQUNKLEVBQ0Esa0VBQWtFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWxnb3JhbmQtY3Jvd2RmdW5kaW5nLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vY2xpZW50L3YyL2FsZ29kL2dldExlZGdlclN0YXRlRGVsdGFGb3JUcmFuc2FjdGlvbkdyb3VwLmpzP2EwYmUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEpTT05SZXF1ZXN0IGZyb20gJy4uL2pzb25yZXF1ZXN0LmpzJztcbmltcG9ydCB7IGRlY29kZU1zZ3BhY2sgfSBmcm9tICcuLi8uLi8uLi9lbmNvZGluZy9lbmNvZGluZy5qcyc7XG5pbXBvcnQgeyBMZWRnZXJTdGF0ZURlbHRhIH0gZnJvbSAnLi4vLi4vLi4vdHlwZXMvc3RhdGVkZWx0YS5qcyc7XG5leHBvcnQgZGVmYXVsdCBjbGFzcyBHZXRMZWRnZXJTdGF0ZURlbHRhRm9yVHJhbnNhY3Rpb25Hcm91cCBleHRlbmRzIEpTT05SZXF1ZXN0IHtcbiAgICBjb25zdHJ1Y3RvcihjLCBpZCkge1xuICAgICAgICBzdXBlcihjKTtcbiAgICAgICAgdGhpcy5pZCA9IGlkO1xuICAgICAgICB0aGlzLnF1ZXJ5ID0geyBmb3JtYXQ6ICdtc2dwYWNrJyB9O1xuICAgIH1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY2xhc3MtbWV0aG9kcy11c2UtdGhpc1xuICAgIHBhdGgoKSB7XG4gICAgICAgIHJldHVybiBgL3YyL2RlbHRhcy90eG4vZ3JvdXAvJHt0aGlzLmlkfWA7XG4gICAgfVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjbGFzcy1tZXRob2RzLXVzZS10aGlzXG4gICAgcHJlcGFyZShyZXNwb25zZSkge1xuICAgICAgICByZXR1cm4gZGVjb2RlTXNncGFjayhyZXNwb25zZS5ib2R5LCBMZWRnZXJTdGF0ZURlbHRhKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nZXRMZWRnZXJTdGF0ZURlbHRhRm9yVHJhbnNhY3Rpb25Hcm91cC5qcy5tYXAiXSwibmFtZXMiOlsiSlNPTlJlcXVlc3QiLCJkZWNvZGVNc2dwYWNrIiwiTGVkZ2VyU3RhdGVEZWx0YSIsIkdldExlZGdlclN0YXRlRGVsdGFGb3JUcmFuc2FjdGlvbkdyb3VwIiwiY29uc3RydWN0b3IiLCJjIiwiaWQiLCJxdWVyeSIsImZvcm1hdCIsInBhdGgiLCJwcmVwYXJlIiwicmVzcG9uc2UiLCJib2R5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/getLedgerStateDeltaForTransactionGroup.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/getSyncRound.js":
/*!***********************************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/client/v2/algod/getSyncRound.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ GetSyncRound)\n/* harmony export */ });\n/* harmony import */ var _jsonrequest_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../jsonrequest.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/jsonrequest.js\");\n/* harmony import */ var _encoding_encoding_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../encoding/encoding.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/encoding.js\");\n/* harmony import */ var _models_types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./models/types.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/models/types.js\");\n\n\n\nclass GetSyncRound extends _jsonrequest_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    // eslint-disable-next-line class-methods-use-this\n    path() {\n        return `/v2/ledger/sync`;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    prepare(response) {\n        return (0,_encoding_encoding_js__WEBPACK_IMPORTED_MODULE_1__.decodeJSON)(response.getJSONText(), _models_types_js__WEBPACK_IMPORTED_MODULE_2__.GetSyncRoundResponse);\n    }\n} //# sourceMappingURL=getSyncRound.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9jbGllbnQvdjIvYWxnb2QvZ2V0U3luY1JvdW5kLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBNEM7QUFDZTtBQUNGO0FBQzFDLE1BQU1HLHFCQUFxQkgsdURBQVdBO0lBQ2pELGtEQUFrRDtJQUNsREksT0FBTztRQUNILE9BQU8sQ0FBQyxlQUFlLENBQUM7SUFDNUI7SUFDQSxrREFBa0Q7SUFDbERDLFFBQVFDLFFBQVEsRUFBRTtRQUNkLE9BQU9MLGlFQUFVQSxDQUFDSyxTQUFTQyxXQUFXLElBQUlMLGtFQUFvQkE7SUFDbEU7QUFDSixFQUNBLHdDQUF3QyIsInNvdXJjZXMiOlsid2VicGFjazovL2FsZ29yYW5kLWNyb3dkZnVuZGluZy1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9hbGdvc2RrL2Rpc3QvZXNtL2NsaWVudC92Mi9hbGdvZC9nZXRTeW5jUm91bmQuanM/NThiOSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgSlNPTlJlcXVlc3QgZnJvbSAnLi4vanNvbnJlcXVlc3QuanMnO1xuaW1wb3J0IHsgZGVjb2RlSlNPTiB9IGZyb20gJy4uLy4uLy4uL2VuY29kaW5nL2VuY29kaW5nLmpzJztcbmltcG9ydCB7IEdldFN5bmNSb3VuZFJlc3BvbnNlIH0gZnJvbSAnLi9tb2RlbHMvdHlwZXMuanMnO1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgR2V0U3luY1JvdW5kIGV4dGVuZHMgSlNPTlJlcXVlc3Qge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjbGFzcy1tZXRob2RzLXVzZS10aGlzXG4gICAgcGF0aCgpIHtcbiAgICAgICAgcmV0dXJuIGAvdjIvbGVkZ2VyL3N5bmNgO1xuICAgIH1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY2xhc3MtbWV0aG9kcy11c2UtdGhpc1xuICAgIHByZXBhcmUocmVzcG9uc2UpIHtcbiAgICAgICAgcmV0dXJuIGRlY29kZUpTT04ocmVzcG9uc2UuZ2V0SlNPTlRleHQoKSwgR2V0U3luY1JvdW5kUmVzcG9uc2UpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdldFN5bmNSb3VuZC5qcy5tYXAiXSwibmFtZXMiOlsiSlNPTlJlcXVlc3QiLCJkZWNvZGVKU09OIiwiR2V0U3luY1JvdW5kUmVzcG9uc2UiLCJHZXRTeW5jUm91bmQiLCJwYXRoIiwicHJlcGFyZSIsInJlc3BvbnNlIiwiZ2V0SlNPTlRleHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/getSyncRound.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/getTransactionGroupLedgerStateDeltasForRound.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/client/v2/algod/getTransactionGroupLedgerStateDeltasForRound.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ GetTransactionGroupLedgerStateDeltasForRound)\n/* harmony export */ });\n/* harmony import */ var _jsonrequest_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../jsonrequest.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/jsonrequest.js\");\n/* harmony import */ var _models_types_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./models/types.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/models/types.js\");\n/* harmony import */ var _encoding_encoding_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../encoding/encoding.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/encoding.js\");\n\n\n\nclass GetTransactionGroupLedgerStateDeltasForRound extends _jsonrequest_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(c, round){\n        super(c);\n        this.round = BigInt(round);\n        this.query = {\n            format: \"msgpack\"\n        };\n    }\n    // eslint-disable-next-line class-methods-use-this\n    path() {\n        return `/v2/deltas/${this.round}/txn/group`;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    prepare(response) {\n        return (0,_encoding_encoding_js__WEBPACK_IMPORTED_MODULE_2__.decodeMsgpack)(response.body, _models_types_js__WEBPACK_IMPORTED_MODULE_1__.TransactionGroupLedgerStateDeltasForRoundResponse);\n    }\n} //# sourceMappingURL=getTransactionGroupLedgerStateDeltasForRound.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9jbGllbnQvdjIvYWxnb2QvZ2V0VHJhbnNhY3Rpb25Hcm91cExlZGdlclN0YXRlRGVsdGFzRm9yUm91bmQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUE0QztBQUMwQztBQUN4QjtBQUMvQyxNQUFNRyxxREFBcURILHVEQUFXQTtJQUNqRkksWUFBWUMsQ0FBQyxFQUFFQyxLQUFLLENBQUU7UUFDbEIsS0FBSyxDQUFDRDtRQUNOLElBQUksQ0FBQ0MsS0FBSyxHQUFHQyxPQUFPRDtRQUNwQixJQUFJLENBQUNFLEtBQUssR0FBRztZQUFFQyxRQUFRO1FBQVU7SUFDckM7SUFDQSxrREFBa0Q7SUFDbERDLE9BQU87UUFDSCxPQUFPLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQ0osS0FBSyxDQUFDLFVBQVUsQ0FBQztJQUMvQztJQUNBLGtEQUFrRDtJQUNsREssUUFBUUMsUUFBUSxFQUFFO1FBQ2QsT0FBT1Ysb0VBQWFBLENBQUNVLFNBQVNDLElBQUksRUFBRVosK0ZBQWlEQTtJQUN6RjtBQUNKLEVBQ0Esd0VBQXdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWxnb3JhbmQtY3Jvd2RmdW5kaW5nLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vY2xpZW50L3YyL2FsZ29kL2dldFRyYW5zYWN0aW9uR3JvdXBMZWRnZXJTdGF0ZURlbHRhc0ZvclJvdW5kLmpzPzQzYzYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEpTT05SZXF1ZXN0IGZyb20gJy4uL2pzb25yZXF1ZXN0LmpzJztcbmltcG9ydCB7IFRyYW5zYWN0aW9uR3JvdXBMZWRnZXJTdGF0ZURlbHRhc0ZvclJvdW5kUmVzcG9uc2UgfSBmcm9tICcuL21vZGVscy90eXBlcy5qcyc7XG5pbXBvcnQgeyBkZWNvZGVNc2dwYWNrIH0gZnJvbSAnLi4vLi4vLi4vZW5jb2RpbmcvZW5jb2RpbmcuanMnO1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgR2V0VHJhbnNhY3Rpb25Hcm91cExlZGdlclN0YXRlRGVsdGFzRm9yUm91bmQgZXh0ZW5kcyBKU09OUmVxdWVzdCB7XG4gICAgY29uc3RydWN0b3IoYywgcm91bmQpIHtcbiAgICAgICAgc3VwZXIoYyk7XG4gICAgICAgIHRoaXMucm91bmQgPSBCaWdJbnQocm91bmQpO1xuICAgICAgICB0aGlzLnF1ZXJ5ID0geyBmb3JtYXQ6ICdtc2dwYWNrJyB9O1xuICAgIH1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY2xhc3MtbWV0aG9kcy11c2UtdGhpc1xuICAgIHBhdGgoKSB7XG4gICAgICAgIHJldHVybiBgL3YyL2RlbHRhcy8ke3RoaXMucm91bmR9L3R4bi9ncm91cGA7XG4gICAgfVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjbGFzcy1tZXRob2RzLXVzZS10aGlzXG4gICAgcHJlcGFyZShyZXNwb25zZSkge1xuICAgICAgICByZXR1cm4gZGVjb2RlTXNncGFjayhyZXNwb25zZS5ib2R5LCBUcmFuc2FjdGlvbkdyb3VwTGVkZ2VyU3RhdGVEZWx0YXNGb3JSb3VuZFJlc3BvbnNlKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nZXRUcmFuc2FjdGlvbkdyb3VwTGVkZ2VyU3RhdGVEZWx0YXNGb3JSb3VuZC5qcy5tYXAiXSwibmFtZXMiOlsiSlNPTlJlcXVlc3QiLCJUcmFuc2FjdGlvbkdyb3VwTGVkZ2VyU3RhdGVEZWx0YXNGb3JSb3VuZFJlc3BvbnNlIiwiZGVjb2RlTXNncGFjayIsIkdldFRyYW5zYWN0aW9uR3JvdXBMZWRnZXJTdGF0ZURlbHRhc0ZvclJvdW5kIiwiY29uc3RydWN0b3IiLCJjIiwicm91bmQiLCJCaWdJbnQiLCJxdWVyeSIsImZvcm1hdCIsInBhdGgiLCJwcmVwYXJlIiwicmVzcG9uc2UiLCJib2R5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/getTransactionGroupLedgerStateDeltasForRound.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/getTransactionProof.js":
/*!******************************************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/client/v2/algod/getTransactionProof.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ GetTransactionProof)\n/* harmony export */ });\n/* harmony import */ var _jsonrequest_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../jsonrequest.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/jsonrequest.js\");\n/* harmony import */ var _encoding_encoding_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../encoding/encoding.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/encoding.js\");\n/* harmony import */ var _models_types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./models/types.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/models/types.js\");\n\n\n\nclass GetTransactionProof extends _jsonrequest_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(c, round, txID){\n        super(c);\n        this.txID = txID;\n        this.round = BigInt(round);\n    }\n    path() {\n        return `/v2/blocks/${this.round}/transactions/${this.txID}/proof`;\n    }\n    /**\n     * Exclude assets and application data from results\n     * The type of hash function used to create the proof, must be one of: \"sha512_256\", \"sha256\"\n     *\n     * #### Example\n     * ```typescript\n     * const hashType = \"sha256\";\n     * const round = 123456;\n     * const txId = \"abc123;\n     * const txProof = await algodClient.getTransactionProof(round, txId)\n     *        .hashType(hashType)\n     *        .do();\n     * ```\n     *\n     * @param hashType\n     * @category query\n     */ hashType(hashType) {\n        this.query.hashtype = hashType;\n        return this;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    prepare(response) {\n        return (0,_encoding_encoding_js__WEBPACK_IMPORTED_MODULE_1__.decodeJSON)(response.getJSONText(), _models_types_js__WEBPACK_IMPORTED_MODULE_2__.TransactionProof);\n    }\n} //# sourceMappingURL=getTransactionProof.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9jbGllbnQvdjIvYWxnb2QvZ2V0VHJhbnNhY3Rpb25Qcm9vZi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQTRDO0FBQ2U7QUFDTjtBQUN0QyxNQUFNRyw0QkFBNEJILHVEQUFXQTtJQUN4REksWUFBWUMsQ0FBQyxFQUFFQyxLQUFLLEVBQUVDLElBQUksQ0FBRTtRQUN4QixLQUFLLENBQUNGO1FBQ04sSUFBSSxDQUFDRSxJQUFJLEdBQUdBO1FBQ1osSUFBSSxDQUFDRCxLQUFLLEdBQUdFLE9BQU9GO0lBQ3hCO0lBQ0FHLE9BQU87UUFDSCxPQUFPLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQ0gsS0FBSyxDQUFDLGNBQWMsRUFBRSxJQUFJLENBQUNDLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDckU7SUFDQTs7Ozs7Ozs7Ozs7Ozs7OztLQWdCQyxHQUNERyxTQUFTQSxRQUFRLEVBQUU7UUFDZixJQUFJLENBQUNDLEtBQUssQ0FBQ0MsUUFBUSxHQUFHRjtRQUN0QixPQUFPLElBQUk7SUFDZjtJQUNBLGtEQUFrRDtJQUNsREcsUUFBUUMsUUFBUSxFQUFFO1FBQ2QsT0FBT2IsaUVBQVVBLENBQUNhLFNBQVNDLFdBQVcsSUFBSWIsOERBQWdCQTtJQUM5RDtBQUNKLEVBQ0EsK0NBQStDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWxnb3JhbmQtY3Jvd2RmdW5kaW5nLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vY2xpZW50L3YyL2FsZ29kL2dldFRyYW5zYWN0aW9uUHJvb2YuanM/MjAwYyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgSlNPTlJlcXVlc3QgZnJvbSAnLi4vanNvbnJlcXVlc3QuanMnO1xuaW1wb3J0IHsgZGVjb2RlSlNPTiB9IGZyb20gJy4uLy4uLy4uL2VuY29kaW5nL2VuY29kaW5nLmpzJztcbmltcG9ydCB7IFRyYW5zYWN0aW9uUHJvb2YgfSBmcm9tICcuL21vZGVscy90eXBlcy5qcyc7XG5leHBvcnQgZGVmYXVsdCBjbGFzcyBHZXRUcmFuc2FjdGlvblByb29mIGV4dGVuZHMgSlNPTlJlcXVlc3Qge1xuICAgIGNvbnN0cnVjdG9yKGMsIHJvdW5kLCB0eElEKSB7XG4gICAgICAgIHN1cGVyKGMpO1xuICAgICAgICB0aGlzLnR4SUQgPSB0eElEO1xuICAgICAgICB0aGlzLnJvdW5kID0gQmlnSW50KHJvdW5kKTtcbiAgICB9XG4gICAgcGF0aCgpIHtcbiAgICAgICAgcmV0dXJuIGAvdjIvYmxvY2tzLyR7dGhpcy5yb3VuZH0vdHJhbnNhY3Rpb25zLyR7dGhpcy50eElEfS9wcm9vZmA7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEV4Y2x1ZGUgYXNzZXRzIGFuZCBhcHBsaWNhdGlvbiBkYXRhIGZyb20gcmVzdWx0c1xuICAgICAqIFRoZSB0eXBlIG9mIGhhc2ggZnVuY3Rpb24gdXNlZCB0byBjcmVhdGUgdGhlIHByb29mLCBtdXN0IGJlIG9uZSBvZjogXCJzaGE1MTJfMjU2XCIsIFwic2hhMjU2XCJcbiAgICAgKlxuICAgICAqICMjIyMgRXhhbXBsZVxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjb25zdCBoYXNoVHlwZSA9IFwic2hhMjU2XCI7XG4gICAgICogY29uc3Qgcm91bmQgPSAxMjM0NTY7XG4gICAgICogY29uc3QgdHhJZCA9IFwiYWJjMTIzO1xuICAgICAqIGNvbnN0IHR4UHJvb2YgPSBhd2FpdCBhbGdvZENsaWVudC5nZXRUcmFuc2FjdGlvblByb29mKHJvdW5kLCB0eElkKVxuICAgICAqICAgICAgICAuaGFzaFR5cGUoaGFzaFR5cGUpXG4gICAgICogICAgICAgIC5kbygpO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQHBhcmFtIGhhc2hUeXBlXG4gICAgICogQGNhdGVnb3J5IHF1ZXJ5XG4gICAgICovXG4gICAgaGFzaFR5cGUoaGFzaFR5cGUpIHtcbiAgICAgICAgdGhpcy5xdWVyeS5oYXNodHlwZSA9IGhhc2hUeXBlO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNsYXNzLW1ldGhvZHMtdXNlLXRoaXNcbiAgICBwcmVwYXJlKHJlc3BvbnNlKSB7XG4gICAgICAgIHJldHVybiBkZWNvZGVKU09OKHJlc3BvbnNlLmdldEpTT05UZXh0KCksIFRyYW5zYWN0aW9uUHJvb2YpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdldFRyYW5zYWN0aW9uUHJvb2YuanMubWFwIl0sIm5hbWVzIjpbIkpTT05SZXF1ZXN0IiwiZGVjb2RlSlNPTiIsIlRyYW5zYWN0aW9uUHJvb2YiLCJHZXRUcmFuc2FjdGlvblByb29mIiwiY29uc3RydWN0b3IiLCJjIiwicm91bmQiLCJ0eElEIiwiQmlnSW50IiwicGF0aCIsImhhc2hUeXBlIiwicXVlcnkiLCJoYXNodHlwZSIsInByZXBhcmUiLCJyZXNwb25zZSIsImdldEpTT05UZXh0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/getTransactionProof.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/healthCheck.js":
/*!**********************************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/client/v2/algod/healthCheck.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ HealthCheck)\n/* harmony export */ });\n/* harmony import */ var _jsonrequest_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../jsonrequest.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/jsonrequest.js\");\n\n/**\n * healthCheck returns an empty object iff the node is running\n */ class HealthCheck extends _jsonrequest_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    // eslint-disable-next-line class-methods-use-this\n    path() {\n        return \"/health\";\n    }\n    // eslint-disable-next-line class-methods-use-this, @typescript-eslint/no-unused-vars\n    prepare(_response) {}\n} //# sourceMappingURL=healthCheck.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9jbGllbnQvdjIvYWxnb2QvaGVhbHRoQ2hlY2suanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBNEM7QUFDNUM7O0NBRUMsR0FDYyxNQUFNQyxvQkFBb0JELHVEQUFXQTtJQUNoRCxrREFBa0Q7SUFDbERFLE9BQU87UUFDSCxPQUFPO0lBQ1g7SUFDQSxxRkFBcUY7SUFDckZDLFFBQVFDLFNBQVMsRUFBRSxDQUFFO0FBQ3pCLEVBQ0EsdUNBQXVDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWxnb3JhbmQtY3Jvd2RmdW5kaW5nLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vY2xpZW50L3YyL2FsZ29kL2hlYWx0aENoZWNrLmpzPzU3MjkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEpTT05SZXF1ZXN0IGZyb20gJy4uL2pzb25yZXF1ZXN0LmpzJztcbi8qKlxuICogaGVhbHRoQ2hlY2sgcmV0dXJucyBhbiBlbXB0eSBvYmplY3QgaWZmIHRoZSBub2RlIGlzIHJ1bm5pbmdcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSGVhbHRoQ2hlY2sgZXh0ZW5kcyBKU09OUmVxdWVzdCB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNsYXNzLW1ldGhvZHMtdXNlLXRoaXNcbiAgICBwYXRoKCkge1xuICAgICAgICByZXR1cm4gJy9oZWFsdGgnO1xuICAgIH1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY2xhc3MtbWV0aG9kcy11c2UtdGhpcywgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXG4gICAgcHJlcGFyZShfcmVzcG9uc2UpIHsgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aGVhbHRoQ2hlY2suanMubWFwIl0sIm5hbWVzIjpbIkpTT05SZXF1ZXN0IiwiSGVhbHRoQ2hlY2siLCJwYXRoIiwicHJlcGFyZSIsIl9yZXNwb25zZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/healthCheck.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/lightBlockHeaderProof.js":
/*!********************************************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/client/v2/algod/lightBlockHeaderProof.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ LightBlockHeaderProof)\n/* harmony export */ });\n/* harmony import */ var _jsonrequest_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../jsonrequest.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/jsonrequest.js\");\n/* harmony import */ var _encoding_encoding_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../encoding/encoding.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/encoding.js\");\n/* harmony import */ var _models_types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./models/types.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/models/types.js\");\n\n\n\nclass LightBlockHeaderProof extends _jsonrequest_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(c, round){\n        super(c);\n        this.round = BigInt(round);\n    }\n    path() {\n        return `/v2/blocks/${this.round}/lightheader/proof`;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    prepare(response) {\n        return (0,_encoding_encoding_js__WEBPACK_IMPORTED_MODULE_1__.decodeJSON)(response.getJSONText(), _models_types_js__WEBPACK_IMPORTED_MODULE_2__.LightBlockHeaderProof);\n    }\n} //# sourceMappingURL=lightBlockHeaderProof.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9jbGllbnQvdjIvYWxnb2QvbGlnaHRCbG9ja0hlYWRlclByb29mLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBNEM7QUFDZTtBQUNPO0FBQ25ELE1BQU1FLDhCQUE4QkYsdURBQVdBO0lBQzFESSxZQUFZQyxDQUFDLEVBQUVDLEtBQUssQ0FBRTtRQUNsQixLQUFLLENBQUNEO1FBQ04sSUFBSSxDQUFDQyxLQUFLLEdBQUdDLE9BQU9EO0lBQ3hCO0lBQ0FFLE9BQU87UUFDSCxPQUFPLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQ0YsS0FBSyxDQUFDLGtCQUFrQixDQUFDO0lBQ3ZEO0lBQ0Esa0RBQWtEO0lBQ2xERyxRQUFRQyxRQUFRLEVBQUU7UUFDZCxPQUFPVCxpRUFBVUEsQ0FBQ1MsU0FBU0MsV0FBVyxJQUFJUixtRUFBSUE7SUFDbEQ7QUFDSixFQUNBLGlEQUFpRCIsInNvdXJjZXMiOlsid2VicGFjazovL2FsZ29yYW5kLWNyb3dkZnVuZGluZy1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9hbGdvc2RrL2Rpc3QvZXNtL2NsaWVudC92Mi9hbGdvZC9saWdodEJsb2NrSGVhZGVyUHJvb2YuanM/MWMyNSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgSlNPTlJlcXVlc3QgZnJvbSAnLi4vanNvbnJlcXVlc3QuanMnO1xuaW1wb3J0IHsgZGVjb2RlSlNPTiB9IGZyb20gJy4uLy4uLy4uL2VuY29kaW5nL2VuY29kaW5nLmpzJztcbmltcG9ydCB7IExpZ2h0QmxvY2tIZWFkZXJQcm9vZiBhcyBMQkhQIH0gZnJvbSAnLi9tb2RlbHMvdHlwZXMuanMnO1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTGlnaHRCbG9ja0hlYWRlclByb29mIGV4dGVuZHMgSlNPTlJlcXVlc3Qge1xuICAgIGNvbnN0cnVjdG9yKGMsIHJvdW5kKSB7XG4gICAgICAgIHN1cGVyKGMpO1xuICAgICAgICB0aGlzLnJvdW5kID0gQmlnSW50KHJvdW5kKTtcbiAgICB9XG4gICAgcGF0aCgpIHtcbiAgICAgICAgcmV0dXJuIGAvdjIvYmxvY2tzLyR7dGhpcy5yb3VuZH0vbGlnaHRoZWFkZXIvcHJvb2ZgO1xuICAgIH1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY2xhc3MtbWV0aG9kcy11c2UtdGhpc1xuICAgIHByZXBhcmUocmVzcG9uc2UpIHtcbiAgICAgICAgcmV0dXJuIGRlY29kZUpTT04ocmVzcG9uc2UuZ2V0SlNPTlRleHQoKSwgTEJIUCk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bGlnaHRCbG9ja0hlYWRlclByb29mLmpzLm1hcCJdLCJuYW1lcyI6WyJKU09OUmVxdWVzdCIsImRlY29kZUpTT04iLCJMaWdodEJsb2NrSGVhZGVyUHJvb2YiLCJMQkhQIiwiY29uc3RydWN0b3IiLCJjIiwicm91bmQiLCJCaWdJbnQiLCJwYXRoIiwicHJlcGFyZSIsInJlc3BvbnNlIiwiZ2V0SlNPTlRleHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/lightBlockHeaderProof.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/models/types.js":
/*!***********************************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/client/v2/algod/models/types.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Account: () => (/* binding */ Account),\n/* harmony export */   AccountApplicationResponse: () => (/* binding */ AccountApplicationResponse),\n/* harmony export */   AccountAssetHolding: () => (/* binding */ AccountAssetHolding),\n/* harmony export */   AccountAssetResponse: () => (/* binding */ AccountAssetResponse),\n/* harmony export */   AccountAssetsInformationResponse: () => (/* binding */ AccountAssetsInformationResponse),\n/* harmony export */   AccountParticipation: () => (/* binding */ AccountParticipation),\n/* harmony export */   AccountStateDelta: () => (/* binding */ AccountStateDelta),\n/* harmony export */   AppCallLogs: () => (/* binding */ AppCallLogs),\n/* harmony export */   Application: () => (/* binding */ Application),\n/* harmony export */   ApplicationInitialStates: () => (/* binding */ ApplicationInitialStates),\n/* harmony export */   ApplicationKVStorage: () => (/* binding */ ApplicationKVStorage),\n/* harmony export */   ApplicationLocalReference: () => (/* binding */ ApplicationLocalReference),\n/* harmony export */   ApplicationLocalState: () => (/* binding */ ApplicationLocalState),\n/* harmony export */   ApplicationParams: () => (/* binding */ ApplicationParams),\n/* harmony export */   ApplicationStateOperation: () => (/* binding */ ApplicationStateOperation),\n/* harmony export */   ApplicationStateSchema: () => (/* binding */ ApplicationStateSchema),\n/* harmony export */   Asset: () => (/* binding */ Asset),\n/* harmony export */   AssetHolding: () => (/* binding */ AssetHolding),\n/* harmony export */   AssetHoldingReference: () => (/* binding */ AssetHoldingReference),\n/* harmony export */   AssetParams: () => (/* binding */ AssetParams),\n/* harmony export */   AvmKeyValue: () => (/* binding */ AvmKeyValue),\n/* harmony export */   AvmValue: () => (/* binding */ AvmValue),\n/* harmony export */   BlockHashResponse: () => (/* binding */ BlockHashResponse),\n/* harmony export */   BlockLogsResponse: () => (/* binding */ BlockLogsResponse),\n/* harmony export */   BlockResponse: () => (/* binding */ BlockResponse),\n/* harmony export */   BlockTxidsResponse: () => (/* binding */ BlockTxidsResponse),\n/* harmony export */   Box: () => (/* binding */ Box),\n/* harmony export */   BoxDescriptor: () => (/* binding */ BoxDescriptor),\n/* harmony export */   BoxReference: () => (/* binding */ BoxReference),\n/* harmony export */   BoxesResponse: () => (/* binding */ BoxesResponse),\n/* harmony export */   BuildVersion: () => (/* binding */ BuildVersion),\n/* harmony export */   CompileResponse: () => (/* binding */ CompileResponse),\n/* harmony export */   DisassembleResponse: () => (/* binding */ DisassembleResponse),\n/* harmony export */   DryrunRequest: () => (/* binding */ DryrunRequest),\n/* harmony export */   DryrunResponse: () => (/* binding */ DryrunResponse),\n/* harmony export */   DryrunSource: () => (/* binding */ DryrunSource),\n/* harmony export */   DryrunState: () => (/* binding */ DryrunState),\n/* harmony export */   DryrunTxnResult: () => (/* binding */ DryrunTxnResult),\n/* harmony export */   ErrorResponse: () => (/* binding */ ErrorResponse),\n/* harmony export */   EvalDelta: () => (/* binding */ EvalDelta),\n/* harmony export */   EvalDeltaKeyValue: () => (/* binding */ EvalDeltaKeyValue),\n/* harmony export */   Genesis: () => (/* binding */ Genesis),\n/* harmony export */   GenesisAllocation: () => (/* binding */ GenesisAllocation),\n/* harmony export */   GetBlockTimeStampOffsetResponse: () => (/* binding */ GetBlockTimeStampOffsetResponse),\n/* harmony export */   GetSyncRoundResponse: () => (/* binding */ GetSyncRoundResponse),\n/* harmony export */   LedgerStateDeltaForTransactionGroup: () => (/* binding */ LedgerStateDeltaForTransactionGroup),\n/* harmony export */   LightBlockHeaderProof: () => (/* binding */ LightBlockHeaderProof),\n/* harmony export */   NodeStatusResponse: () => (/* binding */ NodeStatusResponse),\n/* harmony export */   PendingTransactionResponse: () => (/* binding */ PendingTransactionResponse),\n/* harmony export */   PendingTransactionsResponse: () => (/* binding */ PendingTransactionsResponse),\n/* harmony export */   PostTransactionsResponse: () => (/* binding */ PostTransactionsResponse),\n/* harmony export */   ScratchChange: () => (/* binding */ ScratchChange),\n/* harmony export */   SimulateInitialStates: () => (/* binding */ SimulateInitialStates),\n/* harmony export */   SimulateRequest: () => (/* binding */ SimulateRequest),\n/* harmony export */   SimulateRequestTransactionGroup: () => (/* binding */ SimulateRequestTransactionGroup),\n/* harmony export */   SimulateResponse: () => (/* binding */ SimulateResponse),\n/* harmony export */   SimulateTraceConfig: () => (/* binding */ SimulateTraceConfig),\n/* harmony export */   SimulateTransactionGroupResult: () => (/* binding */ SimulateTransactionGroupResult),\n/* harmony export */   SimulateTransactionResult: () => (/* binding */ SimulateTransactionResult),\n/* harmony export */   SimulateUnnamedResourcesAccessed: () => (/* binding */ SimulateUnnamedResourcesAccessed),\n/* harmony export */   SimulationEvalOverrides: () => (/* binding */ SimulationEvalOverrides),\n/* harmony export */   SimulationOpcodeTraceUnit: () => (/* binding */ SimulationOpcodeTraceUnit),\n/* harmony export */   SimulationTransactionExecTrace: () => (/* binding */ SimulationTransactionExecTrace),\n/* harmony export */   StateProof: () => (/* binding */ StateProof),\n/* harmony export */   StateProofMessage: () => (/* binding */ StateProofMessage),\n/* harmony export */   SupplyResponse: () => (/* binding */ SupplyResponse),\n/* harmony export */   TealKeyValue: () => (/* binding */ TealKeyValue),\n/* harmony export */   TealValue: () => (/* binding */ TealValue),\n/* harmony export */   TransactionGroupLedgerStateDeltasForRoundResponse: () => (/* binding */ TransactionGroupLedgerStateDeltasForRoundResponse),\n/* harmony export */   TransactionParametersResponse: () => (/* binding */ TransactionParametersResponse),\n/* harmony export */   TransactionProof: () => (/* binding */ TransactionProof),\n/* harmony export */   Version: () => (/* binding */ Version)\n/* harmony export */ });\n/* harmony import */ var _utils_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../utils/utils.js */ \"(ssr)/./node_modules/algosdk/dist/esm/utils/utils.js\");\n/* harmony import */ var _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../encoding/schema/index.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/schema/index.js\");\n/* harmony import */ var _encoding_binarydata_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../encoding/binarydata.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/binarydata.js\");\n/* harmony import */ var _types_block_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../types/block.js */ \"(ssr)/./node_modules/algosdk/dist/esm/types/block.js\");\n/* harmony import */ var _types_statedelta_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../types/statedelta.js */ \"(ssr)/./node_modules/algosdk/dist/esm/types/statedelta.js\");\n/* harmony import */ var _signedTransaction_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../signedTransaction.js */ \"(ssr)/./node_modules/algosdk/dist/esm/signedTransaction.js\");\n/* harmony import */ var _encoding_address_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../encoding/address.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/address.js\");\n/* harmony import */ var _untypedmodel_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../untypedmodel.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/untypedmodel.js\");\n/**\n * NOTICE: This file was generated. Editing this file manually is not recommended.\n */ /* eslint-disable no-use-before-define */ \n\n\n\n\n\n\n\n/**\n * Account information at a given round.\n * Definition:\n * data/basics/userBalance.go : AccountData\n */ class Account {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"address\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema(),\n                omitEmpty: true\n            }, {\n                key: \"amount\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            }, {\n                key: \"amount-without-pending-rewards\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            }, {\n                key: \"min-balance\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            }, {\n                key: \"pending-rewards\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            }, {\n                key: \"rewards\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            }, {\n                key: \"round\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            }, {\n                key: \"status\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema(),\n                omitEmpty: true\n            }, {\n                key: \"total-apps-opted-in\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            }, {\n                key: \"total-assets-opted-in\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            }, {\n                key: \"total-created-apps\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            }, {\n                key: \"total-created-assets\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            }, {\n                key: \"apps-local-state\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ArraySchema(ApplicationLocalState.encodingSchema)),\n                omitEmpty: true\n            }, {\n                key: \"apps-total-extra-pages\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema()),\n                omitEmpty: true\n            }, {\n                key: \"apps-total-schema\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(ApplicationStateSchema.encodingSchema),\n                omitEmpty: true\n            }, {\n                key: \"assets\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ArraySchema(AssetHolding.encodingSchema)),\n                omitEmpty: true\n            }, {\n                key: \"auth-addr\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema()),\n                omitEmpty: true\n            }, {\n                key: \"created-apps\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ArraySchema(Application.encodingSchema)),\n                omitEmpty: true\n            }, {\n                key: \"created-assets\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ArraySchema(Asset.encodingSchema)),\n                omitEmpty: true\n            }, {\n                key: \"incentive-eligible\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.BooleanSchema()),\n                omitEmpty: true\n            }, {\n                key: \"last-heartbeat\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema()),\n                omitEmpty: true\n            }, {\n                key: \"last-proposed\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema()),\n                omitEmpty: true\n            }, {\n                key: \"participation\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(AccountParticipation.encodingSchema),\n                omitEmpty: true\n            }, {\n                key: \"reward-base\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema()),\n                omitEmpty: true\n            }, {\n                key: \"sig-type\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema()),\n                omitEmpty: true\n            }, {\n                key: \"total-box-bytes\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema()),\n                omitEmpty: true\n            }, {\n                key: \"total-boxes\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema()),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `Account` object.\n     * @param address - the account public key\n     * @param amount - (algo) total number of MicroAlgos in the account\n     * @param amountWithoutPendingRewards - specifies the amount of MicroAlgos in the account, without the pending rewards.\n     * @param minBalance - MicroAlgo balance required by the account.\n     * The requirement grows based on asset and application usage.\n     * @param pendingRewards - amount of MicroAlgos of pending rewards in this account.\n     * @param rewards - (ern) total rewards of MicroAlgos the account has received, including pending\n     * rewards.\n     * @param round - The round for which this information is relevant.\n     * @param status - (onl) delegation status of the account's MicroAlgos\n     * * Offline - indicates that the associated account is delegated.\n     * * Online - indicates that the associated account used as part of the delegation\n     * pool.\n     * * NotParticipating - indicates that the associated account is neither a\n     * delegator nor a delegate.\n     * @param totalAppsOptedIn - The count of all applications that have been opted in, equivalent to the count\n     * of application local data (AppLocalState objects) stored in this account.\n     * @param totalAssetsOptedIn - The count of all assets that have been opted in, equivalent to the count of\n     * AssetHolding objects held by this account.\n     * @param totalCreatedApps - The count of all apps (AppParams objects) created by this account.\n     * @param totalCreatedAssets - The count of all assets (AssetParams objects) created by this account.\n     * @param appsLocalState - (appl) applications local data stored in this account.\n     * Note the raw object uses `map[int] -> AppLocalState` for this type.\n     * @param appsTotalExtraPages - (teap) the sum of all extra application program pages for this account.\n     * @param appsTotalSchema - (tsch) stores the sum of all of the local schemas and global schemas in this\n     * account.\n     * Note: the raw account uses `StateSchema` for this type.\n     * @param assets - (asset) assets held by this account.\n     * Note the raw object uses `map[int] -> AssetHolding` for this type.\n     * @param authAddr - (spend) the address against which signing should be checked. If empty, the\n     * address of the current account is used. This field can be updated in any\n     * transaction by setting the RekeyTo field.\n     * @param createdApps - (appp) parameters of applications created by this account including app global\n     * data.\n     * Note: the raw account uses `map[int] -> AppParams` for this type.\n     * @param createdAssets - (apar) parameters of assets created by this account.\n     * Note: the raw account uses `map[int] -> Asset` for this type.\n     * @param incentiveEligible - Whether or not the account can receive block incentives if its balance is in\n     * range at proposal time.\n     * @param lastHeartbeat - The round in which this account last went online, or explicitly renewed their\n     * online status.\n     * @param lastProposed - The round in which this account last proposed the block.\n     * @param participation - AccountParticipation describes the parameters used by this account in consensus\n     * protocol.\n     * @param rewardBase - (ebase) used as part of the rewards computation. Only applicable to accounts\n     * which are participating.\n     * @param sigType - Indicates what type of signature is used by this account, must be one of:\n     * * sig\n     * * msig\n     * * lsig\n     * @param totalBoxBytes - (tbxb) The total number of bytes used by this account's app's box keys and\n     * values.\n     * @param totalBoxes - (tbx) The number of existing boxes created by this account's app.\n     */ constructor({ address, amount, amountWithoutPendingRewards, minBalance, pendingRewards, rewards, round, status, totalAppsOptedIn, totalAssetsOptedIn, totalCreatedApps, totalCreatedAssets, appsLocalState, appsTotalExtraPages, appsTotalSchema, assets, authAddr, createdApps, createdAssets, incentiveEligible, lastHeartbeat, lastProposed, participation, rewardBase, sigType, totalBoxBytes, totalBoxes }){\n        this.address = address;\n        this.amount = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(amount);\n        this.amountWithoutPendingRewards = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(amountWithoutPendingRewards);\n        this.minBalance = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(minBalance);\n        this.pendingRewards = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(pendingRewards);\n        this.rewards = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(rewards);\n        this.round = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(round);\n        this.status = status;\n        this.totalAppsOptedIn = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureSafeInteger)(totalAppsOptedIn);\n        this.totalAssetsOptedIn = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureSafeInteger)(totalAssetsOptedIn);\n        this.totalCreatedApps = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureSafeInteger)(totalCreatedApps);\n        this.totalCreatedAssets = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureSafeInteger)(totalCreatedAssets);\n        this.appsLocalState = appsLocalState;\n        this.appsTotalExtraPages = typeof appsTotalExtraPages === \"undefined\" ? undefined : (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureSafeInteger)(appsTotalExtraPages);\n        this.appsTotalSchema = appsTotalSchema;\n        this.assets = assets;\n        this.authAddr = typeof authAddr === \"string\" ? _encoding_address_js__WEBPACK_IMPORTED_MODULE_6__.Address.fromString(authAddr) : authAddr;\n        this.createdApps = createdApps;\n        this.createdAssets = createdAssets;\n        this.incentiveEligible = incentiveEligible;\n        this.lastHeartbeat = typeof lastHeartbeat === \"undefined\" ? undefined : (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureSafeInteger)(lastHeartbeat);\n        this.lastProposed = typeof lastProposed === \"undefined\" ? undefined : (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureSafeInteger)(lastProposed);\n        this.participation = participation;\n        this.rewardBase = typeof rewardBase === \"undefined\" ? undefined : (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(rewardBase);\n        this.sigType = sigType;\n        this.totalBoxBytes = typeof totalBoxBytes === \"undefined\" ? undefined : (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureSafeInteger)(totalBoxBytes);\n        this.totalBoxes = typeof totalBoxes === \"undefined\" ? undefined : (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureSafeInteger)(totalBoxes);\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return Account.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"address\",\n                this.address\n            ],\n            [\n                \"amount\",\n                this.amount\n            ],\n            [\n                \"amount-without-pending-rewards\",\n                this.amountWithoutPendingRewards\n            ],\n            [\n                \"min-balance\",\n                this.minBalance\n            ],\n            [\n                \"pending-rewards\",\n                this.pendingRewards\n            ],\n            [\n                \"rewards\",\n                this.rewards\n            ],\n            [\n                \"round\",\n                this.round\n            ],\n            [\n                \"status\",\n                this.status\n            ],\n            [\n                \"total-apps-opted-in\",\n                this.totalAppsOptedIn\n            ],\n            [\n                \"total-assets-opted-in\",\n                this.totalAssetsOptedIn\n            ],\n            [\n                \"total-created-apps\",\n                this.totalCreatedApps\n            ],\n            [\n                \"total-created-assets\",\n                this.totalCreatedAssets\n            ],\n            [\n                \"apps-local-state\",\n                typeof this.appsLocalState !== \"undefined\" ? this.appsLocalState.map((v)=>v.toEncodingData()) : undefined\n            ],\n            [\n                \"apps-total-extra-pages\",\n                this.appsTotalExtraPages\n            ],\n            [\n                \"apps-total-schema\",\n                typeof this.appsTotalSchema !== \"undefined\" ? this.appsTotalSchema.toEncodingData() : undefined\n            ],\n            [\n                \"assets\",\n                typeof this.assets !== \"undefined\" ? this.assets.map((v)=>v.toEncodingData()) : undefined\n            ],\n            [\n                \"auth-addr\",\n                typeof this.authAddr !== \"undefined\" ? this.authAddr.toString() : undefined\n            ],\n            [\n                \"created-apps\",\n                typeof this.createdApps !== \"undefined\" ? this.createdApps.map((v)=>v.toEncodingData()) : undefined\n            ],\n            [\n                \"created-assets\",\n                typeof this.createdAssets !== \"undefined\" ? this.createdAssets.map((v)=>v.toEncodingData()) : undefined\n            ],\n            [\n                \"incentive-eligible\",\n                this.incentiveEligible\n            ],\n            [\n                \"last-heartbeat\",\n                this.lastHeartbeat\n            ],\n            [\n                \"last-proposed\",\n                this.lastProposed\n            ],\n            [\n                \"participation\",\n                typeof this.participation !== \"undefined\" ? this.participation.toEncodingData() : undefined\n            ],\n            [\n                \"reward-base\",\n                this.rewardBase\n            ],\n            [\n                \"sig-type\",\n                this.sigType\n            ],\n            [\n                \"total-box-bytes\",\n                this.totalBoxBytes\n            ],\n            [\n                \"total-boxes\",\n                this.totalBoxes\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded Account: ${data}`);\n        }\n        return new Account({\n            address: data.get(\"address\"),\n            amount: data.get(\"amount\"),\n            amountWithoutPendingRewards: data.get(\"amount-without-pending-rewards\"),\n            minBalance: data.get(\"min-balance\"),\n            pendingRewards: data.get(\"pending-rewards\"),\n            rewards: data.get(\"rewards\"),\n            round: data.get(\"round\"),\n            status: data.get(\"status\"),\n            totalAppsOptedIn: data.get(\"total-apps-opted-in\"),\n            totalAssetsOptedIn: data.get(\"total-assets-opted-in\"),\n            totalCreatedApps: data.get(\"total-created-apps\"),\n            totalCreatedAssets: data.get(\"total-created-assets\"),\n            appsLocalState: typeof data.get(\"apps-local-state\") !== \"undefined\" ? data.get(\"apps-local-state\").map((v)=>ApplicationLocalState.fromEncodingData(v)) : undefined,\n            appsTotalExtraPages: data.get(\"apps-total-extra-pages\"),\n            appsTotalSchema: typeof data.get(\"apps-total-schema\") !== \"undefined\" ? ApplicationStateSchema.fromEncodingData(data.get(\"apps-total-schema\")) : undefined,\n            assets: typeof data.get(\"assets\") !== \"undefined\" ? data.get(\"assets\").map((v)=>AssetHolding.fromEncodingData(v)) : undefined,\n            authAddr: data.get(\"auth-addr\"),\n            createdApps: typeof data.get(\"created-apps\") !== \"undefined\" ? data.get(\"created-apps\").map((v)=>Application.fromEncodingData(v)) : undefined,\n            createdAssets: typeof data.get(\"created-assets\") !== \"undefined\" ? data.get(\"created-assets\").map((v)=>Asset.fromEncodingData(v)) : undefined,\n            incentiveEligible: data.get(\"incentive-eligible\"),\n            lastHeartbeat: data.get(\"last-heartbeat\"),\n            lastProposed: data.get(\"last-proposed\"),\n            participation: typeof data.get(\"participation\") !== \"undefined\" ? AccountParticipation.fromEncodingData(data.get(\"participation\")) : undefined,\n            rewardBase: data.get(\"reward-base\"),\n            sigType: data.get(\"sig-type\"),\n            totalBoxBytes: data.get(\"total-box-bytes\"),\n            totalBoxes: data.get(\"total-boxes\")\n        });\n    }\n}\n/**\n * AccountApplicationResponse describes the account's application local state and\n * global state (AppLocalState and AppParams, if either exists) for a specific\n * application ID. Global state will only be returned if the provided address is\n * the application's creator.\n */ class AccountApplicationResponse {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"round\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            }, {\n                key: \"app-local-state\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(ApplicationLocalState.encodingSchema),\n                omitEmpty: true\n            }, {\n                key: \"created-app\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(ApplicationParams.encodingSchema),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `AccountApplicationResponse` object.\n     * @param round - The round for which this information is relevant.\n     * @param appLocalState - (appl) the application local data stored in this account.\n     * The raw account uses `AppLocalState` for this type.\n     * @param createdApp - (appp) parameters of the application created by this account including app\n     * global data.\n     * The raw account uses `AppParams` for this type.\n     */ constructor({ round, appLocalState, createdApp }){\n        this.round = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(round);\n        this.appLocalState = appLocalState;\n        this.createdApp = createdApp;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return AccountApplicationResponse.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"round\",\n                this.round\n            ],\n            [\n                \"app-local-state\",\n                typeof this.appLocalState !== \"undefined\" ? this.appLocalState.toEncodingData() : undefined\n            ],\n            [\n                \"created-app\",\n                typeof this.createdApp !== \"undefined\" ? this.createdApp.toEncodingData() : undefined\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded AccountApplicationResponse: ${data}`);\n        }\n        return new AccountApplicationResponse({\n            round: data.get(\"round\"),\n            appLocalState: typeof data.get(\"app-local-state\") !== \"undefined\" ? ApplicationLocalState.fromEncodingData(data.get(\"app-local-state\")) : undefined,\n            createdApp: typeof data.get(\"created-app\") !== \"undefined\" ? ApplicationParams.fromEncodingData(data.get(\"created-app\")) : undefined\n        });\n    }\n}\n/**\n * AccountAssetHolding describes the account's asset holding and asset parameters\n * (if either exist) for a specific asset ID.\n */ class AccountAssetHolding {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"asset-holding\",\n                valueSchema: AssetHolding.encodingSchema,\n                omitEmpty: true\n            }, {\n                key: \"asset-params\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(AssetParams.encodingSchema),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `AccountAssetHolding` object.\n     * @param assetHolding - (asset) Details about the asset held by this account.\n     * The raw account uses `AssetHolding` for this type.\n     * @param assetParams - (apar) parameters of the asset held by this account.\n     * The raw account uses `AssetParams` for this type.\n     */ constructor({ assetHolding, assetParams }){\n        this.assetHolding = assetHolding;\n        this.assetParams = assetParams;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return AccountAssetHolding.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"asset-holding\",\n                this.assetHolding.toEncodingData()\n            ],\n            [\n                \"asset-params\",\n                typeof this.assetParams !== \"undefined\" ? this.assetParams.toEncodingData() : undefined\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded AccountAssetHolding: ${data}`);\n        }\n        return new AccountAssetHolding({\n            assetHolding: AssetHolding.fromEncodingData(data.get(\"asset-holding\") ?? new Map()),\n            assetParams: typeof data.get(\"asset-params\") !== \"undefined\" ? AssetParams.fromEncodingData(data.get(\"asset-params\")) : undefined\n        });\n    }\n}\n/**\n * AccountAssetResponse describes the account's asset holding and asset parameters\n * (if either exist) for a specific asset ID. Asset parameters will only be\n * returned if the provided address is the asset's creator.\n */ class AccountAssetResponse {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"round\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            }, {\n                key: \"asset-holding\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(AssetHolding.encodingSchema),\n                omitEmpty: true\n            }, {\n                key: \"created-asset\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(AssetParams.encodingSchema),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `AccountAssetResponse` object.\n     * @param round - The round for which this information is relevant.\n     * @param assetHolding - (asset) Details about the asset held by this account.\n     * The raw account uses `AssetHolding` for this type.\n     * @param createdAsset - (apar) parameters of the asset created by this account.\n     * The raw account uses `AssetParams` for this type.\n     */ constructor({ round, assetHolding, createdAsset }){\n        this.round = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(round);\n        this.assetHolding = assetHolding;\n        this.createdAsset = createdAsset;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return AccountAssetResponse.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"round\",\n                this.round\n            ],\n            [\n                \"asset-holding\",\n                typeof this.assetHolding !== \"undefined\" ? this.assetHolding.toEncodingData() : undefined\n            ],\n            [\n                \"created-asset\",\n                typeof this.createdAsset !== \"undefined\" ? this.createdAsset.toEncodingData() : undefined\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded AccountAssetResponse: ${data}`);\n        }\n        return new AccountAssetResponse({\n            round: data.get(\"round\"),\n            assetHolding: typeof data.get(\"asset-holding\") !== \"undefined\" ? AssetHolding.fromEncodingData(data.get(\"asset-holding\")) : undefined,\n            createdAsset: typeof data.get(\"created-asset\") !== \"undefined\" ? AssetParams.fromEncodingData(data.get(\"created-asset\")) : undefined\n        });\n    }\n}\n/**\n * AccountAssetsInformationResponse contains a list of assets held by an account.\n */ class AccountAssetsInformationResponse {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"round\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            }, {\n                key: \"asset-holdings\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ArraySchema(AccountAssetHolding.encodingSchema)),\n                omitEmpty: true\n            }, {\n                key: \"next-token\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema()),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `AccountAssetsInformationResponse` object.\n     * @param round - The round for which this information is relevant.\n     * @param assetHoldings -\n     * @param nextToken - Used for pagination, when making another request provide this token with the\n     * next parameter.\n     */ constructor({ round, assetHoldings, nextToken }){\n        this.round = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureSafeInteger)(round);\n        this.assetHoldings = assetHoldings;\n        this.nextToken = nextToken;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return AccountAssetsInformationResponse.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"round\",\n                this.round\n            ],\n            [\n                \"asset-holdings\",\n                typeof this.assetHoldings !== \"undefined\" ? this.assetHoldings.map((v)=>v.toEncodingData()) : undefined\n            ],\n            [\n                \"next-token\",\n                this.nextToken\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded AccountAssetsInformationResponse: ${data}`);\n        }\n        return new AccountAssetsInformationResponse({\n            round: data.get(\"round\"),\n            assetHoldings: typeof data.get(\"asset-holdings\") !== \"undefined\" ? data.get(\"asset-holdings\").map((v)=>AccountAssetHolding.fromEncodingData(v)) : undefined,\n            nextToken: data.get(\"next-token\")\n        });\n    }\n}\n/**\n * AccountParticipation describes the parameters used by this account in consensus\n * protocol.\n */ class AccountParticipation {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"selection-participation-key\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ByteArraySchema(),\n                omitEmpty: true\n            }, {\n                key: \"vote-first-valid\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            }, {\n                key: \"vote-key-dilution\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            }, {\n                key: \"vote-last-valid\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            }, {\n                key: \"vote-participation-key\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ByteArraySchema(),\n                omitEmpty: true\n            }, {\n                key: \"state-proof-key\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ByteArraySchema()),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `AccountParticipation` object.\n     * @param selectionParticipationKey - (sel) Selection public key (if any) currently registered for this round.\n     * @param voteFirstValid - (voteFst) First round for which this participation is valid.\n     * @param voteKeyDilution - (voteKD) Number of subkeys in each batch of participation keys.\n     * @param voteLastValid - (voteLst) Last round for which this participation is valid.\n     * @param voteParticipationKey - (vote) root participation public key (if any) currently registered for this\n     * round.\n     * @param stateProofKey - (stprf) Root of the state proof key (if any)\n     */ constructor({ selectionParticipationKey, voteFirstValid, voteKeyDilution, voteLastValid, voteParticipationKey, stateProofKey }){\n        this.selectionParticipationKey = typeof selectionParticipationKey === \"string\" ? (0,_encoding_binarydata_js__WEBPACK_IMPORTED_MODULE_2__.base64ToBytes)(selectionParticipationKey) : selectionParticipationKey;\n        this.voteFirstValid = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(voteFirstValid);\n        this.voteKeyDilution = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(voteKeyDilution);\n        this.voteLastValid = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(voteLastValid);\n        this.voteParticipationKey = typeof voteParticipationKey === \"string\" ? (0,_encoding_binarydata_js__WEBPACK_IMPORTED_MODULE_2__.base64ToBytes)(voteParticipationKey) : voteParticipationKey;\n        this.stateProofKey = typeof stateProofKey === \"string\" ? (0,_encoding_binarydata_js__WEBPACK_IMPORTED_MODULE_2__.base64ToBytes)(stateProofKey) : stateProofKey;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return AccountParticipation.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"selection-participation-key\",\n                this.selectionParticipationKey\n            ],\n            [\n                \"vote-first-valid\",\n                this.voteFirstValid\n            ],\n            [\n                \"vote-key-dilution\",\n                this.voteKeyDilution\n            ],\n            [\n                \"vote-last-valid\",\n                this.voteLastValid\n            ],\n            [\n                \"vote-participation-key\",\n                this.voteParticipationKey\n            ],\n            [\n                \"state-proof-key\",\n                this.stateProofKey\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded AccountParticipation: ${data}`);\n        }\n        return new AccountParticipation({\n            selectionParticipationKey: data.get(\"selection-participation-key\"),\n            voteFirstValid: data.get(\"vote-first-valid\"),\n            voteKeyDilution: data.get(\"vote-key-dilution\"),\n            voteLastValid: data.get(\"vote-last-valid\"),\n            voteParticipationKey: data.get(\"vote-participation-key\"),\n            stateProofKey: data.get(\"state-proof-key\")\n        });\n    }\n}\n/**\n * Application state delta.\n */ class AccountStateDelta {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"address\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema(),\n                omitEmpty: true\n            }, {\n                key: \"delta\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ArraySchema(EvalDeltaKeyValue.encodingSchema),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `AccountStateDelta` object.\n     * @param address -\n     * @param delta - Application state delta.\n     */ constructor({ address, delta }){\n        this.address = address;\n        this.delta = delta;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return AccountStateDelta.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"address\",\n                this.address\n            ],\n            [\n                \"delta\",\n                this.delta.map((v)=>v.toEncodingData())\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded AccountStateDelta: ${data}`);\n        }\n        return new AccountStateDelta({\n            address: data.get(\"address\"),\n            delta: (data.get(\"delta\") ?? []).map((v)=>EvalDeltaKeyValue.fromEncodingData(v))\n        });\n    }\n}\n/**\n * The logged messages from an app call along with the app ID and outer transaction\n * ID. Logs appear in the same order that they were emitted.\n */ class AppCallLogs {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"application-index\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            }, {\n                key: \"logs\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ArraySchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ByteArraySchema()),\n                omitEmpty: true\n            }, {\n                key: \"txId\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema(),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `AppCallLogs` object.\n     * @param applicationIndex - The application from which the logs were generated\n     * @param logs - An array of logs\n     * @param txid - The transaction ID of the outer app call that lead to these logs\n     */ constructor({ applicationIndex, logs, txid }){\n        this.applicationIndex = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureSafeInteger)(applicationIndex);\n        this.logs = logs;\n        this.txid = txid;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return AppCallLogs.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"application-index\",\n                this.applicationIndex\n            ],\n            [\n                \"logs\",\n                this.logs\n            ],\n            [\n                \"txId\",\n                this.txid\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded AppCallLogs: ${data}`);\n        }\n        return new AppCallLogs({\n            applicationIndex: data.get(\"application-index\"),\n            logs: data.get(\"logs\"),\n            txid: data.get(\"txId\")\n        });\n    }\n}\n/**\n * Application index and its parameters\n */ class Application {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"id\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            }, {\n                key: \"params\",\n                valueSchema: ApplicationParams.encodingSchema,\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `Application` object.\n     * @param id - (appidx) application index.\n     * @param params - (appparams) application parameters.\n     */ constructor({ id, params }){\n        this.id = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(id);\n        this.params = params;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return Application.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"id\",\n                this.id\n            ],\n            [\n                \"params\",\n                this.params.toEncodingData()\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded Application: ${data}`);\n        }\n        return new Application({\n            id: data.get(\"id\"),\n            params: ApplicationParams.fromEncodingData(data.get(\"params\") ?? new Map())\n        });\n    }\n}\n/**\n * An application's initial global/local/box states that were accessed during\n * simulation.\n */ class ApplicationInitialStates {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"id\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            }, {\n                key: \"app-boxes\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(ApplicationKVStorage.encodingSchema),\n                omitEmpty: true\n            }, {\n                key: \"app-globals\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(ApplicationKVStorage.encodingSchema),\n                omitEmpty: true\n            }, {\n                key: \"app-locals\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ArraySchema(ApplicationKVStorage.encodingSchema)),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `ApplicationInitialStates` object.\n     * @param id - Application index.\n     * @param appBoxes - An application's global/local/box state.\n     * @param appGlobals - An application's global/local/box state.\n     * @param appLocals - An application's initial local states tied to different accounts.\n     */ constructor({ id, appBoxes, appGlobals, appLocals }){\n        this.id = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(id);\n        this.appBoxes = appBoxes;\n        this.appGlobals = appGlobals;\n        this.appLocals = appLocals;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return ApplicationInitialStates.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"id\",\n                this.id\n            ],\n            [\n                \"app-boxes\",\n                typeof this.appBoxes !== \"undefined\" ? this.appBoxes.toEncodingData() : undefined\n            ],\n            [\n                \"app-globals\",\n                typeof this.appGlobals !== \"undefined\" ? this.appGlobals.toEncodingData() : undefined\n            ],\n            [\n                \"app-locals\",\n                typeof this.appLocals !== \"undefined\" ? this.appLocals.map((v)=>v.toEncodingData()) : undefined\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded ApplicationInitialStates: ${data}`);\n        }\n        return new ApplicationInitialStates({\n            id: data.get(\"id\"),\n            appBoxes: typeof data.get(\"app-boxes\") !== \"undefined\" ? ApplicationKVStorage.fromEncodingData(data.get(\"app-boxes\")) : undefined,\n            appGlobals: typeof data.get(\"app-globals\") !== \"undefined\" ? ApplicationKVStorage.fromEncodingData(data.get(\"app-globals\")) : undefined,\n            appLocals: typeof data.get(\"app-locals\") !== \"undefined\" ? data.get(\"app-locals\").map((v)=>ApplicationKVStorage.fromEncodingData(v)) : undefined\n        });\n    }\n}\n/**\n * An application's global/local/box state.\n */ class ApplicationKVStorage {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"kvs\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ArraySchema(AvmKeyValue.encodingSchema),\n                omitEmpty: true\n            }, {\n                key: \"account\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema()),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `ApplicationKVStorage` object.\n     * @param kvs - Key-Value pairs representing application states.\n     * @param account - The address of the account associated with the local state.\n     */ constructor({ kvs, account }){\n        this.kvs = kvs;\n        this.account = typeof account === \"string\" ? _encoding_address_js__WEBPACK_IMPORTED_MODULE_6__.Address.fromString(account) : account;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return ApplicationKVStorage.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"kvs\",\n                this.kvs.map((v)=>v.toEncodingData())\n            ],\n            [\n                \"account\",\n                typeof this.account !== \"undefined\" ? this.account.toString() : undefined\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded ApplicationKVStorage: ${data}`);\n        }\n        return new ApplicationKVStorage({\n            kvs: (data.get(\"kvs\") ?? []).map((v)=>AvmKeyValue.fromEncodingData(v)),\n            account: data.get(\"account\")\n        });\n    }\n}\n/**\n * References an account's local state for an application.\n */ class ApplicationLocalReference {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"account\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema(),\n                omitEmpty: true\n            }, {\n                key: \"app\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `ApplicationLocalReference` object.\n     * @param account - Address of the account with the local state.\n     * @param app - Application ID of the local state application.\n     */ constructor({ account, app }){\n        this.account = typeof account === \"string\" ? _encoding_address_js__WEBPACK_IMPORTED_MODULE_6__.Address.fromString(account) : account;\n        this.app = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(app);\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return ApplicationLocalReference.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"account\",\n                this.account.toString()\n            ],\n            [\n                \"app\",\n                this.app\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded ApplicationLocalReference: ${data}`);\n        }\n        return new ApplicationLocalReference({\n            account: data.get(\"account\"),\n            app: data.get(\"app\")\n        });\n    }\n}\n/**\n * Stores local state associated with an application.\n */ class ApplicationLocalState {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"id\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            }, {\n                key: \"schema\",\n                valueSchema: ApplicationStateSchema.encodingSchema,\n                omitEmpty: true\n            }, {\n                key: \"key-value\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ArraySchema(TealKeyValue.encodingSchema)),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `ApplicationLocalState` object.\n     * @param id - The application which this local state is for.\n     * @param schema - (hsch) schema.\n     * @param keyValue - (tkv) storage.\n     */ constructor({ id, schema, keyValue }){\n        this.id = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(id);\n        this.schema = schema;\n        this.keyValue = keyValue;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return ApplicationLocalState.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"id\",\n                this.id\n            ],\n            [\n                \"schema\",\n                this.schema.toEncodingData()\n            ],\n            [\n                \"key-value\",\n                typeof this.keyValue !== \"undefined\" ? this.keyValue.map((v)=>v.toEncodingData()) : undefined\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded ApplicationLocalState: ${data}`);\n        }\n        return new ApplicationLocalState({\n            id: data.get(\"id\"),\n            schema: ApplicationStateSchema.fromEncodingData(data.get(\"schema\") ?? new Map()),\n            keyValue: typeof data.get(\"key-value\") !== \"undefined\" ? data.get(\"key-value\").map((v)=>TealKeyValue.fromEncodingData(v)) : undefined\n        });\n    }\n}\n/**\n * Stores the global information associated with an application.\n */ class ApplicationParams {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"approval-program\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ByteArraySchema(),\n                omitEmpty: true\n            }, {\n                key: \"clear-state-program\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ByteArraySchema(),\n                omitEmpty: true\n            }, {\n                key: \"creator\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema(),\n                omitEmpty: true\n            }, {\n                key: \"extra-program-pages\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema()),\n                omitEmpty: true\n            }, {\n                key: \"global-state\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ArraySchema(TealKeyValue.encodingSchema)),\n                omitEmpty: true\n            }, {\n                key: \"global-state-schema\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(ApplicationStateSchema.encodingSchema),\n                omitEmpty: true\n            }, {\n                key: \"local-state-schema\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(ApplicationStateSchema.encodingSchema),\n                omitEmpty: true\n            }, {\n                key: \"version\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema()),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `ApplicationParams` object.\n     * @param approvalProgram - (approv) approval program.\n     * @param clearStateProgram - (clearp) approval program.\n     * @param creator - The address that created this application. This is the address where the\n     * parameters and global state for this application can be found.\n     * @param extraProgramPages - (epp) the amount of extra program pages available to this app.\n     * @param globalState - (gs) global state\n     * @param globalStateSchema - (gsch) global schema\n     * @param localStateSchema - (lsch) local schema\n     * @param version - (v) the number of updates to the application programs\n     */ constructor({ approvalProgram, clearStateProgram, creator, extraProgramPages, globalState, globalStateSchema, localStateSchema, version }){\n        this.approvalProgram = typeof approvalProgram === \"string\" ? (0,_encoding_binarydata_js__WEBPACK_IMPORTED_MODULE_2__.base64ToBytes)(approvalProgram) : approvalProgram;\n        this.clearStateProgram = typeof clearStateProgram === \"string\" ? (0,_encoding_binarydata_js__WEBPACK_IMPORTED_MODULE_2__.base64ToBytes)(clearStateProgram) : clearStateProgram;\n        this.creator = typeof creator === \"string\" ? _encoding_address_js__WEBPACK_IMPORTED_MODULE_6__.Address.fromString(creator) : creator;\n        this.extraProgramPages = typeof extraProgramPages === \"undefined\" ? undefined : (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureSafeInteger)(extraProgramPages);\n        this.globalState = globalState;\n        this.globalStateSchema = globalStateSchema;\n        this.localStateSchema = localStateSchema;\n        this.version = typeof version === \"undefined\" ? undefined : (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureSafeInteger)(version);\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return ApplicationParams.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"approval-program\",\n                this.approvalProgram\n            ],\n            [\n                \"clear-state-program\",\n                this.clearStateProgram\n            ],\n            [\n                \"creator\",\n                this.creator.toString()\n            ],\n            [\n                \"extra-program-pages\",\n                this.extraProgramPages\n            ],\n            [\n                \"global-state\",\n                typeof this.globalState !== \"undefined\" ? this.globalState.map((v)=>v.toEncodingData()) : undefined\n            ],\n            [\n                \"global-state-schema\",\n                typeof this.globalStateSchema !== \"undefined\" ? this.globalStateSchema.toEncodingData() : undefined\n            ],\n            [\n                \"local-state-schema\",\n                typeof this.localStateSchema !== \"undefined\" ? this.localStateSchema.toEncodingData() : undefined\n            ],\n            [\n                \"version\",\n                this.version\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded ApplicationParams: ${data}`);\n        }\n        return new ApplicationParams({\n            approvalProgram: data.get(\"approval-program\"),\n            clearStateProgram: data.get(\"clear-state-program\"),\n            creator: data.get(\"creator\"),\n            extraProgramPages: data.get(\"extra-program-pages\"),\n            globalState: typeof data.get(\"global-state\") !== \"undefined\" ? data.get(\"global-state\").map((v)=>TealKeyValue.fromEncodingData(v)) : undefined,\n            globalStateSchema: typeof data.get(\"global-state-schema\") !== \"undefined\" ? ApplicationStateSchema.fromEncodingData(data.get(\"global-state-schema\")) : undefined,\n            localStateSchema: typeof data.get(\"local-state-schema\") !== \"undefined\" ? ApplicationStateSchema.fromEncodingData(data.get(\"local-state-schema\")) : undefined,\n            version: data.get(\"version\")\n        });\n    }\n}\n/**\n * An operation against an application's global/local/box state.\n */ class ApplicationStateOperation {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"app-state-type\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema(),\n                omitEmpty: true\n            }, {\n                key: \"key\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ByteArraySchema(),\n                omitEmpty: true\n            }, {\n                key: \"operation\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema(),\n                omitEmpty: true\n            }, {\n                key: \"account\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema()),\n                omitEmpty: true\n            }, {\n                key: \"new-value\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(AvmValue.encodingSchema),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `ApplicationStateOperation` object.\n     * @param appStateType - Type of application state. Value `g` is **global state**, `l` is **local\n     * state**, `b` is **boxes**.\n     * @param key - The key (name) of the global/local/box state.\n     * @param operation - Operation type. Value `w` is **write**, `d` is **delete**.\n     * @param account - For local state changes, the address of the account associated with the local\n     * state.\n     * @param newValue - Represents an AVM value.\n     */ constructor({ appStateType, key, operation, account, newValue }){\n        this.appStateType = appStateType;\n        this.key = typeof key === \"string\" ? (0,_encoding_binarydata_js__WEBPACK_IMPORTED_MODULE_2__.base64ToBytes)(key) : key;\n        this.operation = operation;\n        this.account = typeof account === \"string\" ? _encoding_address_js__WEBPACK_IMPORTED_MODULE_6__.Address.fromString(account) : account;\n        this.newValue = newValue;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return ApplicationStateOperation.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"app-state-type\",\n                this.appStateType\n            ],\n            [\n                \"key\",\n                this.key\n            ],\n            [\n                \"operation\",\n                this.operation\n            ],\n            [\n                \"account\",\n                typeof this.account !== \"undefined\" ? this.account.toString() : undefined\n            ],\n            [\n                \"new-value\",\n                typeof this.newValue !== \"undefined\" ? this.newValue.toEncodingData() : undefined\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded ApplicationStateOperation: ${data}`);\n        }\n        return new ApplicationStateOperation({\n            appStateType: data.get(\"app-state-type\"),\n            key: data.get(\"key\"),\n            operation: data.get(\"operation\"),\n            account: data.get(\"account\"),\n            newValue: typeof data.get(\"new-value\") !== \"undefined\" ? AvmValue.fromEncodingData(data.get(\"new-value\")) : undefined\n        });\n    }\n}\n/**\n * Specifies maximums on the number of each type that may be stored.\n */ class ApplicationStateSchema {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"num-byte-slice\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            }, {\n                key: \"num-uint\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `ApplicationStateSchema` object.\n     * @param numByteSlice - (nbs) num of byte slices.\n     * @param numUint - (nui) num of uints.\n     */ constructor({ numByteSlice, numUint }){\n        this.numByteSlice = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureSafeInteger)(numByteSlice);\n        this.numUint = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureSafeInteger)(numUint);\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return ApplicationStateSchema.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"num-byte-slice\",\n                this.numByteSlice\n            ],\n            [\n                \"num-uint\",\n                this.numUint\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded ApplicationStateSchema: ${data}`);\n        }\n        return new ApplicationStateSchema({\n            numByteSlice: data.get(\"num-byte-slice\"),\n            numUint: data.get(\"num-uint\")\n        });\n    }\n}\n/**\n * Specifies both the unique identifier and the parameters for an asset\n */ class Asset {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"index\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            }, {\n                key: \"params\",\n                valueSchema: AssetParams.encodingSchema,\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `Asset` object.\n     * @param index - unique asset identifier\n     * @param params - AssetParams specifies the parameters for an asset.\n     * (apar) when part of an AssetConfig transaction.\n     * Definition:\n     * data/transactions/asset.go : AssetParams\n     */ constructor({ index, params }){\n        this.index = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(index);\n        this.params = params;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return Asset.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"index\",\n                this.index\n            ],\n            [\n                \"params\",\n                this.params.toEncodingData()\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded Asset: ${data}`);\n        }\n        return new Asset({\n            index: data.get(\"index\"),\n            params: AssetParams.fromEncodingData(data.get(\"params\") ?? new Map())\n        });\n    }\n}\n/**\n * Describes an asset held by an account.\n * Definition:\n * data/basics/userBalance.go : AssetHolding\n */ class AssetHolding {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"amount\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            }, {\n                key: \"asset-id\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            }, {\n                key: \"is-frozen\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.BooleanSchema(),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `AssetHolding` object.\n     * @param amount - (a) number of units held.\n     * @param assetId - Asset ID of the holding.\n     * @param isFrozen - (f) whether or not the holding is frozen.\n     */ constructor({ amount, assetId, isFrozen }){\n        this.amount = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(amount);\n        this.assetId = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(assetId);\n        this.isFrozen = isFrozen;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return AssetHolding.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"amount\",\n                this.amount\n            ],\n            [\n                \"asset-id\",\n                this.assetId\n            ],\n            [\n                \"is-frozen\",\n                this.isFrozen\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded AssetHolding: ${data}`);\n        }\n        return new AssetHolding({\n            amount: data.get(\"amount\"),\n            assetId: data.get(\"asset-id\"),\n            isFrozen: data.get(\"is-frozen\")\n        });\n    }\n}\n/**\n * References an asset held by an account.\n */ class AssetHoldingReference {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"account\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema(),\n                omitEmpty: true\n            }, {\n                key: \"asset\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `AssetHoldingReference` object.\n     * @param account - Address of the account holding the asset.\n     * @param asset - Asset ID of the holding.\n     */ constructor({ account, asset }){\n        this.account = typeof account === \"string\" ? _encoding_address_js__WEBPACK_IMPORTED_MODULE_6__.Address.fromString(account) : account;\n        this.asset = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(asset);\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return AssetHoldingReference.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"account\",\n                this.account.toString()\n            ],\n            [\n                \"asset\",\n                this.asset\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded AssetHoldingReference: ${data}`);\n        }\n        return new AssetHoldingReference({\n            account: data.get(\"account\"),\n            asset: data.get(\"asset\")\n        });\n    }\n}\n/**\n * AssetParams specifies the parameters for an asset.\n * (apar) when part of an AssetConfig transaction.\n * Definition:\n * data/transactions/asset.go : AssetParams\n */ class AssetParams {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"creator\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema(),\n                omitEmpty: true\n            }, {\n                key: \"decimals\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            }, {\n                key: \"total\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            }, {\n                key: \"clawback\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema()),\n                omitEmpty: true\n            }, {\n                key: \"default-frozen\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.BooleanSchema()),\n                omitEmpty: true\n            }, {\n                key: \"freeze\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema()),\n                omitEmpty: true\n            }, {\n                key: \"manager\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema()),\n                omitEmpty: true\n            }, {\n                key: \"metadata-hash\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ByteArraySchema()),\n                omitEmpty: true\n            }, {\n                key: \"name\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema()),\n                omitEmpty: true\n            }, {\n                key: \"name-b64\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ByteArraySchema()),\n                omitEmpty: true\n            }, {\n                key: \"reserve\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema()),\n                omitEmpty: true\n            }, {\n                key: \"unit-name\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema()),\n                omitEmpty: true\n            }, {\n                key: \"unit-name-b64\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ByteArraySchema()),\n                omitEmpty: true\n            }, {\n                key: \"url\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema()),\n                omitEmpty: true\n            }, {\n                key: \"url-b64\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ByteArraySchema()),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `AssetParams` object.\n     * @param creator - The address that created this asset. This is the address where the parameters\n     * for this asset can be found, and also the address where unwanted asset units can\n     * be sent in the worst case.\n     * @param decimals - (dc) The number of digits to use after the decimal point when displaying this\n     * asset. If 0, the asset is not divisible. If 1, the base unit of the asset is in\n     * tenths. If 2, the base unit of the asset is in hundredths, and so on. This value\n     * must be between 0 and 19 (inclusive).\n     * @param total - (t) The total number of units of this asset.\n     * @param clawback - (c) Address of account used to clawback holdings of this asset. If empty,\n     * clawback is not permitted.\n     * @param defaultFrozen - (df) Whether holdings of this asset are frozen by default.\n     * @param freeze - (f) Address of account used to freeze holdings of this asset. If empty, freezing\n     * is not permitted.\n     * @param manager - (m) Address of account used to manage the keys of this asset and to destroy it.\n     * @param metadataHash - (am) A commitment to some unspecified asset metadata. The format of this\n     * metadata is up to the application.\n     * @param name - (an) Name of this asset, as supplied by the creator. Included only when the\n     * asset name is composed of printable utf-8 characters.\n     * @param nameB64 - Base64 encoded name of this asset, as supplied by the creator.\n     * @param reserve - (r) Address of account holding reserve (non-minted) units of this asset.\n     * @param unitName - (un) Name of a unit of this asset, as supplied by the creator. Included only\n     * when the name of a unit of this asset is composed of printable utf-8 characters.\n     * @param unitNameB64 - Base64 encoded name of a unit of this asset, as supplied by the creator.\n     * @param url - (au) URL where more information about the asset can be retrieved. Included only\n     * when the URL is composed of printable utf-8 characters.\n     * @param urlB64 - Base64 encoded URL where more information about the asset can be retrieved.\n     */ constructor({ creator, decimals, total, clawback, defaultFrozen, freeze, manager, metadataHash, name, nameB64, reserve, unitName, unitNameB64, url, urlB64 }){\n        this.creator = creator;\n        this.decimals = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureSafeInteger)(decimals);\n        this.total = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(total);\n        this.clawback = clawback;\n        this.defaultFrozen = defaultFrozen;\n        this.freeze = freeze;\n        this.manager = manager;\n        this.metadataHash = typeof metadataHash === \"string\" ? (0,_encoding_binarydata_js__WEBPACK_IMPORTED_MODULE_2__.base64ToBytes)(metadataHash) : metadataHash;\n        this.name = name;\n        this.nameB64 = typeof nameB64 === \"string\" ? (0,_encoding_binarydata_js__WEBPACK_IMPORTED_MODULE_2__.base64ToBytes)(nameB64) : nameB64;\n        this.reserve = reserve;\n        this.unitName = unitName;\n        this.unitNameB64 = typeof unitNameB64 === \"string\" ? (0,_encoding_binarydata_js__WEBPACK_IMPORTED_MODULE_2__.base64ToBytes)(unitNameB64) : unitNameB64;\n        this.url = url;\n        this.urlB64 = typeof urlB64 === \"string\" ? (0,_encoding_binarydata_js__WEBPACK_IMPORTED_MODULE_2__.base64ToBytes)(urlB64) : urlB64;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return AssetParams.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"creator\",\n                this.creator\n            ],\n            [\n                \"decimals\",\n                this.decimals\n            ],\n            [\n                \"total\",\n                this.total\n            ],\n            [\n                \"clawback\",\n                this.clawback\n            ],\n            [\n                \"default-frozen\",\n                this.defaultFrozen\n            ],\n            [\n                \"freeze\",\n                this.freeze\n            ],\n            [\n                \"manager\",\n                this.manager\n            ],\n            [\n                \"metadata-hash\",\n                this.metadataHash\n            ],\n            [\n                \"name\",\n                this.name\n            ],\n            [\n                \"name-b64\",\n                this.nameB64\n            ],\n            [\n                \"reserve\",\n                this.reserve\n            ],\n            [\n                \"unit-name\",\n                this.unitName\n            ],\n            [\n                \"unit-name-b64\",\n                this.unitNameB64\n            ],\n            [\n                \"url\",\n                this.url\n            ],\n            [\n                \"url-b64\",\n                this.urlB64\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded AssetParams: ${data}`);\n        }\n        return new AssetParams({\n            creator: data.get(\"creator\"),\n            decimals: data.get(\"decimals\"),\n            total: data.get(\"total\"),\n            clawback: data.get(\"clawback\"),\n            defaultFrozen: data.get(\"default-frozen\"),\n            freeze: data.get(\"freeze\"),\n            manager: data.get(\"manager\"),\n            metadataHash: data.get(\"metadata-hash\"),\n            name: data.get(\"name\"),\n            nameB64: data.get(\"name-b64\"),\n            reserve: data.get(\"reserve\"),\n            unitName: data.get(\"unit-name\"),\n            unitNameB64: data.get(\"unit-name-b64\"),\n            url: data.get(\"url\"),\n            urlB64: data.get(\"url-b64\")\n        });\n    }\n}\n/**\n * Represents an AVM key-value pair in an application store.\n */ class AvmKeyValue {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"key\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ByteArraySchema(),\n                omitEmpty: true\n            }, {\n                key: \"value\",\n                valueSchema: AvmValue.encodingSchema,\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `AvmKeyValue` object.\n     * @param key -\n     * @param value - Represents an AVM value.\n     */ constructor({ key, value }){\n        this.key = typeof key === \"string\" ? (0,_encoding_binarydata_js__WEBPACK_IMPORTED_MODULE_2__.base64ToBytes)(key) : key;\n        this.value = value;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return AvmKeyValue.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"key\",\n                this.key\n            ],\n            [\n                \"value\",\n                this.value.toEncodingData()\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded AvmKeyValue: ${data}`);\n        }\n        return new AvmKeyValue({\n            key: data.get(\"key\"),\n            value: AvmValue.fromEncodingData(data.get(\"value\") ?? new Map())\n        });\n    }\n}\n/**\n * Represents an AVM value.\n */ class AvmValue {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"type\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            }, {\n                key: \"bytes\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ByteArraySchema()),\n                omitEmpty: true\n            }, {\n                key: \"uint\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema()),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `AvmValue` object.\n     * @param type - value type. Value `1` refers to **bytes**, value `2` refers to **uint64**\n     * @param bytes - bytes value.\n     * @param uint - uint value.\n     */ constructor({ type, bytes, uint }){\n        this.type = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureSafeInteger)(type);\n        this.bytes = typeof bytes === \"string\" ? (0,_encoding_binarydata_js__WEBPACK_IMPORTED_MODULE_2__.base64ToBytes)(bytes) : bytes;\n        this.uint = typeof uint === \"undefined\" ? undefined : (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(uint);\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return AvmValue.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"type\",\n                this.type\n            ],\n            [\n                \"bytes\",\n                this.bytes\n            ],\n            [\n                \"uint\",\n                this.uint\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded AvmValue: ${data}`);\n        }\n        return new AvmValue({\n            type: data.get(\"type\"),\n            bytes: data.get(\"bytes\"),\n            uint: data.get(\"uint\")\n        });\n    }\n}\n/**\n * Hash of a block header.\n */ class BlockHashResponse {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"blockHash\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema(),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `BlockHashResponse` object.\n     * @param blockhash - Block header hash.\n     */ constructor({ blockhash }){\n        this.blockhash = blockhash;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return BlockHashResponse.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"blockHash\",\n                this.blockhash\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded BlockHashResponse: ${data}`);\n        }\n        return new BlockHashResponse({\n            blockhash: data.get(\"blockHash\")\n        });\n    }\n}\n/**\n * All logs emitted in the given round. Each app call, whether top-level or inner,\n * that contains logs results in a separate AppCallLogs object. Therefore there may\n * be multiple AppCallLogs with the same application ID and outer transaction ID in\n * the event of multiple inner app calls to the same app. App calls with no logs\n * are not included in the response. AppCallLogs are returned in the same order\n * that their corresponding app call appeared in the block (pre-order traversal of\n * inner app calls)\n */ class BlockLogsResponse {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"logs\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ArraySchema(AppCallLogs.encodingSchema),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `BlockLogsResponse` object.\n     * @param logs -\n     */ constructor({ logs }){\n        this.logs = logs;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return BlockLogsResponse.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"logs\",\n                this.logs.map((v)=>v.toEncodingData())\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded BlockLogsResponse: ${data}`);\n        }\n        return new BlockLogsResponse({\n            logs: (data.get(\"logs\") ?? []).map((v)=>AppCallLogs.fromEncodingData(v))\n        });\n    }\n}\n/**\n * Encoded block object.\n */ class BlockResponse {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"block\",\n                valueSchema: _types_block_js__WEBPACK_IMPORTED_MODULE_3__.Block.encodingSchema,\n                omitEmpty: true\n            }, {\n                key: \"cert\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(_untypedmodel_js__WEBPACK_IMPORTED_MODULE_7__.UntypedValue.encodingSchema),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `BlockResponse` object.\n     * @param block - Block header data.\n     * @param cert - Optional certificate object. This is only included when the format is set to\n     * message pack.\n     */ constructor({ block, cert }){\n        this.block = block;\n        this.cert = cert;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return BlockResponse.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"block\",\n                this.block.toEncodingData()\n            ],\n            [\n                \"cert\",\n                typeof this.cert !== \"undefined\" ? this.cert.toEncodingData() : undefined\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded BlockResponse: ${data}`);\n        }\n        return new BlockResponse({\n            block: _types_block_js__WEBPACK_IMPORTED_MODULE_3__.Block.fromEncodingData(data.get(\"block\") ?? new Map()),\n            cert: typeof data.get(\"cert\") !== \"undefined\" ? _untypedmodel_js__WEBPACK_IMPORTED_MODULE_7__.UntypedValue.fromEncodingData(data.get(\"cert\")) : undefined\n        });\n    }\n}\n/**\n * Top level transaction IDs in a block.\n */ class BlockTxidsResponse {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"blockTxids\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ArraySchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema()),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `BlockTxidsResponse` object.\n     * @param blocktxids - Block transaction IDs.\n     */ constructor({ blocktxids }){\n        this.blocktxids = blocktxids;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return BlockTxidsResponse.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"blockTxids\",\n                this.blocktxids\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded BlockTxidsResponse: ${data}`);\n        }\n        return new BlockTxidsResponse({\n            blocktxids: data.get(\"blockTxids\")\n        });\n    }\n}\n/**\n * Box name and its content.\n */ class Box {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"name\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ByteArraySchema(),\n                omitEmpty: true\n            }, {\n                key: \"round\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            }, {\n                key: \"value\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ByteArraySchema(),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `Box` object.\n     * @param name - The box name, base64 encoded\n     * @param round - The round for which this information is relevant\n     * @param value - The box value, base64 encoded.\n     */ constructor({ name, round, value }){\n        this.name = typeof name === \"string\" ? (0,_encoding_binarydata_js__WEBPACK_IMPORTED_MODULE_2__.base64ToBytes)(name) : name;\n        this.round = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(round);\n        this.value = typeof value === \"string\" ? (0,_encoding_binarydata_js__WEBPACK_IMPORTED_MODULE_2__.base64ToBytes)(value) : value;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return Box.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"name\",\n                this.name\n            ],\n            [\n                \"round\",\n                this.round\n            ],\n            [\n                \"value\",\n                this.value\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded Box: ${data}`);\n        }\n        return new Box({\n            name: data.get(\"name\"),\n            round: data.get(\"round\"),\n            value: data.get(\"value\")\n        });\n    }\n}\n/**\n * Box descriptor describes a Box.\n */ class BoxDescriptor {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"name\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ByteArraySchema(),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `BoxDescriptor` object.\n     * @param name - Base64 encoded box name\n     */ constructor({ name }){\n        this.name = typeof name === \"string\" ? (0,_encoding_binarydata_js__WEBPACK_IMPORTED_MODULE_2__.base64ToBytes)(name) : name;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return BoxDescriptor.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"name\",\n                this.name\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded BoxDescriptor: ${data}`);\n        }\n        return new BoxDescriptor({\n            name: data.get(\"name\")\n        });\n    }\n}\n/**\n * References a box of an application.\n */ class BoxReference {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"app\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            }, {\n                key: \"name\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ByteArraySchema(),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `BoxReference` object.\n     * @param app - Application ID which this box belongs to\n     * @param name - Base64 encoded box name\n     */ constructor({ app, name }){\n        this.app = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(app);\n        this.name = typeof name === \"string\" ? (0,_encoding_binarydata_js__WEBPACK_IMPORTED_MODULE_2__.base64ToBytes)(name) : name;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return BoxReference.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"app\",\n                this.app\n            ],\n            [\n                \"name\",\n                this.name\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded BoxReference: ${data}`);\n        }\n        return new BoxReference({\n            app: data.get(\"app\"),\n            name: data.get(\"name\")\n        });\n    }\n}\n/**\n * Box names of an application\n */ class BoxesResponse {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"boxes\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ArraySchema(BoxDescriptor.encodingSchema),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `BoxesResponse` object.\n     * @param boxes -\n     */ constructor({ boxes }){\n        this.boxes = boxes;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return BoxesResponse.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"boxes\",\n                this.boxes.map((v)=>v.toEncodingData())\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded BoxesResponse: ${data}`);\n        }\n        return new BoxesResponse({\n            boxes: (data.get(\"boxes\") ?? []).map((v)=>BoxDescriptor.fromEncodingData(v))\n        });\n    }\n}\nclass BuildVersion {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"branch\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema(),\n                omitEmpty: true\n            }, {\n                key: \"build_number\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            }, {\n                key: \"channel\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema(),\n                omitEmpty: true\n            }, {\n                key: \"commit_hash\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema(),\n                omitEmpty: true\n            }, {\n                key: \"major\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            }, {\n                key: \"minor\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `BuildVersion` object.\n     * @param branch -\n     * @param buildNumber -\n     * @param channel -\n     * @param commitHash -\n     * @param major -\n     * @param minor -\n     */ constructor({ branch, buildNumber, channel, commitHash, major, minor }){\n        this.branch = branch;\n        this.buildNumber = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureSafeInteger)(buildNumber);\n        this.channel = channel;\n        this.commitHash = commitHash;\n        this.major = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureSafeInteger)(major);\n        this.minor = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureSafeInteger)(minor);\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return BuildVersion.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"branch\",\n                this.branch\n            ],\n            [\n                \"build_number\",\n                this.buildNumber\n            ],\n            [\n                \"channel\",\n                this.channel\n            ],\n            [\n                \"commit_hash\",\n                this.commitHash\n            ],\n            [\n                \"major\",\n                this.major\n            ],\n            [\n                \"minor\",\n                this.minor\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded BuildVersion: ${data}`);\n        }\n        return new BuildVersion({\n            branch: data.get(\"branch\"),\n            buildNumber: data.get(\"build_number\"),\n            channel: data.get(\"channel\"),\n            commitHash: data.get(\"commit_hash\"),\n            major: data.get(\"major\"),\n            minor: data.get(\"minor\")\n        });\n    }\n}\n/**\n * Teal compile Result\n */ class CompileResponse {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"hash\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema(),\n                omitEmpty: true\n            }, {\n                key: \"result\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema(),\n                omitEmpty: true\n            }, {\n                key: \"sourcemap\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(_untypedmodel_js__WEBPACK_IMPORTED_MODULE_7__.UntypedValue.encodingSchema),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `CompileResponse` object.\n     * @param hash - base32 SHA512_256 of program bytes (Address style)\n     * @param result - base64 encoded program bytes\n     * @param sourcemap - JSON of the source map\n     */ constructor({ hash, result, sourcemap }){\n        this.hash = hash;\n        this.result = result;\n        this.sourcemap = sourcemap;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return CompileResponse.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"hash\",\n                this.hash\n            ],\n            [\n                \"result\",\n                this.result\n            ],\n            [\n                \"sourcemap\",\n                typeof this.sourcemap !== \"undefined\" ? this.sourcemap.toEncodingData() : undefined\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded CompileResponse: ${data}`);\n        }\n        return new CompileResponse({\n            hash: data.get(\"hash\"),\n            result: data.get(\"result\"),\n            sourcemap: typeof data.get(\"sourcemap\") !== \"undefined\" ? _untypedmodel_js__WEBPACK_IMPORTED_MODULE_7__.UntypedValue.fromEncodingData(data.get(\"sourcemap\")) : undefined\n        });\n    }\n}\n/**\n * Teal disassembly Result\n */ class DisassembleResponse {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"result\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema(),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `DisassembleResponse` object.\n     * @param result - disassembled Teal code\n     */ constructor({ result }){\n        this.result = result;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return DisassembleResponse.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"result\",\n                this.result\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded DisassembleResponse: ${data}`);\n        }\n        return new DisassembleResponse({\n            result: data.get(\"result\")\n        });\n    }\n}\n/**\n * Request data type for dryrun endpoint. Given the Transactions and simulated\n * ledger state upload, run TEAL scripts and return debugging information.\n */ class DryrunRequest {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"accounts\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ArraySchema(Account.encodingSchema),\n                omitEmpty: true\n            }, {\n                key: \"apps\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ArraySchema(Application.encodingSchema),\n                omitEmpty: true\n            }, {\n                key: \"latest-timestamp\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            }, {\n                key: \"protocol-version\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema(),\n                omitEmpty: true\n            }, {\n                key: \"round\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            }, {\n                key: \"sources\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ArraySchema(DryrunSource.encodingSchema),\n                omitEmpty: true\n            }, {\n                key: \"txns\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ArraySchema(_signedTransaction_js__WEBPACK_IMPORTED_MODULE_5__.SignedTransaction.encodingSchema),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `DryrunRequest` object.\n     * @param accounts -\n     * @param apps -\n     * @param latestTimestamp - LatestTimestamp is available to some TEAL scripts. Defaults to the latest\n     * confirmed timestamp this algod is attached to.\n     * @param protocolVersion - ProtocolVersion specifies a specific version string to operate under, otherwise\n     * whatever the current protocol of the network this algod is running in.\n     * @param round - Round is available to some TEAL scripts. Defaults to the current round on the\n     * network this algod is attached to.\n     * @param sources -\n     * @param txns -\n     */ constructor({ accounts, apps, latestTimestamp, protocolVersion, round, sources, txns }){\n        this.accounts = accounts;\n        this.apps = apps;\n        this.latestTimestamp = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureSafeInteger)(latestTimestamp);\n        this.protocolVersion = protocolVersion;\n        this.round = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(round);\n        this.sources = sources;\n        this.txns = txns;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return DryrunRequest.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"accounts\",\n                this.accounts.map((v)=>v.toEncodingData())\n            ],\n            [\n                \"apps\",\n                this.apps.map((v)=>v.toEncodingData())\n            ],\n            [\n                \"latest-timestamp\",\n                this.latestTimestamp\n            ],\n            [\n                \"protocol-version\",\n                this.protocolVersion\n            ],\n            [\n                \"round\",\n                this.round\n            ],\n            [\n                \"sources\",\n                this.sources.map((v)=>v.toEncodingData())\n            ],\n            [\n                \"txns\",\n                this.txns.map((v)=>v.toEncodingData())\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded DryrunRequest: ${data}`);\n        }\n        return new DryrunRequest({\n            accounts: (data.get(\"accounts\") ?? []).map((v)=>Account.fromEncodingData(v)),\n            apps: (data.get(\"apps\") ?? []).map((v)=>Application.fromEncodingData(v)),\n            latestTimestamp: data.get(\"latest-timestamp\"),\n            protocolVersion: data.get(\"protocol-version\"),\n            round: data.get(\"round\"),\n            sources: (data.get(\"sources\") ?? []).map((v)=>DryrunSource.fromEncodingData(v)),\n            txns: (data.get(\"txns\") ?? []).map((v)=>_signedTransaction_js__WEBPACK_IMPORTED_MODULE_5__.SignedTransaction.fromEncodingData(v))\n        });\n    }\n}\n/**\n * DryrunResponse contains per-txn debug information from a dryrun.\n */ class DryrunResponse {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"error\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema(),\n                omitEmpty: true\n            }, {\n                key: \"protocol-version\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema(),\n                omitEmpty: true\n            }, {\n                key: \"txns\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ArraySchema(DryrunTxnResult.encodingSchema),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `DryrunResponse` object.\n     * @param error -\n     * @param protocolVersion - Protocol version is the protocol version Dryrun was operated under.\n     * @param txns -\n     */ constructor({ error, protocolVersion, txns }){\n        this.error = error;\n        this.protocolVersion = protocolVersion;\n        this.txns = txns;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return DryrunResponse.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"error\",\n                this.error\n            ],\n            [\n                \"protocol-version\",\n                this.protocolVersion\n            ],\n            [\n                \"txns\",\n                this.txns.map((v)=>v.toEncodingData())\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded DryrunResponse: ${data}`);\n        }\n        return new DryrunResponse({\n            error: data.get(\"error\"),\n            protocolVersion: data.get(\"protocol-version\"),\n            txns: (data.get(\"txns\") ?? []).map((v)=>DryrunTxnResult.fromEncodingData(v))\n        });\n    }\n}\n/**\n * DryrunSource is TEAL source text that gets uploaded, compiled, and inserted into\n * transactions or application state.\n */ class DryrunSource {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"app-index\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            }, {\n                key: \"field-name\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema(),\n                omitEmpty: true\n            }, {\n                key: \"source\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema(),\n                omitEmpty: true\n            }, {\n                key: \"txn-index\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `DryrunSource` object.\n     * @param appIndex -\n     * @param fieldName - FieldName is what kind of sources this is. If lsig then it goes into the\n     * transactions[this.TxnIndex].LogicSig. If approv or clearp it goes into the\n     * Approval Program or Clear State Program of application[this.AppIndex].\n     * @param source -\n     * @param txnIndex -\n     */ constructor({ appIndex, fieldName, source, txnIndex }){\n        this.appIndex = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(appIndex);\n        this.fieldName = fieldName;\n        this.source = source;\n        this.txnIndex = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureSafeInteger)(txnIndex);\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return DryrunSource.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"app-index\",\n                this.appIndex\n            ],\n            [\n                \"field-name\",\n                this.fieldName\n            ],\n            [\n                \"source\",\n                this.source\n            ],\n            [\n                \"txn-index\",\n                this.txnIndex\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded DryrunSource: ${data}`);\n        }\n        return new DryrunSource({\n            appIndex: data.get(\"app-index\"),\n            fieldName: data.get(\"field-name\"),\n            source: data.get(\"source\"),\n            txnIndex: data.get(\"txn-index\")\n        });\n    }\n}\n/**\n * Stores the TEAL eval step data\n */ class DryrunState {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"line\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            }, {\n                key: \"pc\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            }, {\n                key: \"stack\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ArraySchema(TealValue.encodingSchema),\n                omitEmpty: true\n            }, {\n                key: \"error\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema()),\n                omitEmpty: true\n            }, {\n                key: \"scratch\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ArraySchema(TealValue.encodingSchema)),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `DryrunState` object.\n     * @param line - Line number\n     * @param pc - Program counter\n     * @param stack -\n     * @param error - Evaluation error if any\n     * @param scratch -\n     */ constructor({ line, pc, stack, error, scratch }){\n        this.line = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureSafeInteger)(line);\n        this.pc = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureSafeInteger)(pc);\n        this.stack = stack;\n        this.error = error;\n        this.scratch = scratch;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return DryrunState.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"line\",\n                this.line\n            ],\n            [\n                \"pc\",\n                this.pc\n            ],\n            [\n                \"stack\",\n                this.stack.map((v)=>v.toEncodingData())\n            ],\n            [\n                \"error\",\n                this.error\n            ],\n            [\n                \"scratch\",\n                typeof this.scratch !== \"undefined\" ? this.scratch.map((v)=>v.toEncodingData()) : undefined\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded DryrunState: ${data}`);\n        }\n        return new DryrunState({\n            line: data.get(\"line\"),\n            pc: data.get(\"pc\"),\n            stack: (data.get(\"stack\") ?? []).map((v)=>TealValue.fromEncodingData(v)),\n            error: data.get(\"error\"),\n            scratch: typeof data.get(\"scratch\") !== \"undefined\" ? data.get(\"scratch\").map((v)=>TealValue.fromEncodingData(v)) : undefined\n        });\n    }\n}\n/**\n * DryrunTxnResult contains any LogicSig or ApplicationCall program debug\n * information and state updates from a dryrun.\n */ class DryrunTxnResult {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"disassembly\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ArraySchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema()),\n                omitEmpty: true\n            }, {\n                key: \"app-call-messages\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ArraySchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema())),\n                omitEmpty: true\n            }, {\n                key: \"app-call-trace\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ArraySchema(DryrunState.encodingSchema)),\n                omitEmpty: true\n            }, {\n                key: \"budget-added\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema()),\n                omitEmpty: true\n            }, {\n                key: \"budget-consumed\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema()),\n                omitEmpty: true\n            }, {\n                key: \"global-delta\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ArraySchema(EvalDeltaKeyValue.encodingSchema)),\n                omitEmpty: true\n            }, {\n                key: \"local-deltas\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ArraySchema(AccountStateDelta.encodingSchema)),\n                omitEmpty: true\n            }, {\n                key: \"logic-sig-disassembly\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ArraySchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema())),\n                omitEmpty: true\n            }, {\n                key: \"logic-sig-messages\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ArraySchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema())),\n                omitEmpty: true\n            }, {\n                key: \"logic-sig-trace\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ArraySchema(DryrunState.encodingSchema)),\n                omitEmpty: true\n            }, {\n                key: \"logs\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ArraySchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ByteArraySchema())),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `DryrunTxnResult` object.\n     * @param disassembly - Disassembled program line by line.\n     * @param appCallMessages -\n     * @param appCallTrace -\n     * @param budgetAdded - Budget added during execution of app call transaction.\n     * @param budgetConsumed - Budget consumed during execution of app call transaction.\n     * @param globalDelta - Application state delta.\n     * @param localDeltas -\n     * @param logicSigDisassembly - Disassembled lsig program line by line.\n     * @param logicSigMessages -\n     * @param logicSigTrace -\n     * @param logs -\n     */ constructor({ disassembly, appCallMessages, appCallTrace, budgetAdded, budgetConsumed, globalDelta, localDeltas, logicSigDisassembly, logicSigMessages, logicSigTrace, logs }){\n        this.disassembly = disassembly;\n        this.appCallMessages = appCallMessages;\n        this.appCallTrace = appCallTrace;\n        this.budgetAdded = typeof budgetAdded === \"undefined\" ? undefined : (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureSafeInteger)(budgetAdded);\n        this.budgetConsumed = typeof budgetConsumed === \"undefined\" ? undefined : (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureSafeInteger)(budgetConsumed);\n        this.globalDelta = globalDelta;\n        this.localDeltas = localDeltas;\n        this.logicSigDisassembly = logicSigDisassembly;\n        this.logicSigMessages = logicSigMessages;\n        this.logicSigTrace = logicSigTrace;\n        this.logs = logs;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return DryrunTxnResult.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"disassembly\",\n                this.disassembly\n            ],\n            [\n                \"app-call-messages\",\n                this.appCallMessages\n            ],\n            [\n                \"app-call-trace\",\n                typeof this.appCallTrace !== \"undefined\" ? this.appCallTrace.map((v)=>v.toEncodingData()) : undefined\n            ],\n            [\n                \"budget-added\",\n                this.budgetAdded\n            ],\n            [\n                \"budget-consumed\",\n                this.budgetConsumed\n            ],\n            [\n                \"global-delta\",\n                typeof this.globalDelta !== \"undefined\" ? this.globalDelta.map((v)=>v.toEncodingData()) : undefined\n            ],\n            [\n                \"local-deltas\",\n                typeof this.localDeltas !== \"undefined\" ? this.localDeltas.map((v)=>v.toEncodingData()) : undefined\n            ],\n            [\n                \"logic-sig-disassembly\",\n                this.logicSigDisassembly\n            ],\n            [\n                \"logic-sig-messages\",\n                this.logicSigMessages\n            ],\n            [\n                \"logic-sig-trace\",\n                typeof this.logicSigTrace !== \"undefined\" ? this.logicSigTrace.map((v)=>v.toEncodingData()) : undefined\n            ],\n            [\n                \"logs\",\n                this.logs\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded DryrunTxnResult: ${data}`);\n        }\n        return new DryrunTxnResult({\n            disassembly: data.get(\"disassembly\"),\n            appCallMessages: data.get(\"app-call-messages\"),\n            appCallTrace: typeof data.get(\"app-call-trace\") !== \"undefined\" ? data.get(\"app-call-trace\").map((v)=>DryrunState.fromEncodingData(v)) : undefined,\n            budgetAdded: data.get(\"budget-added\"),\n            budgetConsumed: data.get(\"budget-consumed\"),\n            globalDelta: typeof data.get(\"global-delta\") !== \"undefined\" ? data.get(\"global-delta\").map((v)=>EvalDeltaKeyValue.fromEncodingData(v)) : undefined,\n            localDeltas: typeof data.get(\"local-deltas\") !== \"undefined\" ? data.get(\"local-deltas\").map((v)=>AccountStateDelta.fromEncodingData(v)) : undefined,\n            logicSigDisassembly: data.get(\"logic-sig-disassembly\"),\n            logicSigMessages: data.get(\"logic-sig-messages\"),\n            logicSigTrace: typeof data.get(\"logic-sig-trace\") !== \"undefined\" ? data.get(\"logic-sig-trace\").map((v)=>DryrunState.fromEncodingData(v)) : undefined,\n            logs: data.get(\"logs\")\n        });\n    }\n}\n/**\n * An error response with optional data field.\n */ class ErrorResponse {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"message\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema(),\n                omitEmpty: true\n            }, {\n                key: \"data\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(_untypedmodel_js__WEBPACK_IMPORTED_MODULE_7__.UntypedValue.encodingSchema),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `ErrorResponse` object.\n     * @param message -\n     * @param data -\n     */ constructor({ message, data }){\n        this.message = message;\n        this.data = data;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return ErrorResponse.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"message\",\n                this.message\n            ],\n            [\n                \"data\",\n                typeof this.data !== \"undefined\" ? this.data.toEncodingData() : undefined\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded ErrorResponse: ${data}`);\n        }\n        return new ErrorResponse({\n            message: data.get(\"message\"),\n            data: typeof data.get(\"data\") !== \"undefined\" ? _untypedmodel_js__WEBPACK_IMPORTED_MODULE_7__.UntypedValue.fromEncodingData(data.get(\"data\")) : undefined\n        });\n    }\n}\n/**\n * Represents a TEAL value delta.\n */ class EvalDelta {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"action\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            }, {\n                key: \"bytes\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema()),\n                omitEmpty: true\n            }, {\n                key: \"uint\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema()),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `EvalDelta` object.\n     * @param action - (at) delta action.\n     * @param bytes - (bs) bytes value.\n     * @param uint - (ui) uint value.\n     */ constructor({ action, bytes, uint }){\n        this.action = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureSafeInteger)(action);\n        this.bytes = bytes;\n        this.uint = typeof uint === \"undefined\" ? undefined : (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(uint);\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return EvalDelta.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"action\",\n                this.action\n            ],\n            [\n                \"bytes\",\n                this.bytes\n            ],\n            [\n                \"uint\",\n                this.uint\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded EvalDelta: ${data}`);\n        }\n        return new EvalDelta({\n            action: data.get(\"action\"),\n            bytes: data.get(\"bytes\"),\n            uint: data.get(\"uint\")\n        });\n    }\n}\n/**\n * Key-value pairs for StateDelta.\n */ class EvalDeltaKeyValue {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"key\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema(),\n                omitEmpty: true\n            }, {\n                key: \"value\",\n                valueSchema: EvalDelta.encodingSchema,\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `EvalDeltaKeyValue` object.\n     * @param key -\n     * @param value - Represents a TEAL value delta.\n     */ constructor({ key, value }){\n        this.key = key;\n        this.value = value;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return EvalDeltaKeyValue.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"key\",\n                this.key\n            ],\n            [\n                \"value\",\n                this.value.toEncodingData()\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded EvalDeltaKeyValue: ${data}`);\n        }\n        return new EvalDeltaKeyValue({\n            key: data.get(\"key\"),\n            value: EvalDelta.fromEncodingData(data.get(\"value\") ?? new Map())\n        });\n    }\n}\nclass Genesis {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"alloc\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ArraySchema(GenesisAllocation.encodingSchema),\n                omitEmpty: true\n            }, {\n                key: \"fees\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema(),\n                omitEmpty: true\n            }, {\n                key: \"id\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema(),\n                omitEmpty: true\n            }, {\n                key: \"network\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema(),\n                omitEmpty: true\n            }, {\n                key: \"proto\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema(),\n                omitEmpty: true\n            }, {\n                key: \"rwd\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema(),\n                omitEmpty: true\n            }, {\n                key: \"timestamp\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            }, {\n                key: \"comment\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema()),\n                omitEmpty: true\n            }, {\n                key: \"devmode\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.BooleanSchema()),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `Genesis` object.\n     * @param alloc -\n     * @param fees -\n     * @param id -\n     * @param network -\n     * @param proto -\n     * @param rwd -\n     * @param timestamp -\n     * @param comment -\n     * @param devmode -\n     */ constructor({ alloc, fees, id, network, proto, rwd, timestamp, comment, devmode }){\n        this.alloc = alloc;\n        this.fees = fees;\n        this.id = id;\n        this.network = network;\n        this.proto = proto;\n        this.rwd = rwd;\n        this.timestamp = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureSafeInteger)(timestamp);\n        this.comment = comment;\n        this.devmode = devmode;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return Genesis.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"alloc\",\n                this.alloc.map((v)=>v.toEncodingData())\n            ],\n            [\n                \"fees\",\n                this.fees\n            ],\n            [\n                \"id\",\n                this.id\n            ],\n            [\n                \"network\",\n                this.network\n            ],\n            [\n                \"proto\",\n                this.proto\n            ],\n            [\n                \"rwd\",\n                this.rwd\n            ],\n            [\n                \"timestamp\",\n                this.timestamp\n            ],\n            [\n                \"comment\",\n                this.comment\n            ],\n            [\n                \"devmode\",\n                this.devmode\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded Genesis: ${data}`);\n        }\n        return new Genesis({\n            alloc: (data.get(\"alloc\") ?? []).map((v)=>GenesisAllocation.fromEncodingData(v)),\n            fees: data.get(\"fees\"),\n            id: data.get(\"id\"),\n            network: data.get(\"network\"),\n            proto: data.get(\"proto\"),\n            rwd: data.get(\"rwd\"),\n            timestamp: data.get(\"timestamp\"),\n            comment: data.get(\"comment\"),\n            devmode: data.get(\"devmode\")\n        });\n    }\n}\nclass GenesisAllocation {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"addr\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema(),\n                omitEmpty: true\n            }, {\n                key: \"comment\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema(),\n                omitEmpty: true\n            }, {\n                key: \"state\",\n                valueSchema: _untypedmodel_js__WEBPACK_IMPORTED_MODULE_7__.UntypedValue.encodingSchema,\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `GenesisAllocation` object.\n     * @param addr -\n     * @param comment -\n     * @param state -\n     */ constructor({ addr, comment, state }){\n        this.addr = addr;\n        this.comment = comment;\n        this.state = state;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return GenesisAllocation.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"addr\",\n                this.addr\n            ],\n            [\n                \"comment\",\n                this.comment\n            ],\n            [\n                \"state\",\n                this.state.toEncodingData()\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded GenesisAllocation: ${data}`);\n        }\n        return new GenesisAllocation({\n            addr: data.get(\"addr\"),\n            comment: data.get(\"comment\"),\n            state: _untypedmodel_js__WEBPACK_IMPORTED_MODULE_7__.UntypedValue.fromEncodingData(data.get(\"state\") ?? new Map())\n        });\n    }\n}\n/**\n * Response containing the timestamp offset in seconds\n */ class GetBlockTimeStampOffsetResponse {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"offset\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `GetBlockTimeStampOffsetResponse` object.\n     * @param offset - Timestamp offset in seconds.\n     */ constructor({ offset }){\n        this.offset = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureSafeInteger)(offset);\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return GetBlockTimeStampOffsetResponse.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"offset\",\n                this.offset\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded GetBlockTimeStampOffsetResponse: ${data}`);\n        }\n        return new GetBlockTimeStampOffsetResponse({\n            offset: data.get(\"offset\")\n        });\n    }\n}\n/**\n * Response containing the ledger's minimum sync round\n */ class GetSyncRoundResponse {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"round\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `GetSyncRoundResponse` object.\n     * @param round - The minimum sync round for the ledger.\n     */ constructor({ round }){\n        this.round = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(round);\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return GetSyncRoundResponse.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"round\",\n                this.round\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded GetSyncRoundResponse: ${data}`);\n        }\n        return new GetSyncRoundResponse({\n            round: data.get(\"round\")\n        });\n    }\n}\n/**\n * Contains a ledger delta for a single transaction group\n */ class LedgerStateDeltaForTransactionGroup {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"Delta\",\n                valueSchema: _types_statedelta_js__WEBPACK_IMPORTED_MODULE_4__.LedgerStateDelta.encodingSchema,\n                omitEmpty: true\n            }, {\n                key: \"Ids\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ArraySchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema()),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `LedgerStateDeltaForTransactionGroup` object.\n     * @param delta - Ledger StateDelta object\n     * @param ids -\n     */ constructor({ delta, ids }){\n        this.delta = delta;\n        this.ids = ids;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return LedgerStateDeltaForTransactionGroup.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"Delta\",\n                this.delta.toEncodingData()\n            ],\n            [\n                \"Ids\",\n                this.ids\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded LedgerStateDeltaForTransactionGroup: ${data}`);\n        }\n        return new LedgerStateDeltaForTransactionGroup({\n            delta: _types_statedelta_js__WEBPACK_IMPORTED_MODULE_4__.LedgerStateDelta.fromEncodingData(data.get(\"Delta\") ?? new Map()),\n            ids: data.get(\"Ids\")\n        });\n    }\n}\n/**\n * Proof of membership and position of a light block header.\n */ class LightBlockHeaderProof {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"index\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            }, {\n                key: \"proof\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ByteArraySchema(),\n                omitEmpty: true\n            }, {\n                key: \"treedepth\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `LightBlockHeaderProof` object.\n     * @param index - The index of the light block header in the vector commitment tree\n     * @param proof - The encoded proof.\n     * @param treedepth - Represents the depth of the tree that is being proven, i.e. the number of edges\n     * from a leaf to the root.\n     */ constructor({ index, proof, treedepth }){\n        this.index = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureSafeInteger)(index);\n        this.proof = typeof proof === \"string\" ? (0,_encoding_binarydata_js__WEBPACK_IMPORTED_MODULE_2__.base64ToBytes)(proof) : proof;\n        this.treedepth = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureSafeInteger)(treedepth);\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return LightBlockHeaderProof.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"index\",\n                this.index\n            ],\n            [\n                \"proof\",\n                this.proof\n            ],\n            [\n                \"treedepth\",\n                this.treedepth\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded LightBlockHeaderProof: ${data}`);\n        }\n        return new LightBlockHeaderProof({\n            index: data.get(\"index\"),\n            proof: data.get(\"proof\"),\n            treedepth: data.get(\"treedepth\")\n        });\n    }\n}\n/**\n *\n */ class NodeStatusResponse {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"catchup-time\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            }, {\n                key: \"last-round\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            }, {\n                key: \"last-version\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema(),\n                omitEmpty: true\n            }, {\n                key: \"next-version\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema(),\n                omitEmpty: true\n            }, {\n                key: \"next-version-round\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            }, {\n                key: \"next-version-supported\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.BooleanSchema(),\n                omitEmpty: true\n            }, {\n                key: \"stopped-at-unsupported-round\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.BooleanSchema(),\n                omitEmpty: true\n            }, {\n                key: \"time-since-last-round\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            }, {\n                key: \"catchpoint\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema()),\n                omitEmpty: true\n            }, {\n                key: \"catchpoint-acquired-blocks\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema()),\n                omitEmpty: true\n            }, {\n                key: \"catchpoint-processed-accounts\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema()),\n                omitEmpty: true\n            }, {\n                key: \"catchpoint-processed-kvs\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema()),\n                omitEmpty: true\n            }, {\n                key: \"catchpoint-total-accounts\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema()),\n                omitEmpty: true\n            }, {\n                key: \"catchpoint-total-blocks\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema()),\n                omitEmpty: true\n            }, {\n                key: \"catchpoint-total-kvs\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema()),\n                omitEmpty: true\n            }, {\n                key: \"catchpoint-verified-accounts\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema()),\n                omitEmpty: true\n            }, {\n                key: \"catchpoint-verified-kvs\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema()),\n                omitEmpty: true\n            }, {\n                key: \"last-catchpoint\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema()),\n                omitEmpty: true\n            }, {\n                key: \"upgrade-delay\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema()),\n                omitEmpty: true\n            }, {\n                key: \"upgrade-next-protocol-vote-before\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema()),\n                omitEmpty: true\n            }, {\n                key: \"upgrade-no-votes\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema()),\n                omitEmpty: true\n            }, {\n                key: \"upgrade-node-vote\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.BooleanSchema()),\n                omitEmpty: true\n            }, {\n                key: \"upgrade-vote-rounds\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema()),\n                omitEmpty: true\n            }, {\n                key: \"upgrade-votes\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema()),\n                omitEmpty: true\n            }, {\n                key: \"upgrade-votes-required\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema()),\n                omitEmpty: true\n            }, {\n                key: \"upgrade-yes-votes\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema()),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `NodeStatusResponse` object.\n     * @param catchupTime - CatchupTime in nanoseconds\n     * @param lastRound - LastRound indicates the last round seen\n     * @param lastVersion - LastVersion indicates the last consensus version supported\n     * @param nextVersion - NextVersion of consensus protocol to use\n     * @param nextVersionRound - NextVersionRound is the round at which the next consensus version will apply\n     * @param nextVersionSupported - NextVersionSupported indicates whether the next consensus version is supported\n     * by this node\n     * @param stoppedAtUnsupportedRound - StoppedAtUnsupportedRound indicates that the node does not support the new\n     * rounds and has stopped making progress\n     * @param timeSinceLastRound - TimeSinceLastRound in nanoseconds\n     * @param catchpoint - The current catchpoint that is being caught up to\n     * @param catchpointAcquiredBlocks - The number of blocks that have already been obtained by the node as part of the\n     * catchup\n     * @param catchpointProcessedAccounts - The number of accounts from the current catchpoint that have been processed so\n     * far as part of the catchup\n     * @param catchpointProcessedKvs - The number of key-values (KVs) from the current catchpoint that have been\n     * processed so far as part of the catchup\n     * @param catchpointTotalAccounts - The total number of accounts included in the current catchpoint\n     * @param catchpointTotalBlocks - The total number of blocks that are required to complete the current catchpoint\n     * catchup\n     * @param catchpointTotalKvs - The total number of key-values (KVs) included in the current catchpoint\n     * @param catchpointVerifiedAccounts - The number of accounts from the current catchpoint that have been verified so\n     * far as part of the catchup\n     * @param catchpointVerifiedKvs - The number of key-values (KVs) from the current catchpoint that have been\n     * verified so far as part of the catchup\n     * @param lastCatchpoint - The last catchpoint seen by the node\n     * @param upgradeDelay - Upgrade delay\n     * @param upgradeNextProtocolVoteBefore - Next protocol round\n     * @param upgradeNoVotes - No votes cast for consensus upgrade\n     * @param upgradeNodeVote - This node's upgrade vote\n     * @param upgradeVoteRounds - Total voting rounds for current upgrade\n     * @param upgradeVotes - Total votes cast for consensus upgrade\n     * @param upgradeVotesRequired - Yes votes required for consensus upgrade\n     * @param upgradeYesVotes - Yes votes cast for consensus upgrade\n     */ constructor({ catchupTime, lastRound, lastVersion, nextVersion, nextVersionRound, nextVersionSupported, stoppedAtUnsupportedRound, timeSinceLastRound, catchpoint, catchpointAcquiredBlocks, catchpointProcessedAccounts, catchpointProcessedKvs, catchpointTotalAccounts, catchpointTotalBlocks, catchpointTotalKvs, catchpointVerifiedAccounts, catchpointVerifiedKvs, lastCatchpoint, upgradeDelay, upgradeNextProtocolVoteBefore, upgradeNoVotes, upgradeNodeVote, upgradeVoteRounds, upgradeVotes, upgradeVotesRequired, upgradeYesVotes }){\n        this.catchupTime = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(catchupTime);\n        this.lastRound = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(lastRound);\n        this.lastVersion = lastVersion;\n        this.nextVersion = nextVersion;\n        this.nextVersionRound = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(nextVersionRound);\n        this.nextVersionSupported = nextVersionSupported;\n        this.stoppedAtUnsupportedRound = stoppedAtUnsupportedRound;\n        this.timeSinceLastRound = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(timeSinceLastRound);\n        this.catchpoint = catchpoint;\n        this.catchpointAcquiredBlocks = typeof catchpointAcquiredBlocks === \"undefined\" ? undefined : (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureSafeInteger)(catchpointAcquiredBlocks);\n        this.catchpointProcessedAccounts = typeof catchpointProcessedAccounts === \"undefined\" ? undefined : (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureSafeInteger)(catchpointProcessedAccounts);\n        this.catchpointProcessedKvs = typeof catchpointProcessedKvs === \"undefined\" ? undefined : (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureSafeInteger)(catchpointProcessedKvs);\n        this.catchpointTotalAccounts = typeof catchpointTotalAccounts === \"undefined\" ? undefined : (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureSafeInteger)(catchpointTotalAccounts);\n        this.catchpointTotalBlocks = typeof catchpointTotalBlocks === \"undefined\" ? undefined : (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureSafeInteger)(catchpointTotalBlocks);\n        this.catchpointTotalKvs = typeof catchpointTotalKvs === \"undefined\" ? undefined : (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureSafeInteger)(catchpointTotalKvs);\n        this.catchpointVerifiedAccounts = typeof catchpointVerifiedAccounts === \"undefined\" ? undefined : (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureSafeInteger)(catchpointVerifiedAccounts);\n        this.catchpointVerifiedKvs = typeof catchpointVerifiedKvs === \"undefined\" ? undefined : (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureSafeInteger)(catchpointVerifiedKvs);\n        this.lastCatchpoint = lastCatchpoint;\n        this.upgradeDelay = typeof upgradeDelay === \"undefined\" ? undefined : (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(upgradeDelay);\n        this.upgradeNextProtocolVoteBefore = typeof upgradeNextProtocolVoteBefore === \"undefined\" ? undefined : (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(upgradeNextProtocolVoteBefore);\n        this.upgradeNoVotes = typeof upgradeNoVotes === \"undefined\" ? undefined : (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureSafeInteger)(upgradeNoVotes);\n        this.upgradeNodeVote = upgradeNodeVote;\n        this.upgradeVoteRounds = typeof upgradeVoteRounds === \"undefined\" ? undefined : (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureSafeInteger)(upgradeVoteRounds);\n        this.upgradeVotes = typeof upgradeVotes === \"undefined\" ? undefined : (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureSafeInteger)(upgradeVotes);\n        this.upgradeVotesRequired = typeof upgradeVotesRequired === \"undefined\" ? undefined : (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureSafeInteger)(upgradeVotesRequired);\n        this.upgradeYesVotes = typeof upgradeYesVotes === \"undefined\" ? undefined : (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureSafeInteger)(upgradeYesVotes);\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return NodeStatusResponse.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"catchup-time\",\n                this.catchupTime\n            ],\n            [\n                \"last-round\",\n                this.lastRound\n            ],\n            [\n                \"last-version\",\n                this.lastVersion\n            ],\n            [\n                \"next-version\",\n                this.nextVersion\n            ],\n            [\n                \"next-version-round\",\n                this.nextVersionRound\n            ],\n            [\n                \"next-version-supported\",\n                this.nextVersionSupported\n            ],\n            [\n                \"stopped-at-unsupported-round\",\n                this.stoppedAtUnsupportedRound\n            ],\n            [\n                \"time-since-last-round\",\n                this.timeSinceLastRound\n            ],\n            [\n                \"catchpoint\",\n                this.catchpoint\n            ],\n            [\n                \"catchpoint-acquired-blocks\",\n                this.catchpointAcquiredBlocks\n            ],\n            [\n                \"catchpoint-processed-accounts\",\n                this.catchpointProcessedAccounts\n            ],\n            [\n                \"catchpoint-processed-kvs\",\n                this.catchpointProcessedKvs\n            ],\n            [\n                \"catchpoint-total-accounts\",\n                this.catchpointTotalAccounts\n            ],\n            [\n                \"catchpoint-total-blocks\",\n                this.catchpointTotalBlocks\n            ],\n            [\n                \"catchpoint-total-kvs\",\n                this.catchpointTotalKvs\n            ],\n            [\n                \"catchpoint-verified-accounts\",\n                this.catchpointVerifiedAccounts\n            ],\n            [\n                \"catchpoint-verified-kvs\",\n                this.catchpointVerifiedKvs\n            ],\n            [\n                \"last-catchpoint\",\n                this.lastCatchpoint\n            ],\n            [\n                \"upgrade-delay\",\n                this.upgradeDelay\n            ],\n            [\n                \"upgrade-next-protocol-vote-before\",\n                this.upgradeNextProtocolVoteBefore\n            ],\n            [\n                \"upgrade-no-votes\",\n                this.upgradeNoVotes\n            ],\n            [\n                \"upgrade-node-vote\",\n                this.upgradeNodeVote\n            ],\n            [\n                \"upgrade-vote-rounds\",\n                this.upgradeVoteRounds\n            ],\n            [\n                \"upgrade-votes\",\n                this.upgradeVotes\n            ],\n            [\n                \"upgrade-votes-required\",\n                this.upgradeVotesRequired\n            ],\n            [\n                \"upgrade-yes-votes\",\n                this.upgradeYesVotes\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded NodeStatusResponse: ${data}`);\n        }\n        return new NodeStatusResponse({\n            catchupTime: data.get(\"catchup-time\"),\n            lastRound: data.get(\"last-round\"),\n            lastVersion: data.get(\"last-version\"),\n            nextVersion: data.get(\"next-version\"),\n            nextVersionRound: data.get(\"next-version-round\"),\n            nextVersionSupported: data.get(\"next-version-supported\"),\n            stoppedAtUnsupportedRound: data.get(\"stopped-at-unsupported-round\"),\n            timeSinceLastRound: data.get(\"time-since-last-round\"),\n            catchpoint: data.get(\"catchpoint\"),\n            catchpointAcquiredBlocks: data.get(\"catchpoint-acquired-blocks\"),\n            catchpointProcessedAccounts: data.get(\"catchpoint-processed-accounts\"),\n            catchpointProcessedKvs: data.get(\"catchpoint-processed-kvs\"),\n            catchpointTotalAccounts: data.get(\"catchpoint-total-accounts\"),\n            catchpointTotalBlocks: data.get(\"catchpoint-total-blocks\"),\n            catchpointTotalKvs: data.get(\"catchpoint-total-kvs\"),\n            catchpointVerifiedAccounts: data.get(\"catchpoint-verified-accounts\"),\n            catchpointVerifiedKvs: data.get(\"catchpoint-verified-kvs\"),\n            lastCatchpoint: data.get(\"last-catchpoint\"),\n            upgradeDelay: data.get(\"upgrade-delay\"),\n            upgradeNextProtocolVoteBefore: data.get(\"upgrade-next-protocol-vote-before\"),\n            upgradeNoVotes: data.get(\"upgrade-no-votes\"),\n            upgradeNodeVote: data.get(\"upgrade-node-vote\"),\n            upgradeVoteRounds: data.get(\"upgrade-vote-rounds\"),\n            upgradeVotes: data.get(\"upgrade-votes\"),\n            upgradeVotesRequired: data.get(\"upgrade-votes-required\"),\n            upgradeYesVotes: data.get(\"upgrade-yes-votes\")\n        });\n    }\n}\n/**\n * Details about a pending transaction. If the transaction was recently confirmed,\n * includes confirmation details like the round and reward details.\n */ class PendingTransactionResponse {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"pool-error\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema(),\n                omitEmpty: true\n            }, {\n                key: \"txn\",\n                valueSchema: _signedTransaction_js__WEBPACK_IMPORTED_MODULE_5__.SignedTransaction.encodingSchema,\n                omitEmpty: true\n            }, {\n                key: \"application-index\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema()),\n                omitEmpty: true\n            }, {\n                key: \"asset-closing-amount\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema()),\n                omitEmpty: true\n            }, {\n                key: \"asset-index\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema()),\n                omitEmpty: true\n            }, {\n                key: \"close-rewards\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema()),\n                omitEmpty: true\n            }, {\n                key: \"closing-amount\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema()),\n                omitEmpty: true\n            }, {\n                key: \"confirmed-round\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema()),\n                omitEmpty: true\n            }, {\n                key: \"global-state-delta\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ArraySchema(EvalDeltaKeyValue.encodingSchema)),\n                omitEmpty: true\n            }, {\n                key: \"inner-txns\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ArraySchema(PendingTransactionResponse.encodingSchema)),\n                omitEmpty: true\n            }, {\n                key: \"local-state-delta\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ArraySchema(AccountStateDelta.encodingSchema)),\n                omitEmpty: true\n            }, {\n                key: \"logs\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ArraySchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ByteArraySchema())),\n                omitEmpty: true\n            }, {\n                key: \"receiver-rewards\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema()),\n                omitEmpty: true\n            }, {\n                key: \"sender-rewards\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema()),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `PendingTransactionResponse` object.\n     * @param poolError - Indicates that the transaction was kicked out of this node's transaction pool\n     * (and specifies why that happened). An empty string indicates the transaction\n     * wasn't kicked out of this node's txpool due to an error.\n     * @param txn - The raw signed transaction.\n     * @param applicationIndex - The application index if the transaction was found and it created an\n     * application.\n     * @param assetClosingAmount - The number of the asset's unit that were transferred to the close-to address.\n     * @param assetIndex - The asset index if the transaction was found and it created an asset.\n     * @param closeRewards - Rewards in microalgos applied to the close remainder to account.\n     * @param closingAmount - Closing amount for the transaction.\n     * @param confirmedRound - The round where this transaction was confirmed, if present.\n     * @param globalStateDelta - Global state key/value changes for the application being executed by this\n     * transaction.\n     * @param innerTxns - Inner transactions produced by application execution.\n     * @param localStateDelta - Local state key/value changes for the application being executed by this\n     * transaction.\n     * @param logs - Logs for the application being executed by this transaction.\n     * @param receiverRewards - Rewards in microalgos applied to the receiver account.\n     * @param senderRewards - Rewards in microalgos applied to the sender account.\n     */ constructor({ poolError, txn, applicationIndex, assetClosingAmount, assetIndex, closeRewards, closingAmount, confirmedRound, globalStateDelta, innerTxns, localStateDelta, logs, receiverRewards, senderRewards }){\n        this.poolError = poolError;\n        this.txn = txn;\n        this.applicationIndex = typeof applicationIndex === \"undefined\" ? undefined : (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(applicationIndex);\n        this.assetClosingAmount = typeof assetClosingAmount === \"undefined\" ? undefined : (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(assetClosingAmount);\n        this.assetIndex = typeof assetIndex === \"undefined\" ? undefined : (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(assetIndex);\n        this.closeRewards = typeof closeRewards === \"undefined\" ? undefined : (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(closeRewards);\n        this.closingAmount = typeof closingAmount === \"undefined\" ? undefined : (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(closingAmount);\n        this.confirmedRound = typeof confirmedRound === \"undefined\" ? undefined : (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(confirmedRound);\n        this.globalStateDelta = globalStateDelta;\n        this.innerTxns = innerTxns;\n        this.localStateDelta = localStateDelta;\n        this.logs = logs;\n        this.receiverRewards = typeof receiverRewards === \"undefined\" ? undefined : (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(receiverRewards);\n        this.senderRewards = typeof senderRewards === \"undefined\" ? undefined : (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(senderRewards);\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return PendingTransactionResponse.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"pool-error\",\n                this.poolError\n            ],\n            [\n                \"txn\",\n                this.txn.toEncodingData()\n            ],\n            [\n                \"application-index\",\n                this.applicationIndex\n            ],\n            [\n                \"asset-closing-amount\",\n                this.assetClosingAmount\n            ],\n            [\n                \"asset-index\",\n                this.assetIndex\n            ],\n            [\n                \"close-rewards\",\n                this.closeRewards\n            ],\n            [\n                \"closing-amount\",\n                this.closingAmount\n            ],\n            [\n                \"confirmed-round\",\n                this.confirmedRound\n            ],\n            [\n                \"global-state-delta\",\n                typeof this.globalStateDelta !== \"undefined\" ? this.globalStateDelta.map((v)=>v.toEncodingData()) : undefined\n            ],\n            [\n                \"inner-txns\",\n                typeof this.innerTxns !== \"undefined\" ? this.innerTxns.map((v)=>v.toEncodingData()) : undefined\n            ],\n            [\n                \"local-state-delta\",\n                typeof this.localStateDelta !== \"undefined\" ? this.localStateDelta.map((v)=>v.toEncodingData()) : undefined\n            ],\n            [\n                \"logs\",\n                this.logs\n            ],\n            [\n                \"receiver-rewards\",\n                this.receiverRewards\n            ],\n            [\n                \"sender-rewards\",\n                this.senderRewards\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded PendingTransactionResponse: ${data}`);\n        }\n        return new PendingTransactionResponse({\n            poolError: data.get(\"pool-error\"),\n            txn: _signedTransaction_js__WEBPACK_IMPORTED_MODULE_5__.SignedTransaction.fromEncodingData(data.get(\"txn\") ?? new Map()),\n            applicationIndex: data.get(\"application-index\"),\n            assetClosingAmount: data.get(\"asset-closing-amount\"),\n            assetIndex: data.get(\"asset-index\"),\n            closeRewards: data.get(\"close-rewards\"),\n            closingAmount: data.get(\"closing-amount\"),\n            confirmedRound: data.get(\"confirmed-round\"),\n            globalStateDelta: typeof data.get(\"global-state-delta\") !== \"undefined\" ? data.get(\"global-state-delta\").map((v)=>EvalDeltaKeyValue.fromEncodingData(v)) : undefined,\n            innerTxns: typeof data.get(\"inner-txns\") !== \"undefined\" ? data.get(\"inner-txns\").map((v)=>PendingTransactionResponse.fromEncodingData(v)) : undefined,\n            localStateDelta: typeof data.get(\"local-state-delta\") !== \"undefined\" ? data.get(\"local-state-delta\").map((v)=>AccountStateDelta.fromEncodingData(v)) : undefined,\n            logs: data.get(\"logs\"),\n            receiverRewards: data.get(\"receiver-rewards\"),\n            senderRewards: data.get(\"sender-rewards\")\n        });\n    }\n}\n/**\n * A potentially truncated list of transactions currently in the node's transaction\n * pool. You can compute whether or not the list is truncated if the number of\n * elements in the **top-transactions** array is fewer than **total-transactions**.\n */ class PendingTransactionsResponse {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"top-transactions\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ArraySchema(_signedTransaction_js__WEBPACK_IMPORTED_MODULE_5__.SignedTransaction.encodingSchema),\n                omitEmpty: true\n            }, {\n                key: \"total-transactions\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `PendingTransactionsResponse` object.\n     * @param topTransactions - An array of signed transaction objects.\n     * @param totalTransactions - Total number of transactions in the pool.\n     */ constructor({ topTransactions, totalTransactions }){\n        this.topTransactions = topTransactions;\n        this.totalTransactions = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureSafeInteger)(totalTransactions);\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return PendingTransactionsResponse.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"top-transactions\",\n                this.topTransactions.map((v)=>v.toEncodingData())\n            ],\n            [\n                \"total-transactions\",\n                this.totalTransactions\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded PendingTransactionsResponse: ${data}`);\n        }\n        return new PendingTransactionsResponse({\n            topTransactions: (data.get(\"top-transactions\") ?? []).map((v)=>_signedTransaction_js__WEBPACK_IMPORTED_MODULE_5__.SignedTransaction.fromEncodingData(v)),\n            totalTransactions: data.get(\"total-transactions\")\n        });\n    }\n}\n/**\n * Transaction ID of the submission.\n */ class PostTransactionsResponse {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"txId\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema(),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `PostTransactionsResponse` object.\n     * @param txid - encoding of the transaction hash.\n     */ constructor({ txid }){\n        this.txid = txid;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return PostTransactionsResponse.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"txId\",\n                this.txid\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded PostTransactionsResponse: ${data}`);\n        }\n        return new PostTransactionsResponse({\n            txid: data.get(\"txId\")\n        });\n    }\n}\n/**\n * A write operation into a scratch slot.\n */ class ScratchChange {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"new-value\",\n                valueSchema: AvmValue.encodingSchema,\n                omitEmpty: true\n            }, {\n                key: \"slot\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `ScratchChange` object.\n     * @param newValue - Represents an AVM value.\n     * @param slot - The scratch slot written.\n     */ constructor({ newValue, slot }){\n        this.newValue = newValue;\n        this.slot = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureSafeInteger)(slot);\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return ScratchChange.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"new-value\",\n                this.newValue.toEncodingData()\n            ],\n            [\n                \"slot\",\n                this.slot\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded ScratchChange: ${data}`);\n        }\n        return new ScratchChange({\n            newValue: AvmValue.fromEncodingData(data.get(\"new-value\") ?? new Map()),\n            slot: data.get(\"slot\")\n        });\n    }\n}\n/**\n * Initial states of resources that were accessed during simulation.\n */ class SimulateInitialStates {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"app-initial-states\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ArraySchema(ApplicationInitialStates.encodingSchema)),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `SimulateInitialStates` object.\n     * @param appInitialStates - The initial states of accessed application before simulation. The order of this\n     * array is arbitrary.\n     */ constructor({ appInitialStates }){\n        this.appInitialStates = appInitialStates;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return SimulateInitialStates.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"app-initial-states\",\n                typeof this.appInitialStates !== \"undefined\" ? this.appInitialStates.map((v)=>v.toEncodingData()) : undefined\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded SimulateInitialStates: ${data}`);\n        }\n        return new SimulateInitialStates({\n            appInitialStates: typeof data.get(\"app-initial-states\") !== \"undefined\" ? data.get(\"app-initial-states\").map((v)=>ApplicationInitialStates.fromEncodingData(v)) : undefined\n        });\n    }\n}\n/**\n * Request type for simulation endpoint.\n */ class SimulateRequest {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"txn-groups\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ArraySchema(SimulateRequestTransactionGroup.encodingSchema),\n                omitEmpty: true\n            }, {\n                key: \"allow-empty-signatures\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.BooleanSchema()),\n                omitEmpty: true\n            }, {\n                key: \"allow-more-logging\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.BooleanSchema()),\n                omitEmpty: true\n            }, {\n                key: \"allow-unnamed-resources\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.BooleanSchema()),\n                omitEmpty: true\n            }, {\n                key: \"exec-trace-config\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(SimulateTraceConfig.encodingSchema),\n                omitEmpty: true\n            }, {\n                key: \"extra-opcode-budget\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema()),\n                omitEmpty: true\n            }, {\n                key: \"fix-signers\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.BooleanSchema()),\n                omitEmpty: true\n            }, {\n                key: \"round\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema()),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `SimulateRequest` object.\n     * @param txnGroups - The transaction groups to simulate.\n     * @param allowEmptySignatures - Allows transactions without signatures to be simulated as if they had correct\n     * signatures.\n     * @param allowMoreLogging - Lifts limits on log opcode usage during simulation.\n     * @param allowUnnamedResources - Allows access to unnamed resources during simulation.\n     * @param execTraceConfig - An object that configures simulation execution trace.\n     * @param extraOpcodeBudget - Applies extra opcode budget during simulation for each transaction group.\n     * @param fixSigners - If true, signers for transactions that are missing signatures will be fixed\n     * during evaluation.\n     * @param round - If provided, specifies the round preceding the simulation. State changes through\n     * this round will be used to run this simulation. Usually only the 4 most recent\n     * rounds will be available (controlled by the node config value MaxAcctLookback).\n     * If not specified, defaults to the latest available round.\n     */ constructor({ txnGroups, allowEmptySignatures, allowMoreLogging, allowUnnamedResources, execTraceConfig, extraOpcodeBudget, fixSigners, round }){\n        this.txnGroups = txnGroups;\n        this.allowEmptySignatures = allowEmptySignatures;\n        this.allowMoreLogging = allowMoreLogging;\n        this.allowUnnamedResources = allowUnnamedResources;\n        this.execTraceConfig = execTraceConfig;\n        this.extraOpcodeBudget = typeof extraOpcodeBudget === \"undefined\" ? undefined : (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureSafeInteger)(extraOpcodeBudget);\n        this.fixSigners = fixSigners;\n        this.round = typeof round === \"undefined\" ? undefined : (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(round);\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return SimulateRequest.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"txn-groups\",\n                this.txnGroups.map((v)=>v.toEncodingData())\n            ],\n            [\n                \"allow-empty-signatures\",\n                this.allowEmptySignatures\n            ],\n            [\n                \"allow-more-logging\",\n                this.allowMoreLogging\n            ],\n            [\n                \"allow-unnamed-resources\",\n                this.allowUnnamedResources\n            ],\n            [\n                \"exec-trace-config\",\n                typeof this.execTraceConfig !== \"undefined\" ? this.execTraceConfig.toEncodingData() : undefined\n            ],\n            [\n                \"extra-opcode-budget\",\n                this.extraOpcodeBudget\n            ],\n            [\n                \"fix-signers\",\n                this.fixSigners\n            ],\n            [\n                \"round\",\n                this.round\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded SimulateRequest: ${data}`);\n        }\n        return new SimulateRequest({\n            txnGroups: (data.get(\"txn-groups\") ?? []).map((v)=>SimulateRequestTransactionGroup.fromEncodingData(v)),\n            allowEmptySignatures: data.get(\"allow-empty-signatures\"),\n            allowMoreLogging: data.get(\"allow-more-logging\"),\n            allowUnnamedResources: data.get(\"allow-unnamed-resources\"),\n            execTraceConfig: typeof data.get(\"exec-trace-config\") !== \"undefined\" ? SimulateTraceConfig.fromEncodingData(data.get(\"exec-trace-config\")) : undefined,\n            extraOpcodeBudget: data.get(\"extra-opcode-budget\"),\n            fixSigners: data.get(\"fix-signers\"),\n            round: data.get(\"round\")\n        });\n    }\n}\n/**\n * A transaction group to simulate.\n */ class SimulateRequestTransactionGroup {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"txns\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ArraySchema(_signedTransaction_js__WEBPACK_IMPORTED_MODULE_5__.SignedTransaction.encodingSchema),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `SimulateRequestTransactionGroup` object.\n     * @param txns - An atomic transaction group.\n     */ constructor({ txns }){\n        this.txns = txns;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return SimulateRequestTransactionGroup.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"txns\",\n                this.txns.map((v)=>v.toEncodingData())\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded SimulateRequestTransactionGroup: ${data}`);\n        }\n        return new SimulateRequestTransactionGroup({\n            txns: (data.get(\"txns\") ?? []).map((v)=>_signedTransaction_js__WEBPACK_IMPORTED_MODULE_5__.SignedTransaction.fromEncodingData(v))\n        });\n    }\n}\n/**\n * Result of a transaction group simulation.\n */ class SimulateResponse {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"last-round\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            }, {\n                key: \"txn-groups\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ArraySchema(SimulateTransactionGroupResult.encodingSchema),\n                omitEmpty: true\n            }, {\n                key: \"version\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            }, {\n                key: \"eval-overrides\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(SimulationEvalOverrides.encodingSchema),\n                omitEmpty: true\n            }, {\n                key: \"exec-trace-config\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(SimulateTraceConfig.encodingSchema),\n                omitEmpty: true\n            }, {\n                key: \"initial-states\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(SimulateInitialStates.encodingSchema),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `SimulateResponse` object.\n     * @param lastRound - The round immediately preceding this simulation. State changes through this\n     * round were used to run this simulation.\n     * @param txnGroups - A result object for each transaction group that was simulated.\n     * @param version - The version of this response object.\n     * @param evalOverrides - The set of parameters and limits override during simulation. If this set of\n     * parameters is present, then evaluation parameters may differ from standard\n     * evaluation in certain ways.\n     * @param execTraceConfig - An object that configures simulation execution trace.\n     * @param initialStates - Initial states of resources that were accessed during simulation.\n     */ constructor({ lastRound, txnGroups, version, evalOverrides, execTraceConfig, initialStates }){\n        this.lastRound = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(lastRound);\n        this.txnGroups = txnGroups;\n        this.version = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureSafeInteger)(version);\n        this.evalOverrides = evalOverrides;\n        this.execTraceConfig = execTraceConfig;\n        this.initialStates = initialStates;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return SimulateResponse.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"last-round\",\n                this.lastRound\n            ],\n            [\n                \"txn-groups\",\n                this.txnGroups.map((v)=>v.toEncodingData())\n            ],\n            [\n                \"version\",\n                this.version\n            ],\n            [\n                \"eval-overrides\",\n                typeof this.evalOverrides !== \"undefined\" ? this.evalOverrides.toEncodingData() : undefined\n            ],\n            [\n                \"exec-trace-config\",\n                typeof this.execTraceConfig !== \"undefined\" ? this.execTraceConfig.toEncodingData() : undefined\n            ],\n            [\n                \"initial-states\",\n                typeof this.initialStates !== \"undefined\" ? this.initialStates.toEncodingData() : undefined\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded SimulateResponse: ${data}`);\n        }\n        return new SimulateResponse({\n            lastRound: data.get(\"last-round\"),\n            txnGroups: (data.get(\"txn-groups\") ?? []).map((v)=>SimulateTransactionGroupResult.fromEncodingData(v)),\n            version: data.get(\"version\"),\n            evalOverrides: typeof data.get(\"eval-overrides\") !== \"undefined\" ? SimulationEvalOverrides.fromEncodingData(data.get(\"eval-overrides\")) : undefined,\n            execTraceConfig: typeof data.get(\"exec-trace-config\") !== \"undefined\" ? SimulateTraceConfig.fromEncodingData(data.get(\"exec-trace-config\")) : undefined,\n            initialStates: typeof data.get(\"initial-states\") !== \"undefined\" ? SimulateInitialStates.fromEncodingData(data.get(\"initial-states\")) : undefined\n        });\n    }\n}\n/**\n * An object that configures simulation execution trace.\n */ class SimulateTraceConfig {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"enable\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.BooleanSchema()),\n                omitEmpty: true\n            }, {\n                key: \"scratch-change\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.BooleanSchema()),\n                omitEmpty: true\n            }, {\n                key: \"stack-change\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.BooleanSchema()),\n                omitEmpty: true\n            }, {\n                key: \"state-change\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.BooleanSchema()),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `SimulateTraceConfig` object.\n     * @param enable - A boolean option for opting in execution trace features simulation endpoint.\n     * @param scratchChange - A boolean option enabling returning scratch slot changes together with execution\n     * trace during simulation.\n     * @param stackChange - A boolean option enabling returning stack changes together with execution trace\n     * during simulation.\n     * @param stateChange - A boolean option enabling returning application state changes (global, local,\n     * and box changes) with the execution trace during simulation.\n     */ constructor({ enable, scratchChange, stackChange, stateChange }){\n        this.enable = enable;\n        this.scratchChange = scratchChange;\n        this.stackChange = stackChange;\n        this.stateChange = stateChange;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return SimulateTraceConfig.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"enable\",\n                this.enable\n            ],\n            [\n                \"scratch-change\",\n                this.scratchChange\n            ],\n            [\n                \"stack-change\",\n                this.stackChange\n            ],\n            [\n                \"state-change\",\n                this.stateChange\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded SimulateTraceConfig: ${data}`);\n        }\n        return new SimulateTraceConfig({\n            enable: data.get(\"enable\"),\n            scratchChange: data.get(\"scratch-change\"),\n            stackChange: data.get(\"stack-change\"),\n            stateChange: data.get(\"state-change\")\n        });\n    }\n}\n/**\n * Simulation result for an atomic transaction group\n */ class SimulateTransactionGroupResult {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"txn-results\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ArraySchema(SimulateTransactionResult.encodingSchema),\n                omitEmpty: true\n            }, {\n                key: \"app-budget-added\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema()),\n                omitEmpty: true\n            }, {\n                key: \"app-budget-consumed\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema()),\n                omitEmpty: true\n            }, {\n                key: \"failed-at\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ArraySchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema())),\n                omitEmpty: true\n            }, {\n                key: \"failure-message\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema()),\n                omitEmpty: true\n            }, {\n                key: \"unnamed-resources-accessed\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(SimulateUnnamedResourcesAccessed.encodingSchema),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `SimulateTransactionGroupResult` object.\n     * @param txnResults - Simulation result for individual transactions\n     * @param appBudgetAdded - Total budget added during execution of app calls in the transaction group.\n     * @param appBudgetConsumed - Total budget consumed during execution of app calls in the transaction group.\n     * @param failedAt - If present, indicates which transaction in this group caused the failure. This\n     * array represents the path to the failing transaction. Indexes are zero based,\n     * the first element indicates the top-level transaction, and successive elements\n     * indicate deeper inner transactions.\n     * @param failureMessage - If present, indicates that the transaction group failed and specifies why that\n     * happened\n     * @param unnamedResourcesAccessed - These are resources that were accessed by this group that would normally have\n     * caused failure, but were allowed in simulation. Depending on where this object\n     * is in the response, the unnamed resources it contains may or may not qualify for\n     * group resource sharing. If this is a field in SimulateTransactionGroupResult,\n     * the resources do qualify, but if this is a field in SimulateTransactionResult,\n     * they do not qualify. In order to make this group valid for actual submission,\n     * resources that qualify for group sharing can be made available by any\n     * transaction of the group; otherwise, resources must be placed in the same\n     * transaction which accessed them.\n     */ constructor({ txnResults, appBudgetAdded, appBudgetConsumed, failedAt, failureMessage, unnamedResourcesAccessed }){\n        this.txnResults = txnResults;\n        this.appBudgetAdded = typeof appBudgetAdded === \"undefined\" ? undefined : (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureSafeInteger)(appBudgetAdded);\n        this.appBudgetConsumed = typeof appBudgetConsumed === \"undefined\" ? undefined : (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureSafeInteger)(appBudgetConsumed);\n        this.failedAt = typeof failedAt === \"undefined\" ? undefined : failedAt.map(_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureSafeInteger);\n        this.failureMessage = failureMessage;\n        this.unnamedResourcesAccessed = unnamedResourcesAccessed;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return SimulateTransactionGroupResult.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"txn-results\",\n                this.txnResults.map((v)=>v.toEncodingData())\n            ],\n            [\n                \"app-budget-added\",\n                this.appBudgetAdded\n            ],\n            [\n                \"app-budget-consumed\",\n                this.appBudgetConsumed\n            ],\n            [\n                \"failed-at\",\n                this.failedAt\n            ],\n            [\n                \"failure-message\",\n                this.failureMessage\n            ],\n            [\n                \"unnamed-resources-accessed\",\n                typeof this.unnamedResourcesAccessed !== \"undefined\" ? this.unnamedResourcesAccessed.toEncodingData() : undefined\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded SimulateTransactionGroupResult: ${data}`);\n        }\n        return new SimulateTransactionGroupResult({\n            txnResults: (data.get(\"txn-results\") ?? []).map((v)=>SimulateTransactionResult.fromEncodingData(v)),\n            appBudgetAdded: data.get(\"app-budget-added\"),\n            appBudgetConsumed: data.get(\"app-budget-consumed\"),\n            failedAt: data.get(\"failed-at\"),\n            failureMessage: data.get(\"failure-message\"),\n            unnamedResourcesAccessed: typeof data.get(\"unnamed-resources-accessed\") !== \"undefined\" ? SimulateUnnamedResourcesAccessed.fromEncodingData(data.get(\"unnamed-resources-accessed\")) : undefined\n        });\n    }\n}\n/**\n * Simulation result for an individual transaction\n */ class SimulateTransactionResult {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"txn-result\",\n                valueSchema: PendingTransactionResponse.encodingSchema,\n                omitEmpty: true\n            }, {\n                key: \"app-budget-consumed\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema()),\n                omitEmpty: true\n            }, {\n                key: \"exec-trace\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(SimulationTransactionExecTrace.encodingSchema),\n                omitEmpty: true\n            }, {\n                key: \"fixed-signer\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema()),\n                omitEmpty: true\n            }, {\n                key: \"logic-sig-budget-consumed\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema()),\n                omitEmpty: true\n            }, {\n                key: \"unnamed-resources-accessed\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(SimulateUnnamedResourcesAccessed.encodingSchema),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `SimulateTransactionResult` object.\n     * @param txnResult - Details about a pending transaction. If the transaction was recently confirmed,\n     * includes confirmation details like the round and reward details.\n     * @param appBudgetConsumed - Budget used during execution of an app call transaction. This value includes\n     * budged used by inner app calls spawned by this transaction.\n     * @param execTrace - The execution trace of calling an app or a logic sig, containing the inner app\n     * call trace in a recursive way.\n     * @param fixedSigner - The account that needed to sign this transaction when no signature was provided\n     * and the provided signer was incorrect.\n     * @param logicSigBudgetConsumed - Budget used during execution of a logic sig transaction.\n     * @param unnamedResourcesAccessed - These are resources that were accessed by this group that would normally have\n     * caused failure, but were allowed in simulation. Depending on where this object\n     * is in the response, the unnamed resources it contains may or may not qualify for\n     * group resource sharing. If this is a field in SimulateTransactionGroupResult,\n     * the resources do qualify, but if this is a field in SimulateTransactionResult,\n     * they do not qualify. In order to make this group valid for actual submission,\n     * resources that qualify for group sharing can be made available by any\n     * transaction of the group; otherwise, resources must be placed in the same\n     * transaction which accessed them.\n     */ constructor({ txnResult, appBudgetConsumed, execTrace, fixedSigner, logicSigBudgetConsumed, unnamedResourcesAccessed }){\n        this.txnResult = txnResult;\n        this.appBudgetConsumed = typeof appBudgetConsumed === \"undefined\" ? undefined : (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureSafeInteger)(appBudgetConsumed);\n        this.execTrace = execTrace;\n        this.fixedSigner = typeof fixedSigner === \"string\" ? _encoding_address_js__WEBPACK_IMPORTED_MODULE_6__.Address.fromString(fixedSigner) : fixedSigner;\n        this.logicSigBudgetConsumed = typeof logicSigBudgetConsumed === \"undefined\" ? undefined : (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureSafeInteger)(logicSigBudgetConsumed);\n        this.unnamedResourcesAccessed = unnamedResourcesAccessed;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return SimulateTransactionResult.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"txn-result\",\n                this.txnResult.toEncodingData()\n            ],\n            [\n                \"app-budget-consumed\",\n                this.appBudgetConsumed\n            ],\n            [\n                \"exec-trace\",\n                typeof this.execTrace !== \"undefined\" ? this.execTrace.toEncodingData() : undefined\n            ],\n            [\n                \"fixed-signer\",\n                typeof this.fixedSigner !== \"undefined\" ? this.fixedSigner.toString() : undefined\n            ],\n            [\n                \"logic-sig-budget-consumed\",\n                this.logicSigBudgetConsumed\n            ],\n            [\n                \"unnamed-resources-accessed\",\n                typeof this.unnamedResourcesAccessed !== \"undefined\" ? this.unnamedResourcesAccessed.toEncodingData() : undefined\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded SimulateTransactionResult: ${data}`);\n        }\n        return new SimulateTransactionResult({\n            txnResult: PendingTransactionResponse.fromEncodingData(data.get(\"txn-result\") ?? new Map()),\n            appBudgetConsumed: data.get(\"app-budget-consumed\"),\n            execTrace: typeof data.get(\"exec-trace\") !== \"undefined\" ? SimulationTransactionExecTrace.fromEncodingData(data.get(\"exec-trace\")) : undefined,\n            fixedSigner: data.get(\"fixed-signer\"),\n            logicSigBudgetConsumed: data.get(\"logic-sig-budget-consumed\"),\n            unnamedResourcesAccessed: typeof data.get(\"unnamed-resources-accessed\") !== \"undefined\" ? SimulateUnnamedResourcesAccessed.fromEncodingData(data.get(\"unnamed-resources-accessed\")) : undefined\n        });\n    }\n}\n/**\n * These are resources that were accessed by this group that would normally have\n * caused failure, but were allowed in simulation. Depending on where this object\n * is in the response, the unnamed resources it contains may or may not qualify for\n * group resource sharing. If this is a field in SimulateTransactionGroupResult,\n * the resources do qualify, but if this is a field in SimulateTransactionResult,\n * they do not qualify. In order to make this group valid for actual submission,\n * resources that qualify for group sharing can be made available by any\n * transaction of the group; otherwise, resources must be placed in the same\n * transaction which accessed them.\n */ class SimulateUnnamedResourcesAccessed {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"accounts\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ArraySchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema())),\n                omitEmpty: true\n            }, {\n                key: \"app-locals\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ArraySchema(ApplicationLocalReference.encodingSchema)),\n                omitEmpty: true\n            }, {\n                key: \"apps\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ArraySchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema())),\n                omitEmpty: true\n            }, {\n                key: \"asset-holdings\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ArraySchema(AssetHoldingReference.encodingSchema)),\n                omitEmpty: true\n            }, {\n                key: \"assets\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ArraySchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema())),\n                omitEmpty: true\n            }, {\n                key: \"boxes\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ArraySchema(BoxReference.encodingSchema)),\n                omitEmpty: true\n            }, {\n                key: \"extra-box-refs\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema()),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `SimulateUnnamedResourcesAccessed` object.\n     * @param accounts - The unnamed accounts that were referenced. The order of this array is arbitrary.\n     * @param appLocals - The unnamed application local states that were referenced. The order of this\n     * array is arbitrary.\n     * @param apps - The unnamed applications that were referenced. The order of this array is\n     * arbitrary.\n     * @param assetHoldings - The unnamed asset holdings that were referenced. The order of this array is\n     * arbitrary.\n     * @param assets - The unnamed assets that were referenced. The order of this array is arbitrary.\n     * @param boxes - The unnamed boxes that were referenced. The order of this array is arbitrary.\n     * @param extraBoxRefs - The number of extra box references used to increase the IO budget. This is in\n     * addition to the references defined in the input transaction group and any\n     * referenced to unnamed boxes.\n     */ constructor({ accounts, appLocals, apps, assetHoldings, assets, boxes, extraBoxRefs }){\n        this.accounts = typeof accounts !== \"undefined\" ? accounts.map((addr)=>typeof addr === \"string\" ? _encoding_address_js__WEBPACK_IMPORTED_MODULE_6__.Address.fromString(addr) : addr) : undefined;\n        this.appLocals = appLocals;\n        this.apps = typeof apps === \"undefined\" ? undefined : apps.map(_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt);\n        this.assetHoldings = assetHoldings;\n        this.assets = typeof assets === \"undefined\" ? undefined : assets.map(_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt);\n        this.boxes = boxes;\n        this.extraBoxRefs = typeof extraBoxRefs === \"undefined\" ? undefined : (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureSafeInteger)(extraBoxRefs);\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return SimulateUnnamedResourcesAccessed.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"accounts\",\n                typeof this.accounts !== \"undefined\" ? this.accounts.map((v)=>v.toString()) : undefined\n            ],\n            [\n                \"app-locals\",\n                typeof this.appLocals !== \"undefined\" ? this.appLocals.map((v)=>v.toEncodingData()) : undefined\n            ],\n            [\n                \"apps\",\n                this.apps\n            ],\n            [\n                \"asset-holdings\",\n                typeof this.assetHoldings !== \"undefined\" ? this.assetHoldings.map((v)=>v.toEncodingData()) : undefined\n            ],\n            [\n                \"assets\",\n                this.assets\n            ],\n            [\n                \"boxes\",\n                typeof this.boxes !== \"undefined\" ? this.boxes.map((v)=>v.toEncodingData()) : undefined\n            ],\n            [\n                \"extra-box-refs\",\n                this.extraBoxRefs\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded SimulateUnnamedResourcesAccessed: ${data}`);\n        }\n        return new SimulateUnnamedResourcesAccessed({\n            accounts: data.get(\"accounts\"),\n            appLocals: typeof data.get(\"app-locals\") !== \"undefined\" ? data.get(\"app-locals\").map((v)=>ApplicationLocalReference.fromEncodingData(v)) : undefined,\n            apps: data.get(\"apps\"),\n            assetHoldings: typeof data.get(\"asset-holdings\") !== \"undefined\" ? data.get(\"asset-holdings\").map((v)=>AssetHoldingReference.fromEncodingData(v)) : undefined,\n            assets: data.get(\"assets\"),\n            boxes: typeof data.get(\"boxes\") !== \"undefined\" ? data.get(\"boxes\").map((v)=>BoxReference.fromEncodingData(v)) : undefined,\n            extraBoxRefs: data.get(\"extra-box-refs\")\n        });\n    }\n}\n/**\n * The set of parameters and limits override during simulation. If this set of\n * parameters is present, then evaluation parameters may differ from standard\n * evaluation in certain ways.\n */ class SimulationEvalOverrides {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"allow-empty-signatures\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.BooleanSchema()),\n                omitEmpty: true\n            }, {\n                key: \"allow-unnamed-resources\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.BooleanSchema()),\n                omitEmpty: true\n            }, {\n                key: \"extra-opcode-budget\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema()),\n                omitEmpty: true\n            }, {\n                key: \"fix-signers\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.BooleanSchema()),\n                omitEmpty: true\n            }, {\n                key: \"max-log-calls\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema()),\n                omitEmpty: true\n            }, {\n                key: \"max-log-size\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema()),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `SimulationEvalOverrides` object.\n     * @param allowEmptySignatures - If true, transactions without signatures are allowed and simulated as if they\n     * were properly signed.\n     * @param allowUnnamedResources - If true, allows access to unnamed resources during simulation.\n     * @param extraOpcodeBudget - The extra opcode budget added to each transaction group during simulation\n     * @param fixSigners - If true, signers for transactions that are missing signatures will be fixed\n     * during evaluation.\n     * @param maxLogCalls - The maximum log calls one can make during simulation\n     * @param maxLogSize - The maximum byte number to log during simulation\n     */ constructor({ allowEmptySignatures, allowUnnamedResources, extraOpcodeBudget, fixSigners, maxLogCalls, maxLogSize }){\n        this.allowEmptySignatures = allowEmptySignatures;\n        this.allowUnnamedResources = allowUnnamedResources;\n        this.extraOpcodeBudget = typeof extraOpcodeBudget === \"undefined\" ? undefined : (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureSafeInteger)(extraOpcodeBudget);\n        this.fixSigners = fixSigners;\n        this.maxLogCalls = typeof maxLogCalls === \"undefined\" ? undefined : (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureSafeInteger)(maxLogCalls);\n        this.maxLogSize = typeof maxLogSize === \"undefined\" ? undefined : (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureSafeInteger)(maxLogSize);\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return SimulationEvalOverrides.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"allow-empty-signatures\",\n                this.allowEmptySignatures\n            ],\n            [\n                \"allow-unnamed-resources\",\n                this.allowUnnamedResources\n            ],\n            [\n                \"extra-opcode-budget\",\n                this.extraOpcodeBudget\n            ],\n            [\n                \"fix-signers\",\n                this.fixSigners\n            ],\n            [\n                \"max-log-calls\",\n                this.maxLogCalls\n            ],\n            [\n                \"max-log-size\",\n                this.maxLogSize\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded SimulationEvalOverrides: ${data}`);\n        }\n        return new SimulationEvalOverrides({\n            allowEmptySignatures: data.get(\"allow-empty-signatures\"),\n            allowUnnamedResources: data.get(\"allow-unnamed-resources\"),\n            extraOpcodeBudget: data.get(\"extra-opcode-budget\"),\n            fixSigners: data.get(\"fix-signers\"),\n            maxLogCalls: data.get(\"max-log-calls\"),\n            maxLogSize: data.get(\"max-log-size\")\n        });\n    }\n}\n/**\n * The set of trace information and effect from evaluating a single opcode.\n */ class SimulationOpcodeTraceUnit {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"pc\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            }, {\n                key: \"scratch-changes\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ArraySchema(ScratchChange.encodingSchema)),\n                omitEmpty: true\n            }, {\n                key: \"spawned-inners\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ArraySchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema())),\n                omitEmpty: true\n            }, {\n                key: \"stack-additions\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ArraySchema(AvmValue.encodingSchema)),\n                omitEmpty: true\n            }, {\n                key: \"stack-pop-count\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema()),\n                omitEmpty: true\n            }, {\n                key: \"state-changes\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ArraySchema(ApplicationStateOperation.encodingSchema)),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `SimulationOpcodeTraceUnit` object.\n     * @param pc - The program counter of the current opcode being evaluated.\n     * @param scratchChanges - The writes into scratch slots.\n     * @param spawnedInners - The indexes of the traces for inner transactions spawned by this opcode, if any.\n     * @param stackAdditions - The values added by this opcode to the stack.\n     * @param stackPopCount - The number of deleted stack values by this opcode.\n     * @param stateChanges - The operations against the current application's states.\n     */ constructor({ pc, scratchChanges, spawnedInners, stackAdditions, stackPopCount, stateChanges }){\n        this.pc = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureSafeInteger)(pc);\n        this.scratchChanges = scratchChanges;\n        this.spawnedInners = typeof spawnedInners === \"undefined\" ? undefined : spawnedInners.map(_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureSafeInteger);\n        this.stackAdditions = stackAdditions;\n        this.stackPopCount = typeof stackPopCount === \"undefined\" ? undefined : (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureSafeInteger)(stackPopCount);\n        this.stateChanges = stateChanges;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return SimulationOpcodeTraceUnit.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"pc\",\n                this.pc\n            ],\n            [\n                \"scratch-changes\",\n                typeof this.scratchChanges !== \"undefined\" ? this.scratchChanges.map((v)=>v.toEncodingData()) : undefined\n            ],\n            [\n                \"spawned-inners\",\n                this.spawnedInners\n            ],\n            [\n                \"stack-additions\",\n                typeof this.stackAdditions !== \"undefined\" ? this.stackAdditions.map((v)=>v.toEncodingData()) : undefined\n            ],\n            [\n                \"stack-pop-count\",\n                this.stackPopCount\n            ],\n            [\n                \"state-changes\",\n                typeof this.stateChanges !== \"undefined\" ? this.stateChanges.map((v)=>v.toEncodingData()) : undefined\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded SimulationOpcodeTraceUnit: ${data}`);\n        }\n        return new SimulationOpcodeTraceUnit({\n            pc: data.get(\"pc\"),\n            scratchChanges: typeof data.get(\"scratch-changes\") !== \"undefined\" ? data.get(\"scratch-changes\").map((v)=>ScratchChange.fromEncodingData(v)) : undefined,\n            spawnedInners: data.get(\"spawned-inners\"),\n            stackAdditions: typeof data.get(\"stack-additions\") !== \"undefined\" ? data.get(\"stack-additions\").map((v)=>AvmValue.fromEncodingData(v)) : undefined,\n            stackPopCount: data.get(\"stack-pop-count\"),\n            stateChanges: typeof data.get(\"state-changes\") !== \"undefined\" ? data.get(\"state-changes\").map((v)=>ApplicationStateOperation.fromEncodingData(v)) : undefined\n        });\n    }\n}\n/**\n * The execution trace of calling an app or a logic sig, containing the inner app\n * call trace in a recursive way.\n */ class SimulationTransactionExecTrace {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"approval-program-hash\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ByteArraySchema()),\n                omitEmpty: true\n            }, {\n                key: \"approval-program-trace\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ArraySchema(SimulationOpcodeTraceUnit.encodingSchema)),\n                omitEmpty: true\n            }, {\n                key: \"clear-state-program-hash\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ByteArraySchema()),\n                omitEmpty: true\n            }, {\n                key: \"clear-state-program-trace\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ArraySchema(SimulationOpcodeTraceUnit.encodingSchema)),\n                omitEmpty: true\n            }, {\n                key: \"clear-state-rollback\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.BooleanSchema()),\n                omitEmpty: true\n            }, {\n                key: \"clear-state-rollback-error\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema()),\n                omitEmpty: true\n            }, {\n                key: \"inner-trace\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ArraySchema(SimulationTransactionExecTrace.encodingSchema)),\n                omitEmpty: true\n            }, {\n                key: \"logic-sig-hash\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ByteArraySchema()),\n                omitEmpty: true\n            }, {\n                key: \"logic-sig-trace\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ArraySchema(SimulationOpcodeTraceUnit.encodingSchema)),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `SimulationTransactionExecTrace` object.\n     * @param approvalProgramHash - SHA512_256 hash digest of the approval program executed in transaction.\n     * @param approvalProgramTrace - Program trace that contains a trace of opcode effects in an approval program.\n     * @param clearStateProgramHash - SHA512_256 hash digest of the clear state program executed in transaction.\n     * @param clearStateProgramTrace - Program trace that contains a trace of opcode effects in a clear state program.\n     * @param clearStateRollback - If true, indicates that the clear state program failed and any persistent state\n     * changes it produced should be reverted once the program exits.\n     * @param clearStateRollbackError - The error message explaining why the clear state program failed. This field will\n     * only be populated if clear-state-rollback is true and the failure was due to an\n     * execution error.\n     * @param innerTrace - An array of SimulationTransactionExecTrace representing the execution trace of\n     * any inner transactions executed.\n     * @param logicSigHash - SHA512_256 hash digest of the logic sig executed in transaction.\n     * @param logicSigTrace - Program trace that contains a trace of opcode effects in a logic sig.\n     */ constructor({ approvalProgramHash, approvalProgramTrace, clearStateProgramHash, clearStateProgramTrace, clearStateRollback, clearStateRollbackError, innerTrace, logicSigHash, logicSigTrace }){\n        this.approvalProgramHash = typeof approvalProgramHash === \"string\" ? (0,_encoding_binarydata_js__WEBPACK_IMPORTED_MODULE_2__.base64ToBytes)(approvalProgramHash) : approvalProgramHash;\n        this.approvalProgramTrace = approvalProgramTrace;\n        this.clearStateProgramHash = typeof clearStateProgramHash === \"string\" ? (0,_encoding_binarydata_js__WEBPACK_IMPORTED_MODULE_2__.base64ToBytes)(clearStateProgramHash) : clearStateProgramHash;\n        this.clearStateProgramTrace = clearStateProgramTrace;\n        this.clearStateRollback = clearStateRollback;\n        this.clearStateRollbackError = clearStateRollbackError;\n        this.innerTrace = innerTrace;\n        this.logicSigHash = typeof logicSigHash === \"string\" ? (0,_encoding_binarydata_js__WEBPACK_IMPORTED_MODULE_2__.base64ToBytes)(logicSigHash) : logicSigHash;\n        this.logicSigTrace = logicSigTrace;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return SimulationTransactionExecTrace.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"approval-program-hash\",\n                this.approvalProgramHash\n            ],\n            [\n                \"approval-program-trace\",\n                typeof this.approvalProgramTrace !== \"undefined\" ? this.approvalProgramTrace.map((v)=>v.toEncodingData()) : undefined\n            ],\n            [\n                \"clear-state-program-hash\",\n                this.clearStateProgramHash\n            ],\n            [\n                \"clear-state-program-trace\",\n                typeof this.clearStateProgramTrace !== \"undefined\" ? this.clearStateProgramTrace.map((v)=>v.toEncodingData()) : undefined\n            ],\n            [\n                \"clear-state-rollback\",\n                this.clearStateRollback\n            ],\n            [\n                \"clear-state-rollback-error\",\n                this.clearStateRollbackError\n            ],\n            [\n                \"inner-trace\",\n                typeof this.innerTrace !== \"undefined\" ? this.innerTrace.map((v)=>v.toEncodingData()) : undefined\n            ],\n            [\n                \"logic-sig-hash\",\n                this.logicSigHash\n            ],\n            [\n                \"logic-sig-trace\",\n                typeof this.logicSigTrace !== \"undefined\" ? this.logicSigTrace.map((v)=>v.toEncodingData()) : undefined\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded SimulationTransactionExecTrace: ${data}`);\n        }\n        return new SimulationTransactionExecTrace({\n            approvalProgramHash: data.get(\"approval-program-hash\"),\n            approvalProgramTrace: typeof data.get(\"approval-program-trace\") !== \"undefined\" ? data.get(\"approval-program-trace\").map((v)=>SimulationOpcodeTraceUnit.fromEncodingData(v)) : undefined,\n            clearStateProgramHash: data.get(\"clear-state-program-hash\"),\n            clearStateProgramTrace: typeof data.get(\"clear-state-program-trace\") !== \"undefined\" ? data.get(\"clear-state-program-trace\").map((v)=>SimulationOpcodeTraceUnit.fromEncodingData(v)) : undefined,\n            clearStateRollback: data.get(\"clear-state-rollback\"),\n            clearStateRollbackError: data.get(\"clear-state-rollback-error\"),\n            innerTrace: typeof data.get(\"inner-trace\") !== \"undefined\" ? data.get(\"inner-trace\").map((v)=>SimulationTransactionExecTrace.fromEncodingData(v)) : undefined,\n            logicSigHash: data.get(\"logic-sig-hash\"),\n            logicSigTrace: typeof data.get(\"logic-sig-trace\") !== \"undefined\" ? data.get(\"logic-sig-trace\").map((v)=>SimulationOpcodeTraceUnit.fromEncodingData(v)) : undefined\n        });\n    }\n}\n/**\n * Represents a state proof and its corresponding message\n */ class StateProof {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"Message\",\n                valueSchema: StateProofMessage.encodingSchema,\n                omitEmpty: true\n            }, {\n                key: \"StateProof\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ByteArraySchema(),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `StateProof` object.\n     * @param message - Represents the message that the state proofs are attesting to.\n     * @param stateproof - The encoded StateProof for the message.\n     */ constructor({ message, stateproof }){\n        this.message = message;\n        this.stateproof = typeof stateproof === \"string\" ? (0,_encoding_binarydata_js__WEBPACK_IMPORTED_MODULE_2__.base64ToBytes)(stateproof) : stateproof;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return StateProof.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"Message\",\n                this.message.toEncodingData()\n            ],\n            [\n                \"StateProof\",\n                this.stateproof\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded StateProof: ${data}`);\n        }\n        return new StateProof({\n            message: StateProofMessage.fromEncodingData(data.get(\"Message\") ?? new Map()),\n            stateproof: data.get(\"StateProof\")\n        });\n    }\n}\n/**\n * Represents the message that the state proofs are attesting to.\n */ class StateProofMessage {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"BlockHeadersCommitment\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ByteArraySchema(),\n                omitEmpty: true\n            }, {\n                key: \"FirstAttestedRound\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            }, {\n                key: \"LastAttestedRound\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            }, {\n                key: \"LnProvenWeight\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            }, {\n                key: \"VotersCommitment\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ByteArraySchema(),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `StateProofMessage` object.\n     * @param blockheaderscommitment - The vector commitment root on all light block headers within a state proof\n     * interval.\n     * @param firstattestedround - The first round the message attests to.\n     * @param lastattestedround - The last round the message attests to.\n     * @param lnprovenweight - An integer value representing the natural log of the proven weight with 16 bits\n     * of precision. This value would be used to verify the next state proof.\n     * @param voterscommitment - The vector commitment root of the top N accounts to sign the next StateProof.\n     */ constructor({ blockheaderscommitment, firstattestedround, lastattestedround, lnprovenweight, voterscommitment }){\n        this.blockheaderscommitment = typeof blockheaderscommitment === \"string\" ? (0,_encoding_binarydata_js__WEBPACK_IMPORTED_MODULE_2__.base64ToBytes)(blockheaderscommitment) : blockheaderscommitment;\n        this.firstattestedround = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(firstattestedround);\n        this.lastattestedround = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(lastattestedround);\n        this.lnprovenweight = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(lnprovenweight);\n        this.voterscommitment = typeof voterscommitment === \"string\" ? (0,_encoding_binarydata_js__WEBPACK_IMPORTED_MODULE_2__.base64ToBytes)(voterscommitment) : voterscommitment;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return StateProofMessage.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"BlockHeadersCommitment\",\n                this.blockheaderscommitment\n            ],\n            [\n                \"FirstAttestedRound\",\n                this.firstattestedround\n            ],\n            [\n                \"LastAttestedRound\",\n                this.lastattestedround\n            ],\n            [\n                \"LnProvenWeight\",\n                this.lnprovenweight\n            ],\n            [\n                \"VotersCommitment\",\n                this.voterscommitment\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded StateProofMessage: ${data}`);\n        }\n        return new StateProofMessage({\n            blockheaderscommitment: data.get(\"BlockHeadersCommitment\"),\n            firstattestedround: data.get(\"FirstAttestedRound\"),\n            lastattestedround: data.get(\"LastAttestedRound\"),\n            lnprovenweight: data.get(\"LnProvenWeight\"),\n            voterscommitment: data.get(\"VotersCommitment\")\n        });\n    }\n}\n/**\n * Supply represents the current supply of MicroAlgos in the system.\n */ class SupplyResponse {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"current_round\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            }, {\n                key: \"online-money\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            }, {\n                key: \"total-money\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `SupplyResponse` object.\n     * @param currentRound - Round\n     * @param onlineMoney - OnlineMoney\n     * @param totalMoney - TotalMoney\n     */ constructor({ currentRound, onlineMoney, totalMoney }){\n        this.currentRound = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(currentRound);\n        this.onlineMoney = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(onlineMoney);\n        this.totalMoney = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(totalMoney);\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return SupplyResponse.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"current_round\",\n                this.currentRound\n            ],\n            [\n                \"online-money\",\n                this.onlineMoney\n            ],\n            [\n                \"total-money\",\n                this.totalMoney\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded SupplyResponse: ${data}`);\n        }\n        return new SupplyResponse({\n            currentRound: data.get(\"current_round\"),\n            onlineMoney: data.get(\"online-money\"),\n            totalMoney: data.get(\"total-money\")\n        });\n    }\n}\n/**\n * Represents a key-value pair in an application store.\n */ class TealKeyValue {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"key\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ByteArraySchema(),\n                omitEmpty: true\n            }, {\n                key: \"value\",\n                valueSchema: TealValue.encodingSchema,\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `TealKeyValue` object.\n     * @param key -\n     * @param value - Represents a TEAL value.\n     */ constructor({ key, value }){\n        this.key = typeof key === \"string\" ? (0,_encoding_binarydata_js__WEBPACK_IMPORTED_MODULE_2__.base64ToBytes)(key) : key;\n        this.value = value;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return TealKeyValue.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"key\",\n                this.key\n            ],\n            [\n                \"value\",\n                this.value.toEncodingData()\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded TealKeyValue: ${data}`);\n        }\n        return new TealKeyValue({\n            key: data.get(\"key\"),\n            value: TealValue.fromEncodingData(data.get(\"value\") ?? new Map())\n        });\n    }\n}\n/**\n * Represents a TEAL value.\n */ class TealValue {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"bytes\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ByteArraySchema(),\n                omitEmpty: true\n            }, {\n                key: \"type\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            }, {\n                key: \"uint\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `TealValue` object.\n     * @param bytes - (tb) bytes value.\n     * @param type - (tt) value type. Value `1` refers to **bytes**, value `2` refers to **uint**\n     * @param uint - (ui) uint value.\n     */ constructor({ bytes, type, uint }){\n        this.bytes = typeof bytes === \"string\" ? (0,_encoding_binarydata_js__WEBPACK_IMPORTED_MODULE_2__.base64ToBytes)(bytes) : bytes;\n        this.type = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureSafeInteger)(type);\n        this.uint = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(uint);\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return TealValue.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"bytes\",\n                this.bytes\n            ],\n            [\n                \"type\",\n                this.type\n            ],\n            [\n                \"uint\",\n                this.uint\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded TealValue: ${data}`);\n        }\n        return new TealValue({\n            bytes: data.get(\"bytes\"),\n            type: data.get(\"type\"),\n            uint: data.get(\"uint\")\n        });\n    }\n}\n/**\n * Response containing all ledger state deltas for transaction groups, with their\n * associated Ids, in a single round.\n */ class TransactionGroupLedgerStateDeltasForRoundResponse {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"Deltas\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ArraySchema(LedgerStateDeltaForTransactionGroup.encodingSchema),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `TransactionGroupLedgerStateDeltasForRoundResponse` object.\n     * @param deltas -\n     */ constructor({ deltas }){\n        this.deltas = deltas;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return TransactionGroupLedgerStateDeltasForRoundResponse.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"Deltas\",\n                this.deltas.map((v)=>v.toEncodingData())\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded TransactionGroupLedgerStateDeltasForRoundResponse: ${data}`);\n        }\n        return new TransactionGroupLedgerStateDeltasForRoundResponse({\n            deltas: (data.get(\"Deltas\") ?? []).map((v)=>LedgerStateDeltaForTransactionGroup.fromEncodingData(v))\n        });\n    }\n}\n/**\n * TransactionParams contains the parameters that help a client construct a new\n * transaction.\n */ class TransactionParametersResponse {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"consensus-version\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema(),\n                omitEmpty: true\n            }, {\n                key: \"fee\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            }, {\n                key: \"genesis-hash\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ByteArraySchema(),\n                omitEmpty: true\n            }, {\n                key: \"genesis-id\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema(),\n                omitEmpty: true\n            }, {\n                key: \"last-round\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            }, {\n                key: \"min-fee\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `TransactionParametersResponse` object.\n     * @param consensusVersion - ConsensusVersion indicates the consensus protocol version\n     * as of LastRound.\n     * @param fee - Fee is the suggested transaction fee\n     * Fee is in units of micro-Algos per byte.\n     * Fee may fall to zero but transactions must still have a fee of\n     * at least MinTxnFee for the current network protocol.\n     * @param genesisHash - GenesisHash is the hash of the genesis block.\n     * @param genesisId - GenesisID is an ID listed in the genesis block.\n     * @param lastRound - LastRound indicates the last round seen\n     * @param minFee - The minimum transaction fee (not per byte) required for the\n     * txn to validate for the current network protocol.\n     */ constructor({ consensusVersion, fee, genesisHash, genesisId, lastRound, minFee }){\n        this.consensusVersion = consensusVersion;\n        this.fee = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(fee);\n        this.genesisHash = typeof genesisHash === \"string\" ? (0,_encoding_binarydata_js__WEBPACK_IMPORTED_MODULE_2__.base64ToBytes)(genesisHash) : genesisHash;\n        this.genesisId = genesisId;\n        this.lastRound = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(lastRound);\n        this.minFee = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(minFee);\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return TransactionParametersResponse.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"consensus-version\",\n                this.consensusVersion\n            ],\n            [\n                \"fee\",\n                this.fee\n            ],\n            [\n                \"genesis-hash\",\n                this.genesisHash\n            ],\n            [\n                \"genesis-id\",\n                this.genesisId\n            ],\n            [\n                \"last-round\",\n                this.lastRound\n            ],\n            [\n                \"min-fee\",\n                this.minFee\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded TransactionParametersResponse: ${data}`);\n        }\n        return new TransactionParametersResponse({\n            consensusVersion: data.get(\"consensus-version\"),\n            fee: data.get(\"fee\"),\n            genesisHash: data.get(\"genesis-hash\"),\n            genesisId: data.get(\"genesis-id\"),\n            lastRound: data.get(\"last-round\"),\n            minFee: data.get(\"min-fee\")\n        });\n    }\n}\n/**\n * Proof of transaction in a block.\n */ class TransactionProof {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"idx\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            }, {\n                key: \"proof\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ByteArraySchema(),\n                omitEmpty: true\n            }, {\n                key: \"stibhash\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ByteArraySchema(),\n                omitEmpty: true\n            }, {\n                key: \"treedepth\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            }, {\n                key: \"hashtype\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema()),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `TransactionProof` object.\n     * @param idx - Index of the transaction in the block's payset.\n     * @param proof - Proof of transaction membership.\n     * @param stibhash - Hash of SignedTxnInBlock for verifying proof.\n     * @param treedepth - Represents the depth of the tree that is being proven, i.e. the number of edges\n     * from a leaf to the root.\n     * @param hashtype - The type of hash function used to create the proof, must be one of:\n     * * sha512_256\n     * * sha256\n     */ constructor({ idx, proof, stibhash, treedepth, hashtype }){\n        this.idx = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureSafeInteger)(idx);\n        this.proof = typeof proof === \"string\" ? (0,_encoding_binarydata_js__WEBPACK_IMPORTED_MODULE_2__.base64ToBytes)(proof) : proof;\n        this.stibhash = typeof stibhash === \"string\" ? (0,_encoding_binarydata_js__WEBPACK_IMPORTED_MODULE_2__.base64ToBytes)(stibhash) : stibhash;\n        this.treedepth = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureSafeInteger)(treedepth);\n        this.hashtype = hashtype;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return TransactionProof.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"idx\",\n                this.idx\n            ],\n            [\n                \"proof\",\n                this.proof\n            ],\n            [\n                \"stibhash\",\n                this.stibhash\n            ],\n            [\n                \"treedepth\",\n                this.treedepth\n            ],\n            [\n                \"hashtype\",\n                this.hashtype\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded TransactionProof: ${data}`);\n        }\n        return new TransactionProof({\n            idx: data.get(\"idx\"),\n            proof: data.get(\"proof\"),\n            stibhash: data.get(\"stibhash\"),\n            treedepth: data.get(\"treedepth\"),\n            hashtype: data.get(\"hashtype\")\n        });\n    }\n}\n/**\n * algod version information.\n */ class Version {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"build\",\n                valueSchema: BuildVersion.encodingSchema,\n                omitEmpty: true\n            }, {\n                key: \"genesis_hash_b64\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ByteArraySchema(),\n                omitEmpty: true\n            }, {\n                key: \"genesis_id\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema(),\n                omitEmpty: true\n            }, {\n                key: \"versions\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ArraySchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema()),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `Version` object.\n     * @param build -\n     * @param genesisHashB64 -\n     * @param genesisId -\n     * @param versions -\n     */ constructor({ build, genesisHashB64, genesisId, versions }){\n        this.build = build;\n        this.genesisHashB64 = typeof genesisHashB64 === \"string\" ? (0,_encoding_binarydata_js__WEBPACK_IMPORTED_MODULE_2__.base64ToBytes)(genesisHashB64) : genesisHashB64;\n        this.genesisId = genesisId;\n        this.versions = versions;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return Version.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"build\",\n                this.build.toEncodingData()\n            ],\n            [\n                \"genesis_hash_b64\",\n                this.genesisHashB64\n            ],\n            [\n                \"genesis_id\",\n                this.genesisId\n            ],\n            [\n                \"versions\",\n                this.versions\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded Version: ${data}`);\n        }\n        return new Version({\n            build: BuildVersion.fromEncodingData(data.get(\"build\") ?? new Map()),\n            genesisHashB64: data.get(\"genesis_hash_b64\"),\n            genesisId: data.get(\"genesis_id\"),\n            versions: data.get(\"versions\")\n        });\n    }\n} //# sourceMappingURL=types.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/models/types.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/pendingTransactionInformation.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/client/v2/algod/pendingTransactionInformation.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ PendingTransactionInformation)\n/* harmony export */ });\n/* harmony import */ var _jsonrequest_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../jsonrequest.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/jsonrequest.js\");\n/* harmony import */ var _encoding_encoding_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../encoding/encoding.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/encoding.js\");\n/* harmony import */ var _models_types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./models/types.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/models/types.js\");\n\n\n\n/**\n * returns the transaction information for a specific txid of a pending transaction\n */ class PendingTransactionInformation extends _jsonrequest_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(c, txid){\n        super(c);\n        this.txid = txid;\n        this.query.format = \"msgpack\";\n    }\n    // eslint-disable-next-line class-methods-use-this\n    prepare(response) {\n        return (0,_encoding_encoding_js__WEBPACK_IMPORTED_MODULE_1__.decodeMsgpack)(response.body, _models_types_js__WEBPACK_IMPORTED_MODULE_2__.PendingTransactionResponse);\n    }\n    path() {\n        return `/v2/transactions/pending/${this.txid}`;\n    }\n    // max sets the maximum number of txs to return\n    max(max) {\n        this.query.max = max;\n        return this;\n    }\n} //# sourceMappingURL=pendingTransactionInformation.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9jbGllbnQvdjIvYWxnb2QvcGVuZGluZ1RyYW5zYWN0aW9uSW5mb3JtYXRpb24uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUE0QztBQUNrQjtBQUNDO0FBQy9EOztDQUVDLEdBQ2MsTUFBTUcsc0NBQXNDSCx1REFBV0E7SUFDbEVJLFlBQVlDLENBQUMsRUFBRUMsSUFBSSxDQUFFO1FBQ2pCLEtBQUssQ0FBQ0Q7UUFDTixJQUFJLENBQUNDLElBQUksR0FBR0E7UUFDWixJQUFJLENBQUNDLEtBQUssQ0FBQ0MsTUFBTSxHQUFHO0lBQ3hCO0lBQ0Esa0RBQWtEO0lBQ2xEQyxRQUFRQyxRQUFRLEVBQUU7UUFDZCxPQUFPVCxvRUFBYUEsQ0FBQ1MsU0FBU0MsSUFBSSxFQUFFVCx3RUFBMEJBO0lBQ2xFO0lBQ0FVLE9BQU87UUFDSCxPQUFPLENBQUMseUJBQXlCLEVBQUUsSUFBSSxDQUFDTixJQUFJLENBQUMsQ0FBQztJQUNsRDtJQUNBLCtDQUErQztJQUMvQ08sSUFBSUEsR0FBRyxFQUFFO1FBQ0wsSUFBSSxDQUFDTixLQUFLLENBQUNNLEdBQUcsR0FBR0E7UUFDakIsT0FBTyxJQUFJO0lBQ2Y7QUFDSixFQUNBLHlEQUF5RCIsInNvdXJjZXMiOlsid2VicGFjazovL2FsZ29yYW5kLWNyb3dkZnVuZGluZy1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9hbGdvc2RrL2Rpc3QvZXNtL2NsaWVudC92Mi9hbGdvZC9wZW5kaW5nVHJhbnNhY3Rpb25JbmZvcm1hdGlvbi5qcz9jZTViIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBKU09OUmVxdWVzdCBmcm9tICcuLi9qc29ucmVxdWVzdC5qcyc7XG5pbXBvcnQgeyBkZWNvZGVNc2dwYWNrIH0gZnJvbSAnLi4vLi4vLi4vZW5jb2RpbmcvZW5jb2RpbmcuanMnO1xuaW1wb3J0IHsgUGVuZGluZ1RyYW5zYWN0aW9uUmVzcG9uc2UgfSBmcm9tICcuL21vZGVscy90eXBlcy5qcyc7XG4vKipcbiAqIHJldHVybnMgdGhlIHRyYW5zYWN0aW9uIGluZm9ybWF0aW9uIGZvciBhIHNwZWNpZmljIHR4aWQgb2YgYSBwZW5kaW5nIHRyYW5zYWN0aW9uXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBlbmRpbmdUcmFuc2FjdGlvbkluZm9ybWF0aW9uIGV4dGVuZHMgSlNPTlJlcXVlc3Qge1xuICAgIGNvbnN0cnVjdG9yKGMsIHR4aWQpIHtcbiAgICAgICAgc3VwZXIoYyk7XG4gICAgICAgIHRoaXMudHhpZCA9IHR4aWQ7XG4gICAgICAgIHRoaXMucXVlcnkuZm9ybWF0ID0gJ21zZ3BhY2snO1xuICAgIH1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY2xhc3MtbWV0aG9kcy11c2UtdGhpc1xuICAgIHByZXBhcmUocmVzcG9uc2UpIHtcbiAgICAgICAgcmV0dXJuIGRlY29kZU1zZ3BhY2socmVzcG9uc2UuYm9keSwgUGVuZGluZ1RyYW5zYWN0aW9uUmVzcG9uc2UpO1xuICAgIH1cbiAgICBwYXRoKCkge1xuICAgICAgICByZXR1cm4gYC92Mi90cmFuc2FjdGlvbnMvcGVuZGluZy8ke3RoaXMudHhpZH1gO1xuICAgIH1cbiAgICAvLyBtYXggc2V0cyB0aGUgbWF4aW11bSBudW1iZXIgb2YgdHhzIHRvIHJldHVyblxuICAgIG1heChtYXgpIHtcbiAgICAgICAgdGhpcy5xdWVyeS5tYXggPSBtYXg7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBlbmRpbmdUcmFuc2FjdGlvbkluZm9ybWF0aW9uLmpzLm1hcCJdLCJuYW1lcyI6WyJKU09OUmVxdWVzdCIsImRlY29kZU1zZ3BhY2siLCJQZW5kaW5nVHJhbnNhY3Rpb25SZXNwb25zZSIsIlBlbmRpbmdUcmFuc2FjdGlvbkluZm9ybWF0aW9uIiwiY29uc3RydWN0b3IiLCJjIiwidHhpZCIsInF1ZXJ5IiwiZm9ybWF0IiwicHJlcGFyZSIsInJlc3BvbnNlIiwiYm9keSIsInBhdGgiLCJtYXgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/pendingTransactionInformation.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/pendingTransactions.js":
/*!******************************************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/client/v2/algod/pendingTransactions.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ PendingTransactions)\n/* harmony export */ });\n/* harmony import */ var _jsonrequest_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../jsonrequest.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/jsonrequest.js\");\n/* harmony import */ var _encoding_encoding_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../encoding/encoding.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/encoding.js\");\n/* harmony import */ var _models_types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./models/types.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/models/types.js\");\n\n\n\n/**\n * pendingTransactionsInformation returns transactions that are pending in the pool\n */ class PendingTransactions extends _jsonrequest_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(c){\n        super(c);\n        this.query.format = \"msgpack\";\n    }\n    /* eslint-disable class-methods-use-this */ path() {\n        return \"/v2/transactions/pending\";\n    }\n    prepare(response) {\n        return (0,_encoding_encoding_js__WEBPACK_IMPORTED_MODULE_1__.decodeMsgpack)(response.body, _models_types_js__WEBPACK_IMPORTED_MODULE_2__.PendingTransactionsResponse);\n    }\n    /* eslint-enable class-methods-use-this */ // max sets the maximum number of txs to return\n    max(max) {\n        this.query.max = max;\n        return this;\n    }\n} //# sourceMappingURL=pendingTransactions.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9jbGllbnQvdjIvYWxnb2QvcGVuZGluZ1RyYW5zYWN0aW9ucy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQTRDO0FBQ2tCO0FBQ0U7QUFDaEU7O0NBRUMsR0FDYyxNQUFNRyw0QkFBNEJILHVEQUFXQTtJQUN4REksWUFBWUMsQ0FBQyxDQUFFO1FBQ1gsS0FBSyxDQUFDQTtRQUNOLElBQUksQ0FBQ0MsS0FBSyxDQUFDQyxNQUFNLEdBQUc7SUFDeEI7SUFDQSx5Q0FBeUMsR0FDekNDLE9BQU87UUFDSCxPQUFPO0lBQ1g7SUFDQUMsUUFBUUMsUUFBUSxFQUFFO1FBQ2QsT0FBT1Qsb0VBQWFBLENBQUNTLFNBQVNDLElBQUksRUFBRVQseUVBQTJCQTtJQUNuRTtJQUNBLHdDQUF3QyxHQUN4QywrQ0FBK0M7SUFDL0NVLElBQUlBLEdBQUcsRUFBRTtRQUNMLElBQUksQ0FBQ04sS0FBSyxDQUFDTSxHQUFHLEdBQUdBO1FBQ2pCLE9BQU8sSUFBSTtJQUNmO0FBQ0osRUFDQSwrQ0FBK0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hbGdvcmFuZC1jcm93ZGZ1bmRpbmctZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9jbGllbnQvdjIvYWxnb2QvcGVuZGluZ1RyYW5zYWN0aW9ucy5qcz8xNTU2Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBKU09OUmVxdWVzdCBmcm9tICcuLi9qc29ucmVxdWVzdC5qcyc7XG5pbXBvcnQgeyBkZWNvZGVNc2dwYWNrIH0gZnJvbSAnLi4vLi4vLi4vZW5jb2RpbmcvZW5jb2RpbmcuanMnO1xuaW1wb3J0IHsgUGVuZGluZ1RyYW5zYWN0aW9uc1Jlc3BvbnNlIH0gZnJvbSAnLi9tb2RlbHMvdHlwZXMuanMnO1xuLyoqXG4gKiBwZW5kaW5nVHJhbnNhY3Rpb25zSW5mb3JtYXRpb24gcmV0dXJucyB0cmFuc2FjdGlvbnMgdGhhdCBhcmUgcGVuZGluZyBpbiB0aGUgcG9vbFxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQZW5kaW5nVHJhbnNhY3Rpb25zIGV4dGVuZHMgSlNPTlJlcXVlc3Qge1xuICAgIGNvbnN0cnVjdG9yKGMpIHtcbiAgICAgICAgc3VwZXIoYyk7XG4gICAgICAgIHRoaXMucXVlcnkuZm9ybWF0ID0gJ21zZ3BhY2snO1xuICAgIH1cbiAgICAvKiBlc2xpbnQtZGlzYWJsZSBjbGFzcy1tZXRob2RzLXVzZS10aGlzICovXG4gICAgcGF0aCgpIHtcbiAgICAgICAgcmV0dXJuICcvdjIvdHJhbnNhY3Rpb25zL3BlbmRpbmcnO1xuICAgIH1cbiAgICBwcmVwYXJlKHJlc3BvbnNlKSB7XG4gICAgICAgIHJldHVybiBkZWNvZGVNc2dwYWNrKHJlc3BvbnNlLmJvZHksIFBlbmRpbmdUcmFuc2FjdGlvbnNSZXNwb25zZSk7XG4gICAgfVxuICAgIC8qIGVzbGludC1lbmFibGUgY2xhc3MtbWV0aG9kcy11c2UtdGhpcyAqL1xuICAgIC8vIG1heCBzZXRzIHRoZSBtYXhpbXVtIG51bWJlciBvZiB0eHMgdG8gcmV0dXJuXG4gICAgbWF4KG1heCkge1xuICAgICAgICB0aGlzLnF1ZXJ5Lm1heCA9IG1heDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGVuZGluZ1RyYW5zYWN0aW9ucy5qcy5tYXAiXSwibmFtZXMiOlsiSlNPTlJlcXVlc3QiLCJkZWNvZGVNc2dwYWNrIiwiUGVuZGluZ1RyYW5zYWN0aW9uc1Jlc3BvbnNlIiwiUGVuZGluZ1RyYW5zYWN0aW9ucyIsImNvbnN0cnVjdG9yIiwiYyIsInF1ZXJ5IiwiZm9ybWF0IiwicGF0aCIsInByZXBhcmUiLCJyZXNwb25zZSIsImJvZHkiLCJtYXgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/pendingTransactions.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/pendingTransactionsByAddress.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/client/v2/algod/pendingTransactionsByAddress.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ PendingTransactionsByAddress)\n/* harmony export */ });\n/* harmony import */ var _jsonrequest_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../jsonrequest.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/jsonrequest.js\");\n/* harmony import */ var _encoding_encoding_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../encoding/encoding.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/encoding.js\");\n/* harmony import */ var _models_types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./models/types.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/models/types.js\");\n\n\n\n/**\n * returns all transactions for a PK [addr] in the [first, last] rounds range.\n */ class PendingTransactionsByAddress extends _jsonrequest_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(c, address){\n        super(c);\n        this.address = address.toString();\n        this.query.format = \"msgpack\";\n    }\n    // eslint-disable-next-line class-methods-use-this\n    prepare(response) {\n        return (0,_encoding_encoding_js__WEBPACK_IMPORTED_MODULE_1__.decodeMsgpack)(response.body, _models_types_js__WEBPACK_IMPORTED_MODULE_2__.PendingTransactionsResponse);\n    }\n    path() {\n        return `/v2/accounts/${this.address}/transactions/pending`;\n    }\n    // max sets the maximum number of txs to return\n    max(max) {\n        this.query.max = max;\n        return this;\n    }\n} //# sourceMappingURL=pendingTransactionsByAddress.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9jbGllbnQvdjIvYWxnb2QvcGVuZGluZ1RyYW5zYWN0aW9uc0J5QWRkcmVzcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQTRDO0FBQ2tCO0FBQ0U7QUFDaEU7O0NBRUMsR0FDYyxNQUFNRyxxQ0FBcUNILHVEQUFXQTtJQUNqRUksWUFBWUMsQ0FBQyxFQUFFQyxPQUFPLENBQUU7UUFDcEIsS0FBSyxDQUFDRDtRQUNOLElBQUksQ0FBQ0MsT0FBTyxHQUFHQSxRQUFRQyxRQUFRO1FBQy9CLElBQUksQ0FBQ0MsS0FBSyxDQUFDQyxNQUFNLEdBQUc7SUFDeEI7SUFDQSxrREFBa0Q7SUFDbERDLFFBQVFDLFFBQVEsRUFBRTtRQUNkLE9BQU9WLG9FQUFhQSxDQUFDVSxTQUFTQyxJQUFJLEVBQUVWLHlFQUEyQkE7SUFDbkU7SUFDQVcsT0FBTztRQUNILE9BQU8sQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDUCxPQUFPLENBQUMscUJBQXFCLENBQUM7SUFDOUQ7SUFDQSwrQ0FBK0M7SUFDL0NRLElBQUlBLEdBQUcsRUFBRTtRQUNMLElBQUksQ0FBQ04sS0FBSyxDQUFDTSxHQUFHLEdBQUdBO1FBQ2pCLE9BQU8sSUFBSTtJQUNmO0FBQ0osRUFDQSx3REFBd0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hbGdvcmFuZC1jcm93ZGZ1bmRpbmctZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9jbGllbnQvdjIvYWxnb2QvcGVuZGluZ1RyYW5zYWN0aW9uc0J5QWRkcmVzcy5qcz82MTQyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBKU09OUmVxdWVzdCBmcm9tICcuLi9qc29ucmVxdWVzdC5qcyc7XG5pbXBvcnQgeyBkZWNvZGVNc2dwYWNrIH0gZnJvbSAnLi4vLi4vLi4vZW5jb2RpbmcvZW5jb2RpbmcuanMnO1xuaW1wb3J0IHsgUGVuZGluZ1RyYW5zYWN0aW9uc1Jlc3BvbnNlIH0gZnJvbSAnLi9tb2RlbHMvdHlwZXMuanMnO1xuLyoqXG4gKiByZXR1cm5zIGFsbCB0cmFuc2FjdGlvbnMgZm9yIGEgUEsgW2FkZHJdIGluIHRoZSBbZmlyc3QsIGxhc3RdIHJvdW5kcyByYW5nZS5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGVuZGluZ1RyYW5zYWN0aW9uc0J5QWRkcmVzcyBleHRlbmRzIEpTT05SZXF1ZXN0IHtcbiAgICBjb25zdHJ1Y3RvcihjLCBhZGRyZXNzKSB7XG4gICAgICAgIHN1cGVyKGMpO1xuICAgICAgICB0aGlzLmFkZHJlc3MgPSBhZGRyZXNzLnRvU3RyaW5nKCk7XG4gICAgICAgIHRoaXMucXVlcnkuZm9ybWF0ID0gJ21zZ3BhY2snO1xuICAgIH1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY2xhc3MtbWV0aG9kcy11c2UtdGhpc1xuICAgIHByZXBhcmUocmVzcG9uc2UpIHtcbiAgICAgICAgcmV0dXJuIGRlY29kZU1zZ3BhY2socmVzcG9uc2UuYm9keSwgUGVuZGluZ1RyYW5zYWN0aW9uc1Jlc3BvbnNlKTtcbiAgICB9XG4gICAgcGF0aCgpIHtcbiAgICAgICAgcmV0dXJuIGAvdjIvYWNjb3VudHMvJHt0aGlzLmFkZHJlc3N9L3RyYW5zYWN0aW9ucy9wZW5kaW5nYDtcbiAgICB9XG4gICAgLy8gbWF4IHNldHMgdGhlIG1heGltdW0gbnVtYmVyIG9mIHR4cyB0byByZXR1cm5cbiAgICBtYXgobWF4KSB7XG4gICAgICAgIHRoaXMucXVlcnkubWF4ID0gbWF4O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wZW5kaW5nVHJhbnNhY3Rpb25zQnlBZGRyZXNzLmpzLm1hcCJdLCJuYW1lcyI6WyJKU09OUmVxdWVzdCIsImRlY29kZU1zZ3BhY2siLCJQZW5kaW5nVHJhbnNhY3Rpb25zUmVzcG9uc2UiLCJQZW5kaW5nVHJhbnNhY3Rpb25zQnlBZGRyZXNzIiwiY29uc3RydWN0b3IiLCJjIiwiYWRkcmVzcyIsInRvU3RyaW5nIiwicXVlcnkiLCJmb3JtYXQiLCJwcmVwYXJlIiwicmVzcG9uc2UiLCJib2R5IiwicGF0aCIsIm1heCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/pendingTransactionsByAddress.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/ready.js":
/*!****************************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/client/v2/algod/ready.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Ready)\n/* harmony export */ });\n/* harmony import */ var _jsonrequest_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../jsonrequest.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/jsonrequest.js\");\n\nclass Ready extends _jsonrequest_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    // eslint-disable-next-line class-methods-use-this\n    path() {\n        return `/ready`;\n    }\n    // eslint-disable-next-line class-methods-use-this, @typescript-eslint/no-unused-vars\n    prepare(_response) {}\n} //# sourceMappingURL=ready.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9jbGllbnQvdjIvYWxnb2QvcmVhZHkuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBNEM7QUFDN0IsTUFBTUMsY0FBY0QsdURBQVdBO0lBQzFDLGtEQUFrRDtJQUNsREUsT0FBTztRQUNILE9BQU8sQ0FBQyxNQUFNLENBQUM7SUFDbkI7SUFDQSxxRkFBcUY7SUFDckZDLFFBQVFDLFNBQVMsRUFBRSxDQUFFO0FBQ3pCLEVBQ0EsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWxnb3JhbmQtY3Jvd2RmdW5kaW5nLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vY2xpZW50L3YyL2FsZ29kL3JlYWR5LmpzP2U1MmUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEpTT05SZXF1ZXN0IGZyb20gJy4uL2pzb25yZXF1ZXN0LmpzJztcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJlYWR5IGV4dGVuZHMgSlNPTlJlcXVlc3Qge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjbGFzcy1tZXRob2RzLXVzZS10aGlzXG4gICAgcGF0aCgpIHtcbiAgICAgICAgcmV0dXJuIGAvcmVhZHlgO1xuICAgIH1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY2xhc3MtbWV0aG9kcy11c2UtdGhpcywgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXG4gICAgcHJlcGFyZShfcmVzcG9uc2UpIHsgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVhZHkuanMubWFwIl0sIm5hbWVzIjpbIkpTT05SZXF1ZXN0IiwiUmVhZHkiLCJwYXRoIiwicHJlcGFyZSIsIl9yZXNwb25zZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/ready.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/sendRawTransaction.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/client/v2/algod/sendRawTransaction.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ SendRawTransaction),\n/* harmony export */   setSendTransactionHeaders: () => (/* binding */ setSendTransactionHeaders)\n/* harmony export */ });\n/* harmony import */ var _utils_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../utils/utils.js */ \"(ssr)/./node_modules/algosdk/dist/esm/utils/utils.js\");\n/* harmony import */ var _models_types_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./models/types.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/models/types.js\");\n/* harmony import */ var _encoding_encoding_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../encoding/encoding.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/encoding.js\");\n/* harmony import */ var _jsonrequest_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../jsonrequest.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/jsonrequest.js\");\n\n\n\n\n/**\n * Sets the default header (if not previously set) for sending a raw\n * transaction.\n * @param headers - A headers object\n */ function setSendTransactionHeaders(headers = {}) {\n    let hdrs = headers;\n    if (Object.keys(hdrs).every((key)=>key.toLowerCase() !== \"content-type\")) {\n        hdrs = {\n            ...headers\n        };\n        hdrs[\"Content-Type\"] = \"application/x-binary\";\n    }\n    return hdrs;\n}\nfunction isByteArray(array) {\n    return array && array.byteLength !== undefined;\n}\n/**\n * broadcasts the passed signed txns to the network\n */ class SendRawTransaction extends _jsonrequest_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"] {\n    constructor(c, stxOrStxs){\n        super(c);\n        let forPosting = stxOrStxs;\n        if (Array.isArray(stxOrStxs)) {\n            if (!stxOrStxs.every(isByteArray)) {\n                throw new TypeError(\"Array elements must be byte arrays\");\n            }\n            // Flatten into a single Uint8Array\n            forPosting = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.concatArrays)(...stxOrStxs);\n        } else if (!isByteArray(forPosting)) {\n            throw new TypeError(\"Argument must be byte array\");\n        }\n        this.txnBytesToPost = forPosting;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    path() {\n        return \"/v2/transactions\";\n    }\n    executeRequest(headers, customOptions) {\n        const txHeaders = setSendTransactionHeaders(headers);\n        return this.c.post({\n            relativePath: this.path(),\n            data: this.txnBytesToPost,\n            requestHeaders: txHeaders,\n            customOptions\n        });\n    }\n    // eslint-disable-next-line class-methods-use-this\n    prepare(response) {\n        return (0,_encoding_encoding_js__WEBPACK_IMPORTED_MODULE_2__.decodeJSON)(response.getJSONText(), _models_types_js__WEBPACK_IMPORTED_MODULE_1__.PostTransactionsResponse);\n    }\n} //# sourceMappingURL=sendRawTransaction.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9jbGllbnQvdjIvYWxnb2Qvc2VuZFJhd1RyYW5zYWN0aW9uLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUF1RDtBQUNNO0FBQ0Y7QUFDZjtBQUM1Qzs7OztDQUlDLEdBQ00sU0FBU0ksMEJBQTBCQyxVQUFVLENBQUMsQ0FBQztJQUNsRCxJQUFJQyxPQUFPRDtJQUNYLElBQUlFLE9BQU9DLElBQUksQ0FBQ0YsTUFBTUcsS0FBSyxDQUFDLENBQUNDLE1BQVFBLElBQUlDLFdBQVcsT0FBTyxpQkFBaUI7UUFDeEVMLE9BQU87WUFBRSxHQUFHRCxPQUFPO1FBQUM7UUFDcEJDLElBQUksQ0FBQyxlQUFlLEdBQUc7SUFDM0I7SUFDQSxPQUFPQTtBQUNYO0FBQ0EsU0FBU00sWUFBWUMsS0FBSztJQUN0QixPQUFPQSxTQUFTQSxNQUFNQyxVQUFVLEtBQUtDO0FBQ3pDO0FBQ0E7O0NBRUMsR0FDYyxNQUFNQywyQkFBMkJiLHVEQUFXQTtJQUN2RGMsWUFBWUMsQ0FBQyxFQUFFQyxTQUFTLENBQUU7UUFDdEIsS0FBSyxDQUFDRDtRQUNOLElBQUlFLGFBQWFEO1FBQ2pCLElBQUlFLE1BQU1DLE9BQU8sQ0FBQ0gsWUFBWTtZQUMxQixJQUFJLENBQUNBLFVBQVVWLEtBQUssQ0FBQ0csY0FBYztnQkFDL0IsTUFBTSxJQUFJVyxVQUFVO1lBQ3hCO1lBQ0EsbUNBQW1DO1lBQ25DSCxhQUFhcEIsNkRBQVlBLElBQUltQjtRQUNqQyxPQUNLLElBQUksQ0FBQ1AsWUFBWVEsYUFBYTtZQUMvQixNQUFNLElBQUlHLFVBQVU7UUFDeEI7UUFDQSxJQUFJLENBQUNDLGNBQWMsR0FBR0o7SUFDMUI7SUFDQSxrREFBa0Q7SUFDbERLLE9BQU87UUFDSCxPQUFPO0lBQ1g7SUFDQUMsZUFBZXJCLE9BQU8sRUFBRXNCLGFBQWEsRUFBRTtRQUNuQyxNQUFNQyxZQUFZeEIsMEJBQTBCQztRQUM1QyxPQUFPLElBQUksQ0FBQ2EsQ0FBQyxDQUFDVyxJQUFJLENBQUM7WUFDZkMsY0FBYyxJQUFJLENBQUNMLElBQUk7WUFDdkJNLE1BQU0sSUFBSSxDQUFDUCxjQUFjO1lBQ3pCUSxnQkFBZ0JKO1lBQ2hCRDtRQUNKO0lBQ0o7SUFDQSxrREFBa0Q7SUFDbERNLFFBQVFDLFFBQVEsRUFBRTtRQUNkLE9BQU9oQyxpRUFBVUEsQ0FBQ2dDLFNBQVNDLFdBQVcsSUFBSWxDLHNFQUF3QkE7SUFDdEU7QUFDSixFQUNBLDhDQUE4QyIsInNvdXJjZXMiOlsid2VicGFjazovL2FsZ29yYW5kLWNyb3dkZnVuZGluZy1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9hbGdvc2RrL2Rpc3QvZXNtL2NsaWVudC92Mi9hbGdvZC9zZW5kUmF3VHJhbnNhY3Rpb24uanM/OTA3ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjb25jYXRBcnJheXMgfSBmcm9tICcuLi8uLi8uLi91dGlscy91dGlscy5qcyc7XG5pbXBvcnQgeyBQb3N0VHJhbnNhY3Rpb25zUmVzcG9uc2UgfSBmcm9tICcuL21vZGVscy90eXBlcy5qcyc7XG5pbXBvcnQgeyBkZWNvZGVKU09OIH0gZnJvbSAnLi4vLi4vLi4vZW5jb2RpbmcvZW5jb2RpbmcuanMnO1xuaW1wb3J0IEpTT05SZXF1ZXN0IGZyb20gJy4uL2pzb25yZXF1ZXN0LmpzJztcbi8qKlxuICogU2V0cyB0aGUgZGVmYXVsdCBoZWFkZXIgKGlmIG5vdCBwcmV2aW91c2x5IHNldCkgZm9yIHNlbmRpbmcgYSByYXdcbiAqIHRyYW5zYWN0aW9uLlxuICogQHBhcmFtIGhlYWRlcnMgLSBBIGhlYWRlcnMgb2JqZWN0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXRTZW5kVHJhbnNhY3Rpb25IZWFkZXJzKGhlYWRlcnMgPSB7fSkge1xuICAgIGxldCBoZHJzID0gaGVhZGVycztcbiAgICBpZiAoT2JqZWN0LmtleXMoaGRycykuZXZlcnkoKGtleSkgPT4ga2V5LnRvTG93ZXJDYXNlKCkgIT09ICdjb250ZW50LXR5cGUnKSkge1xuICAgICAgICBoZHJzID0geyAuLi5oZWFkZXJzIH07XG4gICAgICAgIGhkcnNbJ0NvbnRlbnQtVHlwZSddID0gJ2FwcGxpY2F0aW9uL3gtYmluYXJ5JztcbiAgICB9XG4gICAgcmV0dXJuIGhkcnM7XG59XG5mdW5jdGlvbiBpc0J5dGVBcnJheShhcnJheSkge1xuICAgIHJldHVybiBhcnJheSAmJiBhcnJheS5ieXRlTGVuZ3RoICE9PSB1bmRlZmluZWQ7XG59XG4vKipcbiAqIGJyb2FkY2FzdHMgdGhlIHBhc3NlZCBzaWduZWQgdHhucyB0byB0aGUgbmV0d29ya1xuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTZW5kUmF3VHJhbnNhY3Rpb24gZXh0ZW5kcyBKU09OUmVxdWVzdCB7XG4gICAgY29uc3RydWN0b3IoYywgc3R4T3JTdHhzKSB7XG4gICAgICAgIHN1cGVyKGMpO1xuICAgICAgICBsZXQgZm9yUG9zdGluZyA9IHN0eE9yU3R4cztcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoc3R4T3JTdHhzKSkge1xuICAgICAgICAgICAgaWYgKCFzdHhPclN0eHMuZXZlcnkoaXNCeXRlQXJyYXkpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJyYXkgZWxlbWVudHMgbXVzdCBiZSBieXRlIGFycmF5cycpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gRmxhdHRlbiBpbnRvIGEgc2luZ2xlIFVpbnQ4QXJyYXlcbiAgICAgICAgICAgIGZvclBvc3RpbmcgPSBjb25jYXRBcnJheXMoLi4uc3R4T3JTdHhzKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghaXNCeXRlQXJyYXkoZm9yUG9zdGluZykpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYnl0ZSBhcnJheScpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudHhuQnl0ZXNUb1Bvc3QgPSBmb3JQb3N0aW5nO1xuICAgIH1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY2xhc3MtbWV0aG9kcy11c2UtdGhpc1xuICAgIHBhdGgoKSB7XG4gICAgICAgIHJldHVybiAnL3YyL3RyYW5zYWN0aW9ucyc7XG4gICAgfVxuICAgIGV4ZWN1dGVSZXF1ZXN0KGhlYWRlcnMsIGN1c3RvbU9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgdHhIZWFkZXJzID0gc2V0U2VuZFRyYW5zYWN0aW9uSGVhZGVycyhoZWFkZXJzKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuYy5wb3N0KHtcbiAgICAgICAgICAgIHJlbGF0aXZlUGF0aDogdGhpcy5wYXRoKCksXG4gICAgICAgICAgICBkYXRhOiB0aGlzLnR4bkJ5dGVzVG9Qb3N0LFxuICAgICAgICAgICAgcmVxdWVzdEhlYWRlcnM6IHR4SGVhZGVycyxcbiAgICAgICAgICAgIGN1c3RvbU9wdGlvbnMsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY2xhc3MtbWV0aG9kcy11c2UtdGhpc1xuICAgIHByZXBhcmUocmVzcG9uc2UpIHtcbiAgICAgICAgcmV0dXJuIGRlY29kZUpTT04ocmVzcG9uc2UuZ2V0SlNPTlRleHQoKSwgUG9zdFRyYW5zYWN0aW9uc1Jlc3BvbnNlKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zZW5kUmF3VHJhbnNhY3Rpb24uanMubWFwIl0sIm5hbWVzIjpbImNvbmNhdEFycmF5cyIsIlBvc3RUcmFuc2FjdGlvbnNSZXNwb25zZSIsImRlY29kZUpTT04iLCJKU09OUmVxdWVzdCIsInNldFNlbmRUcmFuc2FjdGlvbkhlYWRlcnMiLCJoZWFkZXJzIiwiaGRycyIsIk9iamVjdCIsImtleXMiLCJldmVyeSIsImtleSIsInRvTG93ZXJDYXNlIiwiaXNCeXRlQXJyYXkiLCJhcnJheSIsImJ5dGVMZW5ndGgiLCJ1bmRlZmluZWQiLCJTZW5kUmF3VHJhbnNhY3Rpb24iLCJjb25zdHJ1Y3RvciIsImMiLCJzdHhPclN0eHMiLCJmb3JQb3N0aW5nIiwiQXJyYXkiLCJpc0FycmF5IiwiVHlwZUVycm9yIiwidHhuQnl0ZXNUb1Bvc3QiLCJwYXRoIiwiZXhlY3V0ZVJlcXVlc3QiLCJjdXN0b21PcHRpb25zIiwidHhIZWFkZXJzIiwicG9zdCIsInJlbGF0aXZlUGF0aCIsImRhdGEiLCJyZXF1ZXN0SGVhZGVycyIsInByZXBhcmUiLCJyZXNwb25zZSIsImdldEpTT05UZXh0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/sendRawTransaction.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/setBlockOffsetTimestamp.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/client/v2/algod/setBlockOffsetTimestamp.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ SetBlockOffsetTimestamp)\n/* harmony export */ });\n/* harmony import */ var _jsonrequest_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../jsonrequest.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/jsonrequest.js\");\n\nclass SetBlockOffsetTimestamp extends _jsonrequest_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(c, offset){\n        super(c);\n        this.offset = BigInt(offset);\n    }\n    path() {\n        return `/v2/devmode/blocks/offset/${this.offset}`;\n    }\n    executeRequest(headers, customOptions) {\n        return this.c.post({\n            relativePath: this.path(),\n            data: null,\n            requestHeaders: headers,\n            customOptions\n        });\n    }\n    // eslint-disable-next-line class-methods-use-this, @typescript-eslint/no-unused-vars\n    prepare(_response) {}\n} //# sourceMappingURL=setBlockOffsetTimestamp.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9jbGllbnQvdjIvYWxnb2Qvc2V0QmxvY2tPZmZzZXRUaW1lc3RhbXAuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBNEM7QUFDN0IsTUFBTUMsZ0NBQWdDRCx1REFBV0E7SUFDNURFLFlBQVlDLENBQUMsRUFBRUMsTUFBTSxDQUFFO1FBQ25CLEtBQUssQ0FBQ0Q7UUFDTixJQUFJLENBQUNDLE1BQU0sR0FBR0MsT0FBT0Q7SUFDekI7SUFDQUUsT0FBTztRQUNILE9BQU8sQ0FBQywwQkFBMEIsRUFBRSxJQUFJLENBQUNGLE1BQU0sQ0FBQyxDQUFDO0lBQ3JEO0lBQ0FHLGVBQWVDLE9BQU8sRUFBRUMsYUFBYSxFQUFFO1FBQ25DLE9BQU8sSUFBSSxDQUFDTixDQUFDLENBQUNPLElBQUksQ0FBQztZQUNmQyxjQUFjLElBQUksQ0FBQ0wsSUFBSTtZQUN2Qk0sTUFBTTtZQUNOQyxnQkFBZ0JMO1lBQ2hCQztRQUNKO0lBQ0o7SUFDQSxxRkFBcUY7SUFDckZLLFFBQVFDLFNBQVMsRUFBRSxDQUFFO0FBQ3pCLEVBQ0EsbURBQW1EIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWxnb3JhbmQtY3Jvd2RmdW5kaW5nLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vY2xpZW50L3YyL2FsZ29kL3NldEJsb2NrT2Zmc2V0VGltZXN0YW1wLmpzP2NmODUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEpTT05SZXF1ZXN0IGZyb20gJy4uL2pzb25yZXF1ZXN0LmpzJztcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNldEJsb2NrT2Zmc2V0VGltZXN0YW1wIGV4dGVuZHMgSlNPTlJlcXVlc3Qge1xuICAgIGNvbnN0cnVjdG9yKGMsIG9mZnNldCkge1xuICAgICAgICBzdXBlcihjKTtcbiAgICAgICAgdGhpcy5vZmZzZXQgPSBCaWdJbnQob2Zmc2V0KTtcbiAgICB9XG4gICAgcGF0aCgpIHtcbiAgICAgICAgcmV0dXJuIGAvdjIvZGV2bW9kZS9ibG9ja3Mvb2Zmc2V0LyR7dGhpcy5vZmZzZXR9YDtcbiAgICB9XG4gICAgZXhlY3V0ZVJlcXVlc3QoaGVhZGVycywgY3VzdG9tT3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5jLnBvc3Qoe1xuICAgICAgICAgICAgcmVsYXRpdmVQYXRoOiB0aGlzLnBhdGgoKSxcbiAgICAgICAgICAgIGRhdGE6IG51bGwsXG4gICAgICAgICAgICByZXF1ZXN0SGVhZGVyczogaGVhZGVycyxcbiAgICAgICAgICAgIGN1c3RvbU9wdGlvbnMsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY2xhc3MtbWV0aG9kcy11c2UtdGhpcywgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXG4gICAgcHJlcGFyZShfcmVzcG9uc2UpIHsgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2V0QmxvY2tPZmZzZXRUaW1lc3RhbXAuanMubWFwIl0sIm5hbWVzIjpbIkpTT05SZXF1ZXN0IiwiU2V0QmxvY2tPZmZzZXRUaW1lc3RhbXAiLCJjb25zdHJ1Y3RvciIsImMiLCJvZmZzZXQiLCJCaWdJbnQiLCJwYXRoIiwiZXhlY3V0ZVJlcXVlc3QiLCJoZWFkZXJzIiwiY3VzdG9tT3B0aW9ucyIsInBvc3QiLCJyZWxhdGl2ZVBhdGgiLCJkYXRhIiwicmVxdWVzdEhlYWRlcnMiLCJwcmVwYXJlIiwiX3Jlc3BvbnNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/setBlockOffsetTimestamp.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/setSyncRound.js":
/*!***********************************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/client/v2/algod/setSyncRound.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ SetSyncRound)\n/* harmony export */ });\n/* harmony import */ var _jsonrequest_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../jsonrequest.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/jsonrequest.js\");\n\nclass SetSyncRound extends _jsonrequest_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(c, round){\n        super(c);\n        this.round = BigInt(round);\n    }\n    path() {\n        return `/v2/ledger/sync/${this.round}`;\n    }\n    executeRequest(headers, customOptions) {\n        return this.c.post({\n            relativePath: this.path(),\n            data: null,\n            requestHeaders: headers,\n            customOptions\n        });\n    }\n    // eslint-disable-next-line class-methods-use-this, @typescript-eslint/no-unused-vars\n    prepare(_response) {}\n} //# sourceMappingURL=setSyncRound.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9jbGllbnQvdjIvYWxnb2Qvc2V0U3luY1JvdW5kLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQTRDO0FBQzdCLE1BQU1DLHFCQUFxQkQsdURBQVdBO0lBQ2pERSxZQUFZQyxDQUFDLEVBQUVDLEtBQUssQ0FBRTtRQUNsQixLQUFLLENBQUNEO1FBQ04sSUFBSSxDQUFDQyxLQUFLLEdBQUdDLE9BQU9EO0lBQ3hCO0lBQ0FFLE9BQU87UUFDSCxPQUFPLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDRixLQUFLLENBQUMsQ0FBQztJQUMxQztJQUNBRyxlQUFlQyxPQUFPLEVBQUVDLGFBQWEsRUFBRTtRQUNuQyxPQUFPLElBQUksQ0FBQ04sQ0FBQyxDQUFDTyxJQUFJLENBQUM7WUFDZkMsY0FBYyxJQUFJLENBQUNMLElBQUk7WUFDdkJNLE1BQU07WUFDTkMsZ0JBQWdCTDtZQUNoQkM7UUFDSjtJQUNKO0lBQ0EscUZBQXFGO0lBQ3JGSyxRQUFRQyxTQUFTLEVBQUUsQ0FBRTtBQUN6QixFQUNBLHdDQUF3QyIsInNvdXJjZXMiOlsid2VicGFjazovL2FsZ29yYW5kLWNyb3dkZnVuZGluZy1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9hbGdvc2RrL2Rpc3QvZXNtL2NsaWVudC92Mi9hbGdvZC9zZXRTeW5jUm91bmQuanM/ZDUyMCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgSlNPTlJlcXVlc3QgZnJvbSAnLi4vanNvbnJlcXVlc3QuanMnO1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2V0U3luY1JvdW5kIGV4dGVuZHMgSlNPTlJlcXVlc3Qge1xuICAgIGNvbnN0cnVjdG9yKGMsIHJvdW5kKSB7XG4gICAgICAgIHN1cGVyKGMpO1xuICAgICAgICB0aGlzLnJvdW5kID0gQmlnSW50KHJvdW5kKTtcbiAgICB9XG4gICAgcGF0aCgpIHtcbiAgICAgICAgcmV0dXJuIGAvdjIvbGVkZ2VyL3N5bmMvJHt0aGlzLnJvdW5kfWA7XG4gICAgfVxuICAgIGV4ZWN1dGVSZXF1ZXN0KGhlYWRlcnMsIGN1c3RvbU9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYy5wb3N0KHtcbiAgICAgICAgICAgIHJlbGF0aXZlUGF0aDogdGhpcy5wYXRoKCksXG4gICAgICAgICAgICBkYXRhOiBudWxsLFxuICAgICAgICAgICAgcmVxdWVzdEhlYWRlcnM6IGhlYWRlcnMsXG4gICAgICAgICAgICBjdXN0b21PcHRpb25zLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNsYXNzLW1ldGhvZHMtdXNlLXRoaXMsIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyc1xuICAgIHByZXBhcmUoX3Jlc3BvbnNlKSB7IH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNldFN5bmNSb3VuZC5qcy5tYXAiXSwibmFtZXMiOlsiSlNPTlJlcXVlc3QiLCJTZXRTeW5jUm91bmQiLCJjb25zdHJ1Y3RvciIsImMiLCJyb3VuZCIsIkJpZ0ludCIsInBhdGgiLCJleGVjdXRlUmVxdWVzdCIsImhlYWRlcnMiLCJjdXN0b21PcHRpb25zIiwicG9zdCIsInJlbGF0aXZlUGF0aCIsImRhdGEiLCJyZXF1ZXN0SGVhZGVycyIsInByZXBhcmUiLCJfcmVzcG9uc2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/setSyncRound.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/simulateTransaction.js":
/*!******************************************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/client/v2/algod/simulateTransaction.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ SimulateRawTransactions),\n/* harmony export */   setSimulateTransactionsHeaders: () => (/* binding */ setSimulateTransactionsHeaders)\n/* harmony export */ });\n/* harmony import */ var _encoding_encoding_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../encoding/encoding.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/encoding.js\");\n/* harmony import */ var _jsonrequest_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../jsonrequest.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/jsonrequest.js\");\n/* harmony import */ var _models_types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./models/types.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/models/types.js\");\n\n\n\n/**\n * Sets the default header (if not previously set) for simulating a raw\n * transaction.\n * @param headers - A headers object\n */ function setSimulateTransactionsHeaders(headers = {}) {\n    let hdrs = headers;\n    if (Object.keys(hdrs).every((key)=>key.toLowerCase() !== \"content-type\")) {\n        hdrs = {\n            ...headers\n        };\n        hdrs[\"Content-Type\"] = \"application/msgpack\";\n    }\n    return hdrs;\n}\n/**\n * Simulates signed txns.\n */ class SimulateRawTransactions extends _jsonrequest_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"] {\n    constructor(c, request){\n        super(c);\n        this.query.format = \"msgpack\";\n        this.requestBytes = (0,_encoding_encoding_js__WEBPACK_IMPORTED_MODULE_0__.encodeMsgpack)(request);\n    }\n    // eslint-disable-next-line class-methods-use-this\n    path() {\n        return \"/v2/transactions/simulate\";\n    }\n    executeRequest(headers, customOptions) {\n        const txHeaders = setSimulateTransactionsHeaders(headers);\n        return this.c.post({\n            relativePath: this.path(),\n            data: this.requestBytes,\n            query: this.query,\n            requestHeaders: txHeaders,\n            customOptions\n        });\n    }\n    // eslint-disable-next-line class-methods-use-this\n    prepare(response) {\n        return (0,_encoding_encoding_js__WEBPACK_IMPORTED_MODULE_0__.decodeMsgpack)(response.body, _models_types_js__WEBPACK_IMPORTED_MODULE_2__.SimulateResponse);\n    }\n} //# sourceMappingURL=simulateTransaction.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9jbGllbnQvdjIvYWxnb2Qvc2ltdWxhdGVUcmFuc2FjdGlvbi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUE2RTtBQUNqQztBQUNTO0FBQ3JEOzs7O0NBSUMsR0FDTSxTQUFTSSwrQkFBK0JDLFVBQVUsQ0FBQyxDQUFDO0lBQ3ZELElBQUlDLE9BQU9EO0lBQ1gsSUFBSUUsT0FBT0MsSUFBSSxDQUFDRixNQUFNRyxLQUFLLENBQUMsQ0FBQ0MsTUFBUUEsSUFBSUMsV0FBVyxPQUFPLGlCQUFpQjtRQUN4RUwsT0FBTztZQUFFLEdBQUdELE9BQU87UUFBQztRQUNwQkMsSUFBSSxDQUFDLGVBQWUsR0FBRztJQUMzQjtJQUNBLE9BQU9BO0FBQ1g7QUFDQTs7Q0FFQyxHQUNjLE1BQU1NLGdDQUFnQ1YsdURBQVdBO0lBQzVEVyxZQUFZQyxDQUFDLEVBQUVDLE9BQU8sQ0FBRTtRQUNwQixLQUFLLENBQUNEO1FBQ04sSUFBSSxDQUFDRSxLQUFLLENBQUNDLE1BQU0sR0FBRztRQUNwQixJQUFJLENBQUNDLFlBQVksR0FBR2xCLG9FQUFhQSxDQUFDZTtJQUN0QztJQUNBLGtEQUFrRDtJQUNsREksT0FBTztRQUNILE9BQU87SUFDWDtJQUNBQyxlQUFlZixPQUFPLEVBQUVnQixhQUFhLEVBQUU7UUFDbkMsTUFBTUMsWUFBWWxCLCtCQUErQkM7UUFDakQsT0FBTyxJQUFJLENBQUNTLENBQUMsQ0FBQ1MsSUFBSSxDQUFDO1lBQ2ZDLGNBQWMsSUFBSSxDQUFDTCxJQUFJO1lBQ3ZCTSxNQUFNLElBQUksQ0FBQ1AsWUFBWTtZQUN2QkYsT0FBTyxJQUFJLENBQUNBLEtBQUs7WUFDakJVLGdCQUFnQko7WUFDaEJEO1FBQ0o7SUFDSjtJQUNBLGtEQUFrRDtJQUNsRE0sUUFBUUMsUUFBUSxFQUFFO1FBQ2QsT0FBTzNCLG9FQUFhQSxDQUFDMkIsU0FBU0MsSUFBSSxFQUFFMUIsOERBQWdCQTtJQUN4RDtBQUNKLEVBQ0EsK0NBQStDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWxnb3JhbmQtY3Jvd2RmdW5kaW5nLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vY2xpZW50L3YyL2FsZ29kL3NpbXVsYXRlVHJhbnNhY3Rpb24uanM/ZTFlOCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBlbmNvZGVNc2dwYWNrLCBkZWNvZGVNc2dwYWNrIH0gZnJvbSAnLi4vLi4vLi4vZW5jb2RpbmcvZW5jb2RpbmcuanMnO1xuaW1wb3J0IEpTT05SZXF1ZXN0IGZyb20gJy4uL2pzb25yZXF1ZXN0LmpzJztcbmltcG9ydCB7IFNpbXVsYXRlUmVzcG9uc2UgfSBmcm9tICcuL21vZGVscy90eXBlcy5qcyc7XG4vKipcbiAqIFNldHMgdGhlIGRlZmF1bHQgaGVhZGVyIChpZiBub3QgcHJldmlvdXNseSBzZXQpIGZvciBzaW11bGF0aW5nIGEgcmF3XG4gKiB0cmFuc2FjdGlvbi5cbiAqIEBwYXJhbSBoZWFkZXJzIC0gQSBoZWFkZXJzIG9iamVjdFxuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0U2ltdWxhdGVUcmFuc2FjdGlvbnNIZWFkZXJzKGhlYWRlcnMgPSB7fSkge1xuICAgIGxldCBoZHJzID0gaGVhZGVycztcbiAgICBpZiAoT2JqZWN0LmtleXMoaGRycykuZXZlcnkoKGtleSkgPT4ga2V5LnRvTG93ZXJDYXNlKCkgIT09ICdjb250ZW50LXR5cGUnKSkge1xuICAgICAgICBoZHJzID0geyAuLi5oZWFkZXJzIH07XG4gICAgICAgIGhkcnNbJ0NvbnRlbnQtVHlwZSddID0gJ2FwcGxpY2F0aW9uL21zZ3BhY2snO1xuICAgIH1cbiAgICByZXR1cm4gaGRycztcbn1cbi8qKlxuICogU2ltdWxhdGVzIHNpZ25lZCB0eG5zLlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTaW11bGF0ZVJhd1RyYW5zYWN0aW9ucyBleHRlbmRzIEpTT05SZXF1ZXN0IHtcbiAgICBjb25zdHJ1Y3RvcihjLCByZXF1ZXN0KSB7XG4gICAgICAgIHN1cGVyKGMpO1xuICAgICAgICB0aGlzLnF1ZXJ5LmZvcm1hdCA9ICdtc2dwYWNrJztcbiAgICAgICAgdGhpcy5yZXF1ZXN0Qnl0ZXMgPSBlbmNvZGVNc2dwYWNrKHJlcXVlc3QpO1xuICAgIH1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY2xhc3MtbWV0aG9kcy11c2UtdGhpc1xuICAgIHBhdGgoKSB7XG4gICAgICAgIHJldHVybiAnL3YyL3RyYW5zYWN0aW9ucy9zaW11bGF0ZSc7XG4gICAgfVxuICAgIGV4ZWN1dGVSZXF1ZXN0KGhlYWRlcnMsIGN1c3RvbU9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgdHhIZWFkZXJzID0gc2V0U2ltdWxhdGVUcmFuc2FjdGlvbnNIZWFkZXJzKGhlYWRlcnMpO1xuICAgICAgICByZXR1cm4gdGhpcy5jLnBvc3Qoe1xuICAgICAgICAgICAgcmVsYXRpdmVQYXRoOiB0aGlzLnBhdGgoKSxcbiAgICAgICAgICAgIGRhdGE6IHRoaXMucmVxdWVzdEJ5dGVzLFxuICAgICAgICAgICAgcXVlcnk6IHRoaXMucXVlcnksXG4gICAgICAgICAgICByZXF1ZXN0SGVhZGVyczogdHhIZWFkZXJzLFxuICAgICAgICAgICAgY3VzdG9tT3B0aW9ucyxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjbGFzcy1tZXRob2RzLXVzZS10aGlzXG4gICAgcHJlcGFyZShyZXNwb25zZSkge1xuICAgICAgICByZXR1cm4gZGVjb2RlTXNncGFjayhyZXNwb25zZS5ib2R5LCBTaW11bGF0ZVJlc3BvbnNlKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zaW11bGF0ZVRyYW5zYWN0aW9uLmpzLm1hcCJdLCJuYW1lcyI6WyJlbmNvZGVNc2dwYWNrIiwiZGVjb2RlTXNncGFjayIsIkpTT05SZXF1ZXN0IiwiU2ltdWxhdGVSZXNwb25zZSIsInNldFNpbXVsYXRlVHJhbnNhY3Rpb25zSGVhZGVycyIsImhlYWRlcnMiLCJoZHJzIiwiT2JqZWN0Iiwia2V5cyIsImV2ZXJ5Iiwia2V5IiwidG9Mb3dlckNhc2UiLCJTaW11bGF0ZVJhd1RyYW5zYWN0aW9ucyIsImNvbnN0cnVjdG9yIiwiYyIsInJlcXVlc3QiLCJxdWVyeSIsImZvcm1hdCIsInJlcXVlc3RCeXRlcyIsInBhdGgiLCJleGVjdXRlUmVxdWVzdCIsImN1c3RvbU9wdGlvbnMiLCJ0eEhlYWRlcnMiLCJwb3N0IiwicmVsYXRpdmVQYXRoIiwiZGF0YSIsInJlcXVlc3RIZWFkZXJzIiwicHJlcGFyZSIsInJlc3BvbnNlIiwiYm9keSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/simulateTransaction.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/stateproof.js":
/*!*********************************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/client/v2/algod/stateproof.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ StateProof)\n/* harmony export */ });\n/* harmony import */ var _jsonrequest_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../jsonrequest.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/jsonrequest.js\");\n/* harmony import */ var _encoding_encoding_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../encoding/encoding.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/encoding.js\");\n/* harmony import */ var _models_types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./models/types.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/models/types.js\");\n\n\n\nclass StateProof extends _jsonrequest_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(c, round){\n        super(c);\n        this.round = BigInt(round);\n    }\n    path() {\n        return `/v2/stateproofs/${this.round}`;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    prepare(response) {\n        return (0,_encoding_encoding_js__WEBPACK_IMPORTED_MODULE_1__.decodeJSON)(response.getJSONText(), _models_types_js__WEBPACK_IMPORTED_MODULE_2__.StateProof);\n    }\n} //# sourceMappingURL=stateproof.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9jbGllbnQvdjIvYWxnb2Qvc3RhdGVwcm9vZi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQTRDO0FBQ2U7QUFDTjtBQUN0QyxNQUFNRSxtQkFBbUJGLHVEQUFXQTtJQUMvQ0ksWUFBWUMsQ0FBQyxFQUFFQyxLQUFLLENBQUU7UUFDbEIsS0FBSyxDQUFDRDtRQUNOLElBQUksQ0FBQ0MsS0FBSyxHQUFHQyxPQUFPRDtJQUN4QjtJQUNBRSxPQUFPO1FBQ0gsT0FBTyxDQUFDLGdCQUFnQixFQUFFLElBQUksQ0FBQ0YsS0FBSyxDQUFDLENBQUM7SUFDMUM7SUFDQSxrREFBa0Q7SUFDbERHLFFBQVFDLFFBQVEsRUFBRTtRQUNkLE9BQU9ULGlFQUFVQSxDQUFDUyxTQUFTQyxXQUFXLElBQUlSLHdEQUFFQTtJQUNoRDtBQUNKLEVBQ0Esc0NBQXNDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWxnb3JhbmQtY3Jvd2RmdW5kaW5nLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vY2xpZW50L3YyL2FsZ29kL3N0YXRlcHJvb2YuanM/NDM2MyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgSlNPTlJlcXVlc3QgZnJvbSAnLi4vanNvbnJlcXVlc3QuanMnO1xuaW1wb3J0IHsgZGVjb2RlSlNPTiB9IGZyb20gJy4uLy4uLy4uL2VuY29kaW5nL2VuY29kaW5nLmpzJztcbmltcG9ydCB7IFN0YXRlUHJvb2YgYXMgU1AgfSBmcm9tICcuL21vZGVscy90eXBlcy5qcyc7XG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTdGF0ZVByb29mIGV4dGVuZHMgSlNPTlJlcXVlc3Qge1xuICAgIGNvbnN0cnVjdG9yKGMsIHJvdW5kKSB7XG4gICAgICAgIHN1cGVyKGMpO1xuICAgICAgICB0aGlzLnJvdW5kID0gQmlnSW50KHJvdW5kKTtcbiAgICB9XG4gICAgcGF0aCgpIHtcbiAgICAgICAgcmV0dXJuIGAvdjIvc3RhdGVwcm9vZnMvJHt0aGlzLnJvdW5kfWA7XG4gICAgfVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjbGFzcy1tZXRob2RzLXVzZS10aGlzXG4gICAgcHJlcGFyZShyZXNwb25zZSkge1xuICAgICAgICByZXR1cm4gZGVjb2RlSlNPTihyZXNwb25zZS5nZXRKU09OVGV4dCgpLCBTUCk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3RhdGVwcm9vZi5qcy5tYXAiXSwibmFtZXMiOlsiSlNPTlJlcXVlc3QiLCJkZWNvZGVKU09OIiwiU3RhdGVQcm9vZiIsIlNQIiwiY29uc3RydWN0b3IiLCJjIiwicm91bmQiLCJCaWdJbnQiLCJwYXRoIiwicHJlcGFyZSIsInJlc3BvbnNlIiwiZ2V0SlNPTlRleHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/stateproof.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/status.js":
/*!*****************************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/client/v2/algod/status.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Status)\n/* harmony export */ });\n/* harmony import */ var _jsonrequest_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../jsonrequest.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/jsonrequest.js\");\n/* harmony import */ var _encoding_encoding_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../encoding/encoding.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/encoding.js\");\n/* harmony import */ var _models_types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./models/types.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/models/types.js\");\n\n\n\nclass Status extends _jsonrequest_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    // eslint-disable-next-line class-methods-use-this\n    path() {\n        return \"/v2/status\";\n    }\n    // eslint-disable-next-line class-methods-use-this\n    prepare(response) {\n        return (0,_encoding_encoding_js__WEBPACK_IMPORTED_MODULE_1__.decodeJSON)(response.getJSONText(), _models_types_js__WEBPACK_IMPORTED_MODULE_2__.NodeStatusResponse);\n    }\n} //# sourceMappingURL=status.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9jbGllbnQvdjIvYWxnb2Qvc3RhdHVzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBNEM7QUFDZTtBQUNKO0FBQ3hDLE1BQU1HLGVBQWVILHVEQUFXQTtJQUMzQyxrREFBa0Q7SUFDbERJLE9BQU87UUFDSCxPQUFPO0lBQ1g7SUFDQSxrREFBa0Q7SUFDbERDLFFBQVFDLFFBQVEsRUFBRTtRQUNkLE9BQU9MLGlFQUFVQSxDQUFDSyxTQUFTQyxXQUFXLElBQUlMLGdFQUFrQkE7SUFDaEU7QUFDSixFQUNBLGtDQUFrQyIsInNvdXJjZXMiOlsid2VicGFjazovL2FsZ29yYW5kLWNyb3dkZnVuZGluZy1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9hbGdvc2RrL2Rpc3QvZXNtL2NsaWVudC92Mi9hbGdvZC9zdGF0dXMuanM/Y2Q2NiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgSlNPTlJlcXVlc3QgZnJvbSAnLi4vanNvbnJlcXVlc3QuanMnO1xuaW1wb3J0IHsgZGVjb2RlSlNPTiB9IGZyb20gJy4uLy4uLy4uL2VuY29kaW5nL2VuY29kaW5nLmpzJztcbmltcG9ydCB7IE5vZGVTdGF0dXNSZXNwb25zZSB9IGZyb20gJy4vbW9kZWxzL3R5cGVzLmpzJztcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFN0YXR1cyBleHRlbmRzIEpTT05SZXF1ZXN0IHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY2xhc3MtbWV0aG9kcy11c2UtdGhpc1xuICAgIHBhdGgoKSB7XG4gICAgICAgIHJldHVybiAnL3YyL3N0YXR1cyc7XG4gICAgfVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjbGFzcy1tZXRob2RzLXVzZS10aGlzXG4gICAgcHJlcGFyZShyZXNwb25zZSkge1xuICAgICAgICByZXR1cm4gZGVjb2RlSlNPTihyZXNwb25zZS5nZXRKU09OVGV4dCgpLCBOb2RlU3RhdHVzUmVzcG9uc2UpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0YXR1cy5qcy5tYXAiXSwibmFtZXMiOlsiSlNPTlJlcXVlc3QiLCJkZWNvZGVKU09OIiwiTm9kZVN0YXR1c1Jlc3BvbnNlIiwiU3RhdHVzIiwicGF0aCIsInByZXBhcmUiLCJyZXNwb25zZSIsImdldEpTT05UZXh0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/status.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/statusAfterBlock.js":
/*!***************************************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/client/v2/algod/statusAfterBlock.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ StatusAfterBlock)\n/* harmony export */ });\n/* harmony import */ var _jsonrequest_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../jsonrequest.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/jsonrequest.js\");\n/* harmony import */ var _encoding_encoding_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../encoding/encoding.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/encoding.js\");\n/* harmony import */ var _models_types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./models/types.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/models/types.js\");\n\n\n\nclass StatusAfterBlock extends _jsonrequest_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(c, round){\n        super(c);\n        this.round = BigInt(round);\n    }\n    path() {\n        return `/v2/status/wait-for-block-after/${this.round}`;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    prepare(response) {\n        return (0,_encoding_encoding_js__WEBPACK_IMPORTED_MODULE_1__.decodeJSON)(response.getJSONText(), _models_types_js__WEBPACK_IMPORTED_MODULE_2__.NodeStatusResponse);\n    }\n} //# sourceMappingURL=statusAfterBlock.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9jbGllbnQvdjIvYWxnb2Qvc3RhdHVzQWZ0ZXJCbG9jay5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQTRDO0FBQ2U7QUFDSjtBQUN4QyxNQUFNRyx5QkFBeUJILHVEQUFXQTtJQUNyREksWUFBWUMsQ0FBQyxFQUFFQyxLQUFLLENBQUU7UUFDbEIsS0FBSyxDQUFDRDtRQUNOLElBQUksQ0FBQ0MsS0FBSyxHQUFHQyxPQUFPRDtJQUN4QjtJQUNBRSxPQUFPO1FBQ0gsT0FBTyxDQUFDLGdDQUFnQyxFQUFFLElBQUksQ0FBQ0YsS0FBSyxDQUFDLENBQUM7SUFDMUQ7SUFDQSxrREFBa0Q7SUFDbERHLFFBQVFDLFFBQVEsRUFBRTtRQUNkLE9BQU9ULGlFQUFVQSxDQUFDUyxTQUFTQyxXQUFXLElBQUlULGdFQUFrQkE7SUFDaEU7QUFDSixFQUNBLDRDQUE0QyIsInNvdXJjZXMiOlsid2VicGFjazovL2FsZ29yYW5kLWNyb3dkZnVuZGluZy1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9hbGdvc2RrL2Rpc3QvZXNtL2NsaWVudC92Mi9hbGdvZC9zdGF0dXNBZnRlckJsb2NrLmpzP2VmZWUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEpTT05SZXF1ZXN0IGZyb20gJy4uL2pzb25yZXF1ZXN0LmpzJztcbmltcG9ydCB7IGRlY29kZUpTT04gfSBmcm9tICcuLi8uLi8uLi9lbmNvZGluZy9lbmNvZGluZy5qcyc7XG5pbXBvcnQgeyBOb2RlU3RhdHVzUmVzcG9uc2UgfSBmcm9tICcuL21vZGVscy90eXBlcy5qcyc7XG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTdGF0dXNBZnRlckJsb2NrIGV4dGVuZHMgSlNPTlJlcXVlc3Qge1xuICAgIGNvbnN0cnVjdG9yKGMsIHJvdW5kKSB7XG4gICAgICAgIHN1cGVyKGMpO1xuICAgICAgICB0aGlzLnJvdW5kID0gQmlnSW50KHJvdW5kKTtcbiAgICB9XG4gICAgcGF0aCgpIHtcbiAgICAgICAgcmV0dXJuIGAvdjIvc3RhdHVzL3dhaXQtZm9yLWJsb2NrLWFmdGVyLyR7dGhpcy5yb3VuZH1gO1xuICAgIH1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY2xhc3MtbWV0aG9kcy11c2UtdGhpc1xuICAgIHByZXBhcmUocmVzcG9uc2UpIHtcbiAgICAgICAgcmV0dXJuIGRlY29kZUpTT04ocmVzcG9uc2UuZ2V0SlNPTlRleHQoKSwgTm9kZVN0YXR1c1Jlc3BvbnNlKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdGF0dXNBZnRlckJsb2NrLmpzLm1hcCJdLCJuYW1lcyI6WyJKU09OUmVxdWVzdCIsImRlY29kZUpTT04iLCJOb2RlU3RhdHVzUmVzcG9uc2UiLCJTdGF0dXNBZnRlckJsb2NrIiwiY29uc3RydWN0b3IiLCJjIiwicm91bmQiLCJCaWdJbnQiLCJwYXRoIiwicHJlcGFyZSIsInJlc3BvbnNlIiwiZ2V0SlNPTlRleHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/statusAfterBlock.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/suggestedParams.js":
/*!**************************************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/client/v2/algod/suggestedParams.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ SuggestedParamsRequest)\n/* harmony export */ });\n/* harmony import */ var _jsonrequest_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../jsonrequest.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/jsonrequest.js\");\n/* harmony import */ var _encoding_encoding_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../encoding/encoding.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/encoding.js\");\n/* harmony import */ var _models_types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./models/types.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/models/types.js\");\n\n\n\n/**\n * Returns the common needed parameters for a new transaction, in a format the transaction builder expects\n */ class SuggestedParamsRequest extends _jsonrequest_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /* eslint-disable class-methods-use-this */ path() {\n        return \"/v2/transactions/params\";\n    }\n    prepare(response) {\n        const params = (0,_encoding_encoding_js__WEBPACK_IMPORTED_MODULE_1__.decodeJSON)(response.getJSONText(), _models_types_js__WEBPACK_IMPORTED_MODULE_2__.TransactionParametersResponse);\n        return {\n            flatFee: false,\n            fee: params.fee,\n            firstValid: params.lastRound,\n            lastValid: params.lastRound + BigInt(1000),\n            genesisID: params.genesisId,\n            genesisHash: params.genesisHash,\n            minFee: params.minFee,\n            consensusVersion: params.consensusVersion\n        };\n    }\n} //# sourceMappingURL=suggestedParams.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9jbGllbnQvdjIvYWxnb2Qvc3VnZ2VzdGVkUGFyYW1zLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBNEM7QUFDZTtBQUNPO0FBQ2xFOztDQUVDLEdBQ2MsTUFBTUcsK0JBQStCSCx1REFBV0E7SUFDM0QseUNBQXlDLEdBQ3pDSSxPQUFPO1FBQ0gsT0FBTztJQUNYO0lBQ0FDLFFBQVFDLFFBQVEsRUFBRTtRQUNkLE1BQU1DLFNBQVNOLGlFQUFVQSxDQUFDSyxTQUFTRSxXQUFXLElBQUlOLDJFQUE2QkE7UUFDL0UsT0FBTztZQUNITyxTQUFTO1lBQ1RDLEtBQUtILE9BQU9HLEdBQUc7WUFDZkMsWUFBWUosT0FBT0ssU0FBUztZQUM1QkMsV0FBV04sT0FBT0ssU0FBUyxHQUFHRSxPQUFPO1lBQ3JDQyxXQUFXUixPQUFPUyxTQUFTO1lBQzNCQyxhQUFhVixPQUFPVSxXQUFXO1lBQy9CQyxRQUFRWCxPQUFPVyxNQUFNO1lBQ3JCQyxrQkFBa0JaLE9BQU9ZLGdCQUFnQjtRQUM3QztJQUNKO0FBQ0osRUFDQSwyQ0FBMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hbGdvcmFuZC1jcm93ZGZ1bmRpbmctZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9jbGllbnQvdjIvYWxnb2Qvc3VnZ2VzdGVkUGFyYW1zLmpzPzQyMGMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEpTT05SZXF1ZXN0IGZyb20gJy4uL2pzb25yZXF1ZXN0LmpzJztcbmltcG9ydCB7IGRlY29kZUpTT04gfSBmcm9tICcuLi8uLi8uLi9lbmNvZGluZy9lbmNvZGluZy5qcyc7XG5pbXBvcnQgeyBUcmFuc2FjdGlvblBhcmFtZXRlcnNSZXNwb25zZSB9IGZyb20gJy4vbW9kZWxzL3R5cGVzLmpzJztcbi8qKlxuICogUmV0dXJucyB0aGUgY29tbW9uIG5lZWRlZCBwYXJhbWV0ZXJzIGZvciBhIG5ldyB0cmFuc2FjdGlvbiwgaW4gYSBmb3JtYXQgdGhlIHRyYW5zYWN0aW9uIGJ1aWxkZXIgZXhwZWN0c1xuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTdWdnZXN0ZWRQYXJhbXNSZXF1ZXN0IGV4dGVuZHMgSlNPTlJlcXVlc3Qge1xuICAgIC8qIGVzbGludC1kaXNhYmxlIGNsYXNzLW1ldGhvZHMtdXNlLXRoaXMgKi9cbiAgICBwYXRoKCkge1xuICAgICAgICByZXR1cm4gJy92Mi90cmFuc2FjdGlvbnMvcGFyYW1zJztcbiAgICB9XG4gICAgcHJlcGFyZShyZXNwb25zZSkge1xuICAgICAgICBjb25zdCBwYXJhbXMgPSBkZWNvZGVKU09OKHJlc3BvbnNlLmdldEpTT05UZXh0KCksIFRyYW5zYWN0aW9uUGFyYW1ldGVyc1Jlc3BvbnNlKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGZsYXRGZWU6IGZhbHNlLFxuICAgICAgICAgICAgZmVlOiBwYXJhbXMuZmVlLFxuICAgICAgICAgICAgZmlyc3RWYWxpZDogcGFyYW1zLmxhc3RSb3VuZCxcbiAgICAgICAgICAgIGxhc3RWYWxpZDogcGFyYW1zLmxhc3RSb3VuZCArIEJpZ0ludCgxMDAwKSxcbiAgICAgICAgICAgIGdlbmVzaXNJRDogcGFyYW1zLmdlbmVzaXNJZCxcbiAgICAgICAgICAgIGdlbmVzaXNIYXNoOiBwYXJhbXMuZ2VuZXNpc0hhc2gsXG4gICAgICAgICAgICBtaW5GZWU6IHBhcmFtcy5taW5GZWUsXG4gICAgICAgICAgICBjb25zZW5zdXNWZXJzaW9uOiBwYXJhbXMuY29uc2Vuc3VzVmVyc2lvbixcbiAgICAgICAgfTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdWdnZXN0ZWRQYXJhbXMuanMubWFwIl0sIm5hbWVzIjpbIkpTT05SZXF1ZXN0IiwiZGVjb2RlSlNPTiIsIlRyYW5zYWN0aW9uUGFyYW1ldGVyc1Jlc3BvbnNlIiwiU3VnZ2VzdGVkUGFyYW1zUmVxdWVzdCIsInBhdGgiLCJwcmVwYXJlIiwicmVzcG9uc2UiLCJwYXJhbXMiLCJnZXRKU09OVGV4dCIsImZsYXRGZWUiLCJmZWUiLCJmaXJzdFZhbGlkIiwibGFzdFJvdW5kIiwibGFzdFZhbGlkIiwiQmlnSW50IiwiZ2VuZXNpc0lEIiwiZ2VuZXNpc0lkIiwiZ2VuZXNpc0hhc2giLCJtaW5GZWUiLCJjb25zZW5zdXNWZXJzaW9uIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/suggestedParams.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/supply.js":
/*!*****************************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/client/v2/algod/supply.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Supply)\n/* harmony export */ });\n/* harmony import */ var _jsonrequest_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../jsonrequest.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/jsonrequest.js\");\n/* harmony import */ var _encoding_encoding_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../encoding/encoding.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/encoding.js\");\n/* harmony import */ var _models_types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./models/types.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/models/types.js\");\n\n\n\nclass Supply extends _jsonrequest_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    // eslint-disable-next-line class-methods-use-this\n    path() {\n        return \"/v2/ledger/supply\";\n    }\n    // eslint-disable-next-line class-methods-use-this\n    prepare(response) {\n        return (0,_encoding_encoding_js__WEBPACK_IMPORTED_MODULE_1__.decodeJSON)(response.getJSONText(), _models_types_js__WEBPACK_IMPORTED_MODULE_2__.SupplyResponse);\n    }\n} //# sourceMappingURL=supply.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9jbGllbnQvdjIvYWxnb2Qvc3VwcGx5LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBNEM7QUFDZTtBQUNSO0FBQ3BDLE1BQU1HLGVBQWVILHVEQUFXQTtJQUMzQyxrREFBa0Q7SUFDbERJLE9BQU87UUFDSCxPQUFPO0lBQ1g7SUFDQSxrREFBa0Q7SUFDbERDLFFBQVFDLFFBQVEsRUFBRTtRQUNkLE9BQU9MLGlFQUFVQSxDQUFDSyxTQUFTQyxXQUFXLElBQUlMLDREQUFjQTtJQUM1RDtBQUNKLEVBQ0Esa0NBQWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWxnb3JhbmQtY3Jvd2RmdW5kaW5nLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vY2xpZW50L3YyL2FsZ29kL3N1cHBseS5qcz80ZmY5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBKU09OUmVxdWVzdCBmcm9tICcuLi9qc29ucmVxdWVzdC5qcyc7XG5pbXBvcnQgeyBkZWNvZGVKU09OIH0gZnJvbSAnLi4vLi4vLi4vZW5jb2RpbmcvZW5jb2RpbmcuanMnO1xuaW1wb3J0IHsgU3VwcGx5UmVzcG9uc2UgfSBmcm9tICcuL21vZGVscy90eXBlcy5qcyc7XG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTdXBwbHkgZXh0ZW5kcyBKU09OUmVxdWVzdCB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNsYXNzLW1ldGhvZHMtdXNlLXRoaXNcbiAgICBwYXRoKCkge1xuICAgICAgICByZXR1cm4gJy92Mi9sZWRnZXIvc3VwcGx5JztcbiAgICB9XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNsYXNzLW1ldGhvZHMtdXNlLXRoaXNcbiAgICBwcmVwYXJlKHJlc3BvbnNlKSB7XG4gICAgICAgIHJldHVybiBkZWNvZGVKU09OKHJlc3BvbnNlLmdldEpTT05UZXh0KCksIFN1cHBseVJlc3BvbnNlKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdXBwbHkuanMubWFwIl0sIm5hbWVzIjpbIkpTT05SZXF1ZXN0IiwiZGVjb2RlSlNPTiIsIlN1cHBseVJlc3BvbnNlIiwiU3VwcGx5IiwicGF0aCIsInByZXBhcmUiLCJyZXNwb25zZSIsImdldEpTT05UZXh0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/supply.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/unsetSyncRound.js":
/*!*************************************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/client/v2/algod/unsetSyncRound.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ UnsetSyncRound)\n/* harmony export */ });\n/* harmony import */ var _jsonrequest_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../jsonrequest.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/jsonrequest.js\");\n\nclass UnsetSyncRound extends _jsonrequest_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    // eslint-disable-next-line class-methods-use-this\n    path() {\n        return `/v2/ledger/sync`;\n    }\n    executeRequest(headers, customOptions) {\n        return this.c.delete({\n            relativePath: this.path(),\n            data: undefined,\n            requestHeaders: headers,\n            customOptions\n        });\n    }\n    // eslint-disable-next-line class-methods-use-this, @typescript-eslint/no-unused-vars\n    prepare(_response) {}\n} //# sourceMappingURL=unsetSyncRound.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9jbGllbnQvdjIvYWxnb2QvdW5zZXRTeW5jUm91bmQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBNEM7QUFDN0IsTUFBTUMsdUJBQXVCRCx1REFBV0E7SUFDbkQsa0RBQWtEO0lBQ2xERSxPQUFPO1FBQ0gsT0FBTyxDQUFDLGVBQWUsQ0FBQztJQUM1QjtJQUNBQyxlQUFlQyxPQUFPLEVBQUVDLGFBQWEsRUFBRTtRQUNuQyxPQUFPLElBQUksQ0FBQ0MsQ0FBQyxDQUFDQyxNQUFNLENBQUM7WUFDakJDLGNBQWMsSUFBSSxDQUFDTixJQUFJO1lBQ3ZCTyxNQUFNQztZQUNOQyxnQkFBZ0JQO1lBQ2hCQztRQUNKO0lBQ0o7SUFDQSxxRkFBcUY7SUFDckZPLFFBQVFDLFNBQVMsRUFBRSxDQUFFO0FBQ3pCLEVBQ0EsMENBQTBDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWxnb3JhbmQtY3Jvd2RmdW5kaW5nLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vY2xpZW50L3YyL2FsZ29kL3Vuc2V0U3luY1JvdW5kLmpzPzBlOTIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEpTT05SZXF1ZXN0IGZyb20gJy4uL2pzb25yZXF1ZXN0LmpzJztcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFVuc2V0U3luY1JvdW5kIGV4dGVuZHMgSlNPTlJlcXVlc3Qge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjbGFzcy1tZXRob2RzLXVzZS10aGlzXG4gICAgcGF0aCgpIHtcbiAgICAgICAgcmV0dXJuIGAvdjIvbGVkZ2VyL3N5bmNgO1xuICAgIH1cbiAgICBleGVjdXRlUmVxdWVzdChoZWFkZXJzLCBjdXN0b21PcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmMuZGVsZXRlKHtcbiAgICAgICAgICAgIHJlbGF0aXZlUGF0aDogdGhpcy5wYXRoKCksXG4gICAgICAgICAgICBkYXRhOiB1bmRlZmluZWQsXG4gICAgICAgICAgICByZXF1ZXN0SGVhZGVyczogaGVhZGVycyxcbiAgICAgICAgICAgIGN1c3RvbU9wdGlvbnMsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY2xhc3MtbWV0aG9kcy11c2UtdGhpcywgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXG4gICAgcHJlcGFyZShfcmVzcG9uc2UpIHsgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dW5zZXRTeW5jUm91bmQuanMubWFwIl0sIm5hbWVzIjpbIkpTT05SZXF1ZXN0IiwiVW5zZXRTeW5jUm91bmQiLCJwYXRoIiwiZXhlY3V0ZVJlcXVlc3QiLCJoZWFkZXJzIiwiY3VzdG9tT3B0aW9ucyIsImMiLCJkZWxldGUiLCJyZWxhdGl2ZVBhdGgiLCJkYXRhIiwidW5kZWZpbmVkIiwicmVxdWVzdEhlYWRlcnMiLCJwcmVwYXJlIiwiX3Jlc3BvbnNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/unsetSyncRound.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/versions.js":
/*!*******************************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/client/v2/algod/versions.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Versions)\n/* harmony export */ });\n/* harmony import */ var _jsonrequest_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../jsonrequest.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/jsonrequest.js\");\n/* harmony import */ var _encoding_encoding_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../encoding/encoding.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/encoding.js\");\n/* harmony import */ var _models_types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./models/types.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/models/types.js\");\n\n\n\n/**\n * retrieves the VersionResponse from the running node\n */ class Versions extends _jsonrequest_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    // eslint-disable-next-line class-methods-use-this\n    path() {\n        return \"/versions\";\n    }\n    // eslint-disable-next-line class-methods-use-this\n    prepare(response) {\n        return (0,_encoding_encoding_js__WEBPACK_IMPORTED_MODULE_1__.decodeJSON)(response.getJSONText(), _models_types_js__WEBPACK_IMPORTED_MODULE_2__.Version);\n    }\n} //# sourceMappingURL=versions.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9jbGllbnQvdjIvYWxnb2QvdmVyc2lvbnMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUE0QztBQUNlO0FBQ2Y7QUFDNUM7O0NBRUMsR0FDYyxNQUFNRyxpQkFBaUJILHVEQUFXQTtJQUM3QyxrREFBa0Q7SUFDbERJLE9BQU87UUFDSCxPQUFPO0lBQ1g7SUFDQSxrREFBa0Q7SUFDbERDLFFBQVFDLFFBQVEsRUFBRTtRQUNkLE9BQU9MLGlFQUFVQSxDQUFDSyxTQUFTQyxXQUFXLElBQUlMLHFEQUFPQTtJQUNyRDtBQUNKLEVBQ0Esb0NBQW9DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWxnb3JhbmQtY3Jvd2RmdW5kaW5nLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vY2xpZW50L3YyL2FsZ29kL3ZlcnNpb25zLmpzP2M1NWIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEpTT05SZXF1ZXN0IGZyb20gJy4uL2pzb25yZXF1ZXN0LmpzJztcbmltcG9ydCB7IGRlY29kZUpTT04gfSBmcm9tICcuLi8uLi8uLi9lbmNvZGluZy9lbmNvZGluZy5qcyc7XG5pbXBvcnQgeyBWZXJzaW9uIH0gZnJvbSAnLi9tb2RlbHMvdHlwZXMuanMnO1xuLyoqXG4gKiByZXRyaWV2ZXMgdGhlIFZlcnNpb25SZXNwb25zZSBmcm9tIHRoZSBydW5uaW5nIG5vZGVcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVmVyc2lvbnMgZXh0ZW5kcyBKU09OUmVxdWVzdCB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNsYXNzLW1ldGhvZHMtdXNlLXRoaXNcbiAgICBwYXRoKCkge1xuICAgICAgICByZXR1cm4gJy92ZXJzaW9ucyc7XG4gICAgfVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjbGFzcy1tZXRob2RzLXVzZS10aGlzXG4gICAgcHJlcGFyZShyZXNwb25zZSkge1xuICAgICAgICByZXR1cm4gZGVjb2RlSlNPTihyZXNwb25zZS5nZXRKU09OVGV4dCgpLCBWZXJzaW9uKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD12ZXJzaW9ucy5qcy5tYXAiXSwibmFtZXMiOlsiSlNPTlJlcXVlc3QiLCJkZWNvZGVKU09OIiwiVmVyc2lvbiIsIlZlcnNpb25zIiwicGF0aCIsInByZXBhcmUiLCJyZXNwb25zZSIsImdldEpTT05UZXh0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/versions.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/client/v2/indexer/indexer.js":
/*!********************************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/client/v2/indexer/indexer.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IndexerClient: () => (/* binding */ IndexerClient)\n/* harmony export */ });\n/* harmony import */ var _serviceClient_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../serviceClient.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/serviceClient.js\");\n/* harmony import */ var _makeHealthCheck_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./makeHealthCheck.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/indexer/makeHealthCheck.js\");\n/* harmony import */ var _lookupAssetBalances_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./lookupAssetBalances.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/indexer/lookupAssetBalances.js\");\n/* harmony import */ var _lookupAssetTransactions_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./lookupAssetTransactions.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/indexer/lookupAssetTransactions.js\");\n/* harmony import */ var _lookupAccountTransactions_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./lookupAccountTransactions.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/indexer/lookupAccountTransactions.js\");\n/* harmony import */ var _lookupBlock_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./lookupBlock.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/indexer/lookupBlock.js\");\n/* harmony import */ var _lookupTransactionByID_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./lookupTransactionByID.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/indexer/lookupTransactionByID.js\");\n/* harmony import */ var _lookupAccountByID_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./lookupAccountByID.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/indexer/lookupAccountByID.js\");\n/* harmony import */ var _lookupAccountAssets_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./lookupAccountAssets.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/indexer/lookupAccountAssets.js\");\n/* harmony import */ var _lookupAccountCreatedAssets_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./lookupAccountCreatedAssets.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/indexer/lookupAccountCreatedAssets.js\");\n/* harmony import */ var _lookupAccountAppLocalStates_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./lookupAccountAppLocalStates.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/indexer/lookupAccountAppLocalStates.js\");\n/* harmony import */ var _lookupAccountCreatedApplications_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./lookupAccountCreatedApplications.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/indexer/lookupAccountCreatedApplications.js\");\n/* harmony import */ var _lookupAssetByID_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./lookupAssetByID.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/indexer/lookupAssetByID.js\");\n/* harmony import */ var _lookupApplications_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./lookupApplications.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/indexer/lookupApplications.js\");\n/* harmony import */ var _lookupApplicationLogs_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./lookupApplicationLogs.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/indexer/lookupApplicationLogs.js\");\n/* harmony import */ var _lookupApplicationBoxByIDandName_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./lookupApplicationBoxByIDandName.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/indexer/lookupApplicationBoxByIDandName.js\");\n/* harmony import */ var _searchAccounts_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./searchAccounts.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/indexer/searchAccounts.js\");\n/* harmony import */ var _searchForBlockHeaders_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./searchForBlockHeaders.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/indexer/searchForBlockHeaders.js\");\n/* harmony import */ var _searchForTransactions_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./searchForTransactions.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/indexer/searchForTransactions.js\");\n/* harmony import */ var _searchForAssets_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./searchForAssets.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/indexer/searchForAssets.js\");\n/* harmony import */ var _searchForApplications_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./searchForApplications.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/indexer/searchForApplications.js\");\n/* harmony import */ var _searchForApplicationBoxes_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./searchForApplicationBoxes.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/indexer/searchForApplicationBoxes.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * The Indexer provides a REST API interface of API calls to support searching the Algorand Blockchain.\n *\n * The Indexer REST APIs retrieve the blockchain data from a PostgreSQL compatible database that must be populated.\n *\n * This database is populated using the same indexer instance or a separate instance of the indexer which must connect to the algod process of a running Algorand node to read block data.\n *\n * This node must also be an Archival node to make searching the entire blockchain possible.\n *\n * #### Relevant Information\n * [Learn more about Indexer](https://developer.algorand.org/docs/get-details/indexer/)\n *\n * [Run Indexer in Postman OAS3](https://developer.algorand.org/docs/rest-apis/restendpoints/#algod-indexer-and-kmd-rest-endpoints)\n */ class IndexerClient extends _serviceClient_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Create an IndexerClient from\n     * * either a token, baseServer, port, and optional headers\n     * * or a base client server for interoperability with external dApp wallets\n     *\n     * #### Example\n     * ```typescript\n     * const token  = \"\";\n     * const server = \"http://localhost\";\n     * const port   = 8980;\n     * const indexerClient = new algosdk.Indexer(token, server, port);\n     * ```\n     * @remarks\n     * The above configuration is for a sandbox private network.\n     * For applications on production, you are encouraged to run your own node with indexer, or use an Algorand REST API provider with a dedicated API key.\n     *\n     * @param tokenOrBaseClient - The API token for the Indexer API\n     * @param baseServer - REST endpoint\n     * @param port - Port number if specifically configured by the server\n     * @param headers - Optional headers\n     */ constructor(tokenOrBaseClient, baseServer = \"http://127.0.0.1\", port = 8080, headers = {}){\n        super(\"X-Indexer-API-Token\", tokenOrBaseClient, baseServer, port, headers);\n    }\n    /**\n     * Returns the health object for the service.\n     * Returns 200 if healthy.\n     *\n     * #### Example\n     * ```typescript\n     * const health = await indexerClient.makeHealthCheck().do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-health)\n     * @category GET\n     */ makeHealthCheck() {\n        return new _makeHealthCheck_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](this.c);\n    }\n    /**\n     * Returns the list of accounts who hold the given asset and their balance.\n     *\n     * #### Example\n     * ```typescript\n     * const assetId = 163650;\n     * const assetBalances = await indexerClient.lookupAssetBalances(assetId).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2assetsasset-idbalances)\n     * @param index - The asset ID to look up.\n     * @category GET\n     */ lookupAssetBalances(index) {\n        return new _lookupAssetBalances_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"](this.c, index);\n    }\n    /**\n     * Returns transactions relating to the given asset.\n     *\n     * #### Example\n     * ```typescript\n     * const assetId = 163650;\n     * const assetTxns = await indexerClient.lookupAssetTransactions(assetId).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2assetsasset-idtransactions)\n     * @param index - The asset ID to look up.\n     * @category GET\n     */ lookupAssetTransactions(index) {\n        return new _lookupAssetTransactions_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"](this.c, index);\n    }\n    /**\n     * Returns transactions relating to the given account.\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountTxns = await indexerClient.lookupAccountTransactions(address).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2accountsaccount-idtransactions)\n     * @param account - The address of the account.\n     * @category GET\n     */ lookupAccountTransactions(account) {\n        return new _lookupAccountTransactions_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"](this.c, account);\n    }\n    /**\n     * Returns the block for the passed round.\n     *\n     * #### Example\n     * ```typescript\n     * const targetBlock = 18309917;\n     * const blockInfo = await indexerClient.lookupBlock(targetBlock).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2blocksround-number)\n     * @param round - The number of the round to look up.\n     * @category GET\n     */ lookupBlock(round) {\n        return new _lookupBlock_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"](this.c, round);\n    }\n    /**\n     * Returns information about the given transaction.\n     *\n     * #### Example\n     * ```typescript\n     * const txnId = \"MEUOC4RQJB23CQZRFRKYEI6WBO73VTTPST5A7B3S5OKBUY6LFUDA\";\n     * const txnInfo = await indexerClient.lookupTransactionByID(txnId).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2transactionstxid)\n     * @param txID - The ID of the transaction to look up.\n     * @category GET\n     */ lookupTransactionByID(txID) {\n        return new _lookupTransactionByID_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"](this.c, txID);\n    }\n    /**\n     * Returns information about the given account.\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountInfo = await indexerClient.lookupAccountByID(address).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2accountsaccount-id)\n     * @param account - The address of the account to look up.\n     * @category GET\n     */ lookupAccountByID(account) {\n        return new _lookupAccountByID_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"](this.c, account);\n    }\n    /**\n     * Returns asset about the given account.\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountAssets = await indexerClient.lookupAccountAssets(address).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2accountsaccount-idassets)\n     * @param account - The address of the account to look up.\n     * @category GET\n     */ lookupAccountAssets(account) {\n        return new _lookupAccountAssets_js__WEBPACK_IMPORTED_MODULE_8__[\"default\"](this.c, account);\n    }\n    /**\n     * Returns asset information created by the given account.\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountCreatedAssets = await indexerClient.lookupAccountCreatedAssets(address).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2accountsaccount-idcreated-assets)\n     * @param account - The address of the account to look up.\n     * @category GET\n     */ lookupAccountCreatedAssets(account) {\n        return new _lookupAccountCreatedAssets_js__WEBPACK_IMPORTED_MODULE_9__[\"default\"](this.c, account);\n    }\n    /**\n     * Returns application local state about the given account.\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountAppLocalStates = await indexerClient.lookupAccountAppLocalStates(address).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2accountsaccount-idapps-local-state)\n     * @param account - The address of the account to look up.\n     * @category GET\n     */ lookupAccountAppLocalStates(account) {\n        return new _lookupAccountAppLocalStates_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"](this.c, account);\n    }\n    /**\n     * Returns application information created by the given account.\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountCreatedApps = await indexerClient.lookupAccountCreatedApplications(address).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2accountsaccount-idcreated-applications)\n     * @param account - The address of the account to look up.\n     * @category GET\n     */ lookupAccountCreatedApplications(account) {\n        return new _lookupAccountCreatedApplications_js__WEBPACK_IMPORTED_MODULE_11__[\"default\"](this.c, account);\n    }\n    /**\n     * Returns information about the passed asset.\n     *\n     * #### Example\n     * ```typescript\n     * const assetId = 163650;\n     * const assetInfo = await indexerClient.lookupAssetByID(assetId).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2assetsasset-id)\n     * @param index - The ID of the asset ot look up.\n     * @category GET\n     */ lookupAssetByID(index) {\n        return new _lookupAssetByID_js__WEBPACK_IMPORTED_MODULE_12__[\"default\"](this.c, index);\n    }\n    /**\n     * Returns information about the passed application.\n     *\n     * #### Example\n     * ```typescript\n     * const appId = 60553466;\n     * const appInfo = await indexerClient.lookupApplications(appId).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2applicationsapplication-id)\n     * @param index - The ID of the application to look up.\n     * @category GET\n     */ lookupApplications(index) {\n        return new _lookupApplications_js__WEBPACK_IMPORTED_MODULE_13__[\"default\"](this.c, index);\n    }\n    /**\n     * Returns log messages generated by the passed in application.\n     *\n     * #### Example\n     * ```typescript\n     * const appId = 60553466;\n     * const appLogs = await indexerClient.lookupApplicationLogs(appId).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2applicationsapplication-idlogs)\n     * @param appID - The ID of the application which generated the logs.\n     * @category GET\n     */ lookupApplicationLogs(appID) {\n        return new _lookupApplicationLogs_js__WEBPACK_IMPORTED_MODULE_14__[\"default\"](this.c, appID);\n    }\n    /**\n     * Returns information about indexed accounts.\n     *\n     * #### Example\n     * ```typescript\n     * const accounts = await indexerClient.searchAccounts().do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2accounts)\n     * @category GET\n     */ searchAccounts() {\n        return new _searchAccounts_js__WEBPACK_IMPORTED_MODULE_16__[\"default\"](this.c);\n    }\n    /**\n     * Returns information about indexed block headers.\n     *\n     * #### Example\n     * ```typescript\n     * const bhs = await indexerClient.searchForBlockHeaders().do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2block-headers)\n     * @category GET\n     */ searchForBlockHeaders() {\n        return new _searchForBlockHeaders_js__WEBPACK_IMPORTED_MODULE_17__[\"default\"](this.c);\n    }\n    /**\n     * Returns information about indexed transactions.\n     *\n     * #### Example\n     * ```typescript\n     * const txns = await indexerClient.searchForTransactions().do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2transactions)\n     * @category GET\n     */ searchForTransactions() {\n        return new _searchForTransactions_js__WEBPACK_IMPORTED_MODULE_18__[\"default\"](this.c);\n    }\n    /**\n     * Returns information about indexed assets.\n     *\n     * #### Example\n     * ```typescript\n     * const assets = await indexerClient.searchForAssets().do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2assets)\n     * @category GET\n     */ searchForAssets() {\n        return new _searchForAssets_js__WEBPACK_IMPORTED_MODULE_19__[\"default\"](this.c);\n    }\n    /**\n     * Returns information about indexed applications.\n     *\n     * #### Example\n     * ```typescript\n     * const apps = await indexerClient.searchForApplications().do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2applications)\n     * @category GET\n     */ searchForApplications() {\n        return new _searchForApplications_js__WEBPACK_IMPORTED_MODULE_20__[\"default\"](this.c);\n    }\n    /**\n     * Returns information about indexed application boxes.\n     *\n     * #### Example\n     * ```typescript\n     * const maxResults = 20;\n     * const appID = 1234;\n     *\n     * const responsePage1 = await indexerClient\n     *        .searchForApplicationBoxes(appID)\n     *        .limit(maxResults)\n     *        .do();\n     * const boxNamesPage1 = responsePage1.boxes.map(box => box.name);\n     *\n     * const responsePage2 = await indexerClient\n     *        .searchForApplicationBoxes(appID)\n     *        .limit(maxResults)\n     *        .nextToken(responsePage1.nextToken)\n     *        .do();\n     * const boxNamesPage2 = responsePage2.boxes.map(box => box.name);\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2applicationsapplication-idboxes)\n     * @param appID - The ID of the application with boxes.\n     * @category GET\n     */ searchForApplicationBoxes(appID) {\n        return new _searchForApplicationBoxes_js__WEBPACK_IMPORTED_MODULE_21__[\"default\"](this.c, appID);\n    }\n    /**\n     * Returns information about the application box given its name.\n     *\n     * #### Example\n     * ```typescript\n     * const boxName = Buffer.from(\"foo\");\n     * const boxResponse = await indexerClient\n     *        .LookupApplicationBoxByIDandName(1234, boxName)\n     *        .do();\n     * const boxValue = boxResponse.value;\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2applicationsapplication-idbox)\n     * @param appID - The ID of the application with boxes.\n     * @category GET\n     */ lookupApplicationBoxByIDandName(appID, boxName) {\n        return new _lookupApplicationBoxByIDandName_js__WEBPACK_IMPORTED_MODULE_15__[\"default\"](this.c, appID, boxName);\n    }\n} //# sourceMappingURL=indexer.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/client/v2/indexer/indexer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/client/v2/indexer/lookupAccountAppLocalStates.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/client/v2/indexer/lookupAccountAppLocalStates.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ LookupAccountAppLocalStates)\n/* harmony export */ });\n/* harmony import */ var _jsonrequest_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../jsonrequest.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/jsonrequest.js\");\n/* harmony import */ var _encoding_encoding_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../encoding/encoding.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/encoding.js\");\n/* harmony import */ var _models_types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./models/types.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/indexer/models/types.js\");\n\n\n\nclass LookupAccountAppLocalStates extends _jsonrequest_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Returns application local state about the given account.\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountAppLocalStates = await indexerClient.lookupAccountAppLocalStates(address).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2accountsaccount-idapps-local-state)\n     * @param account - The address of the account to look up.\n     * @category GET\n     */ constructor(c, account){\n        super(c);\n        this.account = account.toString();\n    }\n    /**\n     * @returns `/v2/accounts/${account}/apps-local-state`\n     */ path() {\n        return `/v2/accounts/${this.account}/apps-local-state`;\n    }\n    /**\n     * Add a limit for filter.\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const maxResults = 20;\n     * const accountAssets = await indexerClient\n     *        .lookupAccountAppLocalStates(address)\n     *        .limit(maxResults)\n     *        .do();\n     * ```\n     *\n     * @param limit - maximum number of results to return.\n     * @category query\n     */ limit(limit) {\n        this.query.limit = limit;\n        return this;\n    }\n    /**\n     * Specify round to filter with.\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const targetBlock = 18309917;\n     * const accountAssets = await indexerClient\n     *        .lookupAccountAppLocalStates(address)\n     *        .round(targetBlock)\n     *        .do();\n     * ```\n     * @param round\n     * @category query\n     */ round(round) {\n        this.query.round = round;\n        return this;\n    }\n    /**\n     * Specify the next page of results.\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const maxResults = 20;\n     *\n     * const accountAssetsPage1 = await indexerClient\n     *        .lookupAccountAppLocalStates(address)\n     *        .limit(maxResults)\n     *        .do();\n     *\n     * const accountAssetsPage2 = await indexerClient\n     *        .lookupAccountAppLocalStates(address)\n     *        .limit(maxResults)\n     *        .next(accountAssetsPage1[\"next-token\"])\n     *        .do();\n     * ```\n     * @param nextToken - provided by the previous results.\n     */ nextToken(nextToken) {\n        this.query.next = nextToken;\n        return this;\n    }\n    /**\n     * Include all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountAssets = await indexerClient\n     *        .lookupAccountAppLocalStates(address)\n     *        .includeAll(false)\n     *        .do();\n     * ```\n     * @param value\n     * @category query\n     */ includeAll(value = true) {\n        this.query[\"include-all\"] = value;\n        return this;\n    }\n    /**\n     * Specify an applicationID to search for.\n     *\n     * #### Example\n     * ```typescript\n     * const applicationID = 163650;\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountApplications = await indexerClient\n     *        .lookupAccountAppLocalStates(address)\n     *        .applicationID(applicationID)\n     *        .do();\n     * ```\n     * @param index - the applicationID\n     * @category query\n     */ applicationID(index) {\n        this.query[\"application-id\"] = index;\n        return this;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    prepare(response) {\n        return (0,_encoding_encoding_js__WEBPACK_IMPORTED_MODULE_1__.decodeJSON)(response.getJSONText(), _models_types_js__WEBPACK_IMPORTED_MODULE_2__.ApplicationLocalStatesResponse);\n    }\n} //# sourceMappingURL=lookupAccountAppLocalStates.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9jbGllbnQvdjIvaW5kZXhlci9sb29rdXBBY2NvdW50QXBwTG9jYWxTdGF0ZXMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUE0QztBQUNlO0FBQ1E7QUFDcEQsTUFBTUcsb0NBQW9DSCx1REFBV0E7SUFDaEU7Ozs7Ozs7Ozs7OztLQVlDLEdBQ0RJLFlBQVlDLENBQUMsRUFBRUMsT0FBTyxDQUFFO1FBQ3BCLEtBQUssQ0FBQ0Q7UUFDTixJQUFJLENBQUNDLE9BQU8sR0FBR0EsUUFBUUMsUUFBUTtJQUNuQztJQUNBOztLQUVDLEdBQ0RDLE9BQU87UUFDSCxPQUFPLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQ0YsT0FBTyxDQUFDLGlCQUFpQixDQUFDO0lBQzFEO0lBQ0E7Ozs7Ozs7Ozs7Ozs7OztLQWVDLEdBQ0RHLE1BQU1BLEtBQUssRUFBRTtRQUNULElBQUksQ0FBQ0MsS0FBSyxDQUFDRCxLQUFLLEdBQUdBO1FBQ25CLE9BQU8sSUFBSTtJQUNmO0lBQ0E7Ozs7Ozs7Ozs7Ozs7O0tBY0MsR0FDREUsTUFBTUEsS0FBSyxFQUFFO1FBQ1QsSUFBSSxDQUFDRCxLQUFLLENBQUNDLEtBQUssR0FBR0E7UUFDbkIsT0FBTyxJQUFJO0lBQ2Y7SUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7S0FvQkMsR0FDREMsVUFBVUEsU0FBUyxFQUFFO1FBQ2pCLElBQUksQ0FBQ0YsS0FBSyxDQUFDRyxJQUFJLEdBQUdEO1FBQ2xCLE9BQU8sSUFBSTtJQUNmO0lBQ0E7Ozs7Ozs7Ozs7Ozs7S0FhQyxHQUNERSxXQUFXQyxRQUFRLElBQUksRUFBRTtRQUNyQixJQUFJLENBQUNMLEtBQUssQ0FBQyxjQUFjLEdBQUdLO1FBQzVCLE9BQU8sSUFBSTtJQUNmO0lBQ0E7Ozs7Ozs7Ozs7Ozs7O0tBY0MsR0FDREMsY0FBY0MsS0FBSyxFQUFFO1FBQ2pCLElBQUksQ0FBQ1AsS0FBSyxDQUFDLGlCQUFpQixHQUFHTztRQUMvQixPQUFPLElBQUk7SUFDZjtJQUNBLGtEQUFrRDtJQUNsREMsUUFBUUMsUUFBUSxFQUFFO1FBQ2QsT0FBT2xCLGlFQUFVQSxDQUFDa0IsU0FBU0MsV0FBVyxJQUFJbEIsNEVBQThCQTtJQUM1RTtBQUNKLEVBQ0EsdURBQXVEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWxnb3JhbmQtY3Jvd2RmdW5kaW5nLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vY2xpZW50L3YyL2luZGV4ZXIvbG9va3VwQWNjb3VudEFwcExvY2FsU3RhdGVzLmpzP2MwYzQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEpTT05SZXF1ZXN0IGZyb20gJy4uL2pzb25yZXF1ZXN0LmpzJztcbmltcG9ydCB7IGRlY29kZUpTT04gfSBmcm9tICcuLi8uLi8uLi9lbmNvZGluZy9lbmNvZGluZy5qcyc7XG5pbXBvcnQgeyBBcHBsaWNhdGlvbkxvY2FsU3RhdGVzUmVzcG9uc2UgfSBmcm9tICcuL21vZGVscy90eXBlcy5qcyc7XG5leHBvcnQgZGVmYXVsdCBjbGFzcyBMb29rdXBBY2NvdW50QXBwTG9jYWxTdGF0ZXMgZXh0ZW5kcyBKU09OUmVxdWVzdCB7XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhcHBsaWNhdGlvbiBsb2NhbCBzdGF0ZSBhYm91dCB0aGUgZ2l2ZW4gYWNjb3VudC5cbiAgICAgKlxuICAgICAqICMjIyMgRXhhbXBsZVxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjb25zdCBhZGRyZXNzID0gXCJYQllMUzJFNllJNlhYTDVCV0NBTU9BNEdUV0hYV0VOWk1YNVVIWE1STldXVVE3QlhDWTVXQzVURVBBXCI7XG4gICAgICogY29uc3QgYWNjb3VudEFwcExvY2FsU3RhdGVzID0gYXdhaXQgaW5kZXhlckNsaWVudC5sb29rdXBBY2NvdW50QXBwTG9jYWxTdGF0ZXMoYWRkcmVzcykuZG8oKTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIFtSZXNwb25zZSBkYXRhIHNjaGVtYSBkZXRhaWxzXShodHRwczovL2RldmVsb3Blci5hbGdvcmFuZC5vcmcvZG9jcy9yZXN0LWFwaXMvaW5kZXhlci8jZ2V0LXYyYWNjb3VudHNhY2NvdW50LWlkYXBwcy1sb2NhbC1zdGF0ZSlcbiAgICAgKiBAcGFyYW0gYWNjb3VudCAtIFRoZSBhZGRyZXNzIG9mIHRoZSBhY2NvdW50IHRvIGxvb2sgdXAuXG4gICAgICogQGNhdGVnb3J5IEdFVFxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGMsIGFjY291bnQpIHtcbiAgICAgICAgc3VwZXIoYyk7XG4gICAgICAgIHRoaXMuYWNjb3VudCA9IGFjY291bnQudG9TdHJpbmcoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHJldHVybnMgYC92Mi9hY2NvdW50cy8ke2FjY291bnR9L2FwcHMtbG9jYWwtc3RhdGVgXG4gICAgICovXG4gICAgcGF0aCgpIHtcbiAgICAgICAgcmV0dXJuIGAvdjIvYWNjb3VudHMvJHt0aGlzLmFjY291bnR9L2FwcHMtbG9jYWwtc3RhdGVgO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBZGQgYSBsaW1pdCBmb3IgZmlsdGVyLlxuICAgICAqXG4gICAgICogIyMjIyBFeGFtcGxlXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IGFkZHJlc3MgPSBcIlhCWUxTMkU2WUk2WFhMNUJXQ0FNT0E0R1RXSFhXRU5aTVg1VUhYTVJOV1dVUTdCWENZNVdDNVRFUEFcIjtcbiAgICAgKiBjb25zdCBtYXhSZXN1bHRzID0gMjA7XG4gICAgICogY29uc3QgYWNjb3VudEFzc2V0cyA9IGF3YWl0IGluZGV4ZXJDbGllbnRcbiAgICAgKiAgICAgICAgLmxvb2t1cEFjY291bnRBcHBMb2NhbFN0YXRlcyhhZGRyZXNzKVxuICAgICAqICAgICAgICAubGltaXQobWF4UmVzdWx0cylcbiAgICAgKiAgICAgICAgLmRvKCk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbGltaXQgLSBtYXhpbXVtIG51bWJlciBvZiByZXN1bHRzIHRvIHJldHVybi5cbiAgICAgKiBAY2F0ZWdvcnkgcXVlcnlcbiAgICAgKi9cbiAgICBsaW1pdChsaW1pdCkge1xuICAgICAgICB0aGlzLnF1ZXJ5LmxpbWl0ID0gbGltaXQ7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTcGVjaWZ5IHJvdW5kIHRvIGZpbHRlciB3aXRoLlxuICAgICAqXG4gICAgICogIyMjIyBFeGFtcGxlXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IGFkZHJlc3MgPSBcIlhCWUxTMkU2WUk2WFhMNUJXQ0FNT0E0R1RXSFhXRU5aTVg1VUhYTVJOV1dVUTdCWENZNVdDNVRFUEFcIjtcbiAgICAgKiBjb25zdCB0YXJnZXRCbG9jayA9IDE4MzA5OTE3O1xuICAgICAqIGNvbnN0IGFjY291bnRBc3NldHMgPSBhd2FpdCBpbmRleGVyQ2xpZW50XG4gICAgICogICAgICAgIC5sb29rdXBBY2NvdW50QXBwTG9jYWxTdGF0ZXMoYWRkcmVzcylcbiAgICAgKiAgICAgICAgLnJvdW5kKHRhcmdldEJsb2NrKVxuICAgICAqICAgICAgICAuZG8oKTtcbiAgICAgKiBgYGBcbiAgICAgKiBAcGFyYW0gcm91bmRcbiAgICAgKiBAY2F0ZWdvcnkgcXVlcnlcbiAgICAgKi9cbiAgICByb3VuZChyb3VuZCkge1xuICAgICAgICB0aGlzLnF1ZXJ5LnJvdW5kID0gcm91bmQ7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTcGVjaWZ5IHRoZSBuZXh0IHBhZ2Ugb2YgcmVzdWx0cy5cbiAgICAgKlxuICAgICAqICMjIyMgRXhhbXBsZVxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjb25zdCBhZGRyZXNzID0gXCJYQllMUzJFNllJNlhYTDVCV0NBTU9BNEdUV0hYV0VOWk1YNVVIWE1STldXVVE3QlhDWTVXQzVURVBBXCI7XG4gICAgICogY29uc3QgbWF4UmVzdWx0cyA9IDIwO1xuICAgICAqXG4gICAgICogY29uc3QgYWNjb3VudEFzc2V0c1BhZ2UxID0gYXdhaXQgaW5kZXhlckNsaWVudFxuICAgICAqICAgICAgICAubG9va3VwQWNjb3VudEFwcExvY2FsU3RhdGVzKGFkZHJlc3MpXG4gICAgICogICAgICAgIC5saW1pdChtYXhSZXN1bHRzKVxuICAgICAqICAgICAgICAuZG8oKTtcbiAgICAgKlxuICAgICAqIGNvbnN0IGFjY291bnRBc3NldHNQYWdlMiA9IGF3YWl0IGluZGV4ZXJDbGllbnRcbiAgICAgKiAgICAgICAgLmxvb2t1cEFjY291bnRBcHBMb2NhbFN0YXRlcyhhZGRyZXNzKVxuICAgICAqICAgICAgICAubGltaXQobWF4UmVzdWx0cylcbiAgICAgKiAgICAgICAgLm5leHQoYWNjb3VudEFzc2V0c1BhZ2UxW1wibmV4dC10b2tlblwiXSlcbiAgICAgKiAgICAgICAgLmRvKCk7XG4gICAgICogYGBgXG4gICAgICogQHBhcmFtIG5leHRUb2tlbiAtIHByb3ZpZGVkIGJ5IHRoZSBwcmV2aW91cyByZXN1bHRzLlxuICAgICAqL1xuICAgIG5leHRUb2tlbihuZXh0VG9rZW4pIHtcbiAgICAgICAgdGhpcy5xdWVyeS5uZXh0ID0gbmV4dFRva2VuO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogSW5jbHVkZSBhbGwgaXRlbXMgaW5jbHVkaW5nIGNsb3NlZCBhY2NvdW50cywgZGVsZXRlZCBhcHBsaWNhdGlvbnMsIGRlc3Ryb3llZCBhc3NldHMsIG9wdGVkLW91dCBhc3NldCBob2xkaW5ncywgYW5kIGNsb3NlZC1vdXQgYXBwbGljYXRpb24gbG9jYWxzdGF0ZXNcbiAgICAgKlxuICAgICAqICMjIyMgRXhhbXBsZVxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjb25zdCBhZGRyZXNzID0gXCJYQllMUzJFNllJNlhYTDVCV0NBTU9BNEdUV0hYV0VOWk1YNVVIWE1STldXVVE3QlhDWTVXQzVURVBBXCI7XG4gICAgICogY29uc3QgYWNjb3VudEFzc2V0cyA9IGF3YWl0IGluZGV4ZXJDbGllbnRcbiAgICAgKiAgICAgICAgLmxvb2t1cEFjY291bnRBcHBMb2NhbFN0YXRlcyhhZGRyZXNzKVxuICAgICAqICAgICAgICAuaW5jbHVkZUFsbChmYWxzZSlcbiAgICAgKiAgICAgICAgLmRvKCk7XG4gICAgICogYGBgXG4gICAgICogQHBhcmFtIHZhbHVlXG4gICAgICogQGNhdGVnb3J5IHF1ZXJ5XG4gICAgICovXG4gICAgaW5jbHVkZUFsbCh2YWx1ZSA9IHRydWUpIHtcbiAgICAgICAgdGhpcy5xdWVyeVsnaW5jbHVkZS1hbGwnXSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogU3BlY2lmeSBhbiBhcHBsaWNhdGlvbklEIHRvIHNlYXJjaCBmb3IuXG4gICAgICpcbiAgICAgKiAjIyMjIEV4YW1wbGVcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogY29uc3QgYXBwbGljYXRpb25JRCA9IDE2MzY1MDtcbiAgICAgKiBjb25zdCBhZGRyZXNzID0gXCJYQllMUzJFNllJNlhYTDVCV0NBTU9BNEdUV0hYV0VOWk1YNVVIWE1STldXVVE3QlhDWTVXQzVURVBBXCI7XG4gICAgICogY29uc3QgYWNjb3VudEFwcGxpY2F0aW9ucyA9IGF3YWl0IGluZGV4ZXJDbGllbnRcbiAgICAgKiAgICAgICAgLmxvb2t1cEFjY291bnRBcHBMb2NhbFN0YXRlcyhhZGRyZXNzKVxuICAgICAqICAgICAgICAuYXBwbGljYXRpb25JRChhcHBsaWNhdGlvbklEKVxuICAgICAqICAgICAgICAuZG8oKTtcbiAgICAgKiBgYGBcbiAgICAgKiBAcGFyYW0gaW5kZXggLSB0aGUgYXBwbGljYXRpb25JRFxuICAgICAqIEBjYXRlZ29yeSBxdWVyeVxuICAgICAqL1xuICAgIGFwcGxpY2F0aW9uSUQoaW5kZXgpIHtcbiAgICAgICAgdGhpcy5xdWVyeVsnYXBwbGljYXRpb24taWQnXSA9IGluZGV4O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNsYXNzLW1ldGhvZHMtdXNlLXRoaXNcbiAgICBwcmVwYXJlKHJlc3BvbnNlKSB7XG4gICAgICAgIHJldHVybiBkZWNvZGVKU09OKHJlc3BvbnNlLmdldEpTT05UZXh0KCksIEFwcGxpY2F0aW9uTG9jYWxTdGF0ZXNSZXNwb25zZSk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bG9va3VwQWNjb3VudEFwcExvY2FsU3RhdGVzLmpzLm1hcCJdLCJuYW1lcyI6WyJKU09OUmVxdWVzdCIsImRlY29kZUpTT04iLCJBcHBsaWNhdGlvbkxvY2FsU3RhdGVzUmVzcG9uc2UiLCJMb29rdXBBY2NvdW50QXBwTG9jYWxTdGF0ZXMiLCJjb25zdHJ1Y3RvciIsImMiLCJhY2NvdW50IiwidG9TdHJpbmciLCJwYXRoIiwibGltaXQiLCJxdWVyeSIsInJvdW5kIiwibmV4dFRva2VuIiwibmV4dCIsImluY2x1ZGVBbGwiLCJ2YWx1ZSIsImFwcGxpY2F0aW9uSUQiLCJpbmRleCIsInByZXBhcmUiLCJyZXNwb25zZSIsImdldEpTT05UZXh0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/client/v2/indexer/lookupAccountAppLocalStates.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/client/v2/indexer/lookupAccountAssets.js":
/*!********************************************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/client/v2/indexer/lookupAccountAssets.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ LookupAccountAssets)\n/* harmony export */ });\n/* harmony import */ var _jsonrequest_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../jsonrequest.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/jsonrequest.js\");\n/* harmony import */ var _encoding_encoding_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../encoding/encoding.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/encoding.js\");\n/* harmony import */ var _models_types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./models/types.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/indexer/models/types.js\");\n\n\n\nclass LookupAccountAssets extends _jsonrequest_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Returns asset about the given account.\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountAssets = await indexerClient.lookupAccountAssets(address).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2accountsaccount-idassets)\n     * @param account - The address of the account to look up.\n     * @category GET\n     */ constructor(c, account){\n        super(c);\n        this.account = account.toString();\n    }\n    /**\n     * @returns `/v2/accounts/${account}/assets`\n     */ path() {\n        return `/v2/accounts/${this.account}/assets`;\n    }\n    /**\n     * Add a limit for filter.\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const maxResults = 20;\n     * const accountAssets = await indexerClient\n     *        .lookupAccountAssets(address)\n     *        .limit(maxResults)\n     *        .do();\n     * ```\n     *\n     * @param limit - maximum number of results to return.\n     * @category query\n     */ limit(limit) {\n        this.query.limit = limit;\n        return this;\n    }\n    /**\n     * Specify round to filter with.\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const targetBlock = 18309917;\n     * const accountAssets = await indexerClient\n     *        .lookupAccountAssets(address)\n     *        .round(targetBlock)\n     *        .do();\n     * ```\n     * @param round\n     * @category query\n     */ round(round) {\n        this.query.round = round;\n        return this;\n    }\n    /**\n     * Specify the next page of results.\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const maxResults = 20;\n     *\n     * const accountAssetsPage1 = await indexerClient\n     *        .lookupAccountAssets(address)\n     *        .limit(maxResults)\n     *        .do();\n     *\n     * const accountAssetsPage2 = await indexerClient\n     *        .lookupAccountAssets(address)\n     *        .limit(maxResults)\n     *        .next(accountAssetsPage1[\"next-token\"])\n     *        .do();\n     * ```\n     * @param nextToken - provided by the previous results.\n     * @category query\n     */ nextToken(nextToken) {\n        this.query.next = nextToken;\n        return this;\n    }\n    /**\n     * Include all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountAssets = await indexerClient\n     *        .lookupAccountAssets(address)\n     *        .includeAll(false)\n     *        .do();\n     * ```\n     * @param value\n     * @category query\n     */ includeAll(value = true) {\n        this.query[\"include-all\"] = value;\n        return this;\n    }\n    /**\n     * Specify an assetID to search for.\n     *\n     * #### Example\n     * ```typescript\n     * const assetId = 163650;\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const assetAssets = await indexerClient\n     *        .lookupAccountAssets(address)\n     *        .assetId(assetId)\n     *        .do();\n     * ```\n     * @param index - the assetID\n     * @category query\n     */ assetId(index) {\n        this.query[\"asset-id\"] = index;\n        return this;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    prepare(response) {\n        return (0,_encoding_encoding_js__WEBPACK_IMPORTED_MODULE_1__.decodeJSON)(response.getJSONText(), _models_types_js__WEBPACK_IMPORTED_MODULE_2__.AssetHoldingsResponse);\n    }\n} //# sourceMappingURL=lookupAccountAssets.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9jbGllbnQvdjIvaW5kZXhlci9sb29rdXBBY2NvdW50QXNzZXRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBNEM7QUFDZTtBQUNEO0FBQzNDLE1BQU1HLDRCQUE0QkgsdURBQVdBO0lBQ3hEOzs7Ozs7Ozs7Ozs7S0FZQyxHQUNESSxZQUFZQyxDQUFDLEVBQUVDLE9BQU8sQ0FBRTtRQUNwQixLQUFLLENBQUNEO1FBQ04sSUFBSSxDQUFDQyxPQUFPLEdBQUdBLFFBQVFDLFFBQVE7SUFDbkM7SUFDQTs7S0FFQyxHQUNEQyxPQUFPO1FBQ0gsT0FBTyxDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUNGLE9BQU8sQ0FBQyxPQUFPLENBQUM7SUFDaEQ7SUFDQTs7Ozs7Ozs7Ozs7Ozs7O0tBZUMsR0FDREcsTUFBTUEsS0FBSyxFQUFFO1FBQ1QsSUFBSSxDQUFDQyxLQUFLLENBQUNELEtBQUssR0FBR0E7UUFDbkIsT0FBTyxJQUFJO0lBQ2Y7SUFDQTs7Ozs7Ozs7Ozs7Ozs7S0FjQyxHQUNERSxNQUFNQSxLQUFLLEVBQUU7UUFDVCxJQUFJLENBQUNELEtBQUssQ0FBQ0MsS0FBSyxHQUFHQTtRQUNuQixPQUFPLElBQUk7SUFDZjtJQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7S0FxQkMsR0FDREMsVUFBVUEsU0FBUyxFQUFFO1FBQ2pCLElBQUksQ0FBQ0YsS0FBSyxDQUFDRyxJQUFJLEdBQUdEO1FBQ2xCLE9BQU8sSUFBSTtJQUNmO0lBQ0E7Ozs7Ozs7Ozs7Ozs7S0FhQyxHQUNERSxXQUFXQyxRQUFRLElBQUksRUFBRTtRQUNyQixJQUFJLENBQUNMLEtBQUssQ0FBQyxjQUFjLEdBQUdLO1FBQzVCLE9BQU8sSUFBSTtJQUNmO0lBQ0E7Ozs7Ozs7Ozs7Ozs7O0tBY0MsR0FDREMsUUFBUUMsS0FBSyxFQUFFO1FBQ1gsSUFBSSxDQUFDUCxLQUFLLENBQUMsV0FBVyxHQUFHTztRQUN6QixPQUFPLElBQUk7SUFDZjtJQUNBLGtEQUFrRDtJQUNsREMsUUFBUUMsUUFBUSxFQUFFO1FBQ2QsT0FBT2xCLGlFQUFVQSxDQUFDa0IsU0FBU0MsV0FBVyxJQUFJbEIsbUVBQXFCQTtJQUNuRTtBQUNKLEVBQ0EsK0NBQStDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWxnb3JhbmQtY3Jvd2RmdW5kaW5nLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vY2xpZW50L3YyL2luZGV4ZXIvbG9va3VwQWNjb3VudEFzc2V0cy5qcz81YzRlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBKU09OUmVxdWVzdCBmcm9tICcuLi9qc29ucmVxdWVzdC5qcyc7XG5pbXBvcnQgeyBkZWNvZGVKU09OIH0gZnJvbSAnLi4vLi4vLi4vZW5jb2RpbmcvZW5jb2RpbmcuanMnO1xuaW1wb3J0IHsgQXNzZXRIb2xkaW5nc1Jlc3BvbnNlIH0gZnJvbSAnLi9tb2RlbHMvdHlwZXMuanMnO1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTG9va3VwQWNjb3VudEFzc2V0cyBleHRlbmRzIEpTT05SZXF1ZXN0IHtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGFzc2V0IGFib3V0IHRoZSBnaXZlbiBhY2NvdW50LlxuICAgICAqXG4gICAgICogIyMjIyBFeGFtcGxlXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IGFkZHJlc3MgPSBcIlhCWUxTMkU2WUk2WFhMNUJXQ0FNT0E0R1RXSFhXRU5aTVg1VUhYTVJOV1dVUTdCWENZNVdDNVRFUEFcIjtcbiAgICAgKiBjb25zdCBhY2NvdW50QXNzZXRzID0gYXdhaXQgaW5kZXhlckNsaWVudC5sb29rdXBBY2NvdW50QXNzZXRzKGFkZHJlc3MpLmRvKCk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBbUmVzcG9uc2UgZGF0YSBzY2hlbWEgZGV0YWlsc10oaHR0cHM6Ly9kZXZlbG9wZXIuYWxnb3JhbmQub3JnL2RvY3MvcmVzdC1hcGlzL2luZGV4ZXIvI2dldC12MmFjY291bnRzYWNjb3VudC1pZGFzc2V0cylcbiAgICAgKiBAcGFyYW0gYWNjb3VudCAtIFRoZSBhZGRyZXNzIG9mIHRoZSBhY2NvdW50IHRvIGxvb2sgdXAuXG4gICAgICogQGNhdGVnb3J5IEdFVFxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGMsIGFjY291bnQpIHtcbiAgICAgICAgc3VwZXIoYyk7XG4gICAgICAgIHRoaXMuYWNjb3VudCA9IGFjY291bnQudG9TdHJpbmcoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHJldHVybnMgYC92Mi9hY2NvdW50cy8ke2FjY291bnR9L2Fzc2V0c2BcbiAgICAgKi9cbiAgICBwYXRoKCkge1xuICAgICAgICByZXR1cm4gYC92Mi9hY2NvdW50cy8ke3RoaXMuYWNjb3VudH0vYXNzZXRzYDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQWRkIGEgbGltaXQgZm9yIGZpbHRlci5cbiAgICAgKlxuICAgICAqICMjIyMgRXhhbXBsZVxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjb25zdCBhZGRyZXNzID0gXCJYQllMUzJFNllJNlhYTDVCV0NBTU9BNEdUV0hYV0VOWk1YNVVIWE1STldXVVE3QlhDWTVXQzVURVBBXCI7XG4gICAgICogY29uc3QgbWF4UmVzdWx0cyA9IDIwO1xuICAgICAqIGNvbnN0IGFjY291bnRBc3NldHMgPSBhd2FpdCBpbmRleGVyQ2xpZW50XG4gICAgICogICAgICAgIC5sb29rdXBBY2NvdW50QXNzZXRzKGFkZHJlc3MpXG4gICAgICogICAgICAgIC5saW1pdChtYXhSZXN1bHRzKVxuICAgICAqICAgICAgICAuZG8oKTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEBwYXJhbSBsaW1pdCAtIG1heGltdW0gbnVtYmVyIG9mIHJlc3VsdHMgdG8gcmV0dXJuLlxuICAgICAqIEBjYXRlZ29yeSBxdWVyeVxuICAgICAqL1xuICAgIGxpbWl0KGxpbWl0KSB7XG4gICAgICAgIHRoaXMucXVlcnkubGltaXQgPSBsaW1pdDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNwZWNpZnkgcm91bmQgdG8gZmlsdGVyIHdpdGguXG4gICAgICpcbiAgICAgKiAjIyMjIEV4YW1wbGVcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogY29uc3QgYWRkcmVzcyA9IFwiWEJZTFMyRTZZSTZYWEw1QldDQU1PQTRHVFdIWFdFTlpNWDVVSFhNUk5XV1VRN0JYQ1k1V0M1VEVQQVwiO1xuICAgICAqIGNvbnN0IHRhcmdldEJsb2NrID0gMTgzMDk5MTc7XG4gICAgICogY29uc3QgYWNjb3VudEFzc2V0cyA9IGF3YWl0IGluZGV4ZXJDbGllbnRcbiAgICAgKiAgICAgICAgLmxvb2t1cEFjY291bnRBc3NldHMoYWRkcmVzcylcbiAgICAgKiAgICAgICAgLnJvdW5kKHRhcmdldEJsb2NrKVxuICAgICAqICAgICAgICAuZG8oKTtcbiAgICAgKiBgYGBcbiAgICAgKiBAcGFyYW0gcm91bmRcbiAgICAgKiBAY2F0ZWdvcnkgcXVlcnlcbiAgICAgKi9cbiAgICByb3VuZChyb3VuZCkge1xuICAgICAgICB0aGlzLnF1ZXJ5LnJvdW5kID0gcm91bmQ7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTcGVjaWZ5IHRoZSBuZXh0IHBhZ2Ugb2YgcmVzdWx0cy5cbiAgICAgKlxuICAgICAqICMjIyMgRXhhbXBsZVxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjb25zdCBhZGRyZXNzID0gXCJYQllMUzJFNllJNlhYTDVCV0NBTU9BNEdUV0hYV0VOWk1YNVVIWE1STldXVVE3QlhDWTVXQzVURVBBXCI7XG4gICAgICogY29uc3QgbWF4UmVzdWx0cyA9IDIwO1xuICAgICAqXG4gICAgICogY29uc3QgYWNjb3VudEFzc2V0c1BhZ2UxID0gYXdhaXQgaW5kZXhlckNsaWVudFxuICAgICAqICAgICAgICAubG9va3VwQWNjb3VudEFzc2V0cyhhZGRyZXNzKVxuICAgICAqICAgICAgICAubGltaXQobWF4UmVzdWx0cylcbiAgICAgKiAgICAgICAgLmRvKCk7XG4gICAgICpcbiAgICAgKiBjb25zdCBhY2NvdW50QXNzZXRzUGFnZTIgPSBhd2FpdCBpbmRleGVyQ2xpZW50XG4gICAgICogICAgICAgIC5sb29rdXBBY2NvdW50QXNzZXRzKGFkZHJlc3MpXG4gICAgICogICAgICAgIC5saW1pdChtYXhSZXN1bHRzKVxuICAgICAqICAgICAgICAubmV4dChhY2NvdW50QXNzZXRzUGFnZTFbXCJuZXh0LXRva2VuXCJdKVxuICAgICAqICAgICAgICAuZG8oKTtcbiAgICAgKiBgYGBcbiAgICAgKiBAcGFyYW0gbmV4dFRva2VuIC0gcHJvdmlkZWQgYnkgdGhlIHByZXZpb3VzIHJlc3VsdHMuXG4gICAgICogQGNhdGVnb3J5IHF1ZXJ5XG4gICAgICovXG4gICAgbmV4dFRva2VuKG5leHRUb2tlbikge1xuICAgICAgICB0aGlzLnF1ZXJ5Lm5leHQgPSBuZXh0VG9rZW47XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJbmNsdWRlIGFsbCBpdGVtcyBpbmNsdWRpbmcgY2xvc2VkIGFjY291bnRzLCBkZWxldGVkIGFwcGxpY2F0aW9ucywgZGVzdHJveWVkIGFzc2V0cywgb3B0ZWQtb3V0IGFzc2V0IGhvbGRpbmdzLCBhbmQgY2xvc2VkLW91dCBhcHBsaWNhdGlvbiBsb2NhbHN0YXRlc1xuICAgICAqXG4gICAgICogIyMjIyBFeGFtcGxlXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IGFkZHJlc3MgPSBcIlhCWUxTMkU2WUk2WFhMNUJXQ0FNT0E0R1RXSFhXRU5aTVg1VUhYTVJOV1dVUTdCWENZNVdDNVRFUEFcIjtcbiAgICAgKiBjb25zdCBhY2NvdW50QXNzZXRzID0gYXdhaXQgaW5kZXhlckNsaWVudFxuICAgICAqICAgICAgICAubG9va3VwQWNjb3VudEFzc2V0cyhhZGRyZXNzKVxuICAgICAqICAgICAgICAuaW5jbHVkZUFsbChmYWxzZSlcbiAgICAgKiAgICAgICAgLmRvKCk7XG4gICAgICogYGBgXG4gICAgICogQHBhcmFtIHZhbHVlXG4gICAgICogQGNhdGVnb3J5IHF1ZXJ5XG4gICAgICovXG4gICAgaW5jbHVkZUFsbCh2YWx1ZSA9IHRydWUpIHtcbiAgICAgICAgdGhpcy5xdWVyeVsnaW5jbHVkZS1hbGwnXSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogU3BlY2lmeSBhbiBhc3NldElEIHRvIHNlYXJjaCBmb3IuXG4gICAgICpcbiAgICAgKiAjIyMjIEV4YW1wbGVcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogY29uc3QgYXNzZXRJZCA9IDE2MzY1MDtcbiAgICAgKiBjb25zdCBhZGRyZXNzID0gXCJYQllMUzJFNllJNlhYTDVCV0NBTU9BNEdUV0hYV0VOWk1YNVVIWE1STldXVVE3QlhDWTVXQzVURVBBXCI7XG4gICAgICogY29uc3QgYXNzZXRBc3NldHMgPSBhd2FpdCBpbmRleGVyQ2xpZW50XG4gICAgICogICAgICAgIC5sb29rdXBBY2NvdW50QXNzZXRzKGFkZHJlc3MpXG4gICAgICogICAgICAgIC5hc3NldElkKGFzc2V0SWQpXG4gICAgICogICAgICAgIC5kbygpO1xuICAgICAqIGBgYFxuICAgICAqIEBwYXJhbSBpbmRleCAtIHRoZSBhc3NldElEXG4gICAgICogQGNhdGVnb3J5IHF1ZXJ5XG4gICAgICovXG4gICAgYXNzZXRJZChpbmRleCkge1xuICAgICAgICB0aGlzLnF1ZXJ5Wydhc3NldC1pZCddID0gaW5kZXg7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY2xhc3MtbWV0aG9kcy11c2UtdGhpc1xuICAgIHByZXBhcmUocmVzcG9uc2UpIHtcbiAgICAgICAgcmV0dXJuIGRlY29kZUpTT04ocmVzcG9uc2UuZ2V0SlNPTlRleHQoKSwgQXNzZXRIb2xkaW5nc1Jlc3BvbnNlKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1sb29rdXBBY2NvdW50QXNzZXRzLmpzLm1hcCJdLCJuYW1lcyI6WyJKU09OUmVxdWVzdCIsImRlY29kZUpTT04iLCJBc3NldEhvbGRpbmdzUmVzcG9uc2UiLCJMb29rdXBBY2NvdW50QXNzZXRzIiwiY29uc3RydWN0b3IiLCJjIiwiYWNjb3VudCIsInRvU3RyaW5nIiwicGF0aCIsImxpbWl0IiwicXVlcnkiLCJyb3VuZCIsIm5leHRUb2tlbiIsIm5leHQiLCJpbmNsdWRlQWxsIiwidmFsdWUiLCJhc3NldElkIiwiaW5kZXgiLCJwcmVwYXJlIiwicmVzcG9uc2UiLCJnZXRKU09OVGV4dCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/client/v2/indexer/lookupAccountAssets.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/client/v2/indexer/lookupAccountByID.js":
/*!******************************************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/client/v2/indexer/lookupAccountByID.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ LookupAccountByID)\n/* harmony export */ });\n/* harmony import */ var _jsonrequest_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../jsonrequest.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/jsonrequest.js\");\n/* harmony import */ var _encoding_encoding_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../encoding/encoding.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/encoding.js\");\n/* harmony import */ var _models_types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./models/types.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/indexer/models/types.js\");\n\n\n\nclass LookupAccountByID extends _jsonrequest_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Returns information about the given account.\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountInfo = await indexerClient.lookupAccountByID(address).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2accountsaccount-id)\n     * @param account - The address of the account to look up.\n     * @category GET\n     */ constructor(c, account){\n        super(c);\n        this.account = account.toString();\n    }\n    /**\n     * @returns `/v2/accounts/${account}`\n     */ path() {\n        return `/v2/accounts/${this.account}`;\n    }\n    /**\n     * Specify round to filter with.\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const targetBlock = 18309917;\n     * const accountInfo = await indexerClient\n     *        .lookupAccountByID(address)\n     *        .round(targetBlock)\n     *        .do();\n     * ```\n     * @param round\n     */ round(round) {\n        this.query.round = round;\n        return this;\n    }\n    /**\n     * Include all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates.\n     *\n     * #### Example 1\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountInfo = await indexerClient\n     *        .lookupAccountByID(address)\n     *        .includeAll(false)\n     *        .do();\n     * ```\n     *\n     * #### Example 2\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountInfo = await indexerClient\n     *        .lookupAccountByID(address)\n     *        .includeAll()\n     *        .do();\n     * ```\n     * @param value\n     */ includeAll(value = true) {\n        this.query[\"include-all\"] = value;\n        return this;\n    }\n    /**\n     * Exclude additional items such as asset holdings, application local data stored for this account, asset parameters created by this account, and application parameters created by this account.\n     *\n     * #### Example 1\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountInfo = await indexerClient\n     *        .lookupAccountByID(address)\n     *        .exclude(\"all\")\n     *        .do();\n     * ```\n     *\n     * #### Example 2\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountInfo = await indexerClient\n     *        .lookupAccountByID(address)\n     *        .exclude(\"assets,created-assets\")\n     *        .do();\n     * ```\n     * @remarks By default, it behaves as exclude=none\n     * @param exclude - Array of `all`, `assets`, `created-assets`, `apps-local-state`, `created-apps`, `none`\n     * @category query\n     */ exclude(exclude) {\n        this.query.exclude = exclude;\n        return this;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    prepare(response) {\n        return (0,_encoding_encoding_js__WEBPACK_IMPORTED_MODULE_1__.decodeJSON)(response.getJSONText(), _models_types_js__WEBPACK_IMPORTED_MODULE_2__.AccountResponse);\n    }\n} //# sourceMappingURL=lookupAccountByID.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9jbGllbnQvdjIvaW5kZXhlci9sb29rdXBBY2NvdW50QnlJRC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQTRDO0FBQ2U7QUFDUDtBQUNyQyxNQUFNRywwQkFBMEJILHVEQUFXQTtJQUN0RDs7Ozs7Ozs7Ozs7O0tBWUMsR0FDREksWUFBWUMsQ0FBQyxFQUFFQyxPQUFPLENBQUU7UUFDcEIsS0FBSyxDQUFDRDtRQUNOLElBQUksQ0FBQ0MsT0FBTyxHQUFHQSxRQUFRQyxRQUFRO0lBQ25DO0lBQ0E7O0tBRUMsR0FDREMsT0FBTztRQUNILE9BQU8sQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDRixPQUFPLENBQUMsQ0FBQztJQUN6QztJQUNBOzs7Ozs7Ozs7Ozs7O0tBYUMsR0FDREcsTUFBTUEsS0FBSyxFQUFFO1FBQ1QsSUFBSSxDQUFDQyxLQUFLLENBQUNELEtBQUssR0FBR0E7UUFDbkIsT0FBTyxJQUFJO0lBQ2Y7SUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0tBcUJDLEdBQ0RFLFdBQVdDLFFBQVEsSUFBSSxFQUFFO1FBQ3JCLElBQUksQ0FBQ0YsS0FBSyxDQUFDLGNBQWMsR0FBR0U7UUFDNUIsT0FBTyxJQUFJO0lBQ2Y7SUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7S0F1QkMsR0FDREMsUUFBUUEsT0FBTyxFQUFFO1FBQ2IsSUFBSSxDQUFDSCxLQUFLLENBQUNHLE9BQU8sR0FBR0E7UUFDckIsT0FBTyxJQUFJO0lBQ2Y7SUFDQSxrREFBa0Q7SUFDbERDLFFBQVFDLFFBQVEsRUFBRTtRQUNkLE9BQU9kLGlFQUFVQSxDQUFDYyxTQUFTQyxXQUFXLElBQUlkLDZEQUFlQTtJQUM3RDtBQUNKLEVBQ0EsNkNBQTZDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWxnb3JhbmQtY3Jvd2RmdW5kaW5nLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vY2xpZW50L3YyL2luZGV4ZXIvbG9va3VwQWNjb3VudEJ5SUQuanM/NWUyZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgSlNPTlJlcXVlc3QgZnJvbSAnLi4vanNvbnJlcXVlc3QuanMnO1xuaW1wb3J0IHsgZGVjb2RlSlNPTiB9IGZyb20gJy4uLy4uLy4uL2VuY29kaW5nL2VuY29kaW5nLmpzJztcbmltcG9ydCB7IEFjY291bnRSZXNwb25zZSB9IGZyb20gJy4vbW9kZWxzL3R5cGVzLmpzJztcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExvb2t1cEFjY291bnRCeUlEIGV4dGVuZHMgSlNPTlJlcXVlc3Qge1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGdpdmVuIGFjY291bnQuXG4gICAgICpcbiAgICAgKiAjIyMjIEV4YW1wbGVcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogY29uc3QgYWRkcmVzcyA9IFwiWEJZTFMyRTZZSTZYWEw1QldDQU1PQTRHVFdIWFdFTlpNWDVVSFhNUk5XV1VRN0JYQ1k1V0M1VEVQQVwiO1xuICAgICAqIGNvbnN0IGFjY291bnRJbmZvID0gYXdhaXQgaW5kZXhlckNsaWVudC5sb29rdXBBY2NvdW50QnlJRChhZGRyZXNzKS5kbygpO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogW1Jlc3BvbnNlIGRhdGEgc2NoZW1hIGRldGFpbHNdKGh0dHBzOi8vZGV2ZWxvcGVyLmFsZ29yYW5kLm9yZy9kb2NzL3Jlc3QtYXBpcy9pbmRleGVyLyNnZXQtdjJhY2NvdW50c2FjY291bnQtaWQpXG4gICAgICogQHBhcmFtIGFjY291bnQgLSBUaGUgYWRkcmVzcyBvZiB0aGUgYWNjb3VudCB0byBsb29rIHVwLlxuICAgICAqIEBjYXRlZ29yeSBHRVRcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihjLCBhY2NvdW50KSB7XG4gICAgICAgIHN1cGVyKGMpO1xuICAgICAgICB0aGlzLmFjY291bnQgPSBhY2NvdW50LnRvU3RyaW5nKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEByZXR1cm5zIGAvdjIvYWNjb3VudHMvJHthY2NvdW50fWBcbiAgICAgKi9cbiAgICBwYXRoKCkge1xuICAgICAgICByZXR1cm4gYC92Mi9hY2NvdW50cy8ke3RoaXMuYWNjb3VudH1gO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTcGVjaWZ5IHJvdW5kIHRvIGZpbHRlciB3aXRoLlxuICAgICAqXG4gICAgICogIyMjIyBFeGFtcGxlXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IGFkZHJlc3MgPSBcIlhCWUxTMkU2WUk2WFhMNUJXQ0FNT0E0R1RXSFhXRU5aTVg1VUhYTVJOV1dVUTdCWENZNVdDNVRFUEFcIjtcbiAgICAgKiBjb25zdCB0YXJnZXRCbG9jayA9IDE4MzA5OTE3O1xuICAgICAqIGNvbnN0IGFjY291bnRJbmZvID0gYXdhaXQgaW5kZXhlckNsaWVudFxuICAgICAqICAgICAgICAubG9va3VwQWNjb3VudEJ5SUQoYWRkcmVzcylcbiAgICAgKiAgICAgICAgLnJvdW5kKHRhcmdldEJsb2NrKVxuICAgICAqICAgICAgICAuZG8oKTtcbiAgICAgKiBgYGBcbiAgICAgKiBAcGFyYW0gcm91bmRcbiAgICAgKi9cbiAgICByb3VuZChyb3VuZCkge1xuICAgICAgICB0aGlzLnF1ZXJ5LnJvdW5kID0gcm91bmQ7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJbmNsdWRlIGFsbCBpdGVtcyBpbmNsdWRpbmcgY2xvc2VkIGFjY291bnRzLCBkZWxldGVkIGFwcGxpY2F0aW9ucywgZGVzdHJveWVkIGFzc2V0cywgb3B0ZWQtb3V0IGFzc2V0IGhvbGRpbmdzLCBhbmQgY2xvc2VkLW91dCBhcHBsaWNhdGlvbiBsb2NhbHN0YXRlcy5cbiAgICAgKlxuICAgICAqICMjIyMgRXhhbXBsZSAxXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IGFkZHJlc3MgPSBcIlhCWUxTMkU2WUk2WFhMNUJXQ0FNT0E0R1RXSFhXRU5aTVg1VUhYTVJOV1dVUTdCWENZNVdDNVRFUEFcIjtcbiAgICAgKiBjb25zdCBhY2NvdW50SW5mbyA9IGF3YWl0IGluZGV4ZXJDbGllbnRcbiAgICAgKiAgICAgICAgLmxvb2t1cEFjY291bnRCeUlEKGFkZHJlc3MpXG4gICAgICogICAgICAgIC5pbmNsdWRlQWxsKGZhbHNlKVxuICAgICAqICAgICAgICAuZG8oKTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqICMjIyMgRXhhbXBsZSAyXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IGFkZHJlc3MgPSBcIlhCWUxTMkU2WUk2WFhMNUJXQ0FNT0E0R1RXSFhXRU5aTVg1VUhYTVJOV1dVUTdCWENZNVdDNVRFUEFcIjtcbiAgICAgKiBjb25zdCBhY2NvdW50SW5mbyA9IGF3YWl0IGluZGV4ZXJDbGllbnRcbiAgICAgKiAgICAgICAgLmxvb2t1cEFjY291bnRCeUlEKGFkZHJlc3MpXG4gICAgICogICAgICAgIC5pbmNsdWRlQWxsKClcbiAgICAgKiAgICAgICAgLmRvKCk7XG4gICAgICogYGBgXG4gICAgICogQHBhcmFtIHZhbHVlXG4gICAgICovXG4gICAgaW5jbHVkZUFsbCh2YWx1ZSA9IHRydWUpIHtcbiAgICAgICAgdGhpcy5xdWVyeVsnaW5jbHVkZS1hbGwnXSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogRXhjbHVkZSBhZGRpdGlvbmFsIGl0ZW1zIHN1Y2ggYXMgYXNzZXQgaG9sZGluZ3MsIGFwcGxpY2F0aW9uIGxvY2FsIGRhdGEgc3RvcmVkIGZvciB0aGlzIGFjY291bnQsIGFzc2V0IHBhcmFtZXRlcnMgY3JlYXRlZCBieSB0aGlzIGFjY291bnQsIGFuZCBhcHBsaWNhdGlvbiBwYXJhbWV0ZXJzIGNyZWF0ZWQgYnkgdGhpcyBhY2NvdW50LlxuICAgICAqXG4gICAgICogIyMjIyBFeGFtcGxlIDFcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogY29uc3QgYWRkcmVzcyA9IFwiWEJZTFMyRTZZSTZYWEw1QldDQU1PQTRHVFdIWFdFTlpNWDVVSFhNUk5XV1VRN0JYQ1k1V0M1VEVQQVwiO1xuICAgICAqIGNvbnN0IGFjY291bnRJbmZvID0gYXdhaXQgaW5kZXhlckNsaWVudFxuICAgICAqICAgICAgICAubG9va3VwQWNjb3VudEJ5SUQoYWRkcmVzcylcbiAgICAgKiAgICAgICAgLmV4Y2x1ZGUoXCJhbGxcIilcbiAgICAgKiAgICAgICAgLmRvKCk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiAjIyMjIEV4YW1wbGUgMlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjb25zdCBhZGRyZXNzID0gXCJYQllMUzJFNllJNlhYTDVCV0NBTU9BNEdUV0hYV0VOWk1YNVVIWE1STldXVVE3QlhDWTVXQzVURVBBXCI7XG4gICAgICogY29uc3QgYWNjb3VudEluZm8gPSBhd2FpdCBpbmRleGVyQ2xpZW50XG4gICAgICogICAgICAgIC5sb29rdXBBY2NvdW50QnlJRChhZGRyZXNzKVxuICAgICAqICAgICAgICAuZXhjbHVkZShcImFzc2V0cyxjcmVhdGVkLWFzc2V0c1wiKVxuICAgICAqICAgICAgICAuZG8oKTtcbiAgICAgKiBgYGBcbiAgICAgKiBAcmVtYXJrcyBCeSBkZWZhdWx0LCBpdCBiZWhhdmVzIGFzIGV4Y2x1ZGU9bm9uZVxuICAgICAqIEBwYXJhbSBleGNsdWRlIC0gQXJyYXkgb2YgYGFsbGAsIGBhc3NldHNgLCBgY3JlYXRlZC1hc3NldHNgLCBgYXBwcy1sb2NhbC1zdGF0ZWAsIGBjcmVhdGVkLWFwcHNgLCBgbm9uZWBcbiAgICAgKiBAY2F0ZWdvcnkgcXVlcnlcbiAgICAgKi9cbiAgICBleGNsdWRlKGV4Y2x1ZGUpIHtcbiAgICAgICAgdGhpcy5xdWVyeS5leGNsdWRlID0gZXhjbHVkZTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjbGFzcy1tZXRob2RzLXVzZS10aGlzXG4gICAgcHJlcGFyZShyZXNwb25zZSkge1xuICAgICAgICByZXR1cm4gZGVjb2RlSlNPTihyZXNwb25zZS5nZXRKU09OVGV4dCgpLCBBY2NvdW50UmVzcG9uc2UpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxvb2t1cEFjY291bnRCeUlELmpzLm1hcCJdLCJuYW1lcyI6WyJKU09OUmVxdWVzdCIsImRlY29kZUpTT04iLCJBY2NvdW50UmVzcG9uc2UiLCJMb29rdXBBY2NvdW50QnlJRCIsImNvbnN0cnVjdG9yIiwiYyIsImFjY291bnQiLCJ0b1N0cmluZyIsInBhdGgiLCJyb3VuZCIsInF1ZXJ5IiwiaW5jbHVkZUFsbCIsInZhbHVlIiwiZXhjbHVkZSIsInByZXBhcmUiLCJyZXNwb25zZSIsImdldEpTT05UZXh0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/client/v2/indexer/lookupAccountByID.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/client/v2/indexer/lookupAccountCreatedApplications.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/client/v2/indexer/lookupAccountCreatedApplications.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ LookupAccountCreatedApplications)\n/* harmony export */ });\n/* harmony import */ var _jsonrequest_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../jsonrequest.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/jsonrequest.js\");\n/* harmony import */ var _encoding_encoding_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../encoding/encoding.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/encoding.js\");\n/* harmony import */ var _models_types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./models/types.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/indexer/models/types.js\");\n\n\n\nclass LookupAccountCreatedApplications extends _jsonrequest_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Returns application information created by the given account.\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountCreatedApps = await indexerClient.lookupAccountCreatedApplications(address).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2accountsaccount-idcreated-applications)\n     * @param account - The address of the account to look up.\n     * @category GET\n     */ constructor(c, account){\n        super(c);\n        this.account = account.toString();\n    }\n    /**\n     * @returns `/v2/accounts/${account}/created-applications`\n     */ path() {\n        return `/v2/accounts/${this.account}/created-applications`;\n    }\n    /**\n     * Add a limit for filter.\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const maxResults = 20;\n     * const accountAssets = await indexerClient\n     *        .lookupAccountCreatedApplications(address)\n     *        .limit(maxResults)\n     *        .do();\n     * ```\n     *\n     * @param limit - maximum number of results to return.\n     * @category query\n     */ limit(limit) {\n        this.query.limit = limit;\n        return this;\n    }\n    /**\n     * Specify round to filter with.\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const targetBlock = 18309917;\n     * const accountAssets = await indexerClient\n     *        .lookupAccountCreatedApplications(address)\n     *        .round(targetBlock)\n     *        .do();\n     * ```\n     * @param round\n     * @category query\n     */ round(round) {\n        this.query.round = round;\n        return this;\n    }\n    /**\n     * Specify the next page of results.\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const maxResults = 20;\n     *\n     * const accountAssetsPage1 = await indexerClient\n     *        .lookupAccountCreatedApplications(address)\n     *        .limit(maxResults)\n     *        .do();\n     *\n     * const accountAssetsPage2 = await indexerClient\n     *        .lookupAccountCreatedApplications(address)\n     *        .limit(maxResults)\n     *        .next(accountAssetsPage1[\"next-token\"])\n     *        .do();\n     * ```\n     * @param nextToken - provided by the previous results.\n     * @category query\n     */ nextToken(nextToken) {\n        this.query.next = nextToken;\n        return this;\n    }\n    /**\n     * Include all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountAssets = await indexerClient\n     *        .lookupAccountCreatedApplications(address)\n     *        .includeAll(false)\n     *        .do();\n     * ```\n     * @param value\n     * @category query\n     */ includeAll(value = true) {\n        this.query[\"include-all\"] = value;\n        return this;\n    }\n    /**\n     * Specify an applicationID to search for.\n     *\n     * #### Example\n     * ```typescript\n     * const applicationID = 163650;\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountApplications = await indexerClient\n     *        .lookupAccountAppLocalStates(address)\n     *        .applicationID(applicationID)\n     *        .do();\n     * ```\n     * @param index - the applicationID\n     * @category query\n     */ applicationID(index) {\n        this.query[\"application-id\"] = index;\n        return this;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    prepare(response) {\n        return (0,_encoding_encoding_js__WEBPACK_IMPORTED_MODULE_1__.decodeJSON)(response.getJSONText(), _models_types_js__WEBPACK_IMPORTED_MODULE_2__.ApplicationsResponse);\n    }\n} //# sourceMappingURL=lookupAccountCreatedApplications.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9jbGllbnQvdjIvaW5kZXhlci9sb29rdXBBY2NvdW50Q3JlYXRlZEFwcGxpY2F0aW9ucy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQTRDO0FBQ2U7QUFDRjtBQUMxQyxNQUFNRyx5Q0FBeUNILHVEQUFXQTtJQUNyRTs7Ozs7Ozs7Ozs7O0tBWUMsR0FDREksWUFBWUMsQ0FBQyxFQUFFQyxPQUFPLENBQUU7UUFDcEIsS0FBSyxDQUFDRDtRQUNOLElBQUksQ0FBQ0MsT0FBTyxHQUFHQSxRQUFRQyxRQUFRO0lBQ25DO0lBQ0E7O0tBRUMsR0FDREMsT0FBTztRQUNILE9BQU8sQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDRixPQUFPLENBQUMscUJBQXFCLENBQUM7SUFDOUQ7SUFDQTs7Ozs7Ozs7Ozs7Ozs7O0tBZUMsR0FDREcsTUFBTUEsS0FBSyxFQUFFO1FBQ1QsSUFBSSxDQUFDQyxLQUFLLENBQUNELEtBQUssR0FBR0E7UUFDbkIsT0FBTyxJQUFJO0lBQ2Y7SUFDQTs7Ozs7Ozs7Ozs7Ozs7S0FjQyxHQUNERSxNQUFNQSxLQUFLLEVBQUU7UUFDVCxJQUFJLENBQUNELEtBQUssQ0FBQ0MsS0FBSyxHQUFHQTtRQUNuQixPQUFPLElBQUk7SUFDZjtJQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7S0FxQkMsR0FDREMsVUFBVUEsU0FBUyxFQUFFO1FBQ2pCLElBQUksQ0FBQ0YsS0FBSyxDQUFDRyxJQUFJLEdBQUdEO1FBQ2xCLE9BQU8sSUFBSTtJQUNmO0lBQ0E7Ozs7Ozs7Ozs7Ozs7S0FhQyxHQUNERSxXQUFXQyxRQUFRLElBQUksRUFBRTtRQUNyQixJQUFJLENBQUNMLEtBQUssQ0FBQyxjQUFjLEdBQUdLO1FBQzVCLE9BQU8sSUFBSTtJQUNmO0lBQ0E7Ozs7Ozs7Ozs7Ozs7O0tBY0MsR0FDREMsY0FBY0MsS0FBSyxFQUFFO1FBQ2pCLElBQUksQ0FBQ1AsS0FBSyxDQUFDLGlCQUFpQixHQUFHTztRQUMvQixPQUFPLElBQUk7SUFDZjtJQUNBLGtEQUFrRDtJQUNsREMsUUFBUUMsUUFBUSxFQUFFO1FBQ2QsT0FBT2xCLGlFQUFVQSxDQUFDa0IsU0FBU0MsV0FBVyxJQUFJbEIsa0VBQW9CQTtJQUNsRTtBQUNKLEVBQ0EsNERBQTREIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWxnb3JhbmQtY3Jvd2RmdW5kaW5nLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vY2xpZW50L3YyL2luZGV4ZXIvbG9va3VwQWNjb3VudENyZWF0ZWRBcHBsaWNhdGlvbnMuanM/M2IyNiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgSlNPTlJlcXVlc3QgZnJvbSAnLi4vanNvbnJlcXVlc3QuanMnO1xuaW1wb3J0IHsgZGVjb2RlSlNPTiB9IGZyb20gJy4uLy4uLy4uL2VuY29kaW5nL2VuY29kaW5nLmpzJztcbmltcG9ydCB7IEFwcGxpY2F0aW9uc1Jlc3BvbnNlIH0gZnJvbSAnLi9tb2RlbHMvdHlwZXMuanMnO1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTG9va3VwQWNjb3VudENyZWF0ZWRBcHBsaWNhdGlvbnMgZXh0ZW5kcyBKU09OUmVxdWVzdCB7XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhcHBsaWNhdGlvbiBpbmZvcm1hdGlvbiBjcmVhdGVkIGJ5IHRoZSBnaXZlbiBhY2NvdW50LlxuICAgICAqXG4gICAgICogIyMjIyBFeGFtcGxlXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IGFkZHJlc3MgPSBcIlhCWUxTMkU2WUk2WFhMNUJXQ0FNT0E0R1RXSFhXRU5aTVg1VUhYTVJOV1dVUTdCWENZNVdDNVRFUEFcIjtcbiAgICAgKiBjb25zdCBhY2NvdW50Q3JlYXRlZEFwcHMgPSBhd2FpdCBpbmRleGVyQ2xpZW50Lmxvb2t1cEFjY291bnRDcmVhdGVkQXBwbGljYXRpb25zKGFkZHJlc3MpLmRvKCk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBbUmVzcG9uc2UgZGF0YSBzY2hlbWEgZGV0YWlsc10oaHR0cHM6Ly9kZXZlbG9wZXIuYWxnb3JhbmQub3JnL2RvY3MvcmVzdC1hcGlzL2luZGV4ZXIvI2dldC12MmFjY291bnRzYWNjb3VudC1pZGNyZWF0ZWQtYXBwbGljYXRpb25zKVxuICAgICAqIEBwYXJhbSBhY2NvdW50IC0gVGhlIGFkZHJlc3Mgb2YgdGhlIGFjY291bnQgdG8gbG9vayB1cC5cbiAgICAgKiBAY2F0ZWdvcnkgR0VUXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoYywgYWNjb3VudCkge1xuICAgICAgICBzdXBlcihjKTtcbiAgICAgICAgdGhpcy5hY2NvdW50ID0gYWNjb3VudC50b1N0cmluZygpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcmV0dXJucyBgL3YyL2FjY291bnRzLyR7YWNjb3VudH0vY3JlYXRlZC1hcHBsaWNhdGlvbnNgXG4gICAgICovXG4gICAgcGF0aCgpIHtcbiAgICAgICAgcmV0dXJuIGAvdjIvYWNjb3VudHMvJHt0aGlzLmFjY291bnR9L2NyZWF0ZWQtYXBwbGljYXRpb25zYDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQWRkIGEgbGltaXQgZm9yIGZpbHRlci5cbiAgICAgKlxuICAgICAqICMjIyMgRXhhbXBsZVxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjb25zdCBhZGRyZXNzID0gXCJYQllMUzJFNllJNlhYTDVCV0NBTU9BNEdUV0hYV0VOWk1YNVVIWE1STldXVVE3QlhDWTVXQzVURVBBXCI7XG4gICAgICogY29uc3QgbWF4UmVzdWx0cyA9IDIwO1xuICAgICAqIGNvbnN0IGFjY291bnRBc3NldHMgPSBhd2FpdCBpbmRleGVyQ2xpZW50XG4gICAgICogICAgICAgIC5sb29rdXBBY2NvdW50Q3JlYXRlZEFwcGxpY2F0aW9ucyhhZGRyZXNzKVxuICAgICAqICAgICAgICAubGltaXQobWF4UmVzdWx0cylcbiAgICAgKiAgICAgICAgLmRvKCk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbGltaXQgLSBtYXhpbXVtIG51bWJlciBvZiByZXN1bHRzIHRvIHJldHVybi5cbiAgICAgKiBAY2F0ZWdvcnkgcXVlcnlcbiAgICAgKi9cbiAgICBsaW1pdChsaW1pdCkge1xuICAgICAgICB0aGlzLnF1ZXJ5LmxpbWl0ID0gbGltaXQ7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTcGVjaWZ5IHJvdW5kIHRvIGZpbHRlciB3aXRoLlxuICAgICAqXG4gICAgICogIyMjIyBFeGFtcGxlXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IGFkZHJlc3MgPSBcIlhCWUxTMkU2WUk2WFhMNUJXQ0FNT0E0R1RXSFhXRU5aTVg1VUhYTVJOV1dVUTdCWENZNVdDNVRFUEFcIjtcbiAgICAgKiBjb25zdCB0YXJnZXRCbG9jayA9IDE4MzA5OTE3O1xuICAgICAqIGNvbnN0IGFjY291bnRBc3NldHMgPSBhd2FpdCBpbmRleGVyQ2xpZW50XG4gICAgICogICAgICAgIC5sb29rdXBBY2NvdW50Q3JlYXRlZEFwcGxpY2F0aW9ucyhhZGRyZXNzKVxuICAgICAqICAgICAgICAucm91bmQodGFyZ2V0QmxvY2spXG4gICAgICogICAgICAgIC5kbygpO1xuICAgICAqIGBgYFxuICAgICAqIEBwYXJhbSByb3VuZFxuICAgICAqIEBjYXRlZ29yeSBxdWVyeVxuICAgICAqL1xuICAgIHJvdW5kKHJvdW5kKSB7XG4gICAgICAgIHRoaXMucXVlcnkucm91bmQgPSByb3VuZDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNwZWNpZnkgdGhlIG5leHQgcGFnZSBvZiByZXN1bHRzLlxuICAgICAqXG4gICAgICogIyMjIyBFeGFtcGxlXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IGFkZHJlc3MgPSBcIlhCWUxTMkU2WUk2WFhMNUJXQ0FNT0E0R1RXSFhXRU5aTVg1VUhYTVJOV1dVUTdCWENZNVdDNVRFUEFcIjtcbiAgICAgKiBjb25zdCBtYXhSZXN1bHRzID0gMjA7XG4gICAgICpcbiAgICAgKiBjb25zdCBhY2NvdW50QXNzZXRzUGFnZTEgPSBhd2FpdCBpbmRleGVyQ2xpZW50XG4gICAgICogICAgICAgIC5sb29rdXBBY2NvdW50Q3JlYXRlZEFwcGxpY2F0aW9ucyhhZGRyZXNzKVxuICAgICAqICAgICAgICAubGltaXQobWF4UmVzdWx0cylcbiAgICAgKiAgICAgICAgLmRvKCk7XG4gICAgICpcbiAgICAgKiBjb25zdCBhY2NvdW50QXNzZXRzUGFnZTIgPSBhd2FpdCBpbmRleGVyQ2xpZW50XG4gICAgICogICAgICAgIC5sb29rdXBBY2NvdW50Q3JlYXRlZEFwcGxpY2F0aW9ucyhhZGRyZXNzKVxuICAgICAqICAgICAgICAubGltaXQobWF4UmVzdWx0cylcbiAgICAgKiAgICAgICAgLm5leHQoYWNjb3VudEFzc2V0c1BhZ2UxW1wibmV4dC10b2tlblwiXSlcbiAgICAgKiAgICAgICAgLmRvKCk7XG4gICAgICogYGBgXG4gICAgICogQHBhcmFtIG5leHRUb2tlbiAtIHByb3ZpZGVkIGJ5IHRoZSBwcmV2aW91cyByZXN1bHRzLlxuICAgICAqIEBjYXRlZ29yeSBxdWVyeVxuICAgICAqL1xuICAgIG5leHRUb2tlbihuZXh0VG9rZW4pIHtcbiAgICAgICAgdGhpcy5xdWVyeS5uZXh0ID0gbmV4dFRva2VuO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogSW5jbHVkZSBhbGwgaXRlbXMgaW5jbHVkaW5nIGNsb3NlZCBhY2NvdW50cywgZGVsZXRlZCBhcHBsaWNhdGlvbnMsIGRlc3Ryb3llZCBhc3NldHMsIG9wdGVkLW91dCBhc3NldCBob2xkaW5ncywgYW5kIGNsb3NlZC1vdXQgYXBwbGljYXRpb24gbG9jYWxzdGF0ZXNcbiAgICAgKlxuICAgICAqICMjIyMgRXhhbXBsZVxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjb25zdCBhZGRyZXNzID0gXCJYQllMUzJFNllJNlhYTDVCV0NBTU9BNEdUV0hYV0VOWk1YNVVIWE1STldXVVE3QlhDWTVXQzVURVBBXCI7XG4gICAgICogY29uc3QgYWNjb3VudEFzc2V0cyA9IGF3YWl0IGluZGV4ZXJDbGllbnRcbiAgICAgKiAgICAgICAgLmxvb2t1cEFjY291bnRDcmVhdGVkQXBwbGljYXRpb25zKGFkZHJlc3MpXG4gICAgICogICAgICAgIC5pbmNsdWRlQWxsKGZhbHNlKVxuICAgICAqICAgICAgICAuZG8oKTtcbiAgICAgKiBgYGBcbiAgICAgKiBAcGFyYW0gdmFsdWVcbiAgICAgKiBAY2F0ZWdvcnkgcXVlcnlcbiAgICAgKi9cbiAgICBpbmNsdWRlQWxsKHZhbHVlID0gdHJ1ZSkge1xuICAgICAgICB0aGlzLnF1ZXJ5WydpbmNsdWRlLWFsbCddID0gdmFsdWU7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTcGVjaWZ5IGFuIGFwcGxpY2F0aW9uSUQgdG8gc2VhcmNoIGZvci5cbiAgICAgKlxuICAgICAqICMjIyMgRXhhbXBsZVxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjb25zdCBhcHBsaWNhdGlvbklEID0gMTYzNjUwO1xuICAgICAqIGNvbnN0IGFkZHJlc3MgPSBcIlhCWUxTMkU2WUk2WFhMNUJXQ0FNT0E0R1RXSFhXRU5aTVg1VUhYTVJOV1dVUTdCWENZNVdDNVRFUEFcIjtcbiAgICAgKiBjb25zdCBhY2NvdW50QXBwbGljYXRpb25zID0gYXdhaXQgaW5kZXhlckNsaWVudFxuICAgICAqICAgICAgICAubG9va3VwQWNjb3VudEFwcExvY2FsU3RhdGVzKGFkZHJlc3MpXG4gICAgICogICAgICAgIC5hcHBsaWNhdGlvbklEKGFwcGxpY2F0aW9uSUQpXG4gICAgICogICAgICAgIC5kbygpO1xuICAgICAqIGBgYFxuICAgICAqIEBwYXJhbSBpbmRleCAtIHRoZSBhcHBsaWNhdGlvbklEXG4gICAgICogQGNhdGVnb3J5IHF1ZXJ5XG4gICAgICovXG4gICAgYXBwbGljYXRpb25JRChpbmRleCkge1xuICAgICAgICB0aGlzLnF1ZXJ5WydhcHBsaWNhdGlvbi1pZCddID0gaW5kZXg7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY2xhc3MtbWV0aG9kcy11c2UtdGhpc1xuICAgIHByZXBhcmUocmVzcG9uc2UpIHtcbiAgICAgICAgcmV0dXJuIGRlY29kZUpTT04ocmVzcG9uc2UuZ2V0SlNPTlRleHQoKSwgQXBwbGljYXRpb25zUmVzcG9uc2UpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxvb2t1cEFjY291bnRDcmVhdGVkQXBwbGljYXRpb25zLmpzLm1hcCJdLCJuYW1lcyI6WyJKU09OUmVxdWVzdCIsImRlY29kZUpTT04iLCJBcHBsaWNhdGlvbnNSZXNwb25zZSIsIkxvb2t1cEFjY291bnRDcmVhdGVkQXBwbGljYXRpb25zIiwiY29uc3RydWN0b3IiLCJjIiwiYWNjb3VudCIsInRvU3RyaW5nIiwicGF0aCIsImxpbWl0IiwicXVlcnkiLCJyb3VuZCIsIm5leHRUb2tlbiIsIm5leHQiLCJpbmNsdWRlQWxsIiwidmFsdWUiLCJhcHBsaWNhdGlvbklEIiwiaW5kZXgiLCJwcmVwYXJlIiwicmVzcG9uc2UiLCJnZXRKU09OVGV4dCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/client/v2/indexer/lookupAccountCreatedApplications.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/client/v2/indexer/lookupAccountCreatedAssets.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/client/v2/indexer/lookupAccountCreatedAssets.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ LookupAccountCreatedAssets)\n/* harmony export */ });\n/* harmony import */ var _jsonrequest_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../jsonrequest.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/jsonrequest.js\");\n/* harmony import */ var _encoding_encoding_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../encoding/encoding.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/encoding.js\");\n/* harmony import */ var _models_types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./models/types.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/indexer/models/types.js\");\n\n\n\nclass LookupAccountCreatedAssets extends _jsonrequest_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Returns asset information created by the given account.\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountCreatedAssets = await indexerClient.lookupAccountCreatedAssets(address).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2accountsaccount-idcreated-assets)\n     * @param account - The address of the account to look up.\n     * @category GET\n     */ constructor(c, account){\n        super(c);\n        this.account = account.toString();\n    }\n    /**\n     * @returns `/v2/accounts/${account}/created-assets`\n     */ path() {\n        return `/v2/accounts/${this.account}/created-assets`;\n    }\n    /**\n     * Add a limit for filter.\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const maxResults = 20;\n     * const accountAssets = await indexerClient\n     *        .lookupAccountCreatedAssets(address)\n     *        .limit(maxResults)\n     *        .do();\n     * ```\n     *\n     * @param limit - maximum number of results to return.\n     * @category query\n     */ limit(limit) {\n        this.query.limit = limit;\n        return this;\n    }\n    /**\n     * Specify round to filter with.\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const targetBlock = 18309917;\n     * const accountAssets = await indexerClient\n     *        .lookupAccountCreatedAssets(address)\n     *        .round(targetBlock)\n     *        .do();\n     * ```\n     * @param round\n     * @category query\n     */ round(round) {\n        this.query.round = round;\n        return this;\n    }\n    /**\n     * Specify the next page of results.\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const maxResults = 20;\n     *\n     * const accountAssetsPage1 = await indexerClient\n     *        .lookupAccountCreatedAssets(address)\n     *        .limit(maxResults)\n     *        .do();\n     * ```\n     *\n     * const accountAssetsPage2 = await indexerClient\n     *        .lookupAccountCreatedAssets(address)\n     *        .limit(maxResults)\n     *        .next(accountAssetsPage1[\"next-token\"])\n     *        .do();\n     * ```\n     * @param nextToken - provided by the previous results.\n     * @category query\n     */ nextToken(nextToken) {\n        this.query.next = nextToken;\n        return this;\n    }\n    /**\n     * Include all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountAssets = await indexerClient\n     *        .lookupAccountCreatedAssets(address)\n     *        .includeAll(false)\n     *        .do();\n     * ```\n     * @param value\n     * @category query\n     */ includeAll(value = true) {\n        this.query[\"include-all\"] = value;\n        return this;\n    }\n    /**\n     * Specify an assetID to search for.\n     *\n     * #### Example\n     * ```typescript\n     * const assetID = 163650;\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const assetAssets = await indexerClient\n     *        .lookupAccountCreatedAssets(address)\n     *        .assetID(assetID)\n     *        .do();\n     * ```\n     * @param index - the assetID\n     * @category query\n     */ assetID(index) {\n        this.query[\"asset-id\"] = index;\n        return this;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    prepare(response) {\n        return (0,_encoding_encoding_js__WEBPACK_IMPORTED_MODULE_1__.decodeJSON)(response.getJSONText(), _models_types_js__WEBPACK_IMPORTED_MODULE_2__.AssetsResponse);\n    }\n} //# sourceMappingURL=lookupAccountCreatedAssets.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9jbGllbnQvdjIvaW5kZXhlci9sb29rdXBBY2NvdW50Q3JlYXRlZEFzc2V0cy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQTRDO0FBQ2U7QUFDUjtBQUNwQyxNQUFNRyxtQ0FBbUNILHVEQUFXQTtJQUMvRDs7Ozs7Ozs7Ozs7O0tBWUMsR0FDREksWUFBWUMsQ0FBQyxFQUFFQyxPQUFPLENBQUU7UUFDcEIsS0FBSyxDQUFDRDtRQUNOLElBQUksQ0FBQ0MsT0FBTyxHQUFHQSxRQUFRQyxRQUFRO0lBQ25DO0lBQ0E7O0tBRUMsR0FDREMsT0FBTztRQUNILE9BQU8sQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDRixPQUFPLENBQUMsZUFBZSxDQUFDO0lBQ3hEO0lBQ0E7Ozs7Ozs7Ozs7Ozs7OztLQWVDLEdBQ0RHLE1BQU1BLEtBQUssRUFBRTtRQUNULElBQUksQ0FBQ0MsS0FBSyxDQUFDRCxLQUFLLEdBQUdBO1FBQ25CLE9BQU8sSUFBSTtJQUNmO0lBQ0E7Ozs7Ozs7Ozs7Ozs7O0tBY0MsR0FDREUsTUFBTUEsS0FBSyxFQUFFO1FBQ1QsSUFBSSxDQUFDRCxLQUFLLENBQUNDLEtBQUssR0FBR0E7UUFDbkIsT0FBTyxJQUFJO0lBQ2Y7SUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztLQXNCQyxHQUNEQyxVQUFVQSxTQUFTLEVBQUU7UUFDakIsSUFBSSxDQUFDRixLQUFLLENBQUNHLElBQUksR0FBR0Q7UUFDbEIsT0FBTyxJQUFJO0lBQ2Y7SUFDQTs7Ozs7Ozs7Ozs7OztLQWFDLEdBQ0RFLFdBQVdDLFFBQVEsSUFBSSxFQUFFO1FBQ3JCLElBQUksQ0FBQ0wsS0FBSyxDQUFDLGNBQWMsR0FBR0s7UUFDNUIsT0FBTyxJQUFJO0lBQ2Y7SUFDQTs7Ozs7Ozs7Ozs7Ozs7S0FjQyxHQUNEQyxRQUFRQyxLQUFLLEVBQUU7UUFDWCxJQUFJLENBQUNQLEtBQUssQ0FBQyxXQUFXLEdBQUdPO1FBQ3pCLE9BQU8sSUFBSTtJQUNmO0lBQ0Esa0RBQWtEO0lBQ2xEQyxRQUFRQyxRQUFRLEVBQUU7UUFDZCxPQUFPbEIsaUVBQVVBLENBQUNrQixTQUFTQyxXQUFXLElBQUlsQiw0REFBY0E7SUFDNUQ7QUFDSixFQUNBLHNEQUFzRCIsInNvdXJjZXMiOlsid2VicGFjazovL2FsZ29yYW5kLWNyb3dkZnVuZGluZy1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9hbGdvc2RrL2Rpc3QvZXNtL2NsaWVudC92Mi9pbmRleGVyL2xvb2t1cEFjY291bnRDcmVhdGVkQXNzZXRzLmpzP2JmZTciXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEpTT05SZXF1ZXN0IGZyb20gJy4uL2pzb25yZXF1ZXN0LmpzJztcbmltcG9ydCB7IGRlY29kZUpTT04gfSBmcm9tICcuLi8uLi8uLi9lbmNvZGluZy9lbmNvZGluZy5qcyc7XG5pbXBvcnQgeyBBc3NldHNSZXNwb25zZSB9IGZyb20gJy4vbW9kZWxzL3R5cGVzLmpzJztcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExvb2t1cEFjY291bnRDcmVhdGVkQXNzZXRzIGV4dGVuZHMgSlNPTlJlcXVlc3Qge1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgYXNzZXQgaW5mb3JtYXRpb24gY3JlYXRlZCBieSB0aGUgZ2l2ZW4gYWNjb3VudC5cbiAgICAgKlxuICAgICAqICMjIyMgRXhhbXBsZVxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjb25zdCBhZGRyZXNzID0gXCJYQllMUzJFNllJNlhYTDVCV0NBTU9BNEdUV0hYV0VOWk1YNVVIWE1STldXVVE3QlhDWTVXQzVURVBBXCI7XG4gICAgICogY29uc3QgYWNjb3VudENyZWF0ZWRBc3NldHMgPSBhd2FpdCBpbmRleGVyQ2xpZW50Lmxvb2t1cEFjY291bnRDcmVhdGVkQXNzZXRzKGFkZHJlc3MpLmRvKCk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBbUmVzcG9uc2UgZGF0YSBzY2hlbWEgZGV0YWlsc10oaHR0cHM6Ly9kZXZlbG9wZXIuYWxnb3JhbmQub3JnL2RvY3MvcmVzdC1hcGlzL2luZGV4ZXIvI2dldC12MmFjY291bnRzYWNjb3VudC1pZGNyZWF0ZWQtYXNzZXRzKVxuICAgICAqIEBwYXJhbSBhY2NvdW50IC0gVGhlIGFkZHJlc3Mgb2YgdGhlIGFjY291bnQgdG8gbG9vayB1cC5cbiAgICAgKiBAY2F0ZWdvcnkgR0VUXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoYywgYWNjb3VudCkge1xuICAgICAgICBzdXBlcihjKTtcbiAgICAgICAgdGhpcy5hY2NvdW50ID0gYWNjb3VudC50b1N0cmluZygpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcmV0dXJucyBgL3YyL2FjY291bnRzLyR7YWNjb3VudH0vY3JlYXRlZC1hc3NldHNgXG4gICAgICovXG4gICAgcGF0aCgpIHtcbiAgICAgICAgcmV0dXJuIGAvdjIvYWNjb3VudHMvJHt0aGlzLmFjY291bnR9L2NyZWF0ZWQtYXNzZXRzYDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQWRkIGEgbGltaXQgZm9yIGZpbHRlci5cbiAgICAgKlxuICAgICAqICMjIyMgRXhhbXBsZVxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjb25zdCBhZGRyZXNzID0gXCJYQllMUzJFNllJNlhYTDVCV0NBTU9BNEdUV0hYV0VOWk1YNVVIWE1STldXVVE3QlhDWTVXQzVURVBBXCI7XG4gICAgICogY29uc3QgbWF4UmVzdWx0cyA9IDIwO1xuICAgICAqIGNvbnN0IGFjY291bnRBc3NldHMgPSBhd2FpdCBpbmRleGVyQ2xpZW50XG4gICAgICogICAgICAgIC5sb29rdXBBY2NvdW50Q3JlYXRlZEFzc2V0cyhhZGRyZXNzKVxuICAgICAqICAgICAgICAubGltaXQobWF4UmVzdWx0cylcbiAgICAgKiAgICAgICAgLmRvKCk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbGltaXQgLSBtYXhpbXVtIG51bWJlciBvZiByZXN1bHRzIHRvIHJldHVybi5cbiAgICAgKiBAY2F0ZWdvcnkgcXVlcnlcbiAgICAgKi9cbiAgICBsaW1pdChsaW1pdCkge1xuICAgICAgICB0aGlzLnF1ZXJ5LmxpbWl0ID0gbGltaXQ7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTcGVjaWZ5IHJvdW5kIHRvIGZpbHRlciB3aXRoLlxuICAgICAqXG4gICAgICogIyMjIyBFeGFtcGxlXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IGFkZHJlc3MgPSBcIlhCWUxTMkU2WUk2WFhMNUJXQ0FNT0E0R1RXSFhXRU5aTVg1VUhYTVJOV1dVUTdCWENZNVdDNVRFUEFcIjtcbiAgICAgKiBjb25zdCB0YXJnZXRCbG9jayA9IDE4MzA5OTE3O1xuICAgICAqIGNvbnN0IGFjY291bnRBc3NldHMgPSBhd2FpdCBpbmRleGVyQ2xpZW50XG4gICAgICogICAgICAgIC5sb29rdXBBY2NvdW50Q3JlYXRlZEFzc2V0cyhhZGRyZXNzKVxuICAgICAqICAgICAgICAucm91bmQodGFyZ2V0QmxvY2spXG4gICAgICogICAgICAgIC5kbygpO1xuICAgICAqIGBgYFxuICAgICAqIEBwYXJhbSByb3VuZFxuICAgICAqIEBjYXRlZ29yeSBxdWVyeVxuICAgICAqL1xuICAgIHJvdW5kKHJvdW5kKSB7XG4gICAgICAgIHRoaXMucXVlcnkucm91bmQgPSByb3VuZDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNwZWNpZnkgdGhlIG5leHQgcGFnZSBvZiByZXN1bHRzLlxuICAgICAqXG4gICAgICogIyMjIyBFeGFtcGxlXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IGFkZHJlc3MgPSBcIlhCWUxTMkU2WUk2WFhMNUJXQ0FNT0E0R1RXSFhXRU5aTVg1VUhYTVJOV1dVUTdCWENZNVdDNVRFUEFcIjtcbiAgICAgKiBjb25zdCBtYXhSZXN1bHRzID0gMjA7XG4gICAgICpcbiAgICAgKiBjb25zdCBhY2NvdW50QXNzZXRzUGFnZTEgPSBhd2FpdCBpbmRleGVyQ2xpZW50XG4gICAgICogICAgICAgIC5sb29rdXBBY2NvdW50Q3JlYXRlZEFzc2V0cyhhZGRyZXNzKVxuICAgICAqICAgICAgICAubGltaXQobWF4UmVzdWx0cylcbiAgICAgKiAgICAgICAgLmRvKCk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBjb25zdCBhY2NvdW50QXNzZXRzUGFnZTIgPSBhd2FpdCBpbmRleGVyQ2xpZW50XG4gICAgICogICAgICAgIC5sb29rdXBBY2NvdW50Q3JlYXRlZEFzc2V0cyhhZGRyZXNzKVxuICAgICAqICAgICAgICAubGltaXQobWF4UmVzdWx0cylcbiAgICAgKiAgICAgICAgLm5leHQoYWNjb3VudEFzc2V0c1BhZ2UxW1wibmV4dC10b2tlblwiXSlcbiAgICAgKiAgICAgICAgLmRvKCk7XG4gICAgICogYGBgXG4gICAgICogQHBhcmFtIG5leHRUb2tlbiAtIHByb3ZpZGVkIGJ5IHRoZSBwcmV2aW91cyByZXN1bHRzLlxuICAgICAqIEBjYXRlZ29yeSBxdWVyeVxuICAgICAqL1xuICAgIG5leHRUb2tlbihuZXh0VG9rZW4pIHtcbiAgICAgICAgdGhpcy5xdWVyeS5uZXh0ID0gbmV4dFRva2VuO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogSW5jbHVkZSBhbGwgaXRlbXMgaW5jbHVkaW5nIGNsb3NlZCBhY2NvdW50cywgZGVsZXRlZCBhcHBsaWNhdGlvbnMsIGRlc3Ryb3llZCBhc3NldHMsIG9wdGVkLW91dCBhc3NldCBob2xkaW5ncywgYW5kIGNsb3NlZC1vdXQgYXBwbGljYXRpb24gbG9jYWxzdGF0ZXNcbiAgICAgKlxuICAgICAqICMjIyMgRXhhbXBsZVxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjb25zdCBhZGRyZXNzID0gXCJYQllMUzJFNllJNlhYTDVCV0NBTU9BNEdUV0hYV0VOWk1YNVVIWE1STldXVVE3QlhDWTVXQzVURVBBXCI7XG4gICAgICogY29uc3QgYWNjb3VudEFzc2V0cyA9IGF3YWl0IGluZGV4ZXJDbGllbnRcbiAgICAgKiAgICAgICAgLmxvb2t1cEFjY291bnRDcmVhdGVkQXNzZXRzKGFkZHJlc3MpXG4gICAgICogICAgICAgIC5pbmNsdWRlQWxsKGZhbHNlKVxuICAgICAqICAgICAgICAuZG8oKTtcbiAgICAgKiBgYGBcbiAgICAgKiBAcGFyYW0gdmFsdWVcbiAgICAgKiBAY2F0ZWdvcnkgcXVlcnlcbiAgICAgKi9cbiAgICBpbmNsdWRlQWxsKHZhbHVlID0gdHJ1ZSkge1xuICAgICAgICB0aGlzLnF1ZXJ5WydpbmNsdWRlLWFsbCddID0gdmFsdWU7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTcGVjaWZ5IGFuIGFzc2V0SUQgdG8gc2VhcmNoIGZvci5cbiAgICAgKlxuICAgICAqICMjIyMgRXhhbXBsZVxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjb25zdCBhc3NldElEID0gMTYzNjUwO1xuICAgICAqIGNvbnN0IGFkZHJlc3MgPSBcIlhCWUxTMkU2WUk2WFhMNUJXQ0FNT0E0R1RXSFhXRU5aTVg1VUhYTVJOV1dVUTdCWENZNVdDNVRFUEFcIjtcbiAgICAgKiBjb25zdCBhc3NldEFzc2V0cyA9IGF3YWl0IGluZGV4ZXJDbGllbnRcbiAgICAgKiAgICAgICAgLmxvb2t1cEFjY291bnRDcmVhdGVkQXNzZXRzKGFkZHJlc3MpXG4gICAgICogICAgICAgIC5hc3NldElEKGFzc2V0SUQpXG4gICAgICogICAgICAgIC5kbygpO1xuICAgICAqIGBgYFxuICAgICAqIEBwYXJhbSBpbmRleCAtIHRoZSBhc3NldElEXG4gICAgICogQGNhdGVnb3J5IHF1ZXJ5XG4gICAgICovXG4gICAgYXNzZXRJRChpbmRleCkge1xuICAgICAgICB0aGlzLnF1ZXJ5Wydhc3NldC1pZCddID0gaW5kZXg7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY2xhc3MtbWV0aG9kcy11c2UtdGhpc1xuICAgIHByZXBhcmUocmVzcG9uc2UpIHtcbiAgICAgICAgcmV0dXJuIGRlY29kZUpTT04ocmVzcG9uc2UuZ2V0SlNPTlRleHQoKSwgQXNzZXRzUmVzcG9uc2UpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxvb2t1cEFjY291bnRDcmVhdGVkQXNzZXRzLmpzLm1hcCJdLCJuYW1lcyI6WyJKU09OUmVxdWVzdCIsImRlY29kZUpTT04iLCJBc3NldHNSZXNwb25zZSIsIkxvb2t1cEFjY291bnRDcmVhdGVkQXNzZXRzIiwiY29uc3RydWN0b3IiLCJjIiwiYWNjb3VudCIsInRvU3RyaW5nIiwicGF0aCIsImxpbWl0IiwicXVlcnkiLCJyb3VuZCIsIm5leHRUb2tlbiIsIm5leHQiLCJpbmNsdWRlQWxsIiwidmFsdWUiLCJhc3NldElEIiwiaW5kZXgiLCJwcmVwYXJlIiwicmVzcG9uc2UiLCJnZXRKU09OVGV4dCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/client/v2/indexer/lookupAccountCreatedAssets.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/client/v2/indexer/lookupAccountTransactions.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/client/v2/indexer/lookupAccountTransactions.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   base64StringFunnel: () => (/* binding */ base64StringFunnel),\n/* harmony export */   \"default\": () => (/* binding */ LookupAccountTransactions)\n/* harmony export */ });\n/* harmony import */ var _encoding_binarydata_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../encoding/binarydata.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/binarydata.js\");\n/* harmony import */ var _encoding_encoding_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../encoding/encoding.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/encoding.js\");\n/* harmony import */ var _jsonrequest_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../jsonrequest.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/jsonrequest.js\");\n/* harmony import */ var _models_types_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./models/types.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/indexer/models/types.js\");\n\n\n\n\n/**\n * Accept base64 string or Uint8Array and output base64 string\n * @param data - Base64 string or Uint8Array\n * @returns The inputted base64 string, or a base64 string representation of the Uint8Array\n */ function base64StringFunnel(data) {\n    if (typeof data === \"string\") {\n        return data;\n    }\n    return (0,_encoding_binarydata_js__WEBPACK_IMPORTED_MODULE_0__.bytesToBase64)(data);\n}\nclass LookupAccountTransactions extends _jsonrequest_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"] {\n    /**\n     * Returns transactions relating to the given account.\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountTxns = await indexerClient.lookupAccountTransactions(address).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2accountsaccount-idtransactions)\n     * @param account - The address of the account.\n     */ constructor(c, account){\n        super(c);\n        this.account = account.toString();\n    }\n    /**\n     * @returns `/v2/accounts/${account}/transactions`\n     */ path() {\n        return `/v2/accounts/${this.account}/transactions`;\n    }\n    /**\n     * Specifies a prefix which must be contained in the note field.\n     *\n     * #### Example\n     * ```typescript\n     * const notePrefixBase64Encoded = \"Y3JlYXRl\";\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountTxns = await indexerClient\n     *        .lookupAccountTransactions(address)\n     *        .notePrefix(notePrefixBase64Encoded)\n     *        .do();\n     * ```\n     *\n     * @param prefix - base64 string or uint8array\n     * @category query\n     */ notePrefix(prefix) {\n        this.query[\"note-prefix\"] = base64StringFunnel(prefix);\n        return this;\n    }\n    /**\n     * Type of transaction to filter with.\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountTxns = await indexerClient\n     *        .lookupAccountTransactions(address)\n     *        .txType(\"appl\")\n     *        .do();\n     * ```\n     *\n     * @param type - one of `pay`, `keyreg`, `acfg`, `axfer`, `afrz`, `appl`, `stpf`\n     * @category query\n     */ txType(type) {\n        this.query[\"tx-type\"] = type;\n        return this;\n    }\n    /**\n     * Type of signature to filter with.\n     * - sig: Standard\n     * - msig: MultiSig\n     * - lsig: LogicSig\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountTxns = await indexerClient\n     *        .lookupAccountTransactions(address)\n     *        .sigType(\"msig\")\n     *        .do();\n     * ```\n     *\n     * @param type - one of `sig`, `msig`, `lsig`\n     * @category query\n     */ sigType(type) {\n        this.query[\"sig-type\"] = type;\n        return this;\n    }\n    /**\n     * Lookup the specific transaction by ID.\n     *\n     * #### Example\n     * ```typescript\n     * const txId = \"MEUOC4RQJB23CQZRFRKYEI6WBO73VTTPST5A7B3S5OKBUY6LFUDA\";\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountTxns = await indexerClient\n     *        .lookupAccountTransactions(address)\n     *        .txid(txId)\n     *        .do();\n     * ```\n     * @remarks Alternatively, use `indexerClient.lookupTransactionByID(txnId).do()`\n     * @param txid\n     * @category query\n     */ txid(txid) {\n        this.query.txid = txid;\n        return this;\n    }\n    /**\n     * Include results for the specified round.\n     *\n     * #### Example\n     * ```typescript\n     * const targetBlock = 18309917;\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountTxns = await indexerClient\n     *        .lookupAccountTransactions(address)\n     *        .round(targetBlock)\n     *        .do();\n     * ```\n     *\n     * @param round\n     * @category query\n     */ round(round) {\n        this.query.round = round;\n        return this;\n    }\n    /**\n     * Include results at or after the specified min-round.\n     *\n     * #### Example\n     * ```typescript\n     * const minRound = 18309917;\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountTxns = await indexerClient\n     *        .lookupAccountTransactions(address)\n     *        .minRound(minRound)\n     *        .do();\n     * ```\n     *\n     * @param round\n     * @category query\n     */ minRound(round) {\n        this.query[\"min-round\"] = round;\n        return this;\n    }\n    /**\n     * Include results at or before the specified max-round.\n     *\n     * #### Example\n     * ```typescript\n     * const maxRound = 18309917;\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountTxns = await indexerClient\n     *        .lookupAccountTransactions(address)\n     *        .maxRound(maxRound)\n     *        .do();\n     * ```\n     *\n     * @param round\n     * @category query\n     */ maxRound(round) {\n        this.query[\"max-round\"] = round;\n        return this;\n    }\n    /**\n     * Asset ID to filter with.\n     *\n     * #### Example\n     * ```typescript\n     * const assetID = 163650;\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountTxns = await indexerClient\n     *        .lookupAccountTransactions(address)\n     *        .assetID(assetID)\n     *        .do();\n     * ```\n     *\n     * @param id\n     * @category query\n     */ assetID(id) {\n        this.query[\"asset-id\"] = id;\n        return this;\n    }\n    /**\n     * Maximum number of results to return.\n     *\n     * #### Example\n     * ```typescript\n     * const maxResults = 25;\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountTxns = await indexerClient\n     *        .lookupAccountTransactions(address)\n     *        .limit(maxResults)\n     *        .do();\n     * ```\n     *\n     * @param limit\n     * @category query\n     */ limit(limit) {\n        this.query.limit = limit;\n        return this;\n    }\n    /**\n     * Include results before the given time.\n     *\n     * #### Example\n     * ```typescript\n     * const beforeTime = \"2022-02-02T20:20:22.02Z\";\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountTxns = await indexerClient\n     *        .lookupAccountTransactions(address)\n     *        .beforeTime(beforeTime)\n     *        .do();\n     * ```\n     *\n     * @param before - rfc3339 string or Date object\n     * @category query\n     */ beforeTime(before) {\n        this.query[\"before-time\"] = before instanceof Date ? before.toISOString() : before;\n        return this;\n    }\n    /**\n     * Include results after the given time.\n     *\n     * #### Example\n     * ```typescript\n     * const afterTime = \"2022-10-21T00:00:11.55Z\";\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountTxns = await indexerClient\n     *        .lookupAccountTransactions(address)\n     *        .afterTime(afterTime)\n     *        .do();\n     * ```\n     *\n     * @param after - rfc3339 string or Date object\n     * @category query\n     */ afterTime(after) {\n        this.query[\"after-time\"] = after instanceof Date ? after.toISOString() : after;\n        return this;\n    }\n    /**\n     * Filtered results should have an amount greater than this value, as int, representing microAlgos, unless an asset-id is provided, in which case units are in the asset's units.\n     *\n     * #### Example 1\n     * ```typescript\n     * const minBalance = 300000;\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountTxns = await indexerClient\n     *        .lookupAccountTransactions(address)\n     *        .currencyGreaterThan(minBalance - 1)\n     *        .do();\n     * ```\n     *\n     * #### Example 2\n     * ```typescript\n     * const assetID = 163650;\n     * const minBalance = 300000;\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountTxns = await indexerClient\n     *        .lookupAccountTransactions(address)\n     *        .assetID(assetID)\n     *        .currencyGreaterThan(minBalance - 1)\n     *        .do();\n     * ```\n     *\n     * @param greater\n     * @category query\n     */ currencyGreaterThan(greater) {\n        // We convert the following to a string for now to correctly include zero values in request parameters.\n        this.query[\"currency-greater-than\"] = greater.toString();\n        return this;\n    }\n    /**\n     * Filtered results should have an amount less than this value, as int, representing microAlgos, unless an asset-id is provided, in which case units are in the asset's units.\n     *\n     * #### Example 1\n     * ```typescript\n     * const maxBalance = 500000;\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountTxns = await indexerClient\n     *        .lookupAccountTransactions(address)\n     *        .currencyLessThan(maxBalance + 1)\n     *        .do();\n     * ```\n     *\n     * #### Example 2\n     * ```typescript\n     * const assetID = 163650;\n     * const maxBalance = 500000;\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountTxns = await indexerClient\n     *        .lookupAccountTransactions(address)\n     *        .assetID(assetID)\n     *        .currencyLessThan(maxBalance + 1)\n     *        .do();\n     * ```\n     *\n     * @param lesser\n     * @category query\n     */ currencyLessThan(lesser) {\n        this.query[\"currency-less-than\"] = lesser;\n        return this;\n    }\n    /**\n     * The next page of results. Use the next token provided by the previous results.\n     *\n     * #### Example\n     * ```typescript\n     * const maxResults = 25;\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     *\n     * const accountTxnsPage1 = await indexerClient\n     *        .lookupAccountTransactions(address)\n     *        .limit(maxResults)\n     *        .do();\n     *\n     * const accountTxnsPage2 = await indexerClient\n     *        .lookupAccountTransactions(address)\n     *        .limit(maxResults)\n     *        .nextToken(accountTxnsPage1[\"next-token\"])\n     *        .do();\n     * ```\n     *\n     * @param nextToken - provided by the previous results.\n     * @category query\n     */ nextToken(nextToken) {\n        this.query.next = nextToken;\n        return this;\n    }\n    /**\n     * Whether or not to include rekeying transactions.\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountTxns = await indexerClient\n     *        .lookupAccountTransactions(address)\n     *        .rekeyTo(false)\n     *        .do();\n     * ```\n     *\n     * @param rekeyTo\n     * @category query\n     */ rekeyTo(rekeyTo) {\n        this.query[\"rekey-to\"] = rekeyTo;\n        return this;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    prepare(response) {\n        return (0,_encoding_encoding_js__WEBPACK_IMPORTED_MODULE_1__.decodeJSON)(response.getJSONText(), _models_types_js__WEBPACK_IMPORTED_MODULE_3__.TransactionsResponse);\n    }\n} //# sourceMappingURL=lookupAccountTransactions.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/client/v2/indexer/lookupAccountTransactions.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/client/v2/indexer/lookupApplicationBoxByIDandName.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/client/v2/indexer/lookupApplicationBoxByIDandName.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ LookupApplicationBoxByIDandName)\n/* harmony export */ });\n/* harmony import */ var _encoding_binarydata_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../encoding/binarydata.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/binarydata.js\");\n/* harmony import */ var _encoding_encoding_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../encoding/encoding.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/encoding.js\");\n/* harmony import */ var _jsonrequest_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../jsonrequest.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/jsonrequest.js\");\n/* harmony import */ var _models_types_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./models/types.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/indexer/models/types.js\");\n\n\n\n\nclass LookupApplicationBoxByIDandName extends _jsonrequest_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"] {\n    /**\n     * Returns information about indexed application boxes.\n     *\n     * #### Example\n     * ```typescript\n     * const boxName = Buffer.from(\"foo\");\n     * const boxResponse = await indexerClient\n     *        .LookupApplicationBoxByIDandName(1234, boxName)\n     *        .do();\n     * const boxValue = boxResponse.value;\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2applicationsapplication-idbox)\n     * @oaram index - application index.\n     * @category GET\n     */ constructor(c, index, boxName){\n        super(c);\n        this.index = BigInt(index);\n        // Encode query in base64 format and append the encoding prefix.\n        const encodedName = (0,_encoding_binarydata_js__WEBPACK_IMPORTED_MODULE_0__.bytesToBase64)(boxName);\n        this.query.name = encodeURI(`b64:${encodedName}`);\n    }\n    /**\n     * @returns `/v2/applications/${index}/box`\n     */ path() {\n        return `/v2/applications/${this.index}/box`;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    prepare(response) {\n        return (0,_encoding_encoding_js__WEBPACK_IMPORTED_MODULE_1__.decodeJSON)(response.getJSONText(), _models_types_js__WEBPACK_IMPORTED_MODULE_3__.Box);\n    }\n} //# sourceMappingURL=lookupApplicationBoxByIDandName.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9jbGllbnQvdjIvaW5kZXhlci9sb29rdXBBcHBsaWNhdGlvbkJveEJ5SURhbmROYW1lLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQWdFO0FBQ0w7QUFDZjtBQUNKO0FBQ3pCLE1BQU1JLHdDQUF3Q0YsdURBQVdBO0lBQ3BFOzs7Ozs7Ozs7Ozs7Ozs7S0FlQyxHQUNERyxZQUFZQyxDQUFDLEVBQUVDLEtBQUssRUFBRUMsT0FBTyxDQUFFO1FBQzNCLEtBQUssQ0FBQ0Y7UUFDTixJQUFJLENBQUNDLEtBQUssR0FBR0UsT0FBT0Y7UUFDcEIsZ0VBQWdFO1FBQ2hFLE1BQU1HLGNBQWNWLHNFQUFhQSxDQUFDUTtRQUNsQyxJQUFJLENBQUNHLEtBQUssQ0FBQ0MsSUFBSSxHQUFHQyxVQUFVLENBQUMsSUFBSSxFQUFFSCxZQUFZLENBQUM7SUFDcEQ7SUFDQTs7S0FFQyxHQUNESSxPQUFPO1FBQ0gsT0FBTyxDQUFDLGlCQUFpQixFQUFFLElBQUksQ0FBQ1AsS0FBSyxDQUFDLElBQUksQ0FBQztJQUMvQztJQUNBLGtEQUFrRDtJQUNsRFEsUUFBUUMsUUFBUSxFQUFFO1FBQ2QsT0FBT2YsaUVBQVVBLENBQUNlLFNBQVNDLFdBQVcsSUFBSWQsaURBQUdBO0lBQ2pEO0FBQ0osRUFDQSwyREFBMkQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hbGdvcmFuZC1jcm93ZGZ1bmRpbmctZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9jbGllbnQvdjIvaW5kZXhlci9sb29rdXBBcHBsaWNhdGlvbkJveEJ5SURhbmROYW1lLmpzPzZmYzUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYnl0ZXNUb0Jhc2U2NCB9IGZyb20gJy4uLy4uLy4uL2VuY29kaW5nL2JpbmFyeWRhdGEuanMnO1xuaW1wb3J0IHsgZGVjb2RlSlNPTiB9IGZyb20gJy4uLy4uLy4uL2VuY29kaW5nL2VuY29kaW5nLmpzJztcbmltcG9ydCBKU09OUmVxdWVzdCBmcm9tICcuLi9qc29ucmVxdWVzdC5qcyc7XG5pbXBvcnQgeyBCb3ggfSBmcm9tICcuL21vZGVscy90eXBlcy5qcyc7XG5leHBvcnQgZGVmYXVsdCBjbGFzcyBMb29rdXBBcHBsaWNhdGlvbkJveEJ5SURhbmROYW1lIGV4dGVuZHMgSlNPTlJlcXVlc3Qge1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgaW5mb3JtYXRpb24gYWJvdXQgaW5kZXhlZCBhcHBsaWNhdGlvbiBib3hlcy5cbiAgICAgKlxuICAgICAqICMjIyMgRXhhbXBsZVxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjb25zdCBib3hOYW1lID0gQnVmZmVyLmZyb20oXCJmb29cIik7XG4gICAgICogY29uc3QgYm94UmVzcG9uc2UgPSBhd2FpdCBpbmRleGVyQ2xpZW50XG4gICAgICogICAgICAgIC5Mb29rdXBBcHBsaWNhdGlvbkJveEJ5SURhbmROYW1lKDEyMzQsIGJveE5hbWUpXG4gICAgICogICAgICAgIC5kbygpO1xuICAgICAqIGNvbnN0IGJveFZhbHVlID0gYm94UmVzcG9uc2UudmFsdWU7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBbUmVzcG9uc2UgZGF0YSBzY2hlbWEgZGV0YWlsc10oaHR0cHM6Ly9kZXZlbG9wZXIuYWxnb3JhbmQub3JnL2RvY3MvcmVzdC1hcGlzL2luZGV4ZXIvI2dldC12MmFwcGxpY2F0aW9uc2FwcGxpY2F0aW9uLWlkYm94KVxuICAgICAqIEBvYXJhbSBpbmRleCAtIGFwcGxpY2F0aW9uIGluZGV4LlxuICAgICAqIEBjYXRlZ29yeSBHRVRcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihjLCBpbmRleCwgYm94TmFtZSkge1xuICAgICAgICBzdXBlcihjKTtcbiAgICAgICAgdGhpcy5pbmRleCA9IEJpZ0ludChpbmRleCk7XG4gICAgICAgIC8vIEVuY29kZSBxdWVyeSBpbiBiYXNlNjQgZm9ybWF0IGFuZCBhcHBlbmQgdGhlIGVuY29kaW5nIHByZWZpeC5cbiAgICAgICAgY29uc3QgZW5jb2RlZE5hbWUgPSBieXRlc1RvQmFzZTY0KGJveE5hbWUpO1xuICAgICAgICB0aGlzLnF1ZXJ5Lm5hbWUgPSBlbmNvZGVVUkkoYGI2NDoke2VuY29kZWROYW1lfWApO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcmV0dXJucyBgL3YyL2FwcGxpY2F0aW9ucy8ke2luZGV4fS9ib3hgXG4gICAgICovXG4gICAgcGF0aCgpIHtcbiAgICAgICAgcmV0dXJuIGAvdjIvYXBwbGljYXRpb25zLyR7dGhpcy5pbmRleH0vYm94YDtcbiAgICB9XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNsYXNzLW1ldGhvZHMtdXNlLXRoaXNcbiAgICBwcmVwYXJlKHJlc3BvbnNlKSB7XG4gICAgICAgIHJldHVybiBkZWNvZGVKU09OKHJlc3BvbnNlLmdldEpTT05UZXh0KCksIEJveCk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bG9va3VwQXBwbGljYXRpb25Cb3hCeUlEYW5kTmFtZS5qcy5tYXAiXSwibmFtZXMiOlsiYnl0ZXNUb0Jhc2U2NCIsImRlY29kZUpTT04iLCJKU09OUmVxdWVzdCIsIkJveCIsIkxvb2t1cEFwcGxpY2F0aW9uQm94QnlJRGFuZE5hbWUiLCJjb25zdHJ1Y3RvciIsImMiLCJpbmRleCIsImJveE5hbWUiLCJCaWdJbnQiLCJlbmNvZGVkTmFtZSIsInF1ZXJ5IiwibmFtZSIsImVuY29kZVVSSSIsInBhdGgiLCJwcmVwYXJlIiwicmVzcG9uc2UiLCJnZXRKU09OVGV4dCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/client/v2/indexer/lookupApplicationBoxByIDandName.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/client/v2/indexer/lookupApplicationLogs.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/client/v2/indexer/lookupApplicationLogs.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ LookupApplicationLogs)\n/* harmony export */ });\n/* harmony import */ var _jsonrequest_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../jsonrequest.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/jsonrequest.js\");\n/* harmony import */ var _encoding_encoding_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../encoding/encoding.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/encoding.js\");\n/* harmony import */ var _models_types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./models/types.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/indexer/models/types.js\");\n\n\n\nclass LookupApplicationLogs extends _jsonrequest_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Returns log messages generated by the passed in application.\n     *\n     * #### Example\n     * ```typescript\n     * const appId = 60553466;\n     * const appLogs = await indexerClient.lookupApplicationLogs(appId).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2applicationsapplication-idlogs)\n     * @param appID - The ID of the application which generated the logs.\n     * @category GET\n     */ constructor(c, appID){\n        super(c);\n        this.appID = BigInt(appID);\n    }\n    /**\n     * @returns `/v2/applications/${appID}/logs`\n     */ path() {\n        return `/v2/applications/${this.appID}/logs`;\n    }\n    /**\n     * Limit results for pagination.\n     *\n     * #### Example\n     * ```typescript\n     * const maxResults = 20;\n     * const appLogs = await indexerClient\n     *        .lookupApplicationLogs(appId)\n     *        .limit(maxResults)\n     *        .do();\n     * ```\n     *\n     * @param limit - maximum number of results to return.\n     */ limit(limit) {\n        this.query.limit = limit;\n        return this;\n    }\n    /**\n     * Include results at or after the specified min-round.\n     *\n     * #### Example\n     * ```typescript\n     * const minRound = 18309917;\n     * const appLogs = await indexerClient\n     *        .lookupApplicationLogs(appId)\n     *        .minRound(minRound)\n     *        .do();\n     * ```\n     *\n     * @param round\n     * @category query\n     */ minRound(round) {\n        this.query[\"min-round\"] = round;\n        return this;\n    }\n    /**\n     * Include results at or before the specified max-round.\n     *\n     * #### Example\n     * ```typescript\n     * const maxRound = 18309917;\n     * const appLogs = await indexerClient\n     *        .lookupApplicationLogs(appId)\n     *        .maxRound(maxRound)\n     *        .do();\n     * ```\n     *\n     * @param round\n     * @category query\n     */ maxRound(round) {\n        this.query[\"max-round\"] = round;\n        return this;\n    }\n    /**\n     * The next page of results.\n     *\n     * #### Example\n     * ```typescript\n     * const maxResults = 25;\n     *\n     * const appLogsPage1 = await indexerClient\n     *        .lookupApplicationLogs(appId)\n     *        .limit(maxResults)\n     *        .do();\n     *\n     * const appLogsPage2 = await indexerClient\n     *        .lookupApplicationLogs(appId)\n     *        .limit(maxResults)\n     *        .nextToken(appLogsPage1[\"next-token\"])\n     *        .do();\n     * ```\n     *\n     * @param nextToken - provided by the previous results.\n     * @category query\n     */ nextToken(nextToken) {\n        this.query.next = nextToken;\n        return this;\n    }\n    /**\n     * Only include transactions with this sender address.\n     *\n     * #### Example\n     * ```typescript\n     * const sender = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const appLogs = await indexerClient\n     *        .lookupApplicationLogs(appId)\n     *        .sender(sender)\n     *        .do();\n     * ```\n     *\n     * @param senderAddress\n     * @category query\n     */ sender(senderAddress) {\n        this.query[\"sender-address\"] = senderAddress;\n        return this;\n    }\n    /**\n     * Lookup the specific transaction by ID.\n     *\n     * #### Example\n     * ```typescript\n     * const txId = \"MEUOC4RQJB23CQZRFRKYEI6WBO73VTTPST5A7B3S5OKBUY6LFUDA\";\n     * const appLogs = await indexerClient\n     *        .lookupApplicationLogs(appId)\n     *        .txid(txId)\n     *        .do();\n     * ```\n     *\n     * @param txid\n     * @category query\n     */ txid(txid) {\n        this.query.txid = txid;\n        return this;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    prepare(response) {\n        return (0,_encoding_encoding_js__WEBPACK_IMPORTED_MODULE_1__.decodeJSON)(response.getJSONText(), _models_types_js__WEBPACK_IMPORTED_MODULE_2__.ApplicationLogsResponse);\n    }\n} //# sourceMappingURL=lookupApplicationLogs.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9jbGllbnQvdjIvaW5kZXhlci9sb29rdXBBcHBsaWNhdGlvbkxvZ3MuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUE0QztBQUNlO0FBQ0M7QUFDN0MsTUFBTUcsOEJBQThCSCx1REFBV0E7SUFDMUQ7Ozs7Ozs7Ozs7OztLQVlDLEdBQ0RJLFlBQVlDLENBQUMsRUFBRUMsS0FBSyxDQUFFO1FBQ2xCLEtBQUssQ0FBQ0Q7UUFDTixJQUFJLENBQUNDLEtBQUssR0FBR0MsT0FBT0Q7SUFDeEI7SUFDQTs7S0FFQyxHQUNERSxPQUFPO1FBQ0gsT0FBTyxDQUFDLGlCQUFpQixFQUFFLElBQUksQ0FBQ0YsS0FBSyxDQUFDLEtBQUssQ0FBQztJQUNoRDtJQUNBOzs7Ozs7Ozs7Ozs7O0tBYUMsR0FDREcsTUFBTUEsS0FBSyxFQUFFO1FBQ1QsSUFBSSxDQUFDQyxLQUFLLENBQUNELEtBQUssR0FBR0E7UUFDbkIsT0FBTyxJQUFJO0lBQ2Y7SUFDQTs7Ozs7Ozs7Ozs7Ozs7S0FjQyxHQUNERSxTQUFTQyxLQUFLLEVBQUU7UUFDWixJQUFJLENBQUNGLEtBQUssQ0FBQyxZQUFZLEdBQUdFO1FBQzFCLE9BQU8sSUFBSTtJQUNmO0lBQ0E7Ozs7Ozs7Ozs7Ozs7O0tBY0MsR0FDREMsU0FBU0QsS0FBSyxFQUFFO1FBQ1osSUFBSSxDQUFDRixLQUFLLENBQUMsWUFBWSxHQUFHRTtRQUMxQixPQUFPLElBQUk7SUFDZjtJQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7S0FxQkMsR0FDREUsVUFBVUEsU0FBUyxFQUFFO1FBQ2pCLElBQUksQ0FBQ0osS0FBSyxDQUFDSyxJQUFJLEdBQUdEO1FBQ2xCLE9BQU8sSUFBSTtJQUNmO0lBQ0E7Ozs7Ozs7Ozs7Ozs7O0tBY0MsR0FDREUsT0FBT0MsYUFBYSxFQUFFO1FBQ2xCLElBQUksQ0FBQ1AsS0FBSyxDQUFDLGlCQUFpQixHQUFHTztRQUMvQixPQUFPLElBQUk7SUFDZjtJQUNBOzs7Ozs7Ozs7Ozs7OztLQWNDLEdBQ0RDLEtBQUtBLElBQUksRUFBRTtRQUNQLElBQUksQ0FBQ1IsS0FBSyxDQUFDUSxJQUFJLEdBQUdBO1FBQ2xCLE9BQU8sSUFBSTtJQUNmO0lBQ0Esa0RBQWtEO0lBQ2xEQyxRQUFRQyxRQUFRLEVBQUU7UUFDZCxPQUFPbkIsaUVBQVVBLENBQUNtQixTQUFTQyxXQUFXLElBQUluQixxRUFBdUJBO0lBQ3JFO0FBQ0osRUFDQSxpREFBaUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hbGdvcmFuZC1jcm93ZGZ1bmRpbmctZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9jbGllbnQvdjIvaW5kZXhlci9sb29rdXBBcHBsaWNhdGlvbkxvZ3MuanM/MDE0NyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgSlNPTlJlcXVlc3QgZnJvbSAnLi4vanNvbnJlcXVlc3QuanMnO1xuaW1wb3J0IHsgZGVjb2RlSlNPTiB9IGZyb20gJy4uLy4uLy4uL2VuY29kaW5nL2VuY29kaW5nLmpzJztcbmltcG9ydCB7IEFwcGxpY2F0aW9uTG9nc1Jlc3BvbnNlIH0gZnJvbSAnLi9tb2RlbHMvdHlwZXMuanMnO1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTG9va3VwQXBwbGljYXRpb25Mb2dzIGV4dGVuZHMgSlNPTlJlcXVlc3Qge1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgbG9nIG1lc3NhZ2VzIGdlbmVyYXRlZCBieSB0aGUgcGFzc2VkIGluIGFwcGxpY2F0aW9uLlxuICAgICAqXG4gICAgICogIyMjIyBFeGFtcGxlXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IGFwcElkID0gNjA1NTM0NjY7XG4gICAgICogY29uc3QgYXBwTG9ncyA9IGF3YWl0IGluZGV4ZXJDbGllbnQubG9va3VwQXBwbGljYXRpb25Mb2dzKGFwcElkKS5kbygpO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogW1Jlc3BvbnNlIGRhdGEgc2NoZW1hIGRldGFpbHNdKGh0dHBzOi8vZGV2ZWxvcGVyLmFsZ29yYW5kLm9yZy9kb2NzL3Jlc3QtYXBpcy9pbmRleGVyLyNnZXQtdjJhcHBsaWNhdGlvbnNhcHBsaWNhdGlvbi1pZGxvZ3MpXG4gICAgICogQHBhcmFtIGFwcElEIC0gVGhlIElEIG9mIHRoZSBhcHBsaWNhdGlvbiB3aGljaCBnZW5lcmF0ZWQgdGhlIGxvZ3MuXG4gICAgICogQGNhdGVnb3J5IEdFVFxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGMsIGFwcElEKSB7XG4gICAgICAgIHN1cGVyKGMpO1xuICAgICAgICB0aGlzLmFwcElEID0gQmlnSW50KGFwcElEKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHJldHVybnMgYC92Mi9hcHBsaWNhdGlvbnMvJHthcHBJRH0vbG9nc2BcbiAgICAgKi9cbiAgICBwYXRoKCkge1xuICAgICAgICByZXR1cm4gYC92Mi9hcHBsaWNhdGlvbnMvJHt0aGlzLmFwcElEfS9sb2dzYDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTGltaXQgcmVzdWx0cyBmb3IgcGFnaW5hdGlvbi5cbiAgICAgKlxuICAgICAqICMjIyMgRXhhbXBsZVxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjb25zdCBtYXhSZXN1bHRzID0gMjA7XG4gICAgICogY29uc3QgYXBwTG9ncyA9IGF3YWl0IGluZGV4ZXJDbGllbnRcbiAgICAgKiAgICAgICAgLmxvb2t1cEFwcGxpY2F0aW9uTG9ncyhhcHBJZClcbiAgICAgKiAgICAgICAgLmxpbWl0KG1heFJlc3VsdHMpXG4gICAgICogICAgICAgIC5kbygpO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQHBhcmFtIGxpbWl0IC0gbWF4aW11bSBudW1iZXIgb2YgcmVzdWx0cyB0byByZXR1cm4uXG4gICAgICovXG4gICAgbGltaXQobGltaXQpIHtcbiAgICAgICAgdGhpcy5xdWVyeS5saW1pdCA9IGxpbWl0O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogSW5jbHVkZSByZXN1bHRzIGF0IG9yIGFmdGVyIHRoZSBzcGVjaWZpZWQgbWluLXJvdW5kLlxuICAgICAqXG4gICAgICogIyMjIyBFeGFtcGxlXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IG1pblJvdW5kID0gMTgzMDk5MTc7XG4gICAgICogY29uc3QgYXBwTG9ncyA9IGF3YWl0IGluZGV4ZXJDbGllbnRcbiAgICAgKiAgICAgICAgLmxvb2t1cEFwcGxpY2F0aW9uTG9ncyhhcHBJZClcbiAgICAgKiAgICAgICAgLm1pblJvdW5kKG1pblJvdW5kKVxuICAgICAqICAgICAgICAuZG8oKTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEBwYXJhbSByb3VuZFxuICAgICAqIEBjYXRlZ29yeSBxdWVyeVxuICAgICAqL1xuICAgIG1pblJvdW5kKHJvdW5kKSB7XG4gICAgICAgIHRoaXMucXVlcnlbJ21pbi1yb3VuZCddID0gcm91bmQ7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJbmNsdWRlIHJlc3VsdHMgYXQgb3IgYmVmb3JlIHRoZSBzcGVjaWZpZWQgbWF4LXJvdW5kLlxuICAgICAqXG4gICAgICogIyMjIyBFeGFtcGxlXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IG1heFJvdW5kID0gMTgzMDk5MTc7XG4gICAgICogY29uc3QgYXBwTG9ncyA9IGF3YWl0IGluZGV4ZXJDbGllbnRcbiAgICAgKiAgICAgICAgLmxvb2t1cEFwcGxpY2F0aW9uTG9ncyhhcHBJZClcbiAgICAgKiAgICAgICAgLm1heFJvdW5kKG1heFJvdW5kKVxuICAgICAqICAgICAgICAuZG8oKTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEBwYXJhbSByb3VuZFxuICAgICAqIEBjYXRlZ29yeSBxdWVyeVxuICAgICAqL1xuICAgIG1heFJvdW5kKHJvdW5kKSB7XG4gICAgICAgIHRoaXMucXVlcnlbJ21heC1yb3VuZCddID0gcm91bmQ7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGUgbmV4dCBwYWdlIG9mIHJlc3VsdHMuXG4gICAgICpcbiAgICAgKiAjIyMjIEV4YW1wbGVcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogY29uc3QgbWF4UmVzdWx0cyA9IDI1O1xuICAgICAqXG4gICAgICogY29uc3QgYXBwTG9nc1BhZ2UxID0gYXdhaXQgaW5kZXhlckNsaWVudFxuICAgICAqICAgICAgICAubG9va3VwQXBwbGljYXRpb25Mb2dzKGFwcElkKVxuICAgICAqICAgICAgICAubGltaXQobWF4UmVzdWx0cylcbiAgICAgKiAgICAgICAgLmRvKCk7XG4gICAgICpcbiAgICAgKiBjb25zdCBhcHBMb2dzUGFnZTIgPSBhd2FpdCBpbmRleGVyQ2xpZW50XG4gICAgICogICAgICAgIC5sb29rdXBBcHBsaWNhdGlvbkxvZ3MoYXBwSWQpXG4gICAgICogICAgICAgIC5saW1pdChtYXhSZXN1bHRzKVxuICAgICAqICAgICAgICAubmV4dFRva2VuKGFwcExvZ3NQYWdlMVtcIm5leHQtdG9rZW5cIl0pXG4gICAgICogICAgICAgIC5kbygpO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQHBhcmFtIG5leHRUb2tlbiAtIHByb3ZpZGVkIGJ5IHRoZSBwcmV2aW91cyByZXN1bHRzLlxuICAgICAqIEBjYXRlZ29yeSBxdWVyeVxuICAgICAqL1xuICAgIG5leHRUb2tlbihuZXh0VG9rZW4pIHtcbiAgICAgICAgdGhpcy5xdWVyeS5uZXh0ID0gbmV4dFRva2VuO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogT25seSBpbmNsdWRlIHRyYW5zYWN0aW9ucyB3aXRoIHRoaXMgc2VuZGVyIGFkZHJlc3MuXG4gICAgICpcbiAgICAgKiAjIyMjIEV4YW1wbGVcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogY29uc3Qgc2VuZGVyID0gXCJYQllMUzJFNllJNlhYTDVCV0NBTU9BNEdUV0hYV0VOWk1YNVVIWE1STldXVVE3QlhDWTVXQzVURVBBXCI7XG4gICAgICogY29uc3QgYXBwTG9ncyA9IGF3YWl0IGluZGV4ZXJDbGllbnRcbiAgICAgKiAgICAgICAgLmxvb2t1cEFwcGxpY2F0aW9uTG9ncyhhcHBJZClcbiAgICAgKiAgICAgICAgLnNlbmRlcihzZW5kZXIpXG4gICAgICogICAgICAgIC5kbygpO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQHBhcmFtIHNlbmRlckFkZHJlc3NcbiAgICAgKiBAY2F0ZWdvcnkgcXVlcnlcbiAgICAgKi9cbiAgICBzZW5kZXIoc2VuZGVyQWRkcmVzcykge1xuICAgICAgICB0aGlzLnF1ZXJ5WydzZW5kZXItYWRkcmVzcyddID0gc2VuZGVyQWRkcmVzcztcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIExvb2t1cCB0aGUgc3BlY2lmaWMgdHJhbnNhY3Rpb24gYnkgSUQuXG4gICAgICpcbiAgICAgKiAjIyMjIEV4YW1wbGVcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogY29uc3QgdHhJZCA9IFwiTUVVT0M0UlFKQjIzQ1FaUkZSS1lFSTZXQk83M1ZUVFBTVDVBN0IzUzVPS0JVWTZMRlVEQVwiO1xuICAgICAqIGNvbnN0IGFwcExvZ3MgPSBhd2FpdCBpbmRleGVyQ2xpZW50XG4gICAgICogICAgICAgIC5sb29rdXBBcHBsaWNhdGlvbkxvZ3MoYXBwSWQpXG4gICAgICogICAgICAgIC50eGlkKHR4SWQpXG4gICAgICogICAgICAgIC5kbygpO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQHBhcmFtIHR4aWRcbiAgICAgKiBAY2F0ZWdvcnkgcXVlcnlcbiAgICAgKi9cbiAgICB0eGlkKHR4aWQpIHtcbiAgICAgICAgdGhpcy5xdWVyeS50eGlkID0gdHhpZDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjbGFzcy1tZXRob2RzLXVzZS10aGlzXG4gICAgcHJlcGFyZShyZXNwb25zZSkge1xuICAgICAgICByZXR1cm4gZGVjb2RlSlNPTihyZXNwb25zZS5nZXRKU09OVGV4dCgpLCBBcHBsaWNhdGlvbkxvZ3NSZXNwb25zZSk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bG9va3VwQXBwbGljYXRpb25Mb2dzLmpzLm1hcCJdLCJuYW1lcyI6WyJKU09OUmVxdWVzdCIsImRlY29kZUpTT04iLCJBcHBsaWNhdGlvbkxvZ3NSZXNwb25zZSIsIkxvb2t1cEFwcGxpY2F0aW9uTG9ncyIsImNvbnN0cnVjdG9yIiwiYyIsImFwcElEIiwiQmlnSW50IiwicGF0aCIsImxpbWl0IiwicXVlcnkiLCJtaW5Sb3VuZCIsInJvdW5kIiwibWF4Um91bmQiLCJuZXh0VG9rZW4iLCJuZXh0Iiwic2VuZGVyIiwic2VuZGVyQWRkcmVzcyIsInR4aWQiLCJwcmVwYXJlIiwicmVzcG9uc2UiLCJnZXRKU09OVGV4dCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/client/v2/indexer/lookupApplicationLogs.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/client/v2/indexer/lookupApplications.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/client/v2/indexer/lookupApplications.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ LookupApplications)\n/* harmony export */ });\n/* harmony import */ var _jsonrequest_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../jsonrequest.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/jsonrequest.js\");\n/* harmony import */ var _encoding_encoding_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../encoding/encoding.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/encoding.js\");\n/* harmony import */ var _models_types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./models/types.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/indexer/models/types.js\");\n\n\n\nclass LookupApplications extends _jsonrequest_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Returns information about the passed application.\n     *\n     * #### Example\n     * ```typescript\n     * const appId = 60553466;\n     * const appInfo = await indexerClient.lookupApplications(appId).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2applicationsapplication-id)\n     * @param index - The ID of the application to look up.\n     * @category GET\n     */ constructor(c, index){\n        super(c);\n        this.index = BigInt(index);\n    }\n    /**\n     * @returns `/v2/applications/${index}`\n     */ path() {\n        return `/v2/applications/${this.index}`;\n    }\n    /**\n     * Includes all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates\n     *\n     * #### Example 1\n     * ```typescript\n     * const appId = 60553466;\n     * const appInfo = await indexerClient\n     *        .lookupApplications(appId)\n     *        .includeAll(false)\n     *        .do();\n     * ```\n     *\n     * #### Example 2\n     * ```typescript\n     * const appId = 60553466;\n     * const appInfo = await indexerClient\n     *        .lookupApplications(appId)\n     *        .includeAll()\n     *        .do();\n     * ```\n     *\n     * @param value - default true when called without passing a value\n     * @category query\n     */ includeAll(value = true) {\n        this.query[\"include-all\"] = value;\n        return this;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    prepare(response) {\n        return (0,_encoding_encoding_js__WEBPACK_IMPORTED_MODULE_1__.decodeJSON)(response.getJSONText(), _models_types_js__WEBPACK_IMPORTED_MODULE_2__.ApplicationResponse);\n    }\n} //# sourceMappingURL=lookupApplications.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9jbGllbnQvdjIvaW5kZXhlci9sb29rdXBBcHBsaWNhdGlvbnMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUE0QztBQUNlO0FBQ0g7QUFDekMsTUFBTUcsMkJBQTJCSCx1REFBV0E7SUFDdkQ7Ozs7Ozs7Ozs7OztLQVlDLEdBQ0RJLFlBQVlDLENBQUMsRUFBRUMsS0FBSyxDQUFFO1FBQ2xCLEtBQUssQ0FBQ0Q7UUFDTixJQUFJLENBQUNDLEtBQUssR0FBR0MsT0FBT0Q7SUFDeEI7SUFDQTs7S0FFQyxHQUNERSxPQUFPO1FBQ0gsT0FBTyxDQUFDLGlCQUFpQixFQUFFLElBQUksQ0FBQ0YsS0FBSyxDQUFDLENBQUM7SUFDM0M7SUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7S0F1QkMsR0FDREcsV0FBV0MsUUFBUSxJQUFJLEVBQUU7UUFDckIsSUFBSSxDQUFDQyxLQUFLLENBQUMsY0FBYyxHQUFHRDtRQUM1QixPQUFPLElBQUk7SUFDZjtJQUNBLGtEQUFrRDtJQUNsREUsUUFBUUMsUUFBUSxFQUFFO1FBQ2QsT0FBT1osaUVBQVVBLENBQUNZLFNBQVNDLFdBQVcsSUFBSVosaUVBQW1CQTtJQUNqRTtBQUNKLEVBQ0EsOENBQThDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWxnb3JhbmQtY3Jvd2RmdW5kaW5nLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vY2xpZW50L3YyL2luZGV4ZXIvbG9va3VwQXBwbGljYXRpb25zLmpzP2JjODUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEpTT05SZXF1ZXN0IGZyb20gJy4uL2pzb25yZXF1ZXN0LmpzJztcbmltcG9ydCB7IGRlY29kZUpTT04gfSBmcm9tICcuLi8uLi8uLi9lbmNvZGluZy9lbmNvZGluZy5qcyc7XG5pbXBvcnQgeyBBcHBsaWNhdGlvblJlc3BvbnNlIH0gZnJvbSAnLi9tb2RlbHMvdHlwZXMuanMnO1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTG9va3VwQXBwbGljYXRpb25zIGV4dGVuZHMgSlNPTlJlcXVlc3Qge1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgaW5mb3JtYXRpb24gYWJvdXQgdGhlIHBhc3NlZCBhcHBsaWNhdGlvbi5cbiAgICAgKlxuICAgICAqICMjIyMgRXhhbXBsZVxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjb25zdCBhcHBJZCA9IDYwNTUzNDY2O1xuICAgICAqIGNvbnN0IGFwcEluZm8gPSBhd2FpdCBpbmRleGVyQ2xpZW50Lmxvb2t1cEFwcGxpY2F0aW9ucyhhcHBJZCkuZG8oKTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIFtSZXNwb25zZSBkYXRhIHNjaGVtYSBkZXRhaWxzXShodHRwczovL2RldmVsb3Blci5hbGdvcmFuZC5vcmcvZG9jcy9yZXN0LWFwaXMvaW5kZXhlci8jZ2V0LXYyYXBwbGljYXRpb25zYXBwbGljYXRpb24taWQpXG4gICAgICogQHBhcmFtIGluZGV4IC0gVGhlIElEIG9mIHRoZSBhcHBsaWNhdGlvbiB0byBsb29rIHVwLlxuICAgICAqIEBjYXRlZ29yeSBHRVRcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihjLCBpbmRleCkge1xuICAgICAgICBzdXBlcihjKTtcbiAgICAgICAgdGhpcy5pbmRleCA9IEJpZ0ludChpbmRleCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEByZXR1cm5zIGAvdjIvYXBwbGljYXRpb25zLyR7aW5kZXh9YFxuICAgICAqL1xuICAgIHBhdGgoKSB7XG4gICAgICAgIHJldHVybiBgL3YyL2FwcGxpY2F0aW9ucy8ke3RoaXMuaW5kZXh9YDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSW5jbHVkZXMgYWxsIGl0ZW1zIGluY2x1ZGluZyBjbG9zZWQgYWNjb3VudHMsIGRlbGV0ZWQgYXBwbGljYXRpb25zLCBkZXN0cm95ZWQgYXNzZXRzLCBvcHRlZC1vdXQgYXNzZXQgaG9sZGluZ3MsIGFuZCBjbG9zZWQtb3V0IGFwcGxpY2F0aW9uIGxvY2Fsc3RhdGVzXG4gICAgICpcbiAgICAgKiAjIyMjIEV4YW1wbGUgMVxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjb25zdCBhcHBJZCA9IDYwNTUzNDY2O1xuICAgICAqIGNvbnN0IGFwcEluZm8gPSBhd2FpdCBpbmRleGVyQ2xpZW50XG4gICAgICogICAgICAgIC5sb29rdXBBcHBsaWNhdGlvbnMoYXBwSWQpXG4gICAgICogICAgICAgIC5pbmNsdWRlQWxsKGZhbHNlKVxuICAgICAqICAgICAgICAuZG8oKTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqICMjIyMgRXhhbXBsZSAyXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IGFwcElkID0gNjA1NTM0NjY7XG4gICAgICogY29uc3QgYXBwSW5mbyA9IGF3YWl0IGluZGV4ZXJDbGllbnRcbiAgICAgKiAgICAgICAgLmxvb2t1cEFwcGxpY2F0aW9ucyhhcHBJZClcbiAgICAgKiAgICAgICAgLmluY2x1ZGVBbGwoKVxuICAgICAqICAgICAgICAuZG8oKTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEBwYXJhbSB2YWx1ZSAtIGRlZmF1bHQgdHJ1ZSB3aGVuIGNhbGxlZCB3aXRob3V0IHBhc3NpbmcgYSB2YWx1ZVxuICAgICAqIEBjYXRlZ29yeSBxdWVyeVxuICAgICAqL1xuICAgIGluY2x1ZGVBbGwodmFsdWUgPSB0cnVlKSB7XG4gICAgICAgIHRoaXMucXVlcnlbJ2luY2x1ZGUtYWxsJ10gPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjbGFzcy1tZXRob2RzLXVzZS10aGlzXG4gICAgcHJlcGFyZShyZXNwb25zZSkge1xuICAgICAgICByZXR1cm4gZGVjb2RlSlNPTihyZXNwb25zZS5nZXRKU09OVGV4dCgpLCBBcHBsaWNhdGlvblJlc3BvbnNlKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1sb29rdXBBcHBsaWNhdGlvbnMuanMubWFwIl0sIm5hbWVzIjpbIkpTT05SZXF1ZXN0IiwiZGVjb2RlSlNPTiIsIkFwcGxpY2F0aW9uUmVzcG9uc2UiLCJMb29rdXBBcHBsaWNhdGlvbnMiLCJjb25zdHJ1Y3RvciIsImMiLCJpbmRleCIsIkJpZ0ludCIsInBhdGgiLCJpbmNsdWRlQWxsIiwidmFsdWUiLCJxdWVyeSIsInByZXBhcmUiLCJyZXNwb25zZSIsImdldEpTT05UZXh0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/client/v2/indexer/lookupApplications.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/client/v2/indexer/lookupAssetBalances.js":
/*!********************************************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/client/v2/indexer/lookupAssetBalances.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ LookupAssetBalances)\n/* harmony export */ });\n/* harmony import */ var _jsonrequest_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../jsonrequest.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/jsonrequest.js\");\n/* harmony import */ var _encoding_encoding_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../encoding/encoding.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/encoding.js\");\n/* harmony import */ var _models_types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./models/types.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/indexer/models/types.js\");\n\n\n\nclass LookupAssetBalances extends _jsonrequest_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Returns the list of accounts which hold the given asset and their balance.\n     *\n     * #### Example\n     * ```typescript\n     * const assetId = 163650;\n     * const assetBalances = await indexerClient.lookupAssetBalances(assetId).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2assetsasset-idbalances)\n     * @param index - The asset ID to look up.\n     */ constructor(c, index){\n        super(c);\n        this.index = BigInt(index);\n    }\n    /**\n     * @returns `/v2/assets/${index}/balances`\n     */ path() {\n        return `/v2/assets/${this.index}/balances`;\n    }\n    /**\n     * Limit results for pagination.\n     *\n     * #### Example\n     * ```typescript\n     * const assetId = 163650;\n     * const maxResults = 20;\n     * const assetBalances = await indexerClient\n     *        .lookupAssetBalances(assetId)\n     *        .limit(maxResults)\n     *        .do();\n     * ```\n     *\n     * @param limit - maximum number of results to return.\n     * @category query\n     */ limit(limit) {\n        this.query.limit = limit;\n        return this;\n    }\n    /**\n     * Filtered results should have an asset balance greater than this value.\n     *\n     * #### Example\n     * ```typescript\n     * const assetId = 163650;\n     * const minBalance = 1000000;\n     * const assetBalances = await indexerClient\n     *        .lookupAssetBalances(assetId)\n     *        .currencyGreaterThan(minBalance)\n     *        .do();\n     * ```\n     * @param greater\n     * @category query\n     */ currencyGreaterThan(greater) {\n        // We convert the following to a string for now to correctly include zero values in request parameters.\n        this.query[\"currency-greater-than\"] = greater.toString();\n        return this;\n    }\n    /**\n     * Filtered results should have an asset balance less than this value.\n     *\n     * #### Example\n     * ```typescript\n     * const assetId = 163650;\n     * const maxBalance = 2000000;\n     * const assetBalances = await indexerClient\n     *        .lookupAssetBalances(assetId)\n     *        .currencyLessThan(maxBalance)\n     *        .do();\n     * ```\n     * @param lesser\n     * @category query\n     */ currencyLessThan(lesser) {\n        this.query[\"currency-less-than\"] = lesser;\n        return this;\n    }\n    /**\n     * Specify the next page of results.\n     *\n     * #### Example\n     * ```typescript\n     * const assetId = 163650;\n     * const maxResults = 20;\n     *\n     * const assetBalancesPage1 = await indexerClient\n     *        .lookupAssetBalances(assetId)\n     *        .limit(maxResults)\n     *        .do();\n     *\n     * const assetBalancesPage2 = await indexerClient\n     *        .lookupAssetBalances(assetId)\n     *        .limit(maxResults)\n     *        .nextToken(assetBalancesPage1[\"next-token\"])\n     *        .do();\n     * ```\n     * @param nextToken - provided by the previous results.\n     * @category query\n     */ nextToken(nextToken) {\n        this.query.next = nextToken;\n        return this;\n    }\n    /**\n     * Include all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates.\n     *\n     * #### Example 1\n     * ```typescript\n     * const assetId = 163650;\n     * const assetBalances = await indexerClient\n     *        .lookupAssetBalances(assetId)\n     *        .includeAll(false)\n     *        .do();\n     * ```\n     *\n     * #### Example 2\n     * ```typescript\n     * const assetId = 163650;\n     * const assetBalances = await indexerClient\n     *        .lookupAssetBalances(assetId)\n     *        .includeAll()\n     *        .do();\n     * ```\n     *\n     * @param value\n     * @category query\n     */ includeAll(value = true) {\n        this.query[\"include-all\"] = value;\n        return this;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    prepare(response) {\n        return (0,_encoding_encoding_js__WEBPACK_IMPORTED_MODULE_1__.decodeJSON)(response.getJSONText(), _models_types_js__WEBPACK_IMPORTED_MODULE_2__.AssetBalancesResponse);\n    }\n} //# sourceMappingURL=lookupAssetBalances.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9jbGllbnQvdjIvaW5kZXhlci9sb29rdXBBc3NldEJhbGFuY2VzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBNEM7QUFDZTtBQUNEO0FBQzNDLE1BQU1HLDRCQUE0QkgsdURBQVdBO0lBQ3hEOzs7Ozs7Ozs7OztLQVdDLEdBQ0RJLFlBQVlDLENBQUMsRUFBRUMsS0FBSyxDQUFFO1FBQ2xCLEtBQUssQ0FBQ0Q7UUFDTixJQUFJLENBQUNDLEtBQUssR0FBR0MsT0FBT0Q7SUFDeEI7SUFDQTs7S0FFQyxHQUNERSxPQUFPO1FBQ0gsT0FBTyxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUNGLEtBQUssQ0FBQyxTQUFTLENBQUM7SUFDOUM7SUFDQTs7Ozs7Ozs7Ozs7Ozs7O0tBZUMsR0FDREcsTUFBTUEsS0FBSyxFQUFFO1FBQ1QsSUFBSSxDQUFDQyxLQUFLLENBQUNELEtBQUssR0FBR0E7UUFDbkIsT0FBTyxJQUFJO0lBQ2Y7SUFDQTs7Ozs7Ozs7Ozs7Ozs7S0FjQyxHQUNERSxvQkFBb0JDLE9BQU8sRUFBRTtRQUN6Qix1R0FBdUc7UUFDdkcsSUFBSSxDQUFDRixLQUFLLENBQUMsd0JBQXdCLEdBQUdFLFFBQVFDLFFBQVE7UUFDdEQsT0FBTyxJQUFJO0lBQ2Y7SUFDQTs7Ozs7Ozs7Ozs7Ozs7S0FjQyxHQUNEQyxpQkFBaUJDLE1BQU0sRUFBRTtRQUNyQixJQUFJLENBQUNMLEtBQUssQ0FBQyxxQkFBcUIsR0FBR0s7UUFDbkMsT0FBTyxJQUFJO0lBQ2Y7SUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0tBcUJDLEdBQ0RDLFVBQVVBLFNBQVMsRUFBRTtRQUNqQixJQUFJLENBQUNOLEtBQUssQ0FBQ08sSUFBSSxHQUFHRDtRQUNsQixPQUFPLElBQUk7SUFDZjtJQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztLQXVCQyxHQUNERSxXQUFXQyxRQUFRLElBQUksRUFBRTtRQUNyQixJQUFJLENBQUNULEtBQUssQ0FBQyxjQUFjLEdBQUdTO1FBQzVCLE9BQU8sSUFBSTtJQUNmO0lBQ0Esa0RBQWtEO0lBQ2xEQyxRQUFRQyxRQUFRLEVBQUU7UUFDZCxPQUFPcEIsaUVBQVVBLENBQUNvQixTQUFTQyxXQUFXLElBQUlwQixtRUFBcUJBO0lBQ25FO0FBQ0osRUFDQSwrQ0FBK0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hbGdvcmFuZC1jcm93ZGZ1bmRpbmctZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9jbGllbnQvdjIvaW5kZXhlci9sb29rdXBBc3NldEJhbGFuY2VzLmpzP2ViOTYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEpTT05SZXF1ZXN0IGZyb20gJy4uL2pzb25yZXF1ZXN0LmpzJztcbmltcG9ydCB7IGRlY29kZUpTT04gfSBmcm9tICcuLi8uLi8uLi9lbmNvZGluZy9lbmNvZGluZy5qcyc7XG5pbXBvcnQgeyBBc3NldEJhbGFuY2VzUmVzcG9uc2UgfSBmcm9tICcuL21vZGVscy90eXBlcy5qcyc7XG5leHBvcnQgZGVmYXVsdCBjbGFzcyBMb29rdXBBc3NldEJhbGFuY2VzIGV4dGVuZHMgSlNPTlJlcXVlc3Qge1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGxpc3Qgb2YgYWNjb3VudHMgd2hpY2ggaG9sZCB0aGUgZ2l2ZW4gYXNzZXQgYW5kIHRoZWlyIGJhbGFuY2UuXG4gICAgICpcbiAgICAgKiAjIyMjIEV4YW1wbGVcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogY29uc3QgYXNzZXRJZCA9IDE2MzY1MDtcbiAgICAgKiBjb25zdCBhc3NldEJhbGFuY2VzID0gYXdhaXQgaW5kZXhlckNsaWVudC5sb29rdXBBc3NldEJhbGFuY2VzKGFzc2V0SWQpLmRvKCk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBbUmVzcG9uc2UgZGF0YSBzY2hlbWEgZGV0YWlsc10oaHR0cHM6Ly9kZXZlbG9wZXIuYWxnb3JhbmQub3JnL2RvY3MvcmVzdC1hcGlzL2luZGV4ZXIvI2dldC12MmFzc2V0c2Fzc2V0LWlkYmFsYW5jZXMpXG4gICAgICogQHBhcmFtIGluZGV4IC0gVGhlIGFzc2V0IElEIHRvIGxvb2sgdXAuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoYywgaW5kZXgpIHtcbiAgICAgICAgc3VwZXIoYyk7XG4gICAgICAgIHRoaXMuaW5kZXggPSBCaWdJbnQoaW5kZXgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcmV0dXJucyBgL3YyL2Fzc2V0cy8ke2luZGV4fS9iYWxhbmNlc2BcbiAgICAgKi9cbiAgICBwYXRoKCkge1xuICAgICAgICByZXR1cm4gYC92Mi9hc3NldHMvJHt0aGlzLmluZGV4fS9iYWxhbmNlc2A7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIExpbWl0IHJlc3VsdHMgZm9yIHBhZ2luYXRpb24uXG4gICAgICpcbiAgICAgKiAjIyMjIEV4YW1wbGVcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogY29uc3QgYXNzZXRJZCA9IDE2MzY1MDtcbiAgICAgKiBjb25zdCBtYXhSZXN1bHRzID0gMjA7XG4gICAgICogY29uc3QgYXNzZXRCYWxhbmNlcyA9IGF3YWl0IGluZGV4ZXJDbGllbnRcbiAgICAgKiAgICAgICAgLmxvb2t1cEFzc2V0QmFsYW5jZXMoYXNzZXRJZClcbiAgICAgKiAgICAgICAgLmxpbWl0KG1heFJlc3VsdHMpXG4gICAgICogICAgICAgIC5kbygpO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQHBhcmFtIGxpbWl0IC0gbWF4aW11bSBudW1iZXIgb2YgcmVzdWx0cyB0byByZXR1cm4uXG4gICAgICogQGNhdGVnb3J5IHF1ZXJ5XG4gICAgICovXG4gICAgbGltaXQobGltaXQpIHtcbiAgICAgICAgdGhpcy5xdWVyeS5saW1pdCA9IGxpbWl0O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogRmlsdGVyZWQgcmVzdWx0cyBzaG91bGQgaGF2ZSBhbiBhc3NldCBiYWxhbmNlIGdyZWF0ZXIgdGhhbiB0aGlzIHZhbHVlLlxuICAgICAqXG4gICAgICogIyMjIyBFeGFtcGxlXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IGFzc2V0SWQgPSAxNjM2NTA7XG4gICAgICogY29uc3QgbWluQmFsYW5jZSA9IDEwMDAwMDA7XG4gICAgICogY29uc3QgYXNzZXRCYWxhbmNlcyA9IGF3YWl0IGluZGV4ZXJDbGllbnRcbiAgICAgKiAgICAgICAgLmxvb2t1cEFzc2V0QmFsYW5jZXMoYXNzZXRJZClcbiAgICAgKiAgICAgICAgLmN1cnJlbmN5R3JlYXRlclRoYW4obWluQmFsYW5jZSlcbiAgICAgKiAgICAgICAgLmRvKCk7XG4gICAgICogYGBgXG4gICAgICogQHBhcmFtIGdyZWF0ZXJcbiAgICAgKiBAY2F0ZWdvcnkgcXVlcnlcbiAgICAgKi9cbiAgICBjdXJyZW5jeUdyZWF0ZXJUaGFuKGdyZWF0ZXIpIHtcbiAgICAgICAgLy8gV2UgY29udmVydCB0aGUgZm9sbG93aW5nIHRvIGEgc3RyaW5nIGZvciBub3cgdG8gY29ycmVjdGx5IGluY2x1ZGUgemVybyB2YWx1ZXMgaW4gcmVxdWVzdCBwYXJhbWV0ZXJzLlxuICAgICAgICB0aGlzLnF1ZXJ5WydjdXJyZW5jeS1ncmVhdGVyLXRoYW4nXSA9IGdyZWF0ZXIudG9TdHJpbmcoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEZpbHRlcmVkIHJlc3VsdHMgc2hvdWxkIGhhdmUgYW4gYXNzZXQgYmFsYW5jZSBsZXNzIHRoYW4gdGhpcyB2YWx1ZS5cbiAgICAgKlxuICAgICAqICMjIyMgRXhhbXBsZVxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjb25zdCBhc3NldElkID0gMTYzNjUwO1xuICAgICAqIGNvbnN0IG1heEJhbGFuY2UgPSAyMDAwMDAwO1xuICAgICAqIGNvbnN0IGFzc2V0QmFsYW5jZXMgPSBhd2FpdCBpbmRleGVyQ2xpZW50XG4gICAgICogICAgICAgIC5sb29rdXBBc3NldEJhbGFuY2VzKGFzc2V0SWQpXG4gICAgICogICAgICAgIC5jdXJyZW5jeUxlc3NUaGFuKG1heEJhbGFuY2UpXG4gICAgICogICAgICAgIC5kbygpO1xuICAgICAqIGBgYFxuICAgICAqIEBwYXJhbSBsZXNzZXJcbiAgICAgKiBAY2F0ZWdvcnkgcXVlcnlcbiAgICAgKi9cbiAgICBjdXJyZW5jeUxlc3NUaGFuKGxlc3Nlcikge1xuICAgICAgICB0aGlzLnF1ZXJ5WydjdXJyZW5jeS1sZXNzLXRoYW4nXSA9IGxlc3NlcjtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNwZWNpZnkgdGhlIG5leHQgcGFnZSBvZiByZXN1bHRzLlxuICAgICAqXG4gICAgICogIyMjIyBFeGFtcGxlXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IGFzc2V0SWQgPSAxNjM2NTA7XG4gICAgICogY29uc3QgbWF4UmVzdWx0cyA9IDIwO1xuICAgICAqXG4gICAgICogY29uc3QgYXNzZXRCYWxhbmNlc1BhZ2UxID0gYXdhaXQgaW5kZXhlckNsaWVudFxuICAgICAqICAgICAgICAubG9va3VwQXNzZXRCYWxhbmNlcyhhc3NldElkKVxuICAgICAqICAgICAgICAubGltaXQobWF4UmVzdWx0cylcbiAgICAgKiAgICAgICAgLmRvKCk7XG4gICAgICpcbiAgICAgKiBjb25zdCBhc3NldEJhbGFuY2VzUGFnZTIgPSBhd2FpdCBpbmRleGVyQ2xpZW50XG4gICAgICogICAgICAgIC5sb29rdXBBc3NldEJhbGFuY2VzKGFzc2V0SWQpXG4gICAgICogICAgICAgIC5saW1pdChtYXhSZXN1bHRzKVxuICAgICAqICAgICAgICAubmV4dFRva2VuKGFzc2V0QmFsYW5jZXNQYWdlMVtcIm5leHQtdG9rZW5cIl0pXG4gICAgICogICAgICAgIC5kbygpO1xuICAgICAqIGBgYFxuICAgICAqIEBwYXJhbSBuZXh0VG9rZW4gLSBwcm92aWRlZCBieSB0aGUgcHJldmlvdXMgcmVzdWx0cy5cbiAgICAgKiBAY2F0ZWdvcnkgcXVlcnlcbiAgICAgKi9cbiAgICBuZXh0VG9rZW4obmV4dFRva2VuKSB7XG4gICAgICAgIHRoaXMucXVlcnkubmV4dCA9IG5leHRUb2tlbjtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEluY2x1ZGUgYWxsIGl0ZW1zIGluY2x1ZGluZyBjbG9zZWQgYWNjb3VudHMsIGRlbGV0ZWQgYXBwbGljYXRpb25zLCBkZXN0cm95ZWQgYXNzZXRzLCBvcHRlZC1vdXQgYXNzZXQgaG9sZGluZ3MsIGFuZCBjbG9zZWQtb3V0IGFwcGxpY2F0aW9uIGxvY2Fsc3RhdGVzLlxuICAgICAqXG4gICAgICogIyMjIyBFeGFtcGxlIDFcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogY29uc3QgYXNzZXRJZCA9IDE2MzY1MDtcbiAgICAgKiBjb25zdCBhc3NldEJhbGFuY2VzID0gYXdhaXQgaW5kZXhlckNsaWVudFxuICAgICAqICAgICAgICAubG9va3VwQXNzZXRCYWxhbmNlcyhhc3NldElkKVxuICAgICAqICAgICAgICAuaW5jbHVkZUFsbChmYWxzZSlcbiAgICAgKiAgICAgICAgLmRvKCk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiAjIyMjIEV4YW1wbGUgMlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjb25zdCBhc3NldElkID0gMTYzNjUwO1xuICAgICAqIGNvbnN0IGFzc2V0QmFsYW5jZXMgPSBhd2FpdCBpbmRleGVyQ2xpZW50XG4gICAgICogICAgICAgIC5sb29rdXBBc3NldEJhbGFuY2VzKGFzc2V0SWQpXG4gICAgICogICAgICAgIC5pbmNsdWRlQWxsKClcbiAgICAgKiAgICAgICAgLmRvKCk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdmFsdWVcbiAgICAgKiBAY2F0ZWdvcnkgcXVlcnlcbiAgICAgKi9cbiAgICBpbmNsdWRlQWxsKHZhbHVlID0gdHJ1ZSkge1xuICAgICAgICB0aGlzLnF1ZXJ5WydpbmNsdWRlLWFsbCddID0gdmFsdWU7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY2xhc3MtbWV0aG9kcy11c2UtdGhpc1xuICAgIHByZXBhcmUocmVzcG9uc2UpIHtcbiAgICAgICAgcmV0dXJuIGRlY29kZUpTT04ocmVzcG9uc2UuZ2V0SlNPTlRleHQoKSwgQXNzZXRCYWxhbmNlc1Jlc3BvbnNlKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1sb29rdXBBc3NldEJhbGFuY2VzLmpzLm1hcCJdLCJuYW1lcyI6WyJKU09OUmVxdWVzdCIsImRlY29kZUpTT04iLCJBc3NldEJhbGFuY2VzUmVzcG9uc2UiLCJMb29rdXBBc3NldEJhbGFuY2VzIiwiY29uc3RydWN0b3IiLCJjIiwiaW5kZXgiLCJCaWdJbnQiLCJwYXRoIiwibGltaXQiLCJxdWVyeSIsImN1cnJlbmN5R3JlYXRlclRoYW4iLCJncmVhdGVyIiwidG9TdHJpbmciLCJjdXJyZW5jeUxlc3NUaGFuIiwibGVzc2VyIiwibmV4dFRva2VuIiwibmV4dCIsImluY2x1ZGVBbGwiLCJ2YWx1ZSIsInByZXBhcmUiLCJyZXNwb25zZSIsImdldEpTT05UZXh0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/client/v2/indexer/lookupAssetBalances.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/client/v2/indexer/lookupAssetByID.js":
/*!****************************************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/client/v2/indexer/lookupAssetByID.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ LookupAssetByID)\n/* harmony export */ });\n/* harmony import */ var _jsonrequest_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../jsonrequest.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/jsonrequest.js\");\n/* harmony import */ var _encoding_encoding_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../encoding/encoding.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/encoding.js\");\n/* harmony import */ var _models_types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./models/types.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/indexer/models/types.js\");\n\n\n\nclass LookupAssetByID extends _jsonrequest_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Returns asset information of the queried asset.\n     *\n     * #### Example\n     * ```typescript\n     * const assetId = 163650;\n     * const assetInfo = await indexerClient.lookupAssetByID(assetId).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2assetsasset-id)\n     * @param index - The asset ID to look up.\n     */ constructor(c, index){\n        super(c);\n        this.index = BigInt(index);\n    }\n    /**\n     * @returns `/v2/assets/${index}`\n     */ path() {\n        return `/v2/assets/${this.index}`;\n    }\n    /**\n     * Includes all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates\n     *\n     * #### Example 1\n     * ```typescript\n     * const assetId = 163650;\n     * const assetInfo = await indexerClient\n     *        .lookupAssetByID(assetId)\n     *        .includeAll(false)\n     *        .do();\n     * ```\n     *\n     * #### Example 2\n     * ```typescript\n     * const assetId = 163650;\n     * const assetInfo = await indexerClient\n     *        .lookupAssetByID(assetId)\n     *        .includeAll()\n     *        .do();\n     * ```\n     *\n     * @param value - default true when called without passing a value\n     * @category query\n     */ includeAll(value = true) {\n        this.query[\"include-all\"] = value;\n        return this;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    prepare(response) {\n        return (0,_encoding_encoding_js__WEBPACK_IMPORTED_MODULE_1__.decodeJSON)(response.getJSONText(), _models_types_js__WEBPACK_IMPORTED_MODULE_2__.AssetResponse);\n    }\n} //# sourceMappingURL=lookupAssetByID.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9jbGllbnQvdjIvaW5kZXhlci9sb29rdXBBc3NldEJ5SUQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUE0QztBQUNlO0FBQ1Q7QUFDbkMsTUFBTUcsd0JBQXdCSCx1REFBV0E7SUFDcEQ7Ozs7Ozs7Ozs7O0tBV0MsR0FDREksWUFBWUMsQ0FBQyxFQUFFQyxLQUFLLENBQUU7UUFDbEIsS0FBSyxDQUFDRDtRQUNOLElBQUksQ0FBQ0MsS0FBSyxHQUFHQyxPQUFPRDtJQUN4QjtJQUNBOztLQUVDLEdBQ0RFLE9BQU87UUFDSCxPQUFPLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQ0YsS0FBSyxDQUFDLENBQUM7SUFDckM7SUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7S0F1QkMsR0FDREcsV0FBV0MsUUFBUSxJQUFJLEVBQUU7UUFDckIsSUFBSSxDQUFDQyxLQUFLLENBQUMsY0FBYyxHQUFHRDtRQUM1QixPQUFPLElBQUk7SUFDZjtJQUNBLGtEQUFrRDtJQUNsREUsUUFBUUMsUUFBUSxFQUFFO1FBQ2QsT0FBT1osaUVBQVVBLENBQUNZLFNBQVNDLFdBQVcsSUFBSVosMkRBQWFBO0lBQzNEO0FBQ0osRUFDQSwyQ0FBMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hbGdvcmFuZC1jcm93ZGZ1bmRpbmctZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9jbGllbnQvdjIvaW5kZXhlci9sb29rdXBBc3NldEJ5SUQuanM/ZWFkMyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgSlNPTlJlcXVlc3QgZnJvbSAnLi4vanNvbnJlcXVlc3QuanMnO1xuaW1wb3J0IHsgZGVjb2RlSlNPTiB9IGZyb20gJy4uLy4uLy4uL2VuY29kaW5nL2VuY29kaW5nLmpzJztcbmltcG9ydCB7IEFzc2V0UmVzcG9uc2UgfSBmcm9tICcuL21vZGVscy90eXBlcy5qcyc7XG5leHBvcnQgZGVmYXVsdCBjbGFzcyBMb29rdXBBc3NldEJ5SUQgZXh0ZW5kcyBKU09OUmVxdWVzdCB7XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhc3NldCBpbmZvcm1hdGlvbiBvZiB0aGUgcXVlcmllZCBhc3NldC5cbiAgICAgKlxuICAgICAqICMjIyMgRXhhbXBsZVxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjb25zdCBhc3NldElkID0gMTYzNjUwO1xuICAgICAqIGNvbnN0IGFzc2V0SW5mbyA9IGF3YWl0IGluZGV4ZXJDbGllbnQubG9va3VwQXNzZXRCeUlEKGFzc2V0SWQpLmRvKCk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBbUmVzcG9uc2UgZGF0YSBzY2hlbWEgZGV0YWlsc10oaHR0cHM6Ly9kZXZlbG9wZXIuYWxnb3JhbmQub3JnL2RvY3MvcmVzdC1hcGlzL2luZGV4ZXIvI2dldC12MmFzc2V0c2Fzc2V0LWlkKVxuICAgICAqIEBwYXJhbSBpbmRleCAtIFRoZSBhc3NldCBJRCB0byBsb29rIHVwLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGMsIGluZGV4KSB7XG4gICAgICAgIHN1cGVyKGMpO1xuICAgICAgICB0aGlzLmluZGV4ID0gQmlnSW50KGluZGV4KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHJldHVybnMgYC92Mi9hc3NldHMvJHtpbmRleH1gXG4gICAgICovXG4gICAgcGF0aCgpIHtcbiAgICAgICAgcmV0dXJuIGAvdjIvYXNzZXRzLyR7dGhpcy5pbmRleH1gO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJbmNsdWRlcyBhbGwgaXRlbXMgaW5jbHVkaW5nIGNsb3NlZCBhY2NvdW50cywgZGVsZXRlZCBhcHBsaWNhdGlvbnMsIGRlc3Ryb3llZCBhc3NldHMsIG9wdGVkLW91dCBhc3NldCBob2xkaW5ncywgYW5kIGNsb3NlZC1vdXQgYXBwbGljYXRpb24gbG9jYWxzdGF0ZXNcbiAgICAgKlxuICAgICAqICMjIyMgRXhhbXBsZSAxXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IGFzc2V0SWQgPSAxNjM2NTA7XG4gICAgICogY29uc3QgYXNzZXRJbmZvID0gYXdhaXQgaW5kZXhlckNsaWVudFxuICAgICAqICAgICAgICAubG9va3VwQXNzZXRCeUlEKGFzc2V0SWQpXG4gICAgICogICAgICAgIC5pbmNsdWRlQWxsKGZhbHNlKVxuICAgICAqICAgICAgICAuZG8oKTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqICMjIyMgRXhhbXBsZSAyXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IGFzc2V0SWQgPSAxNjM2NTA7XG4gICAgICogY29uc3QgYXNzZXRJbmZvID0gYXdhaXQgaW5kZXhlckNsaWVudFxuICAgICAqICAgICAgICAubG9va3VwQXNzZXRCeUlEKGFzc2V0SWQpXG4gICAgICogICAgICAgIC5pbmNsdWRlQWxsKClcbiAgICAgKiAgICAgICAgLmRvKCk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdmFsdWUgLSBkZWZhdWx0IHRydWUgd2hlbiBjYWxsZWQgd2l0aG91dCBwYXNzaW5nIGEgdmFsdWVcbiAgICAgKiBAY2F0ZWdvcnkgcXVlcnlcbiAgICAgKi9cbiAgICBpbmNsdWRlQWxsKHZhbHVlID0gdHJ1ZSkge1xuICAgICAgICB0aGlzLnF1ZXJ5WydpbmNsdWRlLWFsbCddID0gdmFsdWU7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY2xhc3MtbWV0aG9kcy11c2UtdGhpc1xuICAgIHByZXBhcmUocmVzcG9uc2UpIHtcbiAgICAgICAgcmV0dXJuIGRlY29kZUpTT04ocmVzcG9uc2UuZ2V0SlNPTlRleHQoKSwgQXNzZXRSZXNwb25zZSk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bG9va3VwQXNzZXRCeUlELmpzLm1hcCJdLCJuYW1lcyI6WyJKU09OUmVxdWVzdCIsImRlY29kZUpTT04iLCJBc3NldFJlc3BvbnNlIiwiTG9va3VwQXNzZXRCeUlEIiwiY29uc3RydWN0b3IiLCJjIiwiaW5kZXgiLCJCaWdJbnQiLCJwYXRoIiwiaW5jbHVkZUFsbCIsInZhbHVlIiwicXVlcnkiLCJwcmVwYXJlIiwicmVzcG9uc2UiLCJnZXRKU09OVGV4dCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/client/v2/indexer/lookupAssetByID.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/client/v2/indexer/lookupAssetTransactions.js":
/*!************************************************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/client/v2/indexer/lookupAssetTransactions.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ LookupAssetTransactions)\n/* harmony export */ });\n/* harmony import */ var _jsonrequest_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../jsonrequest.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/jsonrequest.js\");\n/* harmony import */ var _encoding_encoding_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../encoding/encoding.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/encoding.js\");\n/* harmony import */ var _lookupAccountTransactions_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./lookupAccountTransactions.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/indexer/lookupAccountTransactions.js\");\n/* harmony import */ var _models_types_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./models/types.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/indexer/models/types.js\");\n\n\n\n\nclass LookupAssetTransactions extends _jsonrequest_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Returns transactions relating to the given asset.\n     *\n     * #### Example\n     * ```typescript\n     * const assetId = 163650;\n     * const assetTxns = await indexerClient.lookupAssetTransactions(assetId).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2assetsasset-idtransactions)\n     * @param index - The asset ID to look up.\n     */ constructor(c, index){\n        super(c);\n        this.index = BigInt(index);\n    }\n    /**\n     * @returns `/v2/assets/${index}/transactions`\n     */ path() {\n        return `/v2/assets/${this.index}/transactions`;\n    }\n    /**\n     * Specifies a prefix which must be contained in the note field.\n     *\n     * #### Example\n     * ```typescript\n     * const notePrefixBase64Encoded = \"Y3JlYXRl\";\n     * const assetId = 163650;\n     * const assetTxns = await indexerClient\n     *        .lookupAssetTransactions(assetId)\n     *        .notePrefix(notePrefixBase64Encoded)\n     *        .do();\n     * ```\n     *\n     * @param prefix - base64 string or uint8array\n     * @category query\n     */ notePrefix(prefix) {\n        this.query[\"note-prefix\"] = (0,_lookupAccountTransactions_js__WEBPACK_IMPORTED_MODULE_2__.base64StringFunnel)(prefix);\n        return this;\n    }\n    /**\n     * Type of transaction to filter with.\n     *\n     * #### Example\n     * ```typescript\n     * const assetId = 163650;\n     * const assetTxns = await indexerClient\n     *        .lookupAssetTransactions(assetId)\n     *        .txType(\"axfer\")\n     *        .do();\n     * ```\n     *\n     * @param type - one of `pay`, `keyreg`, `acfg`, `axfer`, `afrz`, `appl`\n     * @category query\n     */ txType(type) {\n        this.query[\"tx-type\"] = type;\n        return this;\n    }\n    /**\n     * Type of signature to filter with.\n     * - sig: Standard\n     * - msig: MultiSig\n     * - lsig: LogicSig\n     *\n     * #### Example\n     * ```typescript\n     * const assetId = 163650;\n     * const assetTxns = await indexerClient\n     *        .lookupAssetTransactions(assetId)\n     *        .sigType(\"lsig\")\n     *        .do();\n     * ```\n     *\n     * @param type - one of `sig`, `msig`, `lsig`\n     * @category query\n     */ sigType(type) {\n        this.query[\"sig-type\"] = type;\n        return this;\n    }\n    /**\n     * Lookup the specific transaction by ID.\n     *\n     * #### Example\n     * ```typescript\n     * const txId = \"MEUOC4RQJB23CQZRFRKYEI6WBO73VTTPST5A7B3S5OKBUY6LFUDA\";\n     * const assetId = 163650;\n     * const assetTxns = await indexerClient\n     *        .lookupAssetTransactions(assetId)\n     *        .txid(txId)\n     *        .do();\n     * ```\n     *\n     * @param txid\n     * @category query\n     */ txid(txid) {\n        this.query.txid = txid;\n        return this;\n    }\n    /**\n     * Include results for the specified round.\n     *\n     * #### Example\n     * ```typescript\n     * const targetBlock = 18309917;\n     * const assetId = 163650;\n     * const assetTxns = await indexerClient\n     *        .lookupAssetTransactions(assetId)\n     *        .round(targetBlock)\n     *        .do();\n     * ```\n     *\n     * @param round\n     * @category query\n     */ round(round) {\n        this.query.round = round;\n        return this;\n    }\n    /**\n     * Include results at or after the specified min-round.\n     *\n     * #### Example\n     * ```typescript\n     * const minRound = 18309917;\n     * const assetId = 163650;\n     * const assetTxns = await indexerClient\n     *        .lookupAssetTransactions(assetId)\n     *        .minRound(minRound)\n     *        .do();\n     * ```\n     *\n     * @param round\n     * @category query\n     */ minRound(round) {\n        this.query[\"min-round\"] = round;\n        return this;\n    }\n    /**\n     * Include results at or before the specified max-round.\n     *\n     * #### Example\n     * ```typescript\n     * const maxRound = 18309917;\n     * const assetId = 163650;\n     * const assetTxns = await indexerClient\n     *        .lookupAssetTransactions(assetId)\n     *        .maxRound(maxRound)\n     *        .do();\n     * ```\n     *\n     * @param round\n     * @category query\n     */ maxRound(round) {\n        this.query[\"max-round\"] = round;\n        return this;\n    }\n    /**\n     * Maximum number of results to return.\n     *\n     * #### Example\n     * ```typescript\n     * const maxResults = 25;\n     * const assetId = 163650;\n     * const assetTxns = await indexerClient\n     *        .lookupAssetTransactions(assetId)\n     *        .limit(maxResults)\n     *        .do();\n     * ```\n     *\n     * @param limit\n     * @category query\n     */ limit(limit) {\n        this.query.limit = limit;\n        return this;\n    }\n    /**\n     * Include results before the given time.\n     *\n     * #### Example\n     * ```typescript\n     * const beforeTime = \"2022-02-02T20:20:22.02Z\";\n     * const assetId = 163650;\n     * const assetTxns = await indexerClient\n     *        .lookupAssetTransactions(assetId)\n     *        .beforeTime(beforeTime)\n     *        .do();\n     * ```\n     *\n     * @param before - rfc3339 string or Date object\n     * @category query\n     */ beforeTime(before) {\n        this.query[\"before-time\"] = before instanceof Date ? before.toISOString() : before;\n        return this;\n    }\n    /**\n     * Include results after the given time.\n     *\n     * #### Example\n     * ```typescript\n     * const afterTime = \"2022-10-21T00:00:11.55Z\";\n     * const assetId = 163650;\n     * const assetTxns = await indexerClient\n     *        .lookupAssetTransactions(assetId)\n     *        .afterTime(afterTime)\n     *        .do();\n     * ```\n     *\n     * @param after - rfc3339 string or Date object\n     * @category query\n     */ afterTime(after) {\n        this.query[\"after-time\"] = after instanceof Date ? after.toISOString() : after;\n        return this;\n    }\n    /**\n     * Filtered results should have an amount greater than this value, as int, representing asset units.\n     *\n     * #### Example\n     * ```typescript\n     * const minBalance = 300000;\n     * const assetId = 163650;\n     * const assetTxns = await indexerClient\n     *        .lookupAssetTransactions(assetId)\n     *        .currencyGreaterThan(minBalance - 1)\n     *        .do();\n     * ```\n     *\n     * @param greater\n     * @category query\n     */ currencyGreaterThan(greater) {\n        // We convert the following to a string for now to correctly include zero values in request parameters.\n        this.query[\"currency-greater-than\"] = greater.toString();\n        return this;\n    }\n    /**\n     * Filtered results should have an amount less than this value, as int, representing asset units.\n     *\n     * #### Example\n     * ```typescript\n     * const maxBalance = 500000;\n     * const assetId = 163650;\n     * const assetTxns = await indexerClient\n     *        .lookupAssetTransactions(assetId)\n     *        .currencyLessThan(maxBalance + 1)\n     *        .do();\n     * ```\n     *\n     * @param lesser\n     * @category query\n     */ currencyLessThan(lesser) {\n        this.query[\"currency-less-than\"] = lesser;\n        return this;\n    }\n    /**\n     * Combined with address, defines what address to filter on, as string.\n     *\n     * #### Example\n     * ```typescript\n     * const assetId = 163650;\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const role = \"sender\";\n     * const assetTxns = await indexerClient\n     *        .lookupAssetTransactions(assetId)\n     *        .address(address)\n     *        .addressRole(role)\n     *        .do();\n     * ```\n     *\n     * @param role - one of `sender`, `receiver`, `freeze-target`\n     * @category query\n     */ addressRole(role) {\n        this.query[\"address-role\"] = role;\n        return this;\n    }\n    /**\n     * Only include transactions with this address in one of the transaction fields.\n     *\n     * #### Example\n     * ```typescript\n     * const assetId = 163650;\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const assetTxns = await indexerClient\n     *        .lookupAssetTransactions(assetId)\n     *        .address(address)\n     *        .do();\n     * ```\n     *\n     * @param address\n     * @category query\n     */ address(address) {\n        this.query.address = address.toString();\n        return this;\n    }\n    /**\n     * Whether or not to consider the `close-to` field as a receiver when filtering transactions, as bool. Set to `true` to ignore `close-to`.\n     *\n     * #### Example\n     * ```typescript\n     * const assetId = 163650;\n     * const assetTxns = await indexerClient\n     *        .lookupAssetTransactions(assetId)\n     *        .excludeCloseTo(true)\n     *        .do();\n     * ```\n     *\n     * @param exclude\n     * @category query\n     */ excludeCloseTo(exclude) {\n        this.query[\"exclude-close-to\"] = exclude;\n        return this;\n    }\n    /**\n     * The next page of results.\n     *\n     * #### Example\n     * ```typescript\n     * const maxResults = 25;\n     * const assetId = 163650;\n     *\n     * const assetTxnsPage1 = await indexerClient\n     *        .lookupAssetTransactions(assetId)\n     *        .limit(maxResults)\n     *        .do();\n     *\n     * const assetTxnsPage2 = await indexerClient\n     *        .lookupAssetTransactions(assetId)\n     *        .limit(maxResults)\n     *        .nextToken(assetTxnsPage1[\"next-token\"])\n     *        .do();\n     * ```\n     *\n     * @param nextToken - provided by the previous results.\n     * @category query\n     */ nextToken(nextToken) {\n        this.query.next = nextToken;\n        return this;\n    }\n    /**\n     * Whether or not to include rekeying transactions.\n     *\n     * #### Example\n     * ```typescript\n     * const assetId = 163650;\n     * const assetTxns = await indexerClient\n     *        .lookupAssetTransactions(assetId)\n     *        .rekeyTo(false)\n     *        .do();\n     * ```\n     *\n     * @param rekeyTo\n     * @category query\n     */ rekeyTo(rekeyTo) {\n        this.query[\"rekey-to\"] = rekeyTo;\n        return this;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    prepare(response) {\n        return (0,_encoding_encoding_js__WEBPACK_IMPORTED_MODULE_1__.decodeJSON)(response.getJSONText(), _models_types_js__WEBPACK_IMPORTED_MODULE_3__.TransactionsResponse);\n    }\n} //# sourceMappingURL=lookupAssetTransactions.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/client/v2/indexer/lookupAssetTransactions.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/client/v2/indexer/lookupBlock.js":
/*!************************************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/client/v2/indexer/lookupBlock.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ LookupBlock)\n/* harmony export */ });\n/* harmony import */ var _jsonrequest_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../jsonrequest.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/jsonrequest.js\");\n/* harmony import */ var _encoding_encoding_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../encoding/encoding.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/encoding.js\");\n/* harmony import */ var _models_types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./models/types.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/indexer/models/types.js\");\n\n\n\nclass LookupBlock extends _jsonrequest_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Returns the block for the passed round.\n     *\n     * #### Example\n     * ```typescript\n     * const targetBlock = 18309917;\n     * const blockInfo = await indexerClient.lookupBlock(targetBlock).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2blocksround-number)\n     * @param round - The number of the round to look up.\n     * @category GET\n     */ constructor(c, round){\n        super(c);\n        this.round = BigInt(round);\n    }\n    /**\n     * @returns `/v2/blocks/${round}`\n     */ path() {\n        return `/v2/blocks/${this.round}`;\n    }\n    /**\n     * Header only flag. When this is set to true, returned block does not contain the\n     * transactions.\n     */ headerOnly(headerOnly) {\n        this.query[\"header-only\"] = headerOnly;\n        return this;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    prepare(response) {\n        return (0,_encoding_encoding_js__WEBPACK_IMPORTED_MODULE_1__.decodeJSON)(response.getJSONText(), _models_types_js__WEBPACK_IMPORTED_MODULE_2__.Block);\n    }\n} //# sourceMappingURL=lookupBlock.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9jbGllbnQvdjIvaW5kZXhlci9sb29rdXBCbG9jay5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQTRDO0FBQ2U7QUFDakI7QUFDM0IsTUFBTUcsb0JBQW9CSCx1REFBV0E7SUFDaEQ7Ozs7Ozs7Ozs7OztLQVlDLEdBQ0RJLFlBQVlDLENBQUMsRUFBRUMsS0FBSyxDQUFFO1FBQ2xCLEtBQUssQ0FBQ0Q7UUFDTixJQUFJLENBQUNDLEtBQUssR0FBR0MsT0FBT0Q7SUFDeEI7SUFDQTs7S0FFQyxHQUNERSxPQUFPO1FBQ0gsT0FBTyxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUNGLEtBQUssQ0FBQyxDQUFDO0lBQ3JDO0lBQ0E7OztLQUdDLEdBQ0RHLFdBQVdBLFVBQVUsRUFBRTtRQUNuQixJQUFJLENBQUNDLEtBQUssQ0FBQyxjQUFjLEdBQUdEO1FBQzVCLE9BQU8sSUFBSTtJQUNmO0lBQ0Esa0RBQWtEO0lBQ2xERSxRQUFRQyxRQUFRLEVBQUU7UUFDZCxPQUFPWCxpRUFBVUEsQ0FBQ1csU0FBU0MsV0FBVyxJQUFJWCxtREFBS0E7SUFDbkQ7QUFDSixFQUNBLHVDQUF1QyIsInNvdXJjZXMiOlsid2VicGFjazovL2FsZ29yYW5kLWNyb3dkZnVuZGluZy1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9hbGdvc2RrL2Rpc3QvZXNtL2NsaWVudC92Mi9pbmRleGVyL2xvb2t1cEJsb2NrLmpzPzAwYzUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEpTT05SZXF1ZXN0IGZyb20gJy4uL2pzb25yZXF1ZXN0LmpzJztcbmltcG9ydCB7IGRlY29kZUpTT04gfSBmcm9tICcuLi8uLi8uLi9lbmNvZGluZy9lbmNvZGluZy5qcyc7XG5pbXBvcnQgeyBCbG9jayB9IGZyb20gJy4vbW9kZWxzL3R5cGVzLmpzJztcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExvb2t1cEJsb2NrIGV4dGVuZHMgSlNPTlJlcXVlc3Qge1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGJsb2NrIGZvciB0aGUgcGFzc2VkIHJvdW5kLlxuICAgICAqXG4gICAgICogIyMjIyBFeGFtcGxlXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IHRhcmdldEJsb2NrID0gMTgzMDk5MTc7XG4gICAgICogY29uc3QgYmxvY2tJbmZvID0gYXdhaXQgaW5kZXhlckNsaWVudC5sb29rdXBCbG9jayh0YXJnZXRCbG9jaykuZG8oKTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIFtSZXNwb25zZSBkYXRhIHNjaGVtYSBkZXRhaWxzXShodHRwczovL2RldmVsb3Blci5hbGdvcmFuZC5vcmcvZG9jcy9yZXN0LWFwaXMvaW5kZXhlci8jZ2V0LXYyYmxvY2tzcm91bmQtbnVtYmVyKVxuICAgICAqIEBwYXJhbSByb3VuZCAtIFRoZSBudW1iZXIgb2YgdGhlIHJvdW5kIHRvIGxvb2sgdXAuXG4gICAgICogQGNhdGVnb3J5IEdFVFxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGMsIHJvdW5kKSB7XG4gICAgICAgIHN1cGVyKGMpO1xuICAgICAgICB0aGlzLnJvdW5kID0gQmlnSW50KHJvdW5kKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHJldHVybnMgYC92Mi9ibG9ja3MvJHtyb3VuZH1gXG4gICAgICovXG4gICAgcGF0aCgpIHtcbiAgICAgICAgcmV0dXJuIGAvdjIvYmxvY2tzLyR7dGhpcy5yb3VuZH1gO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBIZWFkZXIgb25seSBmbGFnLiBXaGVuIHRoaXMgaXMgc2V0IHRvIHRydWUsIHJldHVybmVkIGJsb2NrIGRvZXMgbm90IGNvbnRhaW4gdGhlXG4gICAgICogdHJhbnNhY3Rpb25zLlxuICAgICAqL1xuICAgIGhlYWRlck9ubHkoaGVhZGVyT25seSkge1xuICAgICAgICB0aGlzLnF1ZXJ5WydoZWFkZXItb25seSddID0gaGVhZGVyT25seTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjbGFzcy1tZXRob2RzLXVzZS10aGlzXG4gICAgcHJlcGFyZShyZXNwb25zZSkge1xuICAgICAgICByZXR1cm4gZGVjb2RlSlNPTihyZXNwb25zZS5nZXRKU09OVGV4dCgpLCBCbG9jayk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bG9va3VwQmxvY2suanMubWFwIl0sIm5hbWVzIjpbIkpTT05SZXF1ZXN0IiwiZGVjb2RlSlNPTiIsIkJsb2NrIiwiTG9va3VwQmxvY2siLCJjb25zdHJ1Y3RvciIsImMiLCJyb3VuZCIsIkJpZ0ludCIsInBhdGgiLCJoZWFkZXJPbmx5IiwicXVlcnkiLCJwcmVwYXJlIiwicmVzcG9uc2UiLCJnZXRKU09OVGV4dCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/client/v2/indexer/lookupBlock.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/client/v2/indexer/lookupTransactionByID.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/client/v2/indexer/lookupTransactionByID.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ LookupTransactionByID)\n/* harmony export */ });\n/* harmony import */ var _jsonrequest_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../jsonrequest.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/jsonrequest.js\");\n/* harmony import */ var _encoding_encoding_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../encoding/encoding.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/encoding.js\");\n/* harmony import */ var _models_types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./models/types.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/indexer/models/types.js\");\n\n\n\nclass LookupTransactionByID extends _jsonrequest_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Returns information about the given transaction.\n     *\n     * #### Example\n     * ```typescript\n     * const txnId = \"MEUOC4RQJB23CQZRFRKYEI6WBO73VTTPST5A7B3S5OKBUY6LFUDA\";\n     * const txnInfo = await indexerClient.lookupTransactionByID(txnId).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2transactionstxid)\n     * @param txID - The ID of the transaction to look up.\n     * @category GET\n     */ constructor(c, txID){\n        super(c);\n        this.txID = txID;\n    }\n    /**\n     * @returns `/v2/transactions/${txID}`\n     */ path() {\n        return `/v2/transactions/${this.txID}`;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    prepare(response) {\n        return (0,_encoding_encoding_js__WEBPACK_IMPORTED_MODULE_1__.decodeJSON)(response.getJSONText(), _models_types_js__WEBPACK_IMPORTED_MODULE_2__.TransactionResponse);\n    }\n} //# sourceMappingURL=lookupTransactionByID.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9jbGllbnQvdjIvaW5kZXhlci9sb29rdXBUcmFuc2FjdGlvbkJ5SUQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUE0QztBQUNlO0FBQ0g7QUFDekMsTUFBTUcsOEJBQThCSCx1REFBV0E7SUFDMUQ7Ozs7Ozs7Ozs7OztLQVlDLEdBQ0RJLFlBQVlDLENBQUMsRUFBRUMsSUFBSSxDQUFFO1FBQ2pCLEtBQUssQ0FBQ0Q7UUFDTixJQUFJLENBQUNDLElBQUksR0FBR0E7SUFDaEI7SUFDQTs7S0FFQyxHQUNEQyxPQUFPO1FBQ0gsT0FBTyxDQUFDLGlCQUFpQixFQUFFLElBQUksQ0FBQ0QsSUFBSSxDQUFDLENBQUM7SUFDMUM7SUFDQSxrREFBa0Q7SUFDbERFLFFBQVFDLFFBQVEsRUFBRTtRQUNkLE9BQU9SLGlFQUFVQSxDQUFDUSxTQUFTQyxXQUFXLElBQUlSLGlFQUFtQkE7SUFDakU7QUFDSixFQUNBLGlEQUFpRCIsInNvdXJjZXMiOlsid2VicGFjazovL2FsZ29yYW5kLWNyb3dkZnVuZGluZy1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9hbGdvc2RrL2Rpc3QvZXNtL2NsaWVudC92Mi9pbmRleGVyL2xvb2t1cFRyYW5zYWN0aW9uQnlJRC5qcz9jOTY5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBKU09OUmVxdWVzdCBmcm9tICcuLi9qc29ucmVxdWVzdC5qcyc7XG5pbXBvcnQgeyBkZWNvZGVKU09OIH0gZnJvbSAnLi4vLi4vLi4vZW5jb2RpbmcvZW5jb2RpbmcuanMnO1xuaW1wb3J0IHsgVHJhbnNhY3Rpb25SZXNwb25zZSB9IGZyb20gJy4vbW9kZWxzL3R5cGVzLmpzJztcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExvb2t1cFRyYW5zYWN0aW9uQnlJRCBleHRlbmRzIEpTT05SZXF1ZXN0IHtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGluZm9ybWF0aW9uIGFib3V0IHRoZSBnaXZlbiB0cmFuc2FjdGlvbi5cbiAgICAgKlxuICAgICAqICMjIyMgRXhhbXBsZVxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjb25zdCB0eG5JZCA9IFwiTUVVT0M0UlFKQjIzQ1FaUkZSS1lFSTZXQk83M1ZUVFBTVDVBN0IzUzVPS0JVWTZMRlVEQVwiO1xuICAgICAqIGNvbnN0IHR4bkluZm8gPSBhd2FpdCBpbmRleGVyQ2xpZW50Lmxvb2t1cFRyYW5zYWN0aW9uQnlJRCh0eG5JZCkuZG8oKTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIFtSZXNwb25zZSBkYXRhIHNjaGVtYSBkZXRhaWxzXShodHRwczovL2RldmVsb3Blci5hbGdvcmFuZC5vcmcvZG9jcy9yZXN0LWFwaXMvaW5kZXhlci8jZ2V0LXYydHJhbnNhY3Rpb25zdHhpZClcbiAgICAgKiBAcGFyYW0gdHhJRCAtIFRoZSBJRCBvZiB0aGUgdHJhbnNhY3Rpb24gdG8gbG9vayB1cC5cbiAgICAgKiBAY2F0ZWdvcnkgR0VUXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoYywgdHhJRCkge1xuICAgICAgICBzdXBlcihjKTtcbiAgICAgICAgdGhpcy50eElEID0gdHhJRDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHJldHVybnMgYC92Mi90cmFuc2FjdGlvbnMvJHt0eElEfWBcbiAgICAgKi9cbiAgICBwYXRoKCkge1xuICAgICAgICByZXR1cm4gYC92Mi90cmFuc2FjdGlvbnMvJHt0aGlzLnR4SUR9YDtcbiAgICB9XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNsYXNzLW1ldGhvZHMtdXNlLXRoaXNcbiAgICBwcmVwYXJlKHJlc3BvbnNlKSB7XG4gICAgICAgIHJldHVybiBkZWNvZGVKU09OKHJlc3BvbnNlLmdldEpTT05UZXh0KCksIFRyYW5zYWN0aW9uUmVzcG9uc2UpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxvb2t1cFRyYW5zYWN0aW9uQnlJRC5qcy5tYXAiXSwibmFtZXMiOlsiSlNPTlJlcXVlc3QiLCJkZWNvZGVKU09OIiwiVHJhbnNhY3Rpb25SZXNwb25zZSIsIkxvb2t1cFRyYW5zYWN0aW9uQnlJRCIsImNvbnN0cnVjdG9yIiwiYyIsInR4SUQiLCJwYXRoIiwicHJlcGFyZSIsInJlc3BvbnNlIiwiZ2V0SlNPTlRleHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/client/v2/indexer/lookupTransactionByID.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/client/v2/indexer/makeHealthCheck.js":
/*!****************************************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/client/v2/indexer/makeHealthCheck.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ MakeHealthCheck)\n/* harmony export */ });\n/* harmony import */ var _jsonrequest_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../jsonrequest.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/jsonrequest.js\");\n/* harmony import */ var _encoding_encoding_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../encoding/encoding.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/encoding.js\");\n/* harmony import */ var _models_types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./models/types.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/indexer/models/types.js\");\n\n\n\n/**\n * Returns the health object for the service.\n * Returns 200 if healthy.\n *\n * #### Example\n * ```typescript\n * const health = await indexerClient.makeHealthCheck().do();\n * ```\n *\n * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-health)\n * @category GET\n */ class MakeHealthCheck extends _jsonrequest_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * @returns `/health`\n     */ // eslint-disable-next-line class-methods-use-this\n    path() {\n        return \"/health\";\n    }\n    // eslint-disable-next-line class-methods-use-this\n    prepare(response) {\n        return (0,_encoding_encoding_js__WEBPACK_IMPORTED_MODULE_1__.decodeJSON)(response.getJSONText(), _models_types_js__WEBPACK_IMPORTED_MODULE_2__.HealthCheck);\n    }\n} //# sourceMappingURL=makeHealthCheck.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9jbGllbnQvdjIvaW5kZXhlci9tYWtlSGVhbHRoQ2hlY2suanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUE0QztBQUNlO0FBQ1g7QUFDaEQ7Ozs7Ozs7Ozs7O0NBV0MsR0FDYyxNQUFNRyx3QkFBd0JILHVEQUFXQTtJQUNwRDs7S0FFQyxHQUNELGtEQUFrRDtJQUNsREksT0FBTztRQUNILE9BQU87SUFDWDtJQUNBLGtEQUFrRDtJQUNsREMsUUFBUUMsUUFBUSxFQUFFO1FBQ2QsT0FBT0wsaUVBQVVBLENBQUNLLFNBQVNDLFdBQVcsSUFBSUwseURBQVdBO0lBQ3pEO0FBQ0osRUFDQSwyQ0FBMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hbGdvcmFuZC1jcm93ZGZ1bmRpbmctZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9jbGllbnQvdjIvaW5kZXhlci9tYWtlSGVhbHRoQ2hlY2suanM/ZjU2MCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgSlNPTlJlcXVlc3QgZnJvbSAnLi4vanNvbnJlcXVlc3QuanMnO1xuaW1wb3J0IHsgZGVjb2RlSlNPTiB9IGZyb20gJy4uLy4uLy4uL2VuY29kaW5nL2VuY29kaW5nLmpzJztcbmltcG9ydCB7IEhlYWx0aENoZWNrIH0gZnJvbSAnLi9tb2RlbHMvdHlwZXMuanMnO1xuLyoqXG4gKiBSZXR1cm5zIHRoZSBoZWFsdGggb2JqZWN0IGZvciB0aGUgc2VydmljZS5cbiAqIFJldHVybnMgMjAwIGlmIGhlYWx0aHkuXG4gKlxuICogIyMjIyBFeGFtcGxlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBjb25zdCBoZWFsdGggPSBhd2FpdCBpbmRleGVyQ2xpZW50Lm1ha2VIZWFsdGhDaGVjaygpLmRvKCk7XG4gKiBgYGBcbiAqXG4gKiBbUmVzcG9uc2UgZGF0YSBzY2hlbWEgZGV0YWlsc10oaHR0cHM6Ly9kZXZlbG9wZXIuYWxnb3JhbmQub3JnL2RvY3MvcmVzdC1hcGlzL2luZGV4ZXIvI2dldC1oZWFsdGgpXG4gKiBAY2F0ZWdvcnkgR0VUXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1ha2VIZWFsdGhDaGVjayBleHRlbmRzIEpTT05SZXF1ZXN0IHtcbiAgICAvKipcbiAgICAgKiBAcmV0dXJucyBgL2hlYWx0aGBcbiAgICAgKi9cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY2xhc3MtbWV0aG9kcy11c2UtdGhpc1xuICAgIHBhdGgoKSB7XG4gICAgICAgIHJldHVybiAnL2hlYWx0aCc7XG4gICAgfVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjbGFzcy1tZXRob2RzLXVzZS10aGlzXG4gICAgcHJlcGFyZShyZXNwb25zZSkge1xuICAgICAgICByZXR1cm4gZGVjb2RlSlNPTihyZXNwb25zZS5nZXRKU09OVGV4dCgpLCBIZWFsdGhDaGVjayk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWFrZUhlYWx0aENoZWNrLmpzLm1hcCJdLCJuYW1lcyI6WyJKU09OUmVxdWVzdCIsImRlY29kZUpTT04iLCJIZWFsdGhDaGVjayIsIk1ha2VIZWFsdGhDaGVjayIsInBhdGgiLCJwcmVwYXJlIiwicmVzcG9uc2UiLCJnZXRKU09OVGV4dCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/client/v2/indexer/makeHealthCheck.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/client/v2/indexer/models/types.js":
/*!*************************************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/client/v2/indexer/models/types.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Account: () => (/* binding */ Account),\n/* harmony export */   AccountParticipation: () => (/* binding */ AccountParticipation),\n/* harmony export */   AccountResponse: () => (/* binding */ AccountResponse),\n/* harmony export */   AccountStateDelta: () => (/* binding */ AccountStateDelta),\n/* harmony export */   AccountsResponse: () => (/* binding */ AccountsResponse),\n/* harmony export */   Application: () => (/* binding */ Application),\n/* harmony export */   ApplicationLocalState: () => (/* binding */ ApplicationLocalState),\n/* harmony export */   ApplicationLocalStatesResponse: () => (/* binding */ ApplicationLocalStatesResponse),\n/* harmony export */   ApplicationLogData: () => (/* binding */ ApplicationLogData),\n/* harmony export */   ApplicationLogsResponse: () => (/* binding */ ApplicationLogsResponse),\n/* harmony export */   ApplicationParams: () => (/* binding */ ApplicationParams),\n/* harmony export */   ApplicationResponse: () => (/* binding */ ApplicationResponse),\n/* harmony export */   ApplicationStateSchema: () => (/* binding */ ApplicationStateSchema),\n/* harmony export */   ApplicationsResponse: () => (/* binding */ ApplicationsResponse),\n/* harmony export */   Asset: () => (/* binding */ Asset),\n/* harmony export */   AssetBalancesResponse: () => (/* binding */ AssetBalancesResponse),\n/* harmony export */   AssetHolding: () => (/* binding */ AssetHolding),\n/* harmony export */   AssetHoldingsResponse: () => (/* binding */ AssetHoldingsResponse),\n/* harmony export */   AssetParams: () => (/* binding */ AssetParams),\n/* harmony export */   AssetResponse: () => (/* binding */ AssetResponse),\n/* harmony export */   AssetsResponse: () => (/* binding */ AssetsResponse),\n/* harmony export */   Block: () => (/* binding */ Block),\n/* harmony export */   BlockHeadersResponse: () => (/* binding */ BlockHeadersResponse),\n/* harmony export */   BlockRewards: () => (/* binding */ BlockRewards),\n/* harmony export */   BlockUpgradeState: () => (/* binding */ BlockUpgradeState),\n/* harmony export */   BlockUpgradeVote: () => (/* binding */ BlockUpgradeVote),\n/* harmony export */   Box: () => (/* binding */ Box),\n/* harmony export */   BoxDescriptor: () => (/* binding */ BoxDescriptor),\n/* harmony export */   BoxReference: () => (/* binding */ BoxReference),\n/* harmony export */   BoxesResponse: () => (/* binding */ BoxesResponse),\n/* harmony export */   ErrorResponse: () => (/* binding */ ErrorResponse),\n/* harmony export */   EvalDelta: () => (/* binding */ EvalDelta),\n/* harmony export */   EvalDeltaKeyValue: () => (/* binding */ EvalDeltaKeyValue),\n/* harmony export */   HashFactory: () => (/* binding */ HashFactory),\n/* harmony export */   HbProofFields: () => (/* binding */ HbProofFields),\n/* harmony export */   HealthCheck: () => (/* binding */ HealthCheck),\n/* harmony export */   HoldingRef: () => (/* binding */ HoldingRef),\n/* harmony export */   IndexerStateProofMessage: () => (/* binding */ IndexerStateProofMessage),\n/* harmony export */   LocalsRef: () => (/* binding */ LocalsRef),\n/* harmony export */   MerkleArrayProof: () => (/* binding */ MerkleArrayProof),\n/* harmony export */   MiniAssetHolding: () => (/* binding */ MiniAssetHolding),\n/* harmony export */   ParticipationUpdates: () => (/* binding */ ParticipationUpdates),\n/* harmony export */   ResourceRef: () => (/* binding */ ResourceRef),\n/* harmony export */   StateProofFields: () => (/* binding */ StateProofFields),\n/* harmony export */   StateProofParticipant: () => (/* binding */ StateProofParticipant),\n/* harmony export */   StateProofReveal: () => (/* binding */ StateProofReveal),\n/* harmony export */   StateProofSigSlot: () => (/* binding */ StateProofSigSlot),\n/* harmony export */   StateProofSignature: () => (/* binding */ StateProofSignature),\n/* harmony export */   StateProofTracking: () => (/* binding */ StateProofTracking),\n/* harmony export */   StateProofVerifier: () => (/* binding */ StateProofVerifier),\n/* harmony export */   StateSchema: () => (/* binding */ StateSchema),\n/* harmony export */   TealKeyValue: () => (/* binding */ TealKeyValue),\n/* harmony export */   TealValue: () => (/* binding */ TealValue),\n/* harmony export */   Transaction: () => (/* binding */ Transaction),\n/* harmony export */   TransactionApplication: () => (/* binding */ TransactionApplication),\n/* harmony export */   TransactionAssetConfig: () => (/* binding */ TransactionAssetConfig),\n/* harmony export */   TransactionAssetFreeze: () => (/* binding */ TransactionAssetFreeze),\n/* harmony export */   TransactionAssetTransfer: () => (/* binding */ TransactionAssetTransfer),\n/* harmony export */   TransactionHeartbeat: () => (/* binding */ TransactionHeartbeat),\n/* harmony export */   TransactionKeyreg: () => (/* binding */ TransactionKeyreg),\n/* harmony export */   TransactionPayment: () => (/* binding */ TransactionPayment),\n/* harmony export */   TransactionResponse: () => (/* binding */ TransactionResponse),\n/* harmony export */   TransactionSignature: () => (/* binding */ TransactionSignature),\n/* harmony export */   TransactionSignatureLogicsig: () => (/* binding */ TransactionSignatureLogicsig),\n/* harmony export */   TransactionSignatureMultisig: () => (/* binding */ TransactionSignatureMultisig),\n/* harmony export */   TransactionSignatureMultisigSubsignature: () => (/* binding */ TransactionSignatureMultisigSubsignature),\n/* harmony export */   TransactionStateProof: () => (/* binding */ TransactionStateProof),\n/* harmony export */   TransactionsResponse: () => (/* binding */ TransactionsResponse)\n/* harmony export */ });\n/* harmony import */ var _utils_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../utils/utils.js */ \"(ssr)/./node_modules/algosdk/dist/esm/utils/utils.js\");\n/* harmony import */ var _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../encoding/schema/index.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/schema/index.js\");\n/* harmony import */ var _encoding_binarydata_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../encoding/binarydata.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/binarydata.js\");\n/* harmony import */ var _encoding_address_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../encoding/address.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/address.js\");\n/* harmony import */ var _untypedmodel_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../untypedmodel.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/untypedmodel.js\");\n/**\n * NOTICE: This file was generated. Editing this file manually is not recommended.\n */ /* eslint-disable no-use-before-define */ \n\n\n\n\n/**\n * Account information at a given round.\n * Definition:\n * data/basics/userBalance.go : AccountData\n */ class Account {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"address\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema(),\n                omitEmpty: true\n            }, {\n                key: \"amount\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            }, {\n                key: \"amount-without-pending-rewards\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            }, {\n                key: \"min-balance\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            }, {\n                key: \"pending-rewards\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            }, {\n                key: \"rewards\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            }, {\n                key: \"round\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            }, {\n                key: \"status\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema(),\n                omitEmpty: true\n            }, {\n                key: \"total-apps-opted-in\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            }, {\n                key: \"total-assets-opted-in\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            }, {\n                key: \"total-box-bytes\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            }, {\n                key: \"total-boxes\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            }, {\n                key: \"total-created-apps\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            }, {\n                key: \"total-created-assets\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            }, {\n                key: \"apps-local-state\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ArraySchema(ApplicationLocalState.encodingSchema)),\n                omitEmpty: true\n            }, {\n                key: \"apps-total-extra-pages\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema()),\n                omitEmpty: true\n            }, {\n                key: \"apps-total-schema\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(ApplicationStateSchema.encodingSchema),\n                omitEmpty: true\n            }, {\n                key: \"assets\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ArraySchema(AssetHolding.encodingSchema)),\n                omitEmpty: true\n            }, {\n                key: \"auth-addr\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema()),\n                omitEmpty: true\n            }, {\n                key: \"closed-at-round\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema()),\n                omitEmpty: true\n            }, {\n                key: \"created-apps\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ArraySchema(Application.encodingSchema)),\n                omitEmpty: true\n            }, {\n                key: \"created-assets\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ArraySchema(Asset.encodingSchema)),\n                omitEmpty: true\n            }, {\n                key: \"created-at-round\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema()),\n                omitEmpty: true\n            }, {\n                key: \"deleted\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.BooleanSchema()),\n                omitEmpty: true\n            }, {\n                key: \"incentive-eligible\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.BooleanSchema()),\n                omitEmpty: true\n            }, {\n                key: \"last-heartbeat\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema()),\n                omitEmpty: true\n            }, {\n                key: \"last-proposed\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema()),\n                omitEmpty: true\n            }, {\n                key: \"participation\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(AccountParticipation.encodingSchema),\n                omitEmpty: true\n            }, {\n                key: \"reward-base\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema()),\n                omitEmpty: true\n            }, {\n                key: \"sig-type\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema()),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `Account` object.\n     * @param address - the account public key\n     * @param amount - total number of MicroAlgos in the account\n     * @param amountWithoutPendingRewards - specifies the amount of MicroAlgos in the account, without the pending rewards.\n     * @param minBalance - MicroAlgo balance required by the account.\n     * The requirement grows based on asset and application usage.\n     * @param pendingRewards - amount of MicroAlgos of pending rewards in this account.\n     * @param rewards - total rewards of MicroAlgos the account has received, including pending rewards.\n     * @param round - The round for which this information is relevant.\n     * @param status - voting status of the account's MicroAlgos\n     * * Offline - indicates that the associated account is delegated.\n     * * Online - indicates that the associated account used as part of the delegation\n     * pool.\n     * * NotParticipating - indicates that the associated account is neither a\n     * delegator nor a delegate.\n     * @param totalAppsOptedIn - The count of all applications that have been opted in, equivalent to the count\n     * of application local data (AppLocalState objects) stored in this account.\n     * @param totalAssetsOptedIn - The count of all assets that have been opted in, equivalent to the count of\n     * AssetHolding objects held by this account.\n     * @param totalBoxBytes - For app-accounts only. The total number of bytes allocated for the keys and\n     * values of boxes which belong to the associated application.\n     * @param totalBoxes - For app-accounts only. The total number of boxes which belong to the associated\n     * application.\n     * @param totalCreatedApps - The count of all apps (AppParams objects) created by this account.\n     * @param totalCreatedAssets - The count of all assets (AssetParams objects) created by this account.\n     * @param appsLocalState - application local data stored in this account.\n     * Note the raw object uses `map[int] -> AppLocalState` for this type.\n     * @param appsTotalExtraPages - the sum of all extra application program pages for this account.\n     * @param appsTotalSchema - the sum of all of the local schemas and global schemas in this account.\n     * Note: the raw account uses `StateSchema` for this type.\n     * @param assets - assets held by this account.\n     * Note the raw object uses `map[int] -> AssetHolding` for this type.\n     * @param authAddr - The address against which signing should be checked. If empty, the address of\n     * the current account is used. This field can be updated in any transaction by\n     * setting the RekeyTo field.\n     * @param closedAtRound - Round during which this account was most recently closed.\n     * @param createdApps - parameters of applications created by this account including app global data.\n     * Note: the raw account uses `map[int] -> AppParams` for this type.\n     * @param createdAssets - parameters of assets created by this account.\n     * Note: the raw account uses `map[int] -> Asset` for this type.\n     * @param createdAtRound - Round during which this account first appeared in a transaction.\n     * @param deleted - Whether or not this account is currently closed.\n     * @param incentiveEligible - can the account receive block incentives if its balance is in range at proposal\n     * time.\n     * @param lastHeartbeat - The round in which this account last went online, or explicitly renewed their\n     * online status.\n     * @param lastProposed - The round in which this account last proposed the block.\n     * @param participation - AccountParticipation describes the parameters used by this account in consensus\n     * protocol.\n     * @param rewardBase - used as part of the rewards computation. Only applicable to accounts which are\n     * participating.\n     * @param sigType - the type of signature used by this account, must be one of:\n     * * sig\n     * * msig\n     * * lsig\n     * * or null if unknown\n     */ constructor({ address, amount, amountWithoutPendingRewards, minBalance, pendingRewards, rewards, round, status, totalAppsOptedIn, totalAssetsOptedIn, totalBoxBytes, totalBoxes, totalCreatedApps, totalCreatedAssets, appsLocalState, appsTotalExtraPages, appsTotalSchema, assets, authAddr, closedAtRound, createdApps, createdAssets, createdAtRound, deleted, incentiveEligible, lastHeartbeat, lastProposed, participation, rewardBase, sigType }){\n        this.address = address;\n        this.amount = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(amount);\n        this.amountWithoutPendingRewards = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(amountWithoutPendingRewards);\n        this.minBalance = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureSafeInteger)(minBalance);\n        this.pendingRewards = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(pendingRewards);\n        this.rewards = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(rewards);\n        this.round = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(round);\n        this.status = status;\n        this.totalAppsOptedIn = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureSafeInteger)(totalAppsOptedIn);\n        this.totalAssetsOptedIn = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureSafeInteger)(totalAssetsOptedIn);\n        this.totalBoxBytes = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureSafeInteger)(totalBoxBytes);\n        this.totalBoxes = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureSafeInteger)(totalBoxes);\n        this.totalCreatedApps = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureSafeInteger)(totalCreatedApps);\n        this.totalCreatedAssets = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureSafeInteger)(totalCreatedAssets);\n        this.appsLocalState = appsLocalState;\n        this.appsTotalExtraPages = typeof appsTotalExtraPages === \"undefined\" ? undefined : (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureSafeInteger)(appsTotalExtraPages);\n        this.appsTotalSchema = appsTotalSchema;\n        this.assets = assets;\n        this.authAddr = typeof authAddr === \"string\" ? _encoding_address_js__WEBPACK_IMPORTED_MODULE_3__.Address.fromString(authAddr) : authAddr;\n        this.closedAtRound = typeof closedAtRound === \"undefined\" ? undefined : (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(closedAtRound);\n        this.createdApps = createdApps;\n        this.createdAssets = createdAssets;\n        this.createdAtRound = typeof createdAtRound === \"undefined\" ? undefined : (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(createdAtRound);\n        this.deleted = deleted;\n        this.incentiveEligible = incentiveEligible;\n        this.lastHeartbeat = typeof lastHeartbeat === \"undefined\" ? undefined : (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureSafeInteger)(lastHeartbeat);\n        this.lastProposed = typeof lastProposed === \"undefined\" ? undefined : (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureSafeInteger)(lastProposed);\n        this.participation = participation;\n        this.rewardBase = typeof rewardBase === \"undefined\" ? undefined : (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(rewardBase);\n        this.sigType = sigType;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return Account.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"address\",\n                this.address\n            ],\n            [\n                \"amount\",\n                this.amount\n            ],\n            [\n                \"amount-without-pending-rewards\",\n                this.amountWithoutPendingRewards\n            ],\n            [\n                \"min-balance\",\n                this.minBalance\n            ],\n            [\n                \"pending-rewards\",\n                this.pendingRewards\n            ],\n            [\n                \"rewards\",\n                this.rewards\n            ],\n            [\n                \"round\",\n                this.round\n            ],\n            [\n                \"status\",\n                this.status\n            ],\n            [\n                \"total-apps-opted-in\",\n                this.totalAppsOptedIn\n            ],\n            [\n                \"total-assets-opted-in\",\n                this.totalAssetsOptedIn\n            ],\n            [\n                \"total-box-bytes\",\n                this.totalBoxBytes\n            ],\n            [\n                \"total-boxes\",\n                this.totalBoxes\n            ],\n            [\n                \"total-created-apps\",\n                this.totalCreatedApps\n            ],\n            [\n                \"total-created-assets\",\n                this.totalCreatedAssets\n            ],\n            [\n                \"apps-local-state\",\n                typeof this.appsLocalState !== \"undefined\" ? this.appsLocalState.map((v)=>v.toEncodingData()) : undefined\n            ],\n            [\n                \"apps-total-extra-pages\",\n                this.appsTotalExtraPages\n            ],\n            [\n                \"apps-total-schema\",\n                typeof this.appsTotalSchema !== \"undefined\" ? this.appsTotalSchema.toEncodingData() : undefined\n            ],\n            [\n                \"assets\",\n                typeof this.assets !== \"undefined\" ? this.assets.map((v)=>v.toEncodingData()) : undefined\n            ],\n            [\n                \"auth-addr\",\n                typeof this.authAddr !== \"undefined\" ? this.authAddr.toString() : undefined\n            ],\n            [\n                \"closed-at-round\",\n                this.closedAtRound\n            ],\n            [\n                \"created-apps\",\n                typeof this.createdApps !== \"undefined\" ? this.createdApps.map((v)=>v.toEncodingData()) : undefined\n            ],\n            [\n                \"created-assets\",\n                typeof this.createdAssets !== \"undefined\" ? this.createdAssets.map((v)=>v.toEncodingData()) : undefined\n            ],\n            [\n                \"created-at-round\",\n                this.createdAtRound\n            ],\n            [\n                \"deleted\",\n                this.deleted\n            ],\n            [\n                \"incentive-eligible\",\n                this.incentiveEligible\n            ],\n            [\n                \"last-heartbeat\",\n                this.lastHeartbeat\n            ],\n            [\n                \"last-proposed\",\n                this.lastProposed\n            ],\n            [\n                \"participation\",\n                typeof this.participation !== \"undefined\" ? this.participation.toEncodingData() : undefined\n            ],\n            [\n                \"reward-base\",\n                this.rewardBase\n            ],\n            [\n                \"sig-type\",\n                this.sigType\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded Account: ${data}`);\n        }\n        return new Account({\n            address: data.get(\"address\"),\n            amount: data.get(\"amount\"),\n            amountWithoutPendingRewards: data.get(\"amount-without-pending-rewards\"),\n            minBalance: data.get(\"min-balance\"),\n            pendingRewards: data.get(\"pending-rewards\"),\n            rewards: data.get(\"rewards\"),\n            round: data.get(\"round\"),\n            status: data.get(\"status\"),\n            totalAppsOptedIn: data.get(\"total-apps-opted-in\"),\n            totalAssetsOptedIn: data.get(\"total-assets-opted-in\"),\n            totalBoxBytes: data.get(\"total-box-bytes\"),\n            totalBoxes: data.get(\"total-boxes\"),\n            totalCreatedApps: data.get(\"total-created-apps\"),\n            totalCreatedAssets: data.get(\"total-created-assets\"),\n            appsLocalState: typeof data.get(\"apps-local-state\") !== \"undefined\" ? data.get(\"apps-local-state\").map((v)=>ApplicationLocalState.fromEncodingData(v)) : undefined,\n            appsTotalExtraPages: data.get(\"apps-total-extra-pages\"),\n            appsTotalSchema: typeof data.get(\"apps-total-schema\") !== \"undefined\" ? ApplicationStateSchema.fromEncodingData(data.get(\"apps-total-schema\")) : undefined,\n            assets: typeof data.get(\"assets\") !== \"undefined\" ? data.get(\"assets\").map((v)=>AssetHolding.fromEncodingData(v)) : undefined,\n            authAddr: data.get(\"auth-addr\"),\n            closedAtRound: data.get(\"closed-at-round\"),\n            createdApps: typeof data.get(\"created-apps\") !== \"undefined\" ? data.get(\"created-apps\").map((v)=>Application.fromEncodingData(v)) : undefined,\n            createdAssets: typeof data.get(\"created-assets\") !== \"undefined\" ? data.get(\"created-assets\").map((v)=>Asset.fromEncodingData(v)) : undefined,\n            createdAtRound: data.get(\"created-at-round\"),\n            deleted: data.get(\"deleted\"),\n            incentiveEligible: data.get(\"incentive-eligible\"),\n            lastHeartbeat: data.get(\"last-heartbeat\"),\n            lastProposed: data.get(\"last-proposed\"),\n            participation: typeof data.get(\"participation\") !== \"undefined\" ? AccountParticipation.fromEncodingData(data.get(\"participation\")) : undefined,\n            rewardBase: data.get(\"reward-base\"),\n            sigType: data.get(\"sig-type\")\n        });\n    }\n}\n/**\n * AccountParticipation describes the parameters used by this account in consensus\n * protocol.\n */ class AccountParticipation {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"selection-participation-key\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ByteArraySchema(),\n                omitEmpty: true\n            }, {\n                key: \"vote-first-valid\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            }, {\n                key: \"vote-key-dilution\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            }, {\n                key: \"vote-last-valid\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            }, {\n                key: \"vote-participation-key\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ByteArraySchema(),\n                omitEmpty: true\n            }, {\n                key: \"state-proof-key\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ByteArraySchema()),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `AccountParticipation` object.\n     * @param selectionParticipationKey - Selection public key (if any) currently registered for this round.\n     * @param voteFirstValid - First round for which this participation is valid.\n     * @param voteKeyDilution - Number of subkeys in each batch of participation keys.\n     * @param voteLastValid - Last round for which this participation is valid.\n     * @param voteParticipationKey - root participation public key (if any) currently registered for this round.\n     * @param stateProofKey - Root of the state proof key (if any)\n     */ constructor({ selectionParticipationKey, voteFirstValid, voteKeyDilution, voteLastValid, voteParticipationKey, stateProofKey }){\n        this.selectionParticipationKey = typeof selectionParticipationKey === \"string\" ? (0,_encoding_binarydata_js__WEBPACK_IMPORTED_MODULE_2__.base64ToBytes)(selectionParticipationKey) : selectionParticipationKey;\n        this.voteFirstValid = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(voteFirstValid);\n        this.voteKeyDilution = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(voteKeyDilution);\n        this.voteLastValid = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(voteLastValid);\n        this.voteParticipationKey = typeof voteParticipationKey === \"string\" ? (0,_encoding_binarydata_js__WEBPACK_IMPORTED_MODULE_2__.base64ToBytes)(voteParticipationKey) : voteParticipationKey;\n        this.stateProofKey = typeof stateProofKey === \"string\" ? (0,_encoding_binarydata_js__WEBPACK_IMPORTED_MODULE_2__.base64ToBytes)(stateProofKey) : stateProofKey;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return AccountParticipation.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"selection-participation-key\",\n                this.selectionParticipationKey\n            ],\n            [\n                \"vote-first-valid\",\n                this.voteFirstValid\n            ],\n            [\n                \"vote-key-dilution\",\n                this.voteKeyDilution\n            ],\n            [\n                \"vote-last-valid\",\n                this.voteLastValid\n            ],\n            [\n                \"vote-participation-key\",\n                this.voteParticipationKey\n            ],\n            [\n                \"state-proof-key\",\n                this.stateProofKey\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded AccountParticipation: ${data}`);\n        }\n        return new AccountParticipation({\n            selectionParticipationKey: data.get(\"selection-participation-key\"),\n            voteFirstValid: data.get(\"vote-first-valid\"),\n            voteKeyDilution: data.get(\"vote-key-dilution\"),\n            voteLastValid: data.get(\"vote-last-valid\"),\n            voteParticipationKey: data.get(\"vote-participation-key\"),\n            stateProofKey: data.get(\"state-proof-key\")\n        });\n    }\n}\n/**\n *\n */ class AccountResponse {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"account\",\n                valueSchema: Account.encodingSchema,\n                omitEmpty: true\n            }, {\n                key: \"current-round\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `AccountResponse` object.\n     * @param account - Account information at a given round.\n     * Definition:\n     * data/basics/userBalance.go : AccountData\n     * @param currentRound - Round at which the results were computed.\n     */ constructor({ account, currentRound }){\n        this.account = account;\n        this.currentRound = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(currentRound);\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return AccountResponse.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"account\",\n                this.account.toEncodingData()\n            ],\n            [\n                \"current-round\",\n                this.currentRound\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded AccountResponse: ${data}`);\n        }\n        return new AccountResponse({\n            account: Account.fromEncodingData(data.get(\"account\") ?? new Map()),\n            currentRound: data.get(\"current-round\")\n        });\n    }\n}\n/**\n * Application state delta.\n */ class AccountStateDelta {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"address\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema(),\n                omitEmpty: true\n            }, {\n                key: \"delta\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ArraySchema(EvalDeltaKeyValue.encodingSchema),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `AccountStateDelta` object.\n     * @param address -\n     * @param delta - Application state delta.\n     */ constructor({ address, delta }){\n        this.address = address;\n        this.delta = delta;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return AccountStateDelta.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"address\",\n                this.address\n            ],\n            [\n                \"delta\",\n                this.delta.map((v)=>v.toEncodingData())\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded AccountStateDelta: ${data}`);\n        }\n        return new AccountStateDelta({\n            address: data.get(\"address\"),\n            delta: (data.get(\"delta\") ?? []).map((v)=>EvalDeltaKeyValue.fromEncodingData(v))\n        });\n    }\n}\n/**\n *\n */ class AccountsResponse {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"accounts\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ArraySchema(Account.encodingSchema),\n                omitEmpty: true\n            }, {\n                key: \"current-round\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            }, {\n                key: \"next-token\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema()),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `AccountsResponse` object.\n     * @param accounts -\n     * @param currentRound - Round at which the results were computed.\n     * @param nextToken - Used for pagination, when making another request provide this token with the\n     * next parameter.\n     */ constructor({ accounts, currentRound, nextToken }){\n        this.accounts = accounts;\n        this.currentRound = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(currentRound);\n        this.nextToken = nextToken;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return AccountsResponse.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"accounts\",\n                this.accounts.map((v)=>v.toEncodingData())\n            ],\n            [\n                \"current-round\",\n                this.currentRound\n            ],\n            [\n                \"next-token\",\n                this.nextToken\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded AccountsResponse: ${data}`);\n        }\n        return new AccountsResponse({\n            accounts: (data.get(\"accounts\") ?? []).map((v)=>Account.fromEncodingData(v)),\n            currentRound: data.get(\"current-round\"),\n            nextToken: data.get(\"next-token\")\n        });\n    }\n}\n/**\n * Application index and its parameters\n */ class Application {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"id\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            }, {\n                key: \"params\",\n                valueSchema: ApplicationParams.encodingSchema,\n                omitEmpty: true\n            }, {\n                key: \"created-at-round\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema()),\n                omitEmpty: true\n            }, {\n                key: \"deleted\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.BooleanSchema()),\n                omitEmpty: true\n            }, {\n                key: \"deleted-at-round\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema()),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `Application` object.\n     * @param id - application index.\n     * @param params - application parameters.\n     * @param createdAtRound - Round when this application was created.\n     * @param deleted - Whether or not this application is currently deleted.\n     * @param deletedAtRound - Round when this application was deleted.\n     */ constructor({ id, params, createdAtRound, deleted, deletedAtRound }){\n        this.id = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(id);\n        this.params = params;\n        this.createdAtRound = typeof createdAtRound === \"undefined\" ? undefined : (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(createdAtRound);\n        this.deleted = deleted;\n        this.deletedAtRound = typeof deletedAtRound === \"undefined\" ? undefined : (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(deletedAtRound);\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return Application.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"id\",\n                this.id\n            ],\n            [\n                \"params\",\n                this.params.toEncodingData()\n            ],\n            [\n                \"created-at-round\",\n                this.createdAtRound\n            ],\n            [\n                \"deleted\",\n                this.deleted\n            ],\n            [\n                \"deleted-at-round\",\n                this.deletedAtRound\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded Application: ${data}`);\n        }\n        return new Application({\n            id: data.get(\"id\"),\n            params: ApplicationParams.fromEncodingData(data.get(\"params\") ?? new Map()),\n            createdAtRound: data.get(\"created-at-round\"),\n            deleted: data.get(\"deleted\"),\n            deletedAtRound: data.get(\"deleted-at-round\")\n        });\n    }\n}\n/**\n * Stores local state associated with an application.\n */ class ApplicationLocalState {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"id\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            }, {\n                key: \"schema\",\n                valueSchema: ApplicationStateSchema.encodingSchema,\n                omitEmpty: true\n            }, {\n                key: \"closed-out-at-round\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema()),\n                omitEmpty: true\n            }, {\n                key: \"deleted\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.BooleanSchema()),\n                omitEmpty: true\n            }, {\n                key: \"key-value\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ArraySchema(TealKeyValue.encodingSchema)),\n                omitEmpty: true\n            }, {\n                key: \"opted-in-at-round\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema()),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `ApplicationLocalState` object.\n     * @param id - The application which this local state is for.\n     * @param schema - schema.\n     * @param closedOutAtRound - Round when account closed out of the application.\n     * @param deleted - Whether or not the application local state is currently deleted from its\n     * account.\n     * @param keyValue - storage.\n     * @param optedInAtRound - Round when the account opted into the application.\n     */ constructor({ id, schema, closedOutAtRound, deleted, keyValue, optedInAtRound }){\n        this.id = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(id);\n        this.schema = schema;\n        this.closedOutAtRound = typeof closedOutAtRound === \"undefined\" ? undefined : (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(closedOutAtRound);\n        this.deleted = deleted;\n        this.keyValue = keyValue;\n        this.optedInAtRound = typeof optedInAtRound === \"undefined\" ? undefined : (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(optedInAtRound);\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return ApplicationLocalState.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"id\",\n                this.id\n            ],\n            [\n                \"schema\",\n                this.schema.toEncodingData()\n            ],\n            [\n                \"closed-out-at-round\",\n                this.closedOutAtRound\n            ],\n            [\n                \"deleted\",\n                this.deleted\n            ],\n            [\n                \"key-value\",\n                typeof this.keyValue !== \"undefined\" ? this.keyValue.map((v)=>v.toEncodingData()) : undefined\n            ],\n            [\n                \"opted-in-at-round\",\n                this.optedInAtRound\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded ApplicationLocalState: ${data}`);\n        }\n        return new ApplicationLocalState({\n            id: data.get(\"id\"),\n            schema: ApplicationStateSchema.fromEncodingData(data.get(\"schema\") ?? new Map()),\n            closedOutAtRound: data.get(\"closed-out-at-round\"),\n            deleted: data.get(\"deleted\"),\n            keyValue: typeof data.get(\"key-value\") !== \"undefined\" ? data.get(\"key-value\").map((v)=>TealKeyValue.fromEncodingData(v)) : undefined,\n            optedInAtRound: data.get(\"opted-in-at-round\")\n        });\n    }\n}\n/**\n *\n */ class ApplicationLocalStatesResponse {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"apps-local-states\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ArraySchema(ApplicationLocalState.encodingSchema),\n                omitEmpty: true\n            }, {\n                key: \"current-round\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            }, {\n                key: \"next-token\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema()),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `ApplicationLocalStatesResponse` object.\n     * @param appsLocalStates -\n     * @param currentRound - Round at which the results were computed.\n     * @param nextToken - Used for pagination, when making another request provide this token with the\n     * next parameter.\n     */ constructor({ appsLocalStates, currentRound, nextToken }){\n        this.appsLocalStates = appsLocalStates;\n        this.currentRound = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(currentRound);\n        this.nextToken = nextToken;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return ApplicationLocalStatesResponse.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"apps-local-states\",\n                this.appsLocalStates.map((v)=>v.toEncodingData())\n            ],\n            [\n                \"current-round\",\n                this.currentRound\n            ],\n            [\n                \"next-token\",\n                this.nextToken\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded ApplicationLocalStatesResponse: ${data}`);\n        }\n        return new ApplicationLocalStatesResponse({\n            appsLocalStates: (data.get(\"apps-local-states\") ?? []).map((v)=>ApplicationLocalState.fromEncodingData(v)),\n            currentRound: data.get(\"current-round\"),\n            nextToken: data.get(\"next-token\")\n        });\n    }\n}\n/**\n * Stores the global information associated with an application.\n */ class ApplicationLogData {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"logs\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ArraySchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ByteArraySchema()),\n                omitEmpty: true\n            }, {\n                key: \"txid\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema(),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `ApplicationLogData` object.\n     * @param logs - Logs for the application being executed by the transaction.\n     * @param txid - Transaction ID\n     */ constructor({ logs, txid }){\n        this.logs = logs;\n        this.txid = txid;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return ApplicationLogData.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"logs\",\n                this.logs\n            ],\n            [\n                \"txid\",\n                this.txid\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded ApplicationLogData: ${data}`);\n        }\n        return new ApplicationLogData({\n            logs: data.get(\"logs\"),\n            txid: data.get(\"txid\")\n        });\n    }\n}\n/**\n *\n */ class ApplicationLogsResponse {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"application-id\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            }, {\n                key: \"current-round\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            }, {\n                key: \"log-data\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ArraySchema(ApplicationLogData.encodingSchema)),\n                omitEmpty: true\n            }, {\n                key: \"next-token\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema()),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `ApplicationLogsResponse` object.\n     * @param applicationId - (appidx) application index.\n     * @param currentRound - Round at which the results were computed.\n     * @param logData -\n     * @param nextToken - Used for pagination, when making another request provide this token with the\n     * next parameter.\n     */ constructor({ applicationId, currentRound, logData, nextToken }){\n        this.applicationId = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(applicationId);\n        this.currentRound = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(currentRound);\n        this.logData = logData;\n        this.nextToken = nextToken;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return ApplicationLogsResponse.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"application-id\",\n                this.applicationId\n            ],\n            [\n                \"current-round\",\n                this.currentRound\n            ],\n            [\n                \"log-data\",\n                typeof this.logData !== \"undefined\" ? this.logData.map((v)=>v.toEncodingData()) : undefined\n            ],\n            [\n                \"next-token\",\n                this.nextToken\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded ApplicationLogsResponse: ${data}`);\n        }\n        return new ApplicationLogsResponse({\n            applicationId: data.get(\"application-id\"),\n            currentRound: data.get(\"current-round\"),\n            logData: typeof data.get(\"log-data\") !== \"undefined\" ? data.get(\"log-data\").map((v)=>ApplicationLogData.fromEncodingData(v)) : undefined,\n            nextToken: data.get(\"next-token\")\n        });\n    }\n}\n/**\n * Stores the global information associated with an application.\n */ class ApplicationParams {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"approval-program\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ByteArraySchema(),\n                omitEmpty: true\n            }, {\n                key: \"clear-state-program\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ByteArraySchema(),\n                omitEmpty: true\n            }, {\n                key: \"creator\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema()),\n                omitEmpty: true\n            }, {\n                key: \"extra-program-pages\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema()),\n                omitEmpty: true\n            }, {\n                key: \"global-state\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ArraySchema(TealKeyValue.encodingSchema)),\n                omitEmpty: true\n            }, {\n                key: \"global-state-schema\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(ApplicationStateSchema.encodingSchema),\n                omitEmpty: true\n            }, {\n                key: \"local-state-schema\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(ApplicationStateSchema.encodingSchema),\n                omitEmpty: true\n            }, {\n                key: \"version\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema()),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `ApplicationParams` object.\n     * @param approvalProgram - approval program.\n     * @param clearStateProgram - clear state program.\n     * @param creator - The address that created this application. This is the address where the\n     * parameters and global state for this application can be found.\n     * @param extraProgramPages - the number of extra program pages available to this app.\n     * @param globalState - global state\n     * @param globalStateSchema - global schema\n     * @param localStateSchema - local schema\n     * @param version - the number of updates to the application programs\n     */ constructor({ approvalProgram, clearStateProgram, creator, extraProgramPages, globalState, globalStateSchema, localStateSchema, version }){\n        this.approvalProgram = typeof approvalProgram === \"string\" ? (0,_encoding_binarydata_js__WEBPACK_IMPORTED_MODULE_2__.base64ToBytes)(approvalProgram) : approvalProgram;\n        this.clearStateProgram = typeof clearStateProgram === \"string\" ? (0,_encoding_binarydata_js__WEBPACK_IMPORTED_MODULE_2__.base64ToBytes)(clearStateProgram) : clearStateProgram;\n        this.creator = typeof creator === \"string\" ? _encoding_address_js__WEBPACK_IMPORTED_MODULE_3__.Address.fromString(creator) : creator;\n        this.extraProgramPages = typeof extraProgramPages === \"undefined\" ? undefined : (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureSafeInteger)(extraProgramPages);\n        this.globalState = globalState;\n        this.globalStateSchema = globalStateSchema;\n        this.localStateSchema = localStateSchema;\n        this.version = typeof version === \"undefined\" ? undefined : (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureSafeInteger)(version);\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return ApplicationParams.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"approval-program\",\n                this.approvalProgram\n            ],\n            [\n                \"clear-state-program\",\n                this.clearStateProgram\n            ],\n            [\n                \"creator\",\n                typeof this.creator !== \"undefined\" ? this.creator.toString() : undefined\n            ],\n            [\n                \"extra-program-pages\",\n                this.extraProgramPages\n            ],\n            [\n                \"global-state\",\n                typeof this.globalState !== \"undefined\" ? this.globalState.map((v)=>v.toEncodingData()) : undefined\n            ],\n            [\n                \"global-state-schema\",\n                typeof this.globalStateSchema !== \"undefined\" ? this.globalStateSchema.toEncodingData() : undefined\n            ],\n            [\n                \"local-state-schema\",\n                typeof this.localStateSchema !== \"undefined\" ? this.localStateSchema.toEncodingData() : undefined\n            ],\n            [\n                \"version\",\n                this.version\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded ApplicationParams: ${data}`);\n        }\n        return new ApplicationParams({\n            approvalProgram: data.get(\"approval-program\"),\n            clearStateProgram: data.get(\"clear-state-program\"),\n            creator: data.get(\"creator\"),\n            extraProgramPages: data.get(\"extra-program-pages\"),\n            globalState: typeof data.get(\"global-state\") !== \"undefined\" ? data.get(\"global-state\").map((v)=>TealKeyValue.fromEncodingData(v)) : undefined,\n            globalStateSchema: typeof data.get(\"global-state-schema\") !== \"undefined\" ? ApplicationStateSchema.fromEncodingData(data.get(\"global-state-schema\")) : undefined,\n            localStateSchema: typeof data.get(\"local-state-schema\") !== \"undefined\" ? ApplicationStateSchema.fromEncodingData(data.get(\"local-state-schema\")) : undefined,\n            version: data.get(\"version\")\n        });\n    }\n}\n/**\n *\n */ class ApplicationResponse {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"current-round\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            }, {\n                key: \"application\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(Application.encodingSchema),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `ApplicationResponse` object.\n     * @param currentRound - Round at which the results were computed.\n     * @param application - Application index and its parameters\n     */ constructor({ currentRound, application }){\n        this.currentRound = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(currentRound);\n        this.application = application;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return ApplicationResponse.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"current-round\",\n                this.currentRound\n            ],\n            [\n                \"application\",\n                typeof this.application !== \"undefined\" ? this.application.toEncodingData() : undefined\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded ApplicationResponse: ${data}`);\n        }\n        return new ApplicationResponse({\n            currentRound: data.get(\"current-round\"),\n            application: typeof data.get(\"application\") !== \"undefined\" ? Application.fromEncodingData(data.get(\"application\")) : undefined\n        });\n    }\n}\n/**\n * Specifies maximums on the number of each type that may be stored.\n */ class ApplicationStateSchema {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"num-byte-slice\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            }, {\n                key: \"num-uint\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `ApplicationStateSchema` object.\n     * @param numByteSlice - number of byte slices.\n     * @param numUint - number of uints.\n     */ constructor({ numByteSlice, numUint }){\n        this.numByteSlice = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureSafeInteger)(numByteSlice);\n        this.numUint = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureSafeInteger)(numUint);\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return ApplicationStateSchema.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"num-byte-slice\",\n                this.numByteSlice\n            ],\n            [\n                \"num-uint\",\n                this.numUint\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded ApplicationStateSchema: ${data}`);\n        }\n        return new ApplicationStateSchema({\n            numByteSlice: data.get(\"num-byte-slice\"),\n            numUint: data.get(\"num-uint\")\n        });\n    }\n}\n/**\n *\n */ class ApplicationsResponse {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"applications\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ArraySchema(Application.encodingSchema),\n                omitEmpty: true\n            }, {\n                key: \"current-round\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            }, {\n                key: \"next-token\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema()),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `ApplicationsResponse` object.\n     * @param applications -\n     * @param currentRound - Round at which the results were computed.\n     * @param nextToken - Used for pagination, when making another request provide this token with the\n     * next parameter.\n     */ constructor({ applications, currentRound, nextToken }){\n        this.applications = applications;\n        this.currentRound = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(currentRound);\n        this.nextToken = nextToken;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return ApplicationsResponse.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"applications\",\n                this.applications.map((v)=>v.toEncodingData())\n            ],\n            [\n                \"current-round\",\n                this.currentRound\n            ],\n            [\n                \"next-token\",\n                this.nextToken\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded ApplicationsResponse: ${data}`);\n        }\n        return new ApplicationsResponse({\n            applications: (data.get(\"applications\") ?? []).map((v)=>Application.fromEncodingData(v)),\n            currentRound: data.get(\"current-round\"),\n            nextToken: data.get(\"next-token\")\n        });\n    }\n}\n/**\n * Specifies both the unique identifier and the parameters for an asset\n */ class Asset {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"index\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            }, {\n                key: \"params\",\n                valueSchema: AssetParams.encodingSchema,\n                omitEmpty: true\n            }, {\n                key: \"created-at-round\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema()),\n                omitEmpty: true\n            }, {\n                key: \"deleted\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.BooleanSchema()),\n                omitEmpty: true\n            }, {\n                key: \"destroyed-at-round\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema()),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `Asset` object.\n     * @param index - unique asset identifier\n     * @param params - AssetParams specifies the parameters for an asset.\n     * (apar) when part of an AssetConfig transaction.\n     * Definition:\n     * data/transactions/asset.go : AssetParams\n     * @param createdAtRound - Round during which this asset was created.\n     * @param deleted - Whether or not this asset is currently deleted.\n     * @param destroyedAtRound - Round during which this asset was destroyed.\n     */ constructor({ index, params, createdAtRound, deleted, destroyedAtRound }){\n        this.index = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(index);\n        this.params = params;\n        this.createdAtRound = typeof createdAtRound === \"undefined\" ? undefined : (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(createdAtRound);\n        this.deleted = deleted;\n        this.destroyedAtRound = typeof destroyedAtRound === \"undefined\" ? undefined : (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(destroyedAtRound);\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return Asset.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"index\",\n                this.index\n            ],\n            [\n                \"params\",\n                this.params.toEncodingData()\n            ],\n            [\n                \"created-at-round\",\n                this.createdAtRound\n            ],\n            [\n                \"deleted\",\n                this.deleted\n            ],\n            [\n                \"destroyed-at-round\",\n                this.destroyedAtRound\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded Asset: ${data}`);\n        }\n        return new Asset({\n            index: data.get(\"index\"),\n            params: AssetParams.fromEncodingData(data.get(\"params\") ?? new Map()),\n            createdAtRound: data.get(\"created-at-round\"),\n            deleted: data.get(\"deleted\"),\n            destroyedAtRound: data.get(\"destroyed-at-round\")\n        });\n    }\n}\n/**\n *\n */ class AssetBalancesResponse {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"balances\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ArraySchema(MiniAssetHolding.encodingSchema),\n                omitEmpty: true\n            }, {\n                key: \"current-round\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            }, {\n                key: \"next-token\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema()),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `AssetBalancesResponse` object.\n     * @param balances -\n     * @param currentRound - Round at which the results were computed.\n     * @param nextToken - Used for pagination, when making another request provide this token with the\n     * next parameter.\n     */ constructor({ balances, currentRound, nextToken }){\n        this.balances = balances;\n        this.currentRound = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(currentRound);\n        this.nextToken = nextToken;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return AssetBalancesResponse.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"balances\",\n                this.balances.map((v)=>v.toEncodingData())\n            ],\n            [\n                \"current-round\",\n                this.currentRound\n            ],\n            [\n                \"next-token\",\n                this.nextToken\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded AssetBalancesResponse: ${data}`);\n        }\n        return new AssetBalancesResponse({\n            balances: (data.get(\"balances\") ?? []).map((v)=>MiniAssetHolding.fromEncodingData(v)),\n            currentRound: data.get(\"current-round\"),\n            nextToken: data.get(\"next-token\")\n        });\n    }\n}\n/**\n * Describes an asset held by an account.\n * Definition:\n * data/basics/userBalance.go : AssetHolding\n */ class AssetHolding {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"amount\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            }, {\n                key: \"asset-id\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            }, {\n                key: \"is-frozen\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.BooleanSchema(),\n                omitEmpty: true\n            }, {\n                key: \"deleted\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.BooleanSchema()),\n                omitEmpty: true\n            }, {\n                key: \"opted-in-at-round\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema()),\n                omitEmpty: true\n            }, {\n                key: \"opted-out-at-round\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema()),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `AssetHolding` object.\n     * @param amount - number of units held.\n     * @param assetId - Asset ID of the holding.\n     * @param isFrozen - whether or not the holding is frozen.\n     * @param deleted - Whether or not the asset holding is currently deleted from its account.\n     * @param optedInAtRound - Round during which the account opted into this asset holding.\n     * @param optedOutAtRound - Round during which the account opted out of this asset holding.\n     */ constructor({ amount, assetId, isFrozen, deleted, optedInAtRound, optedOutAtRound }){\n        this.amount = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(amount);\n        this.assetId = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(assetId);\n        this.isFrozen = isFrozen;\n        this.deleted = deleted;\n        this.optedInAtRound = typeof optedInAtRound === \"undefined\" ? undefined : (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(optedInAtRound);\n        this.optedOutAtRound = typeof optedOutAtRound === \"undefined\" ? undefined : (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(optedOutAtRound);\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return AssetHolding.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"amount\",\n                this.amount\n            ],\n            [\n                \"asset-id\",\n                this.assetId\n            ],\n            [\n                \"is-frozen\",\n                this.isFrozen\n            ],\n            [\n                \"deleted\",\n                this.deleted\n            ],\n            [\n                \"opted-in-at-round\",\n                this.optedInAtRound\n            ],\n            [\n                \"opted-out-at-round\",\n                this.optedOutAtRound\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded AssetHolding: ${data}`);\n        }\n        return new AssetHolding({\n            amount: data.get(\"amount\"),\n            assetId: data.get(\"asset-id\"),\n            isFrozen: data.get(\"is-frozen\"),\n            deleted: data.get(\"deleted\"),\n            optedInAtRound: data.get(\"opted-in-at-round\"),\n            optedOutAtRound: data.get(\"opted-out-at-round\")\n        });\n    }\n}\n/**\n *\n */ class AssetHoldingsResponse {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"assets\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ArraySchema(AssetHolding.encodingSchema),\n                omitEmpty: true\n            }, {\n                key: \"current-round\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            }, {\n                key: \"next-token\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema()),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `AssetHoldingsResponse` object.\n     * @param assets -\n     * @param currentRound - Round at which the results were computed.\n     * @param nextToken - Used for pagination, when making another request provide this token with the\n     * next parameter.\n     */ constructor({ assets, currentRound, nextToken }){\n        this.assets = assets;\n        this.currentRound = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(currentRound);\n        this.nextToken = nextToken;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return AssetHoldingsResponse.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"assets\",\n                this.assets.map((v)=>v.toEncodingData())\n            ],\n            [\n                \"current-round\",\n                this.currentRound\n            ],\n            [\n                \"next-token\",\n                this.nextToken\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded AssetHoldingsResponse: ${data}`);\n        }\n        return new AssetHoldingsResponse({\n            assets: (data.get(\"assets\") ?? []).map((v)=>AssetHolding.fromEncodingData(v)),\n            currentRound: data.get(\"current-round\"),\n            nextToken: data.get(\"next-token\")\n        });\n    }\n}\n/**\n * AssetParams specifies the parameters for an asset.\n * (apar) when part of an AssetConfig transaction.\n * Definition:\n * data/transactions/asset.go : AssetParams\n */ class AssetParams {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"creator\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema(),\n                omitEmpty: true\n            }, {\n                key: \"decimals\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            }, {\n                key: \"total\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            }, {\n                key: \"clawback\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema()),\n                omitEmpty: true\n            }, {\n                key: \"default-frozen\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.BooleanSchema()),\n                omitEmpty: true\n            }, {\n                key: \"freeze\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema()),\n                omitEmpty: true\n            }, {\n                key: \"manager\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema()),\n                omitEmpty: true\n            }, {\n                key: \"metadata-hash\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ByteArraySchema()),\n                omitEmpty: true\n            }, {\n                key: \"name\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema()),\n                omitEmpty: true\n            }, {\n                key: \"name-b64\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ByteArraySchema()),\n                omitEmpty: true\n            }, {\n                key: \"reserve\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema()),\n                omitEmpty: true\n            }, {\n                key: \"unit-name\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema()),\n                omitEmpty: true\n            }, {\n                key: \"unit-name-b64\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ByteArraySchema()),\n                omitEmpty: true\n            }, {\n                key: \"url\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema()),\n                omitEmpty: true\n            }, {\n                key: \"url-b64\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ByteArraySchema()),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `AssetParams` object.\n     * @param creator - The address that created this asset. This is the address where the parameters\n     * for this asset can be found, and also the address where unwanted asset units can\n     * be sent in the worst case.\n     * @param decimals - The number of digits to use after the decimal point when displaying this asset.\n     * If 0, the asset is not divisible. If 1, the base unit of the asset is in tenths.\n     * If 2, the base unit of the asset is in hundredths, and so on. This value must be\n     * between 0 and 19 (inclusive).\n     * @param total - The total number of units of this asset.\n     * @param clawback - Address of account used to clawback holdings of this asset. If empty, clawback\n     * is not permitted.\n     * @param defaultFrozen - Whether holdings of this asset are frozen by default.\n     * @param freeze - Address of account used to freeze holdings of this asset. If empty, freezing is\n     * not permitted.\n     * @param manager - Address of account used to manage the keys of this asset and to destroy it.\n     * @param metadataHash - A commitment to some unspecified asset metadata. The format of this metadata is\n     * up to the application.\n     * @param name - Name of this asset, as supplied by the creator. Included only when the asset\n     * name is composed of printable utf-8 characters.\n     * @param nameB64 - Base64 encoded name of this asset, as supplied by the creator.\n     * @param reserve - Address of account holding reserve (non-minted) units of this asset.\n     * @param unitName - Name of a unit of this asset, as supplied by the creator. Included only when the\n     * name of a unit of this asset is composed of printable utf-8 characters.\n     * @param unitNameB64 - Base64 encoded name of a unit of this asset, as supplied by the creator.\n     * @param url - URL where more information about the asset can be retrieved. Included only when\n     * the URL is composed of printable utf-8 characters.\n     * @param urlB64 - Base64 encoded URL where more information about the asset can be retrieved.\n     */ constructor({ creator, decimals, total, clawback, defaultFrozen, freeze, manager, metadataHash, name, nameB64, reserve, unitName, unitNameB64, url, urlB64 }){\n        this.creator = creator;\n        this.decimals = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureSafeInteger)(decimals);\n        this.total = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(total);\n        this.clawback = clawback;\n        this.defaultFrozen = defaultFrozen;\n        this.freeze = freeze;\n        this.manager = manager;\n        this.metadataHash = typeof metadataHash === \"string\" ? (0,_encoding_binarydata_js__WEBPACK_IMPORTED_MODULE_2__.base64ToBytes)(metadataHash) : metadataHash;\n        this.name = name;\n        this.nameB64 = typeof nameB64 === \"string\" ? (0,_encoding_binarydata_js__WEBPACK_IMPORTED_MODULE_2__.base64ToBytes)(nameB64) : nameB64;\n        this.reserve = reserve;\n        this.unitName = unitName;\n        this.unitNameB64 = typeof unitNameB64 === \"string\" ? (0,_encoding_binarydata_js__WEBPACK_IMPORTED_MODULE_2__.base64ToBytes)(unitNameB64) : unitNameB64;\n        this.url = url;\n        this.urlB64 = typeof urlB64 === \"string\" ? (0,_encoding_binarydata_js__WEBPACK_IMPORTED_MODULE_2__.base64ToBytes)(urlB64) : urlB64;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return AssetParams.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"creator\",\n                this.creator\n            ],\n            [\n                \"decimals\",\n                this.decimals\n            ],\n            [\n                \"total\",\n                this.total\n            ],\n            [\n                \"clawback\",\n                this.clawback\n            ],\n            [\n                \"default-frozen\",\n                this.defaultFrozen\n            ],\n            [\n                \"freeze\",\n                this.freeze\n            ],\n            [\n                \"manager\",\n                this.manager\n            ],\n            [\n                \"metadata-hash\",\n                this.metadataHash\n            ],\n            [\n                \"name\",\n                this.name\n            ],\n            [\n                \"name-b64\",\n                this.nameB64\n            ],\n            [\n                \"reserve\",\n                this.reserve\n            ],\n            [\n                \"unit-name\",\n                this.unitName\n            ],\n            [\n                \"unit-name-b64\",\n                this.unitNameB64\n            ],\n            [\n                \"url\",\n                this.url\n            ],\n            [\n                \"url-b64\",\n                this.urlB64\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded AssetParams: ${data}`);\n        }\n        return new AssetParams({\n            creator: data.get(\"creator\"),\n            decimals: data.get(\"decimals\"),\n            total: data.get(\"total\"),\n            clawback: data.get(\"clawback\"),\n            defaultFrozen: data.get(\"default-frozen\"),\n            freeze: data.get(\"freeze\"),\n            manager: data.get(\"manager\"),\n            metadataHash: data.get(\"metadata-hash\"),\n            name: data.get(\"name\"),\n            nameB64: data.get(\"name-b64\"),\n            reserve: data.get(\"reserve\"),\n            unitName: data.get(\"unit-name\"),\n            unitNameB64: data.get(\"unit-name-b64\"),\n            url: data.get(\"url\"),\n            urlB64: data.get(\"url-b64\")\n        });\n    }\n}\n/**\n *\n */ class AssetResponse {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"asset\",\n                valueSchema: Asset.encodingSchema,\n                omitEmpty: true\n            }, {\n                key: \"current-round\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `AssetResponse` object.\n     * @param asset - Specifies both the unique identifier and the parameters for an asset\n     * @param currentRound - Round at which the results were computed.\n     */ constructor({ asset, currentRound }){\n        this.asset = asset;\n        this.currentRound = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(currentRound);\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return AssetResponse.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"asset\",\n                this.asset.toEncodingData()\n            ],\n            [\n                \"current-round\",\n                this.currentRound\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded AssetResponse: ${data}`);\n        }\n        return new AssetResponse({\n            asset: Asset.fromEncodingData(data.get(\"asset\") ?? new Map()),\n            currentRound: data.get(\"current-round\")\n        });\n    }\n}\n/**\n *\n */ class AssetsResponse {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"assets\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ArraySchema(Asset.encodingSchema),\n                omitEmpty: true\n            }, {\n                key: \"current-round\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            }, {\n                key: \"next-token\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema()),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `AssetsResponse` object.\n     * @param assets -\n     * @param currentRound - Round at which the results were computed.\n     * @param nextToken - Used for pagination, when making another request provide this token with the\n     * next parameter.\n     */ constructor({ assets, currentRound, nextToken }){\n        this.assets = assets;\n        this.currentRound = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(currentRound);\n        this.nextToken = nextToken;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return AssetsResponse.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"assets\",\n                this.assets.map((v)=>v.toEncodingData())\n            ],\n            [\n                \"current-round\",\n                this.currentRound\n            ],\n            [\n                \"next-token\",\n                this.nextToken\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded AssetsResponse: ${data}`);\n        }\n        return new AssetsResponse({\n            assets: (data.get(\"assets\") ?? []).map((v)=>Asset.fromEncodingData(v)),\n            currentRound: data.get(\"current-round\"),\n            nextToken: data.get(\"next-token\")\n        });\n    }\n}\n/**\n * Block information.\n * Definition:\n * data/bookkeeping/block.go : Block\n */ class Block {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"genesis-hash\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ByteArraySchema(),\n                omitEmpty: true\n            }, {\n                key: \"genesis-id\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema(),\n                omitEmpty: true\n            }, {\n                key: \"previous-block-hash\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ByteArraySchema(),\n                omitEmpty: true\n            }, {\n                key: \"round\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            }, {\n                key: \"seed\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ByteArraySchema(),\n                omitEmpty: true\n            }, {\n                key: \"timestamp\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            }, {\n                key: \"transactions-root\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ByteArraySchema(),\n                omitEmpty: true\n            }, {\n                key: \"transactions-root-sha256\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ByteArraySchema(),\n                omitEmpty: true\n            }, {\n                key: \"bonus\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema()),\n                omitEmpty: true\n            }, {\n                key: \"fees-collected\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema()),\n                omitEmpty: true\n            }, {\n                key: \"participation-updates\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(ParticipationUpdates.encodingSchema),\n                omitEmpty: true\n            }, {\n                key: \"previous-block-hash-512\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ByteArraySchema()),\n                omitEmpty: true\n            }, {\n                key: \"proposer\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema()),\n                omitEmpty: true\n            }, {\n                key: \"proposer-payout\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema()),\n                omitEmpty: true\n            }, {\n                key: \"rewards\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(BlockRewards.encodingSchema),\n                omitEmpty: true\n            }, {\n                key: \"state-proof-tracking\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ArraySchema(StateProofTracking.encodingSchema)),\n                omitEmpty: true\n            }, {\n                key: \"transactions\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ArraySchema(Transaction.encodingSchema)),\n                omitEmpty: true\n            }, {\n                key: \"transactions-root-sha512\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ByteArraySchema()),\n                omitEmpty: true\n            }, {\n                key: \"txn-counter\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema()),\n                omitEmpty: true\n            }, {\n                key: \"upgrade-state\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(BlockUpgradeState.encodingSchema),\n                omitEmpty: true\n            }, {\n                key: \"upgrade-vote\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(BlockUpgradeVote.encodingSchema),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `Block` object.\n     * @param genesisHash - (gh) hash to which this block belongs.\n     * @param genesisId - (gen) ID to which this block belongs.\n     * @param previousBlockHash - (prev) Previous block hash.\n     * @param round - (rnd) Current round on which this block was appended to the chain.\n     * @param seed - (seed) Sortition seed.\n     * @param timestamp - (ts) Block creation timestamp in seconds since eposh\n     * @param transactionsRoot - (txn) TransactionsRoot authenticates the set of transactions appearing in the\n     * block. More specifically, it's the root of a merkle tree whose leaves are the\n     * block's Txids, in lexicographic order. For the empty block, it's 0. Note that\n     * the TxnRoot does not authenticate the signatures on the transactions, only the\n     * transactions themselves. Two blocks with the same transactions but in a\n     * different order and with different signatures will have the same TxnRoot.\n     * @param transactionsRootSha256 - (txn256) TransactionsRootSHA256 is an auxiliary TransactionRoot, built using a\n     * vector commitment instead of a merkle tree, and SHA256 hash function instead of\n     * the default SHA512_256. This commitment can be used on environments where only\n     * the SHA256 function exists.\n     * @param bonus - the potential bonus payout for this block.\n     * @param feesCollected - the sum of all fees paid by transactions in this block.\n     * @param participationUpdates - Participation account data that needs to be checked/acted on by the network.\n     * @param previousBlockHash512 - (prev512) Previous block hash, using SHA-512.\n     * @param proposer - the proposer of this block.\n     * @param proposerPayout - the actual amount transferred to the proposer from the fee sink.\n     * @param rewards - Fields relating to rewards,\n     * @param stateProofTracking - Tracks the status of state proofs.\n     * @param transactions - (txns) list of transactions corresponding to a given round.\n     * @param transactionsRootSha512 - (txn512) TransactionsRootSHA512 is an auxiliary TransactionRoot, built using a\n     * vector commitment instead of a merkle tree, and SHA512 hash function instead of\n     * the default SHA512_256.\n     * @param txnCounter - (tc) TxnCounter counts the number of transactions committed in the ledger, from\n     * the time at which support for this feature was introduced.\n     * Specifically, TxnCounter is the number of the next transaction that will be\n     * committed after this block. It is 0 when no transactions have ever been\n     * committed (since TxnCounter started being supported).\n     * @param upgradeState - Fields relating to a protocol upgrade.\n     * @param upgradeVote - Fields relating to voting for a protocol upgrade.\n     */ constructor({ genesisHash, genesisId, previousBlockHash, round, seed, timestamp, transactionsRoot, transactionsRootSha256, bonus, feesCollected, participationUpdates, previousBlockHash512, proposer, proposerPayout, rewards, stateProofTracking, transactions, transactionsRootSha512, txnCounter, upgradeState, upgradeVote }){\n        this.genesisHash = typeof genesisHash === \"string\" ? (0,_encoding_binarydata_js__WEBPACK_IMPORTED_MODULE_2__.base64ToBytes)(genesisHash) : genesisHash;\n        this.genesisId = genesisId;\n        this.previousBlockHash = typeof previousBlockHash === \"string\" ? (0,_encoding_binarydata_js__WEBPACK_IMPORTED_MODULE_2__.base64ToBytes)(previousBlockHash) : previousBlockHash;\n        this.round = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(round);\n        this.seed = typeof seed === \"string\" ? (0,_encoding_binarydata_js__WEBPACK_IMPORTED_MODULE_2__.base64ToBytes)(seed) : seed;\n        this.timestamp = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureSafeInteger)(timestamp);\n        this.transactionsRoot = typeof transactionsRoot === \"string\" ? (0,_encoding_binarydata_js__WEBPACK_IMPORTED_MODULE_2__.base64ToBytes)(transactionsRoot) : transactionsRoot;\n        this.transactionsRootSha256 = typeof transactionsRootSha256 === \"string\" ? (0,_encoding_binarydata_js__WEBPACK_IMPORTED_MODULE_2__.base64ToBytes)(transactionsRootSha256) : transactionsRootSha256;\n        this.bonus = typeof bonus === \"undefined\" ? undefined : (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureSafeInteger)(bonus);\n        this.feesCollected = typeof feesCollected === \"undefined\" ? undefined : (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureSafeInteger)(feesCollected);\n        this.participationUpdates = participationUpdates;\n        this.previousBlockHash512 = typeof previousBlockHash512 === \"string\" ? (0,_encoding_binarydata_js__WEBPACK_IMPORTED_MODULE_2__.base64ToBytes)(previousBlockHash512) : previousBlockHash512;\n        this.proposer = typeof proposer === \"string\" ? _encoding_address_js__WEBPACK_IMPORTED_MODULE_3__.Address.fromString(proposer) : proposer;\n        this.proposerPayout = typeof proposerPayout === \"undefined\" ? undefined : (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureSafeInteger)(proposerPayout);\n        this.rewards = rewards;\n        this.stateProofTracking = stateProofTracking;\n        this.transactions = transactions;\n        this.transactionsRootSha512 = typeof transactionsRootSha512 === \"string\" ? (0,_encoding_binarydata_js__WEBPACK_IMPORTED_MODULE_2__.base64ToBytes)(transactionsRootSha512) : transactionsRootSha512;\n        this.txnCounter = typeof txnCounter === \"undefined\" ? undefined : (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureSafeInteger)(txnCounter);\n        this.upgradeState = upgradeState;\n        this.upgradeVote = upgradeVote;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return Block.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"genesis-hash\",\n                this.genesisHash\n            ],\n            [\n                \"genesis-id\",\n                this.genesisId\n            ],\n            [\n                \"previous-block-hash\",\n                this.previousBlockHash\n            ],\n            [\n                \"round\",\n                this.round\n            ],\n            [\n                \"seed\",\n                this.seed\n            ],\n            [\n                \"timestamp\",\n                this.timestamp\n            ],\n            [\n                \"transactions-root\",\n                this.transactionsRoot\n            ],\n            [\n                \"transactions-root-sha256\",\n                this.transactionsRootSha256\n            ],\n            [\n                \"bonus\",\n                this.bonus\n            ],\n            [\n                \"fees-collected\",\n                this.feesCollected\n            ],\n            [\n                \"participation-updates\",\n                typeof this.participationUpdates !== \"undefined\" ? this.participationUpdates.toEncodingData() : undefined\n            ],\n            [\n                \"previous-block-hash-512\",\n                this.previousBlockHash512\n            ],\n            [\n                \"proposer\",\n                typeof this.proposer !== \"undefined\" ? this.proposer.toString() : undefined\n            ],\n            [\n                \"proposer-payout\",\n                this.proposerPayout\n            ],\n            [\n                \"rewards\",\n                typeof this.rewards !== \"undefined\" ? this.rewards.toEncodingData() : undefined\n            ],\n            [\n                \"state-proof-tracking\",\n                typeof this.stateProofTracking !== \"undefined\" ? this.stateProofTracking.map((v)=>v.toEncodingData()) : undefined\n            ],\n            [\n                \"transactions\",\n                typeof this.transactions !== \"undefined\" ? this.transactions.map((v)=>v.toEncodingData()) : undefined\n            ],\n            [\n                \"transactions-root-sha512\",\n                this.transactionsRootSha512\n            ],\n            [\n                \"txn-counter\",\n                this.txnCounter\n            ],\n            [\n                \"upgrade-state\",\n                typeof this.upgradeState !== \"undefined\" ? this.upgradeState.toEncodingData() : undefined\n            ],\n            [\n                \"upgrade-vote\",\n                typeof this.upgradeVote !== \"undefined\" ? this.upgradeVote.toEncodingData() : undefined\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded Block: ${data}`);\n        }\n        return new Block({\n            genesisHash: data.get(\"genesis-hash\"),\n            genesisId: data.get(\"genesis-id\"),\n            previousBlockHash: data.get(\"previous-block-hash\"),\n            round: data.get(\"round\"),\n            seed: data.get(\"seed\"),\n            timestamp: data.get(\"timestamp\"),\n            transactionsRoot: data.get(\"transactions-root\"),\n            transactionsRootSha256: data.get(\"transactions-root-sha256\"),\n            bonus: data.get(\"bonus\"),\n            feesCollected: data.get(\"fees-collected\"),\n            participationUpdates: typeof data.get(\"participation-updates\") !== \"undefined\" ? ParticipationUpdates.fromEncodingData(data.get(\"participation-updates\")) : undefined,\n            previousBlockHash512: data.get(\"previous-block-hash-512\"),\n            proposer: data.get(\"proposer\"),\n            proposerPayout: data.get(\"proposer-payout\"),\n            rewards: typeof data.get(\"rewards\") !== \"undefined\" ? BlockRewards.fromEncodingData(data.get(\"rewards\")) : undefined,\n            stateProofTracking: typeof data.get(\"state-proof-tracking\") !== \"undefined\" ? data.get(\"state-proof-tracking\").map((v)=>StateProofTracking.fromEncodingData(v)) : undefined,\n            transactions: typeof data.get(\"transactions\") !== \"undefined\" ? data.get(\"transactions\").map((v)=>Transaction.fromEncodingData(v)) : undefined,\n            transactionsRootSha512: data.get(\"transactions-root-sha512\"),\n            txnCounter: data.get(\"txn-counter\"),\n            upgradeState: typeof data.get(\"upgrade-state\") !== \"undefined\" ? BlockUpgradeState.fromEncodingData(data.get(\"upgrade-state\")) : undefined,\n            upgradeVote: typeof data.get(\"upgrade-vote\") !== \"undefined\" ? BlockUpgradeVote.fromEncodingData(data.get(\"upgrade-vote\")) : undefined\n        });\n    }\n}\n/**\n *\n */ class BlockHeadersResponse {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"blocks\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ArraySchema(Block.encodingSchema),\n                omitEmpty: true\n            }, {\n                key: \"current-round\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            }, {\n                key: \"next-token\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema()),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `BlockHeadersResponse` object.\n     * @param blocks -\n     * @param currentRound - Round at which the results were computed.\n     * @param nextToken - Used for pagination, when making another request provide this token with the\n     * next parameter.\n     */ constructor({ blocks, currentRound, nextToken }){\n        this.blocks = blocks;\n        this.currentRound = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(currentRound);\n        this.nextToken = nextToken;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return BlockHeadersResponse.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"blocks\",\n                this.blocks.map((v)=>v.toEncodingData())\n            ],\n            [\n                \"current-round\",\n                this.currentRound\n            ],\n            [\n                \"next-token\",\n                this.nextToken\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded BlockHeadersResponse: ${data}`);\n        }\n        return new BlockHeadersResponse({\n            blocks: (data.get(\"blocks\") ?? []).map((v)=>Block.fromEncodingData(v)),\n            currentRound: data.get(\"current-round\"),\n            nextToken: data.get(\"next-token\")\n        });\n    }\n}\n/**\n * Fields relating to rewards,\n */ class BlockRewards {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"fee-sink\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema(),\n                omitEmpty: true\n            }, {\n                key: \"rewards-calculation-round\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            }, {\n                key: \"rewards-level\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            }, {\n                key: \"rewards-pool\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema(),\n                omitEmpty: true\n            }, {\n                key: \"rewards-rate\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            }, {\n                key: \"rewards-residue\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `BlockRewards` object.\n     * @param feeSink - (fees) accepts transaction fees, it can only spend to the incentive pool.\n     * @param rewardsCalculationRound - (rwcalr) number of leftover MicroAlgos after the distribution of rewards-rate\n     * MicroAlgos for every reward unit in the next round.\n     * @param rewardsLevel - (earn) How many rewards, in MicroAlgos, have been distributed to each RewardUnit\n     * of MicroAlgos since genesis.\n     * @param rewardsPool - (rwd) accepts periodic injections from the fee-sink and continually\n     * redistributes them as rewards.\n     * @param rewardsRate - (rate) Number of new MicroAlgos added to the participation stake from rewards at\n     * the next round.\n     * @param rewardsResidue - (frac) Number of leftover MicroAlgos after the distribution of\n     * RewardsRate/rewardUnits MicroAlgos for every reward unit in the next round.\n     */ constructor({ feeSink, rewardsCalculationRound, rewardsLevel, rewardsPool, rewardsRate, rewardsResidue }){\n        this.feeSink = feeSink;\n        this.rewardsCalculationRound = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(rewardsCalculationRound);\n        this.rewardsLevel = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(rewardsLevel);\n        this.rewardsPool = rewardsPool;\n        this.rewardsRate = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(rewardsRate);\n        this.rewardsResidue = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(rewardsResidue);\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return BlockRewards.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"fee-sink\",\n                this.feeSink\n            ],\n            [\n                \"rewards-calculation-round\",\n                this.rewardsCalculationRound\n            ],\n            [\n                \"rewards-level\",\n                this.rewardsLevel\n            ],\n            [\n                \"rewards-pool\",\n                this.rewardsPool\n            ],\n            [\n                \"rewards-rate\",\n                this.rewardsRate\n            ],\n            [\n                \"rewards-residue\",\n                this.rewardsResidue\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded BlockRewards: ${data}`);\n        }\n        return new BlockRewards({\n            feeSink: data.get(\"fee-sink\"),\n            rewardsCalculationRound: data.get(\"rewards-calculation-round\"),\n            rewardsLevel: data.get(\"rewards-level\"),\n            rewardsPool: data.get(\"rewards-pool\"),\n            rewardsRate: data.get(\"rewards-rate\"),\n            rewardsResidue: data.get(\"rewards-residue\")\n        });\n    }\n}\n/**\n * Fields relating to a protocol upgrade.\n */ class BlockUpgradeState {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"current-protocol\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema(),\n                omitEmpty: true\n            }, {\n                key: \"next-protocol\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema()),\n                omitEmpty: true\n            }, {\n                key: \"next-protocol-approvals\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema()),\n                omitEmpty: true\n            }, {\n                key: \"next-protocol-switch-on\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema()),\n                omitEmpty: true\n            }, {\n                key: \"next-protocol-vote-before\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema()),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `BlockUpgradeState` object.\n     * @param currentProtocol - (proto) The current protocol version.\n     * @param nextProtocol - (nextproto) The next proposed protocol version.\n     * @param nextProtocolApprovals - (nextyes) Number of blocks which approved the protocol upgrade.\n     * @param nextProtocolSwitchOn - (nextswitch) Round on which the protocol upgrade will take effect.\n     * @param nextProtocolVoteBefore - (nextbefore) Deadline round for this protocol upgrade (No votes will be consider\n     * after this round).\n     */ constructor({ currentProtocol, nextProtocol, nextProtocolApprovals, nextProtocolSwitchOn, nextProtocolVoteBefore }){\n        this.currentProtocol = currentProtocol;\n        this.nextProtocol = nextProtocol;\n        this.nextProtocolApprovals = typeof nextProtocolApprovals === \"undefined\" ? undefined : (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureSafeInteger)(nextProtocolApprovals);\n        this.nextProtocolSwitchOn = typeof nextProtocolSwitchOn === \"undefined\" ? undefined : (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(nextProtocolSwitchOn);\n        this.nextProtocolVoteBefore = typeof nextProtocolVoteBefore === \"undefined\" ? undefined : (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(nextProtocolVoteBefore);\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return BlockUpgradeState.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"current-protocol\",\n                this.currentProtocol\n            ],\n            [\n                \"next-protocol\",\n                this.nextProtocol\n            ],\n            [\n                \"next-protocol-approvals\",\n                this.nextProtocolApprovals\n            ],\n            [\n                \"next-protocol-switch-on\",\n                this.nextProtocolSwitchOn\n            ],\n            [\n                \"next-protocol-vote-before\",\n                this.nextProtocolVoteBefore\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded BlockUpgradeState: ${data}`);\n        }\n        return new BlockUpgradeState({\n            currentProtocol: data.get(\"current-protocol\"),\n            nextProtocol: data.get(\"next-protocol\"),\n            nextProtocolApprovals: data.get(\"next-protocol-approvals\"),\n            nextProtocolSwitchOn: data.get(\"next-protocol-switch-on\"),\n            nextProtocolVoteBefore: data.get(\"next-protocol-vote-before\")\n        });\n    }\n}\n/**\n * Fields relating to voting for a protocol upgrade.\n */ class BlockUpgradeVote {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"upgrade-approve\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.BooleanSchema()),\n                omitEmpty: true\n            }, {\n                key: \"upgrade-delay\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema()),\n                omitEmpty: true\n            }, {\n                key: \"upgrade-propose\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema()),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `BlockUpgradeVote` object.\n     * @param upgradeApprove - (upgradeyes) Indicates a yes vote for the current proposal.\n     * @param upgradeDelay - (upgradedelay) Indicates the time between acceptance and execution.\n     * @param upgradePropose - (upgradeprop) Indicates a proposed upgrade.\n     */ constructor({ upgradeApprove, upgradeDelay, upgradePropose }){\n        this.upgradeApprove = upgradeApprove;\n        this.upgradeDelay = typeof upgradeDelay === \"undefined\" ? undefined : (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(upgradeDelay);\n        this.upgradePropose = upgradePropose;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return BlockUpgradeVote.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"upgrade-approve\",\n                this.upgradeApprove\n            ],\n            [\n                \"upgrade-delay\",\n                this.upgradeDelay\n            ],\n            [\n                \"upgrade-propose\",\n                this.upgradePropose\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded BlockUpgradeVote: ${data}`);\n        }\n        return new BlockUpgradeVote({\n            upgradeApprove: data.get(\"upgrade-approve\"),\n            upgradeDelay: data.get(\"upgrade-delay\"),\n            upgradePropose: data.get(\"upgrade-propose\")\n        });\n    }\n}\n/**\n * Box name and its content.\n */ class Box {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"name\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ByteArraySchema(),\n                omitEmpty: true\n            }, {\n                key: \"round\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            }, {\n                key: \"value\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ByteArraySchema(),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `Box` object.\n     * @param name - (name) box name, base64 encoded\n     * @param round - The round for which this information is relevant\n     * @param value - (value) box value, base64 encoded.\n     */ constructor({ name, round, value }){\n        this.name = typeof name === \"string\" ? (0,_encoding_binarydata_js__WEBPACK_IMPORTED_MODULE_2__.base64ToBytes)(name) : name;\n        this.round = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(round);\n        this.value = typeof value === \"string\" ? (0,_encoding_binarydata_js__WEBPACK_IMPORTED_MODULE_2__.base64ToBytes)(value) : value;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return Box.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"name\",\n                this.name\n            ],\n            [\n                \"round\",\n                this.round\n            ],\n            [\n                \"value\",\n                this.value\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded Box: ${data}`);\n        }\n        return new Box({\n            name: data.get(\"name\"),\n            round: data.get(\"round\"),\n            value: data.get(\"value\")\n        });\n    }\n}\n/**\n * Box descriptor describes an app box without a value.\n */ class BoxDescriptor {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"name\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ByteArraySchema(),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `BoxDescriptor` object.\n     * @param name - Base64 encoded box name\n     */ constructor({ name }){\n        this.name = typeof name === \"string\" ? (0,_encoding_binarydata_js__WEBPACK_IMPORTED_MODULE_2__.base64ToBytes)(name) : name;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return BoxDescriptor.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"name\",\n                this.name\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded BoxDescriptor: ${data}`);\n        }\n        return new BoxDescriptor({\n            name: data.get(\"name\")\n        });\n    }\n}\n/**\n * BoxReference names a box by its name and the application ID it belongs to.\n */ class BoxReference {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"app\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            }, {\n                key: \"name\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ByteArraySchema(),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `BoxReference` object.\n     * @param app - Application ID to which the box belongs, or zero if referring to the called\n     * application.\n     * @param name - Base64 encoded box name\n     */ constructor({ app, name }){\n        this.app = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureSafeInteger)(app);\n        this.name = typeof name === \"string\" ? (0,_encoding_binarydata_js__WEBPACK_IMPORTED_MODULE_2__.base64ToBytes)(name) : name;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return BoxReference.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"app\",\n                this.app\n            ],\n            [\n                \"name\",\n                this.name\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded BoxReference: ${data}`);\n        }\n        return new BoxReference({\n            app: data.get(\"app\"),\n            name: data.get(\"name\")\n        });\n    }\n}\n/**\n * Box names of an application\n */ class BoxesResponse {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"application-id\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            }, {\n                key: \"boxes\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ArraySchema(BoxDescriptor.encodingSchema),\n                omitEmpty: true\n            }, {\n                key: \"next-token\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema()),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `BoxesResponse` object.\n     * @param applicationId - (appidx) application index.\n     * @param boxes -\n     * @param nextToken - Used for pagination, when making another request provide this token with the\n     * next parameter.\n     */ constructor({ applicationId, boxes, nextToken }){\n        this.applicationId = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(applicationId);\n        this.boxes = boxes;\n        this.nextToken = nextToken;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return BoxesResponse.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"application-id\",\n                this.applicationId\n            ],\n            [\n                \"boxes\",\n                this.boxes.map((v)=>v.toEncodingData())\n            ],\n            [\n                \"next-token\",\n                this.nextToken\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded BoxesResponse: ${data}`);\n        }\n        return new BoxesResponse({\n            applicationId: data.get(\"application-id\"),\n            boxes: (data.get(\"boxes\") ?? []).map((v)=>BoxDescriptor.fromEncodingData(v)),\n            nextToken: data.get(\"next-token\")\n        });\n    }\n}\n/**\n * Response for errors\n */ class ErrorResponse {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"message\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema(),\n                omitEmpty: true\n            }, {\n                key: \"data\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(_untypedmodel_js__WEBPACK_IMPORTED_MODULE_4__.UntypedValue.encodingSchema),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `ErrorResponse` object.\n     * @param message -\n     * @param data -\n     */ constructor({ message, data }){\n        this.message = message;\n        this.data = data;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return ErrorResponse.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"message\",\n                this.message\n            ],\n            [\n                \"data\",\n                typeof this.data !== \"undefined\" ? this.data.toEncodingData() : undefined\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded ErrorResponse: ${data}`);\n        }\n        return new ErrorResponse({\n            message: data.get(\"message\"),\n            data: typeof data.get(\"data\") !== \"undefined\" ? _untypedmodel_js__WEBPACK_IMPORTED_MODULE_4__.UntypedValue.fromEncodingData(data.get(\"data\")) : undefined\n        });\n    }\n}\n/**\n * Represents a TEAL value delta.\n */ class EvalDelta {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"action\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            }, {\n                key: \"bytes\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema()),\n                omitEmpty: true\n            }, {\n                key: \"uint\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema()),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `EvalDelta` object.\n     * @param action - (at) delta action.\n     * @param bytes - (bs) bytes value.\n     * @param uint - (ui) uint value.\n     */ constructor({ action, bytes, uint }){\n        this.action = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureSafeInteger)(action);\n        this.bytes = bytes;\n        this.uint = typeof uint === \"undefined\" ? undefined : (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(uint);\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return EvalDelta.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"action\",\n                this.action\n            ],\n            [\n                \"bytes\",\n                this.bytes\n            ],\n            [\n                \"uint\",\n                this.uint\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded EvalDelta: ${data}`);\n        }\n        return new EvalDelta({\n            action: data.get(\"action\"),\n            bytes: data.get(\"bytes\"),\n            uint: data.get(\"uint\")\n        });\n    }\n}\n/**\n * Key-value pairs for StateDelta.\n */ class EvalDeltaKeyValue {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"key\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema(),\n                omitEmpty: true\n            }, {\n                key: \"value\",\n                valueSchema: EvalDelta.encodingSchema,\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `EvalDeltaKeyValue` object.\n     * @param key -\n     * @param value - Represents a TEAL value delta.\n     */ constructor({ key, value }){\n        this.key = key;\n        this.value = value;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return EvalDeltaKeyValue.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"key\",\n                this.key\n            ],\n            [\n                \"value\",\n                this.value.toEncodingData()\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded EvalDeltaKeyValue: ${data}`);\n        }\n        return new EvalDeltaKeyValue({\n            key: data.get(\"key\"),\n            value: EvalDelta.fromEncodingData(data.get(\"value\") ?? new Map())\n        });\n    }\n}\nclass HashFactory {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"hash-type\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema()),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `HashFactory` object.\n     * @param hashType - (t)\n     */ constructor({ hashType }){\n        this.hashType = typeof hashType === \"undefined\" ? undefined : (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureSafeInteger)(hashType);\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return HashFactory.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"hash-type\",\n                this.hashType\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded HashFactory: ${data}`);\n        }\n        return new HashFactory({\n            hashType: data.get(\"hash-type\")\n        });\n    }\n}\n/**\n * (hbprf) HbProof is a signature using HeartbeatAddress's partkey, thereby showing\n * it is online.\n */ class HbProofFields {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"hb-pk\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ByteArraySchema()),\n                omitEmpty: true\n            }, {\n                key: \"hb-pk1sig\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ByteArraySchema()),\n                omitEmpty: true\n            }, {\n                key: \"hb-pk2\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ByteArraySchema()),\n                omitEmpty: true\n            }, {\n                key: \"hb-pk2sig\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ByteArraySchema()),\n                omitEmpty: true\n            }, {\n                key: \"hb-sig\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ByteArraySchema()),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `HbProofFields` object.\n     * @param hbPk - (p) Public key of the heartbeat message.\n     * @param hbPk1sig - (p1s) Signature of OneTimeSignatureSubkeyOffsetID(PK, Batch, Offset) under the\n     * key PK2.\n     * @param hbPk2 - (p2) Key for new-style two-level ephemeral signature.\n     * @param hbPk2sig - (p2s) Signature of OneTimeSignatureSubkeyBatchID(PK2, Batch) under the master\n     * key (OneTimeSignatureVerifier).\n     * @param hbSig - (s) Signature of the heartbeat message.\n     */ constructor({ hbPk, hbPk1sig, hbPk2, hbPk2sig, hbSig }){\n        this.hbPk = typeof hbPk === \"string\" ? (0,_encoding_binarydata_js__WEBPACK_IMPORTED_MODULE_2__.base64ToBytes)(hbPk) : hbPk;\n        this.hbPk1sig = typeof hbPk1sig === \"string\" ? (0,_encoding_binarydata_js__WEBPACK_IMPORTED_MODULE_2__.base64ToBytes)(hbPk1sig) : hbPk1sig;\n        this.hbPk2 = typeof hbPk2 === \"string\" ? (0,_encoding_binarydata_js__WEBPACK_IMPORTED_MODULE_2__.base64ToBytes)(hbPk2) : hbPk2;\n        this.hbPk2sig = typeof hbPk2sig === \"string\" ? (0,_encoding_binarydata_js__WEBPACK_IMPORTED_MODULE_2__.base64ToBytes)(hbPk2sig) : hbPk2sig;\n        this.hbSig = typeof hbSig === \"string\" ? (0,_encoding_binarydata_js__WEBPACK_IMPORTED_MODULE_2__.base64ToBytes)(hbSig) : hbSig;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return HbProofFields.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"hb-pk\",\n                this.hbPk\n            ],\n            [\n                \"hb-pk1sig\",\n                this.hbPk1sig\n            ],\n            [\n                \"hb-pk2\",\n                this.hbPk2\n            ],\n            [\n                \"hb-pk2sig\",\n                this.hbPk2sig\n            ],\n            [\n                \"hb-sig\",\n                this.hbSig\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded HbProofFields: ${data}`);\n        }\n        return new HbProofFields({\n            hbPk: data.get(\"hb-pk\"),\n            hbPk1sig: data.get(\"hb-pk1sig\"),\n            hbPk2: data.get(\"hb-pk2\"),\n            hbPk2sig: data.get(\"hb-pk2sig\"),\n            hbSig: data.get(\"hb-sig\")\n        });\n    }\n}\n/**\n * A health check response.\n */ class HealthCheck {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"db-available\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.BooleanSchema(),\n                omitEmpty: true\n            }, {\n                key: \"is-migrating\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.BooleanSchema(),\n                omitEmpty: true\n            }, {\n                key: \"message\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema(),\n                omitEmpty: true\n            }, {\n                key: \"round\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            }, {\n                key: \"version\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema(),\n                omitEmpty: true\n            }, {\n                key: \"data\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(_untypedmodel_js__WEBPACK_IMPORTED_MODULE_4__.UntypedValue.encodingSchema),\n                omitEmpty: true\n            }, {\n                key: \"errors\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ArraySchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema())),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `HealthCheck` object.\n     * @param dbAvailable -\n     * @param isMigrating -\n     * @param message -\n     * @param round -\n     * @param version - Current version.\n     * @param data -\n     * @param errors -\n     */ constructor({ dbAvailable, isMigrating, message, round, version, data, errors }){\n        this.dbAvailable = dbAvailable;\n        this.isMigrating = isMigrating;\n        this.message = message;\n        this.round = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(round);\n        this.version = version;\n        this.data = data;\n        this.errors = errors;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return HealthCheck.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"db-available\",\n                this.dbAvailable\n            ],\n            [\n                \"is-migrating\",\n                this.isMigrating\n            ],\n            [\n                \"message\",\n                this.message\n            ],\n            [\n                \"round\",\n                this.round\n            ],\n            [\n                \"version\",\n                this.version\n            ],\n            [\n                \"data\",\n                typeof this.data !== \"undefined\" ? this.data.toEncodingData() : undefined\n            ],\n            [\n                \"errors\",\n                this.errors\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded HealthCheck: ${data}`);\n        }\n        return new HealthCheck({\n            dbAvailable: data.get(\"db-available\"),\n            isMigrating: data.get(\"is-migrating\"),\n            message: data.get(\"message\"),\n            round: data.get(\"round\"),\n            version: data.get(\"version\"),\n            data: typeof data.get(\"data\") !== \"undefined\" ? _untypedmodel_js__WEBPACK_IMPORTED_MODULE_4__.UntypedValue.fromEncodingData(data.get(\"data\")) : undefined,\n            errors: data.get(\"errors\")\n        });\n    }\n}\n/**\n * HoldingRef names a holding by referring to an Address and Asset it belongs to.\n */ class HoldingRef {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"address\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema(),\n                omitEmpty: true\n            }, {\n                key: \"asset\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `HoldingRef` object.\n     * @param address - (d) Address in access list, or the sender of the transaction.\n     * @param asset - (s) Asset ID for asset in access list.\n     */ constructor({ address, asset }){\n        this.address = typeof address === \"string\" ? _encoding_address_js__WEBPACK_IMPORTED_MODULE_3__.Address.fromString(address) : address;\n        this.asset = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureSafeInteger)(asset);\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return HoldingRef.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"address\",\n                this.address.toString()\n            ],\n            [\n                \"asset\",\n                this.asset\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded HoldingRef: ${data}`);\n        }\n        return new HoldingRef({\n            address: data.get(\"address\"),\n            asset: data.get(\"asset\")\n        });\n    }\n}\nclass IndexerStateProofMessage {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"block-headers-commitment\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ByteArraySchema()),\n                omitEmpty: true\n            }, {\n                key: \"first-attested-round\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema()),\n                omitEmpty: true\n            }, {\n                key: \"latest-attested-round\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema()),\n                omitEmpty: true\n            }, {\n                key: \"ln-proven-weight\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema()),\n                omitEmpty: true\n            }, {\n                key: \"voters-commitment\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ByteArraySchema()),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `IndexerStateProofMessage` object.\n     * @param blockHeadersCommitment - (b)\n     * @param firstAttestedRound - (f)\n     * @param latestAttestedRound - (l)\n     * @param lnProvenWeight - (P)\n     * @param votersCommitment - (v)\n     */ constructor({ blockHeadersCommitment, firstAttestedRound, latestAttestedRound, lnProvenWeight, votersCommitment }){\n        this.blockHeadersCommitment = typeof blockHeadersCommitment === \"string\" ? (0,_encoding_binarydata_js__WEBPACK_IMPORTED_MODULE_2__.base64ToBytes)(blockHeadersCommitment) : blockHeadersCommitment;\n        this.firstAttestedRound = typeof firstAttestedRound === \"undefined\" ? undefined : (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(firstAttestedRound);\n        this.latestAttestedRound = typeof latestAttestedRound === \"undefined\" ? undefined : (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(latestAttestedRound);\n        this.lnProvenWeight = typeof lnProvenWeight === \"undefined\" ? undefined : (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(lnProvenWeight);\n        this.votersCommitment = typeof votersCommitment === \"string\" ? (0,_encoding_binarydata_js__WEBPACK_IMPORTED_MODULE_2__.base64ToBytes)(votersCommitment) : votersCommitment;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return IndexerStateProofMessage.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"block-headers-commitment\",\n                this.blockHeadersCommitment\n            ],\n            [\n                \"first-attested-round\",\n                this.firstAttestedRound\n            ],\n            [\n                \"latest-attested-round\",\n                this.latestAttestedRound\n            ],\n            [\n                \"ln-proven-weight\",\n                this.lnProvenWeight\n            ],\n            [\n                \"voters-commitment\",\n                this.votersCommitment\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded IndexerStateProofMessage: ${data}`);\n        }\n        return new IndexerStateProofMessage({\n            blockHeadersCommitment: data.get(\"block-headers-commitment\"),\n            firstAttestedRound: data.get(\"first-attested-round\"),\n            latestAttestedRound: data.get(\"latest-attested-round\"),\n            lnProvenWeight: data.get(\"ln-proven-weight\"),\n            votersCommitment: data.get(\"voters-commitment\")\n        });\n    }\n}\n/**\n * LocalsRef names a local state by referring to an Address and App it belongs to.\n */ class LocalsRef {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"address\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema(),\n                omitEmpty: true\n            }, {\n                key: \"app\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `LocalsRef` object.\n     * @param address - (d) Address in access list, or the sender of the transaction.\n     * @param app - (p) Application ID for app in access list, or zero if referring to the called\n     * application.\n     */ constructor({ address, app }){\n        this.address = typeof address === \"string\" ? _encoding_address_js__WEBPACK_IMPORTED_MODULE_3__.Address.fromString(address) : address;\n        this.app = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureSafeInteger)(app);\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return LocalsRef.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"address\",\n                this.address.toString()\n            ],\n            [\n                \"app\",\n                this.app\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded LocalsRef: ${data}`);\n        }\n        return new LocalsRef({\n            address: data.get(\"address\"),\n            app: data.get(\"app\")\n        });\n    }\n}\nclass MerkleArrayProof {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"hash-factory\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(HashFactory.encodingSchema),\n                omitEmpty: true\n            }, {\n                key: \"path\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ArraySchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ByteArraySchema())),\n                omitEmpty: true\n            }, {\n                key: \"tree-depth\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema()),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `MerkleArrayProof` object.\n     * @param hashFactory -\n     * @param path - (pth)\n     * @param treeDepth - (td)\n     */ constructor({ hashFactory, path, treeDepth }){\n        this.hashFactory = hashFactory;\n        this.path = path;\n        this.treeDepth = typeof treeDepth === \"undefined\" ? undefined : (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureSafeInteger)(treeDepth);\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return MerkleArrayProof.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"hash-factory\",\n                typeof this.hashFactory !== \"undefined\" ? this.hashFactory.toEncodingData() : undefined\n            ],\n            [\n                \"path\",\n                this.path\n            ],\n            [\n                \"tree-depth\",\n                this.treeDepth\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded MerkleArrayProof: ${data}`);\n        }\n        return new MerkleArrayProof({\n            hashFactory: typeof data.get(\"hash-factory\") !== \"undefined\" ? HashFactory.fromEncodingData(data.get(\"hash-factory\")) : undefined,\n            path: data.get(\"path\"),\n            treeDepth: data.get(\"tree-depth\")\n        });\n    }\n}\n/**\n * A simplified version of AssetHolding\n */ class MiniAssetHolding {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"address\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema(),\n                omitEmpty: true\n            }, {\n                key: \"amount\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            }, {\n                key: \"is-frozen\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.BooleanSchema(),\n                omitEmpty: true\n            }, {\n                key: \"deleted\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.BooleanSchema()),\n                omitEmpty: true\n            }, {\n                key: \"opted-in-at-round\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema()),\n                omitEmpty: true\n            }, {\n                key: \"opted-out-at-round\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema()),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `MiniAssetHolding` object.\n     * @param address -\n     * @param amount -\n     * @param isFrozen -\n     * @param deleted - Whether or not this asset holding is currently deleted from its account.\n     * @param optedInAtRound - Round during which the account opted into the asset.\n     * @param optedOutAtRound - Round during which the account opted out of the asset.\n     */ constructor({ address, amount, isFrozen, deleted, optedInAtRound, optedOutAtRound }){\n        this.address = address;\n        this.amount = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(amount);\n        this.isFrozen = isFrozen;\n        this.deleted = deleted;\n        this.optedInAtRound = typeof optedInAtRound === \"undefined\" ? undefined : (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(optedInAtRound);\n        this.optedOutAtRound = typeof optedOutAtRound === \"undefined\" ? undefined : (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(optedOutAtRound);\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return MiniAssetHolding.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"address\",\n                this.address\n            ],\n            [\n                \"amount\",\n                this.amount\n            ],\n            [\n                \"is-frozen\",\n                this.isFrozen\n            ],\n            [\n                \"deleted\",\n                this.deleted\n            ],\n            [\n                \"opted-in-at-round\",\n                this.optedInAtRound\n            ],\n            [\n                \"opted-out-at-round\",\n                this.optedOutAtRound\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded MiniAssetHolding: ${data}`);\n        }\n        return new MiniAssetHolding({\n            address: data.get(\"address\"),\n            amount: data.get(\"amount\"),\n            isFrozen: data.get(\"is-frozen\"),\n            deleted: data.get(\"deleted\"),\n            optedInAtRound: data.get(\"opted-in-at-round\"),\n            optedOutAtRound: data.get(\"opted-out-at-round\")\n        });\n    }\n}\n/**\n * Participation account data that needs to be checked/acted on by the network.\n */ class ParticipationUpdates {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"absent-participation-accounts\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ArraySchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema())),\n                omitEmpty: true\n            }, {\n                key: \"expired-participation-accounts\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ArraySchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema())),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `ParticipationUpdates` object.\n     * @param absentParticipationAccounts - (partupabs) a list of online accounts that need to be suspended.\n     * @param expiredParticipationAccounts - (partupdrmv) a list of online accounts that needs to be converted to offline\n     * since their participation key expired.\n     */ constructor({ absentParticipationAccounts, expiredParticipationAccounts }){\n        this.absentParticipationAccounts = absentParticipationAccounts;\n        this.expiredParticipationAccounts = expiredParticipationAccounts;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return ParticipationUpdates.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"absent-participation-accounts\",\n                this.absentParticipationAccounts\n            ],\n            [\n                \"expired-participation-accounts\",\n                this.expiredParticipationAccounts\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded ParticipationUpdates: ${data}`);\n        }\n        return new ParticipationUpdates({\n            absentParticipationAccounts: data.get(\"absent-participation-accounts\"),\n            expiredParticipationAccounts: data.get(\"expired-participation-accounts\")\n        });\n    }\n}\n/**\n * ResourceRef names a single resource. Only one of the fields should be set.\n */ class ResourceRef {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"address\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema()),\n                omitEmpty: true\n            }, {\n                key: \"application-id\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema()),\n                omitEmpty: true\n            }, {\n                key: \"asset-id\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema()),\n                omitEmpty: true\n            }, {\n                key: \"box\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(BoxReference.encodingSchema),\n                omitEmpty: true\n            }, {\n                key: \"holding\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(HoldingRef.encodingSchema),\n                omitEmpty: true\n            }, {\n                key: \"local\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(LocalsRef.encodingSchema),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `ResourceRef` object.\n     * @param address - (d) Account whose balance record is accessible by the executing ApprovalProgram\n     * or ClearStateProgram.\n     * @param applicationId - (p) Application id whose GlobalState may be read by the executing\n     * ApprovalProgram or ClearStateProgram.\n     * @param assetId - (s) Asset whose AssetParams may be read by the executing\n     * ApprovalProgram or ClearStateProgram.\n     * @param box - BoxReference names a box by its name and the application ID it belongs to.\n     * @param holding - HoldingRef names a holding by referring to an Address and Asset it belongs to.\n     * @param local - LocalsRef names a local state by referring to an Address and App it belongs to.\n     */ constructor({ address, applicationId, assetId, box, holding, local }){\n        this.address = typeof address === \"string\" ? _encoding_address_js__WEBPACK_IMPORTED_MODULE_3__.Address.fromString(address) : address;\n        this.applicationId = typeof applicationId === \"undefined\" ? undefined : (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureSafeInteger)(applicationId);\n        this.assetId = typeof assetId === \"undefined\" ? undefined : (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureSafeInteger)(assetId);\n        this.box = box;\n        this.holding = holding;\n        this.local = local;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return ResourceRef.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"address\",\n                typeof this.address !== \"undefined\" ? this.address.toString() : undefined\n            ],\n            [\n                \"application-id\",\n                this.applicationId\n            ],\n            [\n                \"asset-id\",\n                this.assetId\n            ],\n            [\n                \"box\",\n                typeof this.box !== \"undefined\" ? this.box.toEncodingData() : undefined\n            ],\n            [\n                \"holding\",\n                typeof this.holding !== \"undefined\" ? this.holding.toEncodingData() : undefined\n            ],\n            [\n                \"local\",\n                typeof this.local !== \"undefined\" ? this.local.toEncodingData() : undefined\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded ResourceRef: ${data}`);\n        }\n        return new ResourceRef({\n            address: data.get(\"address\"),\n            applicationId: data.get(\"application-id\"),\n            assetId: data.get(\"asset-id\"),\n            box: typeof data.get(\"box\") !== \"undefined\" ? BoxReference.fromEncodingData(data.get(\"box\")) : undefined,\n            holding: typeof data.get(\"holding\") !== \"undefined\" ? HoldingRef.fromEncodingData(data.get(\"holding\")) : undefined,\n            local: typeof data.get(\"local\") !== \"undefined\" ? LocalsRef.fromEncodingData(data.get(\"local\")) : undefined\n        });\n    }\n}\n/**\n * (sp) represents a state proof.\n * Definition:\n * crypto/stateproof/structs.go : StateProof\n */ class StateProofFields {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"part-proofs\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(MerkleArrayProof.encodingSchema),\n                omitEmpty: true\n            }, {\n                key: \"positions-to-reveal\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ArraySchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema())),\n                omitEmpty: true\n            }, {\n                key: \"reveals\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ArraySchema(StateProofReveal.encodingSchema)),\n                omitEmpty: true\n            }, {\n                key: \"salt-version\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema()),\n                omitEmpty: true\n            }, {\n                key: \"sig-commit\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ByteArraySchema()),\n                omitEmpty: true\n            }, {\n                key: \"sig-proofs\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(MerkleArrayProof.encodingSchema),\n                omitEmpty: true\n            }, {\n                key: \"signed-weight\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema()),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `StateProofFields` object.\n     * @param partProofs - (P)\n     * @param positionsToReveal - (pr) Sequence of reveal positions.\n     * @param reveals - (r) Note that this is actually stored as a map[uint64] - Reveal in the actual\n     * msgp\n     * @param saltVersion - (v) Salt version of the merkle signature.\n     * @param sigCommit - (c)\n     * @param sigProofs - (S)\n     * @param signedWeight - (w)\n     */ constructor({ partProofs, positionsToReveal, reveals, saltVersion, sigCommit, sigProofs, signedWeight }){\n        this.partProofs = partProofs;\n        this.positionsToReveal = typeof positionsToReveal === \"undefined\" ? undefined : positionsToReveal.map(_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt);\n        this.reveals = reveals;\n        this.saltVersion = typeof saltVersion === \"undefined\" ? undefined : (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureSafeInteger)(saltVersion);\n        this.sigCommit = typeof sigCommit === \"string\" ? (0,_encoding_binarydata_js__WEBPACK_IMPORTED_MODULE_2__.base64ToBytes)(sigCommit) : sigCommit;\n        this.sigProofs = sigProofs;\n        this.signedWeight = typeof signedWeight === \"undefined\" ? undefined : (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(signedWeight);\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return StateProofFields.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"part-proofs\",\n                typeof this.partProofs !== \"undefined\" ? this.partProofs.toEncodingData() : undefined\n            ],\n            [\n                \"positions-to-reveal\",\n                this.positionsToReveal\n            ],\n            [\n                \"reveals\",\n                typeof this.reveals !== \"undefined\" ? this.reveals.map((v)=>v.toEncodingData()) : undefined\n            ],\n            [\n                \"salt-version\",\n                this.saltVersion\n            ],\n            [\n                \"sig-commit\",\n                this.sigCommit\n            ],\n            [\n                \"sig-proofs\",\n                typeof this.sigProofs !== \"undefined\" ? this.sigProofs.toEncodingData() : undefined\n            ],\n            [\n                \"signed-weight\",\n                this.signedWeight\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded StateProofFields: ${data}`);\n        }\n        return new StateProofFields({\n            partProofs: typeof data.get(\"part-proofs\") !== \"undefined\" ? MerkleArrayProof.fromEncodingData(data.get(\"part-proofs\")) : undefined,\n            positionsToReveal: data.get(\"positions-to-reveal\"),\n            reveals: typeof data.get(\"reveals\") !== \"undefined\" ? data.get(\"reveals\").map((v)=>StateProofReveal.fromEncodingData(v)) : undefined,\n            saltVersion: data.get(\"salt-version\"),\n            sigCommit: data.get(\"sig-commit\"),\n            sigProofs: typeof data.get(\"sig-proofs\") !== \"undefined\" ? MerkleArrayProof.fromEncodingData(data.get(\"sig-proofs\")) : undefined,\n            signedWeight: data.get(\"signed-weight\")\n        });\n    }\n}\nclass StateProofParticipant {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"verifier\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(StateProofVerifier.encodingSchema),\n                omitEmpty: true\n            }, {\n                key: \"weight\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema()),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `StateProofParticipant` object.\n     * @param verifier - (p)\n     * @param weight - (w)\n     */ constructor({ verifier, weight }){\n        this.verifier = verifier;\n        this.weight = typeof weight === \"undefined\" ? undefined : (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(weight);\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return StateProofParticipant.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"verifier\",\n                typeof this.verifier !== \"undefined\" ? this.verifier.toEncodingData() : undefined\n            ],\n            [\n                \"weight\",\n                this.weight\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded StateProofParticipant: ${data}`);\n        }\n        return new StateProofParticipant({\n            verifier: typeof data.get(\"verifier\") !== \"undefined\" ? StateProofVerifier.fromEncodingData(data.get(\"verifier\")) : undefined,\n            weight: data.get(\"weight\")\n        });\n    }\n}\nclass StateProofReveal {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"participant\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(StateProofParticipant.encodingSchema),\n                omitEmpty: true\n            }, {\n                key: \"position\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema()),\n                omitEmpty: true\n            }, {\n                key: \"sig-slot\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(StateProofSigSlot.encodingSchema),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `StateProofReveal` object.\n     * @param participant - (p)\n     * @param position - The position in the signature and participants arrays corresponding to this\n     * entry.\n     * @param sigSlot - (s)\n     */ constructor({ participant, position, sigSlot }){\n        this.participant = participant;\n        this.position = typeof position === \"undefined\" ? undefined : (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(position);\n        this.sigSlot = sigSlot;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return StateProofReveal.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"participant\",\n                typeof this.participant !== \"undefined\" ? this.participant.toEncodingData() : undefined\n            ],\n            [\n                \"position\",\n                this.position\n            ],\n            [\n                \"sig-slot\",\n                typeof this.sigSlot !== \"undefined\" ? this.sigSlot.toEncodingData() : undefined\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded StateProofReveal: ${data}`);\n        }\n        return new StateProofReveal({\n            participant: typeof data.get(\"participant\") !== \"undefined\" ? StateProofParticipant.fromEncodingData(data.get(\"participant\")) : undefined,\n            position: data.get(\"position\"),\n            sigSlot: typeof data.get(\"sig-slot\") !== \"undefined\" ? StateProofSigSlot.fromEncodingData(data.get(\"sig-slot\")) : undefined\n        });\n    }\n}\nclass StateProofSigSlot {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"lower-sig-weight\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema()),\n                omitEmpty: true\n            }, {\n                key: \"signature\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(StateProofSignature.encodingSchema),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `StateProofSigSlot` object.\n     * @param lowerSigWeight - (l) The total weight of signatures in the lower-numbered slots.\n     * @param signature -\n     */ constructor({ lowerSigWeight, signature }){\n        this.lowerSigWeight = typeof lowerSigWeight === \"undefined\" ? undefined : (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(lowerSigWeight);\n        this.signature = signature;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return StateProofSigSlot.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"lower-sig-weight\",\n                this.lowerSigWeight\n            ],\n            [\n                \"signature\",\n                typeof this.signature !== \"undefined\" ? this.signature.toEncodingData() : undefined\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded StateProofSigSlot: ${data}`);\n        }\n        return new StateProofSigSlot({\n            lowerSigWeight: data.get(\"lower-sig-weight\"),\n            signature: typeof data.get(\"signature\") !== \"undefined\" ? StateProofSignature.fromEncodingData(data.get(\"signature\")) : undefined\n        });\n    }\n}\nclass StateProofSignature {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"falcon-signature\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ByteArraySchema()),\n                omitEmpty: true\n            }, {\n                key: \"merkle-array-index\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema()),\n                omitEmpty: true\n            }, {\n                key: \"proof\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(MerkleArrayProof.encodingSchema),\n                omitEmpty: true\n            }, {\n                key: \"verifying-key\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ByteArraySchema()),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `StateProofSignature` object.\n     * @param falconSignature -\n     * @param merkleArrayIndex -\n     * @param proof -\n     * @param verifyingKey - (vkey)\n     */ constructor({ falconSignature, merkleArrayIndex, proof, verifyingKey }){\n        this.falconSignature = typeof falconSignature === \"string\" ? (0,_encoding_binarydata_js__WEBPACK_IMPORTED_MODULE_2__.base64ToBytes)(falconSignature) : falconSignature;\n        this.merkleArrayIndex = typeof merkleArrayIndex === \"undefined\" ? undefined : (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureSafeInteger)(merkleArrayIndex);\n        this.proof = proof;\n        this.verifyingKey = typeof verifyingKey === \"string\" ? (0,_encoding_binarydata_js__WEBPACK_IMPORTED_MODULE_2__.base64ToBytes)(verifyingKey) : verifyingKey;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return StateProofSignature.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"falcon-signature\",\n                this.falconSignature\n            ],\n            [\n                \"merkle-array-index\",\n                this.merkleArrayIndex\n            ],\n            [\n                \"proof\",\n                typeof this.proof !== \"undefined\" ? this.proof.toEncodingData() : undefined\n            ],\n            [\n                \"verifying-key\",\n                this.verifyingKey\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded StateProofSignature: ${data}`);\n        }\n        return new StateProofSignature({\n            falconSignature: data.get(\"falcon-signature\"),\n            merkleArrayIndex: data.get(\"merkle-array-index\"),\n            proof: typeof data.get(\"proof\") !== \"undefined\" ? MerkleArrayProof.fromEncodingData(data.get(\"proof\")) : undefined,\n            verifyingKey: data.get(\"verifying-key\")\n        });\n    }\n}\nclass StateProofTracking {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"next-round\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema()),\n                omitEmpty: true\n            }, {\n                key: \"online-total-weight\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema()),\n                omitEmpty: true\n            }, {\n                key: \"type\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema()),\n                omitEmpty: true\n            }, {\n                key: \"voters-commitment\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ByteArraySchema()),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `StateProofTracking` object.\n     * @param nextRound - (n) Next round for which we will accept a state proof transaction.\n     * @param onlineTotalWeight - (t) The total number of microalgos held by the online accounts during the\n     * StateProof round.\n     * @param type - State Proof Type. Note the raw object uses map with this as key.\n     * @param votersCommitment - (v) Root of a vector commitment containing online accounts that will help sign\n     * the proof.\n     */ constructor({ nextRound, onlineTotalWeight, type, votersCommitment }){\n        this.nextRound = typeof nextRound === \"undefined\" ? undefined : (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(nextRound);\n        this.onlineTotalWeight = typeof onlineTotalWeight === \"undefined\" ? undefined : (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(onlineTotalWeight);\n        this.type = typeof type === \"undefined\" ? undefined : (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureSafeInteger)(type);\n        this.votersCommitment = typeof votersCommitment === \"string\" ? (0,_encoding_binarydata_js__WEBPACK_IMPORTED_MODULE_2__.base64ToBytes)(votersCommitment) : votersCommitment;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return StateProofTracking.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"next-round\",\n                this.nextRound\n            ],\n            [\n                \"online-total-weight\",\n                this.onlineTotalWeight\n            ],\n            [\n                \"type\",\n                this.type\n            ],\n            [\n                \"voters-commitment\",\n                this.votersCommitment\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded StateProofTracking: ${data}`);\n        }\n        return new StateProofTracking({\n            nextRound: data.get(\"next-round\"),\n            onlineTotalWeight: data.get(\"online-total-weight\"),\n            type: data.get(\"type\"),\n            votersCommitment: data.get(\"voters-commitment\")\n        });\n    }\n}\nclass StateProofVerifier {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"commitment\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ByteArraySchema()),\n                omitEmpty: true\n            }, {\n                key: \"key-lifetime\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema()),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `StateProofVerifier` object.\n     * @param commitment - (cmt) Represents the root of the vector commitment tree.\n     * @param keyLifetime - (lf) Key lifetime.\n     */ constructor({ commitment, keyLifetime }){\n        this.commitment = typeof commitment === \"string\" ? (0,_encoding_binarydata_js__WEBPACK_IMPORTED_MODULE_2__.base64ToBytes)(commitment) : commitment;\n        this.keyLifetime = typeof keyLifetime === \"undefined\" ? undefined : (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(keyLifetime);\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return StateProofVerifier.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"commitment\",\n                this.commitment\n            ],\n            [\n                \"key-lifetime\",\n                this.keyLifetime\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded StateProofVerifier: ${data}`);\n        }\n        return new StateProofVerifier({\n            commitment: data.get(\"commitment\"),\n            keyLifetime: data.get(\"key-lifetime\")\n        });\n    }\n}\n/**\n * Represents a (apls) local-state or (apgs) global-state schema. These schemas\n * determine how much storage may be used in a local-state or global-state for an\n * application. The more space used, the larger minimum balance must be maintained\n * in the account holding the data.\n */ class StateSchema {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"num-byte-slice\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            }, {\n                key: \"num-uint\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `StateSchema` object.\n     * @param numByteSlice - Maximum number of TEAL byte slices that may be stored in the key/value store.\n     * @param numUint - Maximum number of TEAL uints that may be stored in the key/value store.\n     */ constructor({ numByteSlice, numUint }){\n        this.numByteSlice = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureSafeInteger)(numByteSlice);\n        this.numUint = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureSafeInteger)(numUint);\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return StateSchema.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"num-byte-slice\",\n                this.numByteSlice\n            ],\n            [\n                \"num-uint\",\n                this.numUint\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded StateSchema: ${data}`);\n        }\n        return new StateSchema({\n            numByteSlice: data.get(\"num-byte-slice\"),\n            numUint: data.get(\"num-uint\")\n        });\n    }\n}\n/**\n * Represents a key-value pair in an application store.\n */ class TealKeyValue {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"key\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ByteArraySchema(),\n                omitEmpty: true\n            }, {\n                key: \"value\",\n                valueSchema: TealValue.encodingSchema,\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `TealKeyValue` object.\n     * @param key -\n     * @param value - Represents a TEAL value.\n     */ constructor({ key, value }){\n        this.key = typeof key === \"string\" ? (0,_encoding_binarydata_js__WEBPACK_IMPORTED_MODULE_2__.base64ToBytes)(key) : key;\n        this.value = value;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return TealKeyValue.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"key\",\n                this.key\n            ],\n            [\n                \"value\",\n                this.value.toEncodingData()\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded TealKeyValue: ${data}`);\n        }\n        return new TealKeyValue({\n            key: data.get(\"key\"),\n            value: TealValue.fromEncodingData(data.get(\"value\") ?? new Map())\n        });\n    }\n}\n/**\n * Represents a TEAL value.\n */ class TealValue {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"bytes\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ByteArraySchema(),\n                omitEmpty: true\n            }, {\n                key: \"type\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            }, {\n                key: \"uint\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `TealValue` object.\n     * @param bytes - bytes value.\n     * @param type - type of the value. Value `1` refers to **bytes**, value `2` refers to **uint**\n     * @param uint - uint value.\n     */ constructor({ bytes, type, uint }){\n        this.bytes = typeof bytes === \"string\" ? (0,_encoding_binarydata_js__WEBPACK_IMPORTED_MODULE_2__.base64ToBytes)(bytes) : bytes;\n        this.type = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureSafeInteger)(type);\n        this.uint = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(uint);\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return TealValue.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"bytes\",\n                this.bytes\n            ],\n            [\n                \"type\",\n                this.type\n            ],\n            [\n                \"uint\",\n                this.uint\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded TealValue: ${data}`);\n        }\n        return new TealValue({\n            bytes: data.get(\"bytes\"),\n            type: data.get(\"type\"),\n            uint: data.get(\"uint\")\n        });\n    }\n}\n/**\n * Contains all fields common to all transactions and serves as an envelope to all\n * transactions type. Represents both regular and inner transactions.\n * Definition:\n * data/transactions/signedtxn.go : SignedTxn\n * data/transactions/transaction.go : Transaction\n */ class Transaction {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"fee\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            }, {\n                key: \"first-valid\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            }, {\n                key: \"last-valid\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            }, {\n                key: \"sender\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema(),\n                omitEmpty: true\n            }, {\n                key: \"application-transaction\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(TransactionApplication.encodingSchema),\n                omitEmpty: true\n            }, {\n                key: \"asset-config-transaction\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(TransactionAssetConfig.encodingSchema),\n                omitEmpty: true\n            }, {\n                key: \"asset-freeze-transaction\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(TransactionAssetFreeze.encodingSchema),\n                omitEmpty: true\n            }, {\n                key: \"asset-transfer-transaction\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(TransactionAssetTransfer.encodingSchema),\n                omitEmpty: true\n            }, {\n                key: \"auth-addr\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema()),\n                omitEmpty: true\n            }, {\n                key: \"close-rewards\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema()),\n                omitEmpty: true\n            }, {\n                key: \"closing-amount\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema()),\n                omitEmpty: true\n            }, {\n                key: \"confirmed-round\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema()),\n                omitEmpty: true\n            }, {\n                key: \"created-application-index\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema()),\n                omitEmpty: true\n            }, {\n                key: \"created-asset-index\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema()),\n                omitEmpty: true\n            }, {\n                key: \"genesis-hash\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ByteArraySchema()),\n                omitEmpty: true\n            }, {\n                key: \"genesis-id\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema()),\n                omitEmpty: true\n            }, {\n                key: \"global-state-delta\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ArraySchema(EvalDeltaKeyValue.encodingSchema)),\n                omitEmpty: true\n            }, {\n                key: \"group\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ByteArraySchema()),\n                omitEmpty: true\n            }, {\n                key: \"heartbeat-transaction\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(TransactionHeartbeat.encodingSchema),\n                omitEmpty: true\n            }, {\n                key: \"id\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema()),\n                omitEmpty: true\n            }, {\n                key: \"inner-txns\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ArraySchema(Transaction.encodingSchema)),\n                omitEmpty: true\n            }, {\n                key: \"intra-round-offset\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema()),\n                omitEmpty: true\n            }, {\n                key: \"keyreg-transaction\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(TransactionKeyreg.encodingSchema),\n                omitEmpty: true\n            }, {\n                key: \"lease\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ByteArraySchema()),\n                omitEmpty: true\n            }, {\n                key: \"local-state-delta\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ArraySchema(AccountStateDelta.encodingSchema)),\n                omitEmpty: true\n            }, {\n                key: \"logs\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ArraySchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ByteArraySchema())),\n                omitEmpty: true\n            }, {\n                key: \"note\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ByteArraySchema()),\n                omitEmpty: true\n            }, {\n                key: \"payment-transaction\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(TransactionPayment.encodingSchema),\n                omitEmpty: true\n            }, {\n                key: \"receiver-rewards\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema()),\n                omitEmpty: true\n            }, {\n                key: \"rekey-to\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema()),\n                omitEmpty: true\n            }, {\n                key: \"round-time\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema()),\n                omitEmpty: true\n            }, {\n                key: \"sender-rewards\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema()),\n                omitEmpty: true\n            }, {\n                key: \"signature\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(TransactionSignature.encodingSchema),\n                omitEmpty: true\n            }, {\n                key: \"state-proof-transaction\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(TransactionStateProof.encodingSchema),\n                omitEmpty: true\n            }, {\n                key: \"tx-type\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema()),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `Transaction` object.\n     * @param fee - (fee) Transaction fee.\n     * @param firstValid - (fv) First valid round for this transaction.\n     * @param lastValid - (lv) Last valid round for this transaction.\n     * @param sender - (snd) Sender's address.\n     * @param applicationTransaction - Fields for application transactions.\n     * Definition:\n     * data/transactions/application.go : ApplicationCallTxnFields\n     * @param assetConfigTransaction - Fields for asset allocation, re-configuration, and destruction.\n     * A zero value for asset-id indicates asset creation.\n     * A zero value for the params indicates asset destruction.\n     * Definition:\n     * data/transactions/asset.go : AssetConfigTxnFields\n     * @param assetFreezeTransaction - Fields for an asset freeze transaction.\n     * Definition:\n     * data/transactions/asset.go : AssetFreezeTxnFields\n     * @param assetTransferTransaction - Fields for an asset transfer transaction.\n     * Definition:\n     * data/transactions/asset.go : AssetTransferTxnFields\n     * @param authAddr - (sgnr) this is included with signed transactions when the signing address does\n     * not equal the sender. The backend can use this to ensure that auth addr is equal\n     * to the accounts auth addr.\n     * @param closeRewards - (rc) rewards applied to close-remainder-to account.\n     * @param closingAmount - (ca) closing amount for transaction.\n     * @param confirmedRound - Round when the transaction was confirmed.\n     * @param createdApplicationIndex - Specifies an application index (ID) if an application was created with this\n     * transaction.\n     * @param createdAssetIndex - Specifies an asset index (ID) if an asset was created with this transaction.\n     * @param genesisHash - (gh) Hash of genesis block.\n     * @param genesisId - (gen) genesis block ID.\n     * @param globalStateDelta - (gd) Global state key/value changes for the application being executed by this\n     * transaction.\n     * @param group - (grp) Base64 encoded byte array of a sha512/256 digest. When present indicates\n     * that this transaction is part of a transaction group and the value is the\n     * sha512/256 hash of the transactions in that group.\n     * @param heartbeatTransaction - Fields for a heartbeat transaction.\n     * Definition:\n     * data/transactions/heartbeat.go : HeartbeatTxnFields\n     * @param id - Transaction ID\n     * @param innerTxns - Inner transactions produced by application execution.\n     * @param intraRoundOffset - Offset into the round where this transaction was confirmed.\n     * @param keyregTransaction - Fields for a keyreg transaction.\n     * Definition:\n     * data/transactions/keyreg.go : KeyregTxnFields\n     * @param lease - (lx) Base64 encoded 32-byte array. Lease enforces mutual exclusion of\n     * transactions. If this field is nonzero, then once the transaction is confirmed,\n     * it acquires the lease identified by the (Sender, Lease) pair of the transaction\n     * until the LastValid round passes. While this transaction possesses the lease, no\n     * other transaction specifying this lease can be confirmed.\n     * @param localStateDelta - (ld) Local state key/value changes for the application being executed by this\n     * transaction.\n     * @param logs - (lg) Logs for the application being executed by this transaction.\n     * @param note - (note) Free form data.\n     * @param paymentTransaction - Fields for a payment transaction.\n     * Definition:\n     * data/transactions/payment.go : PaymentTxnFields\n     * @param receiverRewards - (rr) rewards applied to receiver account.\n     * @param rekeyTo - (rekey) when included in a valid transaction, the accounts auth addr will be\n     * updated with this value and future signatures must be signed with the key\n     * represented by this address.\n     * @param roundTime - Time when the block this transaction is in was confirmed.\n     * @param senderRewards - (rs) rewards applied to sender account.\n     * @param signature - Validation signature associated with some data. Only one of the signatures\n     * should be provided.\n     * @param stateProofTransaction - Fields for a state proof transaction.\n     * Definition:\n     * data/transactions/stateproof.go : StateProofTxnFields\n     * @param txType - (type) Indicates what type of transaction this is. Different types have\n     * different fields.\n     * Valid types, and where their fields are stored:\n     * * (pay) payment-transaction\n     * * (keyreg) keyreg-transaction\n     * * (acfg) asset-config-transaction\n     * * (axfer) asset-transfer-transaction\n     * * (afrz) asset-freeze-transaction\n     * * (appl) application-transaction\n     * * (stpf) state-proof-transaction\n     * * (hb) heartbeat-transaction\n     */ constructor({ fee, firstValid, lastValid, sender, applicationTransaction, assetConfigTransaction, assetFreezeTransaction, assetTransferTransaction, authAddr, closeRewards, closingAmount, confirmedRound, createdApplicationIndex, createdAssetIndex, genesisHash, genesisId, globalStateDelta, group, heartbeatTransaction, id, innerTxns, intraRoundOffset, keyregTransaction, lease, localStateDelta, logs, note, paymentTransaction, receiverRewards, rekeyTo, roundTime, senderRewards, signature, stateProofTransaction, txType }){\n        this.fee = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(fee);\n        this.firstValid = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(firstValid);\n        this.lastValid = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(lastValid);\n        this.sender = sender;\n        this.applicationTransaction = applicationTransaction;\n        this.assetConfigTransaction = assetConfigTransaction;\n        this.assetFreezeTransaction = assetFreezeTransaction;\n        this.assetTransferTransaction = assetTransferTransaction;\n        this.authAddr = typeof authAddr === \"string\" ? _encoding_address_js__WEBPACK_IMPORTED_MODULE_3__.Address.fromString(authAddr) : authAddr;\n        this.closeRewards = typeof closeRewards === \"undefined\" ? undefined : (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(closeRewards);\n        this.closingAmount = typeof closingAmount === \"undefined\" ? undefined : (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(closingAmount);\n        this.confirmedRound = typeof confirmedRound === \"undefined\" ? undefined : (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(confirmedRound);\n        this.createdApplicationIndex = typeof createdApplicationIndex === \"undefined\" ? undefined : (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(createdApplicationIndex);\n        this.createdAssetIndex = typeof createdAssetIndex === \"undefined\" ? undefined : (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(createdAssetIndex);\n        this.genesisHash = typeof genesisHash === \"string\" ? (0,_encoding_binarydata_js__WEBPACK_IMPORTED_MODULE_2__.base64ToBytes)(genesisHash) : genesisHash;\n        this.genesisId = genesisId;\n        this.globalStateDelta = globalStateDelta;\n        this.group = typeof group === \"string\" ? (0,_encoding_binarydata_js__WEBPACK_IMPORTED_MODULE_2__.base64ToBytes)(group) : group;\n        this.heartbeatTransaction = heartbeatTransaction;\n        this.id = id;\n        this.innerTxns = innerTxns;\n        this.intraRoundOffset = typeof intraRoundOffset === \"undefined\" ? undefined : (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureSafeInteger)(intraRoundOffset);\n        this.keyregTransaction = keyregTransaction;\n        this.lease = typeof lease === \"string\" ? (0,_encoding_binarydata_js__WEBPACK_IMPORTED_MODULE_2__.base64ToBytes)(lease) : lease;\n        this.localStateDelta = localStateDelta;\n        this.logs = logs;\n        this.note = typeof note === \"string\" ? (0,_encoding_binarydata_js__WEBPACK_IMPORTED_MODULE_2__.base64ToBytes)(note) : note;\n        this.paymentTransaction = paymentTransaction;\n        this.receiverRewards = typeof receiverRewards === \"undefined\" ? undefined : (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(receiverRewards);\n        this.rekeyTo = typeof rekeyTo === \"string\" ? _encoding_address_js__WEBPACK_IMPORTED_MODULE_3__.Address.fromString(rekeyTo) : rekeyTo;\n        this.roundTime = typeof roundTime === \"undefined\" ? undefined : (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureSafeInteger)(roundTime);\n        this.senderRewards = typeof senderRewards === \"undefined\" ? undefined : (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(senderRewards);\n        this.signature = signature;\n        this.stateProofTransaction = stateProofTransaction;\n        this.txType = txType;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return Transaction.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"fee\",\n                this.fee\n            ],\n            [\n                \"first-valid\",\n                this.firstValid\n            ],\n            [\n                \"last-valid\",\n                this.lastValid\n            ],\n            [\n                \"sender\",\n                this.sender\n            ],\n            [\n                \"application-transaction\",\n                typeof this.applicationTransaction !== \"undefined\" ? this.applicationTransaction.toEncodingData() : undefined\n            ],\n            [\n                \"asset-config-transaction\",\n                typeof this.assetConfigTransaction !== \"undefined\" ? this.assetConfigTransaction.toEncodingData() : undefined\n            ],\n            [\n                \"asset-freeze-transaction\",\n                typeof this.assetFreezeTransaction !== \"undefined\" ? this.assetFreezeTransaction.toEncodingData() : undefined\n            ],\n            [\n                \"asset-transfer-transaction\",\n                typeof this.assetTransferTransaction !== \"undefined\" ? this.assetTransferTransaction.toEncodingData() : undefined\n            ],\n            [\n                \"auth-addr\",\n                typeof this.authAddr !== \"undefined\" ? this.authAddr.toString() : undefined\n            ],\n            [\n                \"close-rewards\",\n                this.closeRewards\n            ],\n            [\n                \"closing-amount\",\n                this.closingAmount\n            ],\n            [\n                \"confirmed-round\",\n                this.confirmedRound\n            ],\n            [\n                \"created-application-index\",\n                this.createdApplicationIndex\n            ],\n            [\n                \"created-asset-index\",\n                this.createdAssetIndex\n            ],\n            [\n                \"genesis-hash\",\n                this.genesisHash\n            ],\n            [\n                \"genesis-id\",\n                this.genesisId\n            ],\n            [\n                \"global-state-delta\",\n                typeof this.globalStateDelta !== \"undefined\" ? this.globalStateDelta.map((v)=>v.toEncodingData()) : undefined\n            ],\n            [\n                \"group\",\n                this.group\n            ],\n            [\n                \"heartbeat-transaction\",\n                typeof this.heartbeatTransaction !== \"undefined\" ? this.heartbeatTransaction.toEncodingData() : undefined\n            ],\n            [\n                \"id\",\n                this.id\n            ],\n            [\n                \"inner-txns\",\n                typeof this.innerTxns !== \"undefined\" ? this.innerTxns.map((v)=>v.toEncodingData()) : undefined\n            ],\n            [\n                \"intra-round-offset\",\n                this.intraRoundOffset\n            ],\n            [\n                \"keyreg-transaction\",\n                typeof this.keyregTransaction !== \"undefined\" ? this.keyregTransaction.toEncodingData() : undefined\n            ],\n            [\n                \"lease\",\n                this.lease\n            ],\n            [\n                \"local-state-delta\",\n                typeof this.localStateDelta !== \"undefined\" ? this.localStateDelta.map((v)=>v.toEncodingData()) : undefined\n            ],\n            [\n                \"logs\",\n                this.logs\n            ],\n            [\n                \"note\",\n                this.note\n            ],\n            [\n                \"payment-transaction\",\n                typeof this.paymentTransaction !== \"undefined\" ? this.paymentTransaction.toEncodingData() : undefined\n            ],\n            [\n                \"receiver-rewards\",\n                this.receiverRewards\n            ],\n            [\n                \"rekey-to\",\n                typeof this.rekeyTo !== \"undefined\" ? this.rekeyTo.toString() : undefined\n            ],\n            [\n                \"round-time\",\n                this.roundTime\n            ],\n            [\n                \"sender-rewards\",\n                this.senderRewards\n            ],\n            [\n                \"signature\",\n                typeof this.signature !== \"undefined\" ? this.signature.toEncodingData() : undefined\n            ],\n            [\n                \"state-proof-transaction\",\n                typeof this.stateProofTransaction !== \"undefined\" ? this.stateProofTransaction.toEncodingData() : undefined\n            ],\n            [\n                \"tx-type\",\n                this.txType\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded Transaction: ${data}`);\n        }\n        return new Transaction({\n            fee: data.get(\"fee\"),\n            firstValid: data.get(\"first-valid\"),\n            lastValid: data.get(\"last-valid\"),\n            sender: data.get(\"sender\"),\n            applicationTransaction: typeof data.get(\"application-transaction\") !== \"undefined\" ? TransactionApplication.fromEncodingData(data.get(\"application-transaction\")) : undefined,\n            assetConfigTransaction: typeof data.get(\"asset-config-transaction\") !== \"undefined\" ? TransactionAssetConfig.fromEncodingData(data.get(\"asset-config-transaction\")) : undefined,\n            assetFreezeTransaction: typeof data.get(\"asset-freeze-transaction\") !== \"undefined\" ? TransactionAssetFreeze.fromEncodingData(data.get(\"asset-freeze-transaction\")) : undefined,\n            assetTransferTransaction: typeof data.get(\"asset-transfer-transaction\") !== \"undefined\" ? TransactionAssetTransfer.fromEncodingData(data.get(\"asset-transfer-transaction\")) : undefined,\n            authAddr: data.get(\"auth-addr\"),\n            closeRewards: data.get(\"close-rewards\"),\n            closingAmount: data.get(\"closing-amount\"),\n            confirmedRound: data.get(\"confirmed-round\"),\n            createdApplicationIndex: data.get(\"created-application-index\"),\n            createdAssetIndex: data.get(\"created-asset-index\"),\n            genesisHash: data.get(\"genesis-hash\"),\n            genesisId: data.get(\"genesis-id\"),\n            globalStateDelta: typeof data.get(\"global-state-delta\") !== \"undefined\" ? data.get(\"global-state-delta\").map((v)=>EvalDeltaKeyValue.fromEncodingData(v)) : undefined,\n            group: data.get(\"group\"),\n            heartbeatTransaction: typeof data.get(\"heartbeat-transaction\") !== \"undefined\" ? TransactionHeartbeat.fromEncodingData(data.get(\"heartbeat-transaction\")) : undefined,\n            id: data.get(\"id\"),\n            innerTxns: typeof data.get(\"inner-txns\") !== \"undefined\" ? data.get(\"inner-txns\").map((v)=>Transaction.fromEncodingData(v)) : undefined,\n            intraRoundOffset: data.get(\"intra-round-offset\"),\n            keyregTransaction: typeof data.get(\"keyreg-transaction\") !== \"undefined\" ? TransactionKeyreg.fromEncodingData(data.get(\"keyreg-transaction\")) : undefined,\n            lease: data.get(\"lease\"),\n            localStateDelta: typeof data.get(\"local-state-delta\") !== \"undefined\" ? data.get(\"local-state-delta\").map((v)=>AccountStateDelta.fromEncodingData(v)) : undefined,\n            logs: data.get(\"logs\"),\n            note: data.get(\"note\"),\n            paymentTransaction: typeof data.get(\"payment-transaction\") !== \"undefined\" ? TransactionPayment.fromEncodingData(data.get(\"payment-transaction\")) : undefined,\n            receiverRewards: data.get(\"receiver-rewards\"),\n            rekeyTo: data.get(\"rekey-to\"),\n            roundTime: data.get(\"round-time\"),\n            senderRewards: data.get(\"sender-rewards\"),\n            signature: typeof data.get(\"signature\") !== \"undefined\" ? TransactionSignature.fromEncodingData(data.get(\"signature\")) : undefined,\n            stateProofTransaction: typeof data.get(\"state-proof-transaction\") !== \"undefined\" ? TransactionStateProof.fromEncodingData(data.get(\"state-proof-transaction\")) : undefined,\n            txType: data.get(\"tx-type\")\n        });\n    }\n}\n/**\n * Fields for application transactions.\n * Definition:\n * data/transactions/application.go : ApplicationCallTxnFields\n */ class TransactionApplication {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"application-id\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            }, {\n                key: \"access\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ArraySchema(ResourceRef.encodingSchema)),\n                omitEmpty: true\n            }, {\n                key: \"accounts\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ArraySchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema())),\n                omitEmpty: true\n            }, {\n                key: \"application-args\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ArraySchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ByteArraySchema())),\n                omitEmpty: true\n            }, {\n                key: \"approval-program\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ByteArraySchema()),\n                omitEmpty: true\n            }, {\n                key: \"box-references\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ArraySchema(BoxReference.encodingSchema)),\n                omitEmpty: true\n            }, {\n                key: \"clear-state-program\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ByteArraySchema()),\n                omitEmpty: true\n            }, {\n                key: \"extra-program-pages\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema()),\n                omitEmpty: true\n            }, {\n                key: \"foreign-apps\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ArraySchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema())),\n                omitEmpty: true\n            }, {\n                key: \"foreign-assets\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ArraySchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema())),\n                omitEmpty: true\n            }, {\n                key: \"global-state-schema\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(StateSchema.encodingSchema),\n                omitEmpty: true\n            }, {\n                key: \"local-state-schema\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(StateSchema.encodingSchema),\n                omitEmpty: true\n            }, {\n                key: \"on-completion\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema()),\n                omitEmpty: true\n            }, {\n                key: \"reject-version\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema()),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `TransactionApplication` object.\n     * @param applicationId - (apid) ID of the application being configured or empty if creating.\n     * @param access - (al) Access unifies `accounts`, `foreign-apps`, `foreign-assets`, and\n     * `box-references` under a single list. If access is non-empty, these lists must\n     * be empty. If access is empty, those lists may be non-empty.\n     * @param accounts - (apat) List of accounts in addition to the sender that may be accessed from the\n     * application's approval-program and clear-state-program.\n     * @param applicationArgs - (apaa) transaction specific arguments accessed from the application's\n     * approval-program and clear-state-program.\n     * @param approvalProgram - (apap) Logic executed for every application transaction, except when\n     * on-completion is set to \"clear\". It can read and write global state for the\n     * application, as well as account-specific local state. Approval programs may\n     * reject the transaction.\n     * @param boxReferences - (apbx) the boxes that can be accessed by this transaction (and others in the\n     * same group).\n     * @param clearStateProgram - (apsu) Logic executed for application transactions with on-completion set to\n     * \"clear\". It can read and write global state for the application, as well as\n     * account-specific local state. Clear state programs cannot reject the\n     * transaction.\n     * @param extraProgramPages - (epp) specifies the additional app program len requested in pages.\n     * @param foreignApps - (apfa) Lists the applications in addition to the application-id whose global\n     * states may be accessed by this application's approval-program and\n     * clear-state-program. The access is read-only.\n     * @param foreignAssets - (apas) lists the assets whose parameters may be accessed by this application's\n     * ApprovalProgram and ClearStateProgram. The access is read-only.\n     * @param globalStateSchema - Represents a (apls) local-state or (apgs) global-state schema. These schemas\n     * determine how much storage may be used in a local-state or global-state for an\n     * application. The more space used, the larger minimum balance must be maintained\n     * in the account holding the data.\n     * @param localStateSchema - Represents a (apls) local-state or (apgs) global-state schema. These schemas\n     * determine how much storage may be used in a local-state or global-state for an\n     * application. The more space used, the larger minimum balance must be maintained\n     * in the account holding the data.\n     * @param onCompletion - (apan) defines the what additional actions occur with the transaction.\n     * Valid types:\n     * * noop\n     * * optin\n     * * closeout\n     * * clear\n     * * update\n     * * update\n     * * delete\n     * @param rejectVersion - (aprv) the lowest application version for which this transaction should\n     * immediately fail. 0 indicates that no version check should be performed.\n     */ constructor({ applicationId, access, accounts, applicationArgs, approvalProgram, boxReferences, clearStateProgram, extraProgramPages, foreignApps, foreignAssets, globalStateSchema, localStateSchema, onCompletion, rejectVersion }){\n        this.applicationId = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(applicationId);\n        this.access = access;\n        this.accounts = typeof accounts !== \"undefined\" ? accounts.map((addr)=>typeof addr === \"string\" ? _encoding_address_js__WEBPACK_IMPORTED_MODULE_3__.Address.fromString(addr) : addr) : undefined;\n        this.applicationArgs = applicationArgs;\n        this.approvalProgram = typeof approvalProgram === \"string\" ? (0,_encoding_binarydata_js__WEBPACK_IMPORTED_MODULE_2__.base64ToBytes)(approvalProgram) : approvalProgram;\n        this.boxReferences = boxReferences;\n        this.clearStateProgram = typeof clearStateProgram === \"string\" ? (0,_encoding_binarydata_js__WEBPACK_IMPORTED_MODULE_2__.base64ToBytes)(clearStateProgram) : clearStateProgram;\n        this.extraProgramPages = typeof extraProgramPages === \"undefined\" ? undefined : (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureSafeInteger)(extraProgramPages);\n        this.foreignApps = typeof foreignApps === \"undefined\" ? undefined : foreignApps.map(_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt);\n        this.foreignAssets = typeof foreignAssets === \"undefined\" ? undefined : foreignAssets.map(_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt);\n        this.globalStateSchema = globalStateSchema;\n        this.localStateSchema = localStateSchema;\n        this.onCompletion = onCompletion;\n        this.rejectVersion = typeof rejectVersion === \"undefined\" ? undefined : (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureSafeInteger)(rejectVersion);\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return TransactionApplication.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"application-id\",\n                this.applicationId\n            ],\n            [\n                \"access\",\n                typeof this.access !== \"undefined\" ? this.access.map((v)=>v.toEncodingData()) : undefined\n            ],\n            [\n                \"accounts\",\n                typeof this.accounts !== \"undefined\" ? this.accounts.map((v)=>v.toString()) : undefined\n            ],\n            [\n                \"application-args\",\n                this.applicationArgs\n            ],\n            [\n                \"approval-program\",\n                this.approvalProgram\n            ],\n            [\n                \"box-references\",\n                typeof this.boxReferences !== \"undefined\" ? this.boxReferences.map((v)=>v.toEncodingData()) : undefined\n            ],\n            [\n                \"clear-state-program\",\n                this.clearStateProgram\n            ],\n            [\n                \"extra-program-pages\",\n                this.extraProgramPages\n            ],\n            [\n                \"foreign-apps\",\n                this.foreignApps\n            ],\n            [\n                \"foreign-assets\",\n                this.foreignAssets\n            ],\n            [\n                \"global-state-schema\",\n                typeof this.globalStateSchema !== \"undefined\" ? this.globalStateSchema.toEncodingData() : undefined\n            ],\n            [\n                \"local-state-schema\",\n                typeof this.localStateSchema !== \"undefined\" ? this.localStateSchema.toEncodingData() : undefined\n            ],\n            [\n                \"on-completion\",\n                this.onCompletion\n            ],\n            [\n                \"reject-version\",\n                this.rejectVersion\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded TransactionApplication: ${data}`);\n        }\n        return new TransactionApplication({\n            applicationId: data.get(\"application-id\"),\n            access: typeof data.get(\"access\") !== \"undefined\" ? data.get(\"access\").map((v)=>ResourceRef.fromEncodingData(v)) : undefined,\n            accounts: data.get(\"accounts\"),\n            applicationArgs: data.get(\"application-args\"),\n            approvalProgram: data.get(\"approval-program\"),\n            boxReferences: typeof data.get(\"box-references\") !== \"undefined\" ? data.get(\"box-references\").map((v)=>BoxReference.fromEncodingData(v)) : undefined,\n            clearStateProgram: data.get(\"clear-state-program\"),\n            extraProgramPages: data.get(\"extra-program-pages\"),\n            foreignApps: data.get(\"foreign-apps\"),\n            foreignAssets: data.get(\"foreign-assets\"),\n            globalStateSchema: typeof data.get(\"global-state-schema\") !== \"undefined\" ? StateSchema.fromEncodingData(data.get(\"global-state-schema\")) : undefined,\n            localStateSchema: typeof data.get(\"local-state-schema\") !== \"undefined\" ? StateSchema.fromEncodingData(data.get(\"local-state-schema\")) : undefined,\n            onCompletion: data.get(\"on-completion\"),\n            rejectVersion: data.get(\"reject-version\")\n        });\n    }\n}\n/**\n * Fields for asset allocation, re-configuration, and destruction.\n * A zero value for asset-id indicates asset creation.\n * A zero value for the params indicates asset destruction.\n * Definition:\n * data/transactions/asset.go : AssetConfigTxnFields\n */ class TransactionAssetConfig {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"asset-id\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema()),\n                omitEmpty: true\n            }, {\n                key: \"params\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(AssetParams.encodingSchema),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `TransactionAssetConfig` object.\n     * @param assetId - (xaid) ID of the asset being configured or empty if creating.\n     * @param params - AssetParams specifies the parameters for an asset.\n     * (apar) when part of an AssetConfig transaction.\n     * Definition:\n     * data/transactions/asset.go : AssetParams\n     */ constructor({ assetId, params }){\n        this.assetId = typeof assetId === \"undefined\" ? undefined : (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(assetId);\n        this.params = params;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return TransactionAssetConfig.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"asset-id\",\n                this.assetId\n            ],\n            [\n                \"params\",\n                typeof this.params !== \"undefined\" ? this.params.toEncodingData() : undefined\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded TransactionAssetConfig: ${data}`);\n        }\n        return new TransactionAssetConfig({\n            assetId: data.get(\"asset-id\"),\n            params: typeof data.get(\"params\") !== \"undefined\" ? AssetParams.fromEncodingData(data.get(\"params\")) : undefined\n        });\n    }\n}\n/**\n * Fields for an asset freeze transaction.\n * Definition:\n * data/transactions/asset.go : AssetFreezeTxnFields\n */ class TransactionAssetFreeze {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"address\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema(),\n                omitEmpty: true\n            }, {\n                key: \"asset-id\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            }, {\n                key: \"new-freeze-status\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.BooleanSchema(),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `TransactionAssetFreeze` object.\n     * @param address - (fadd) Address of the account whose asset is being frozen or thawed.\n     * @param assetId - (faid) ID of the asset being frozen or thawed.\n     * @param newFreezeStatus - (afrz) The new freeze status.\n     */ constructor({ address, assetId, newFreezeStatus }){\n        this.address = address;\n        this.assetId = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(assetId);\n        this.newFreezeStatus = newFreezeStatus;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return TransactionAssetFreeze.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"address\",\n                this.address\n            ],\n            [\n                \"asset-id\",\n                this.assetId\n            ],\n            [\n                \"new-freeze-status\",\n                this.newFreezeStatus\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded TransactionAssetFreeze: ${data}`);\n        }\n        return new TransactionAssetFreeze({\n            address: data.get(\"address\"),\n            assetId: data.get(\"asset-id\"),\n            newFreezeStatus: data.get(\"new-freeze-status\")\n        });\n    }\n}\n/**\n * Fields for an asset transfer transaction.\n * Definition:\n * data/transactions/asset.go : AssetTransferTxnFields\n */ class TransactionAssetTransfer {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"amount\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            }, {\n                key: \"asset-id\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            }, {\n                key: \"receiver\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema(),\n                omitEmpty: true\n            }, {\n                key: \"close-amount\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema()),\n                omitEmpty: true\n            }, {\n                key: \"close-to\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema()),\n                omitEmpty: true\n            }, {\n                key: \"sender\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema()),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `TransactionAssetTransfer` object.\n     * @param amount - (aamt) Amount of asset to transfer. A zero amount transferred to self allocates\n     * that asset in the account's Assets map.\n     * @param assetId - (xaid) ID of the asset being transferred.\n     * @param receiver - (arcv) Recipient address of the transfer.\n     * @param closeAmount - Number of assets transferred to the close-to account as part of the transaction.\n     * @param closeTo - (aclose) Indicates that the asset should be removed from the account's Assets\n     * map, and specifies where the remaining asset holdings should be transferred.\n     * It's always valid to transfer remaining asset holdings to the creator account.\n     * @param sender - (asnd) The effective sender during a clawback transactions. If this is not a\n     * zero value, the real transaction sender must be the Clawback address from the\n     * AssetParams.\n     */ constructor({ amount, assetId, receiver, closeAmount, closeTo, sender }){\n        this.amount = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(amount);\n        this.assetId = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(assetId);\n        this.receiver = receiver;\n        this.closeAmount = typeof closeAmount === \"undefined\" ? undefined : (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(closeAmount);\n        this.closeTo = closeTo;\n        this.sender = sender;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return TransactionAssetTransfer.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"amount\",\n                this.amount\n            ],\n            [\n                \"asset-id\",\n                this.assetId\n            ],\n            [\n                \"receiver\",\n                this.receiver\n            ],\n            [\n                \"close-amount\",\n                this.closeAmount\n            ],\n            [\n                \"close-to\",\n                this.closeTo\n            ],\n            [\n                \"sender\",\n                this.sender\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded TransactionAssetTransfer: ${data}`);\n        }\n        return new TransactionAssetTransfer({\n            amount: data.get(\"amount\"),\n            assetId: data.get(\"asset-id\"),\n            receiver: data.get(\"receiver\"),\n            closeAmount: data.get(\"close-amount\"),\n            closeTo: data.get(\"close-to\"),\n            sender: data.get(\"sender\")\n        });\n    }\n}\n/**\n * Fields for a heartbeat transaction.\n * Definition:\n * data/transactions/heartbeat.go : HeartbeatTxnFields\n */ class TransactionHeartbeat {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"hb-address\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema(),\n                omitEmpty: true\n            }, {\n                key: \"hb-key-dilution\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            }, {\n                key: \"hb-proof\",\n                valueSchema: HbProofFields.encodingSchema,\n                omitEmpty: true\n            }, {\n                key: \"hb-seed\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ByteArraySchema(),\n                omitEmpty: true\n            }, {\n                key: \"hb-vote-id\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ByteArraySchema(),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `TransactionHeartbeat` object.\n     * @param hbAddress - (hbad) HbAddress is the account this txn is proving onlineness for.\n     * @param hbKeyDilution - (hbkd) HbKeyDilution must match HbAddress account's current KeyDilution.\n     * @param hbProof - (hbprf) HbProof is a signature using HeartbeatAddress's partkey, thereby showing\n     * it is online.\n     * @param hbSeed - (hbsd) HbSeed must be the block seed for the this transaction's firstValid\n     * block.\n     * @param hbVoteId - (hbvid) HbVoteID must match the HbAddress account's current VoteID.\n     */ constructor({ hbAddress, hbKeyDilution, hbProof, hbSeed, hbVoteId }){\n        this.hbAddress = hbAddress;\n        this.hbKeyDilution = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(hbKeyDilution);\n        this.hbProof = hbProof;\n        this.hbSeed = typeof hbSeed === \"string\" ? (0,_encoding_binarydata_js__WEBPACK_IMPORTED_MODULE_2__.base64ToBytes)(hbSeed) : hbSeed;\n        this.hbVoteId = typeof hbVoteId === \"string\" ? (0,_encoding_binarydata_js__WEBPACK_IMPORTED_MODULE_2__.base64ToBytes)(hbVoteId) : hbVoteId;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return TransactionHeartbeat.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"hb-address\",\n                this.hbAddress\n            ],\n            [\n                \"hb-key-dilution\",\n                this.hbKeyDilution\n            ],\n            [\n                \"hb-proof\",\n                this.hbProof.toEncodingData()\n            ],\n            [\n                \"hb-seed\",\n                this.hbSeed\n            ],\n            [\n                \"hb-vote-id\",\n                this.hbVoteId\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded TransactionHeartbeat: ${data}`);\n        }\n        return new TransactionHeartbeat({\n            hbAddress: data.get(\"hb-address\"),\n            hbKeyDilution: data.get(\"hb-key-dilution\"),\n            hbProof: HbProofFields.fromEncodingData(data.get(\"hb-proof\") ?? new Map()),\n            hbSeed: data.get(\"hb-seed\"),\n            hbVoteId: data.get(\"hb-vote-id\")\n        });\n    }\n}\n/**\n * Fields for a keyreg transaction.\n * Definition:\n * data/transactions/keyreg.go : KeyregTxnFields\n */ class TransactionKeyreg {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"non-participation\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.BooleanSchema()),\n                omitEmpty: true\n            }, {\n                key: \"selection-participation-key\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ByteArraySchema()),\n                omitEmpty: true\n            }, {\n                key: \"state-proof-key\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ByteArraySchema()),\n                omitEmpty: true\n            }, {\n                key: \"vote-first-valid\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema()),\n                omitEmpty: true\n            }, {\n                key: \"vote-key-dilution\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema()),\n                omitEmpty: true\n            }, {\n                key: \"vote-last-valid\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema()),\n                omitEmpty: true\n            }, {\n                key: \"vote-participation-key\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ByteArraySchema()),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `TransactionKeyreg` object.\n     * @param nonParticipation - (nonpart) Mark the account as participating or non-participating.\n     * @param selectionParticipationKey - (selkey) Public key used with the Verified Random Function (VRF) result during\n     * committee selection.\n     * @param stateProofKey - (sprfkey) State proof key used in key registration transactions.\n     * @param voteFirstValid - (votefst) First round this participation key is valid.\n     * @param voteKeyDilution - (votekd) Number of subkeys in each batch of participation keys.\n     * @param voteLastValid - (votelst) Last round this participation key is valid.\n     * @param voteParticipationKey - (votekey) Participation public key used in key registration transactions.\n     */ constructor({ nonParticipation, selectionParticipationKey, stateProofKey, voteFirstValid, voteKeyDilution, voteLastValid, voteParticipationKey }){\n        this.nonParticipation = nonParticipation;\n        this.selectionParticipationKey = typeof selectionParticipationKey === \"string\" ? (0,_encoding_binarydata_js__WEBPACK_IMPORTED_MODULE_2__.base64ToBytes)(selectionParticipationKey) : selectionParticipationKey;\n        this.stateProofKey = typeof stateProofKey === \"string\" ? (0,_encoding_binarydata_js__WEBPACK_IMPORTED_MODULE_2__.base64ToBytes)(stateProofKey) : stateProofKey;\n        this.voteFirstValid = typeof voteFirstValid === \"undefined\" ? undefined : (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(voteFirstValid);\n        this.voteKeyDilution = typeof voteKeyDilution === \"undefined\" ? undefined : (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(voteKeyDilution);\n        this.voteLastValid = typeof voteLastValid === \"undefined\" ? undefined : (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(voteLastValid);\n        this.voteParticipationKey = typeof voteParticipationKey === \"string\" ? (0,_encoding_binarydata_js__WEBPACK_IMPORTED_MODULE_2__.base64ToBytes)(voteParticipationKey) : voteParticipationKey;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return TransactionKeyreg.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"non-participation\",\n                this.nonParticipation\n            ],\n            [\n                \"selection-participation-key\",\n                this.selectionParticipationKey\n            ],\n            [\n                \"state-proof-key\",\n                this.stateProofKey\n            ],\n            [\n                \"vote-first-valid\",\n                this.voteFirstValid\n            ],\n            [\n                \"vote-key-dilution\",\n                this.voteKeyDilution\n            ],\n            [\n                \"vote-last-valid\",\n                this.voteLastValid\n            ],\n            [\n                \"vote-participation-key\",\n                this.voteParticipationKey\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded TransactionKeyreg: ${data}`);\n        }\n        return new TransactionKeyreg({\n            nonParticipation: data.get(\"non-participation\"),\n            selectionParticipationKey: data.get(\"selection-participation-key\"),\n            stateProofKey: data.get(\"state-proof-key\"),\n            voteFirstValid: data.get(\"vote-first-valid\"),\n            voteKeyDilution: data.get(\"vote-key-dilution\"),\n            voteLastValid: data.get(\"vote-last-valid\"),\n            voteParticipationKey: data.get(\"vote-participation-key\")\n        });\n    }\n}\n/**\n * Fields for a payment transaction.\n * Definition:\n * data/transactions/payment.go : PaymentTxnFields\n */ class TransactionPayment {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"amount\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            }, {\n                key: \"receiver\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema(),\n                omitEmpty: true\n            }, {\n                key: \"close-amount\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema()),\n                omitEmpty: true\n            }, {\n                key: \"close-remainder-to\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema()),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `TransactionPayment` object.\n     * @param amount - (amt) number of MicroAlgos intended to be transferred.\n     * @param receiver - (rcv) receiver's address.\n     * @param closeAmount - Number of MicroAlgos that were sent to the close-remainder-to address when\n     * closing the sender account.\n     * @param closeRemainderTo - (close) when set, indicates that the sending account should be closed and all\n     * remaining funds be transferred to this address.\n     */ constructor({ amount, receiver, closeAmount, closeRemainderTo }){\n        this.amount = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(amount);\n        this.receiver = receiver;\n        this.closeAmount = typeof closeAmount === \"undefined\" ? undefined : (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(closeAmount);\n        this.closeRemainderTo = closeRemainderTo;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return TransactionPayment.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"amount\",\n                this.amount\n            ],\n            [\n                \"receiver\",\n                this.receiver\n            ],\n            [\n                \"close-amount\",\n                this.closeAmount\n            ],\n            [\n                \"close-remainder-to\",\n                this.closeRemainderTo\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded TransactionPayment: ${data}`);\n        }\n        return new TransactionPayment({\n            amount: data.get(\"amount\"),\n            receiver: data.get(\"receiver\"),\n            closeAmount: data.get(\"close-amount\"),\n            closeRemainderTo: data.get(\"close-remainder-to\")\n        });\n    }\n}\n/**\n *\n */ class TransactionResponse {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"current-round\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            }, {\n                key: \"transaction\",\n                valueSchema: Transaction.encodingSchema,\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `TransactionResponse` object.\n     * @param currentRound - Round at which the results were computed.\n     * @param transaction - Contains all fields common to all transactions and serves as an envelope to all\n     * transactions type. Represents both regular and inner transactions.\n     * Definition:\n     * data/transactions/signedtxn.go : SignedTxn\n     * data/transactions/transaction.go : Transaction\n     */ constructor({ currentRound, transaction }){\n        this.currentRound = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(currentRound);\n        this.transaction = transaction;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return TransactionResponse.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"current-round\",\n                this.currentRound\n            ],\n            [\n                \"transaction\",\n                this.transaction.toEncodingData()\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded TransactionResponse: ${data}`);\n        }\n        return new TransactionResponse({\n            currentRound: data.get(\"current-round\"),\n            transaction: Transaction.fromEncodingData(data.get(\"transaction\") ?? new Map())\n        });\n    }\n}\n/**\n * Validation signature associated with some data. Only one of the signatures\n * should be provided.\n */ class TransactionSignature {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"logicsig\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(TransactionSignatureLogicsig.encodingSchema),\n                omitEmpty: true\n            }, {\n                key: \"multisig\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(TransactionSignatureMultisig.encodingSchema),\n                omitEmpty: true\n            }, {\n                key: \"sig\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ByteArraySchema()),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `TransactionSignature` object.\n     * @param logicsig - (lsig) Programatic transaction signature.\n     * Definition:\n     * data/transactions/logicsig.go\n     * @param multisig - structure holding multiple subsignatures.\n     * Definition:\n     * crypto/multisig.go : MultisigSig\n     * @param sig - (sig) Standard ed25519 signature.\n     */ constructor({ logicsig, multisig, sig }){\n        this.logicsig = logicsig;\n        this.multisig = multisig;\n        this.sig = typeof sig === \"string\" ? (0,_encoding_binarydata_js__WEBPACK_IMPORTED_MODULE_2__.base64ToBytes)(sig) : sig;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return TransactionSignature.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"logicsig\",\n                typeof this.logicsig !== \"undefined\" ? this.logicsig.toEncodingData() : undefined\n            ],\n            [\n                \"multisig\",\n                typeof this.multisig !== \"undefined\" ? this.multisig.toEncodingData() : undefined\n            ],\n            [\n                \"sig\",\n                this.sig\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded TransactionSignature: ${data}`);\n        }\n        return new TransactionSignature({\n            logicsig: typeof data.get(\"logicsig\") !== \"undefined\" ? TransactionSignatureLogicsig.fromEncodingData(data.get(\"logicsig\")) : undefined,\n            multisig: typeof data.get(\"multisig\") !== \"undefined\" ? TransactionSignatureMultisig.fromEncodingData(data.get(\"multisig\")) : undefined,\n            sig: data.get(\"sig\")\n        });\n    }\n}\n/**\n * (lsig) Programatic transaction signature.\n * Definition:\n * data/transactions/logicsig.go\n */ class TransactionSignatureLogicsig {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"logic\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ByteArraySchema(),\n                omitEmpty: true\n            }, {\n                key: \"args\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ArraySchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ByteArraySchema())),\n                omitEmpty: true\n            }, {\n                key: \"logic-multisig-signature\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(TransactionSignatureMultisig.encodingSchema),\n                omitEmpty: true\n            }, {\n                key: \"multisig-signature\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(TransactionSignatureMultisig.encodingSchema),\n                omitEmpty: true\n            }, {\n                key: \"signature\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ByteArraySchema()),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `TransactionSignatureLogicsig` object.\n     * @param logic - (l) Program signed by a signature or multi signature, or hashed to be the\n     * address of ana ccount. Base64 encoded TEAL program.\n     * @param args - (arg) Logic arguments, base64 encoded.\n     * @param logicMultisigSignature - structure holding multiple subsignatures.\n     * Definition:\n     * crypto/multisig.go : MultisigSig\n     * @param multisigSignature - structure holding multiple subsignatures.\n     * Definition:\n     * crypto/multisig.go : MultisigSig\n     * @param signature - (sig) ed25519 signature.\n     */ constructor({ logic, args, logicMultisigSignature, multisigSignature, signature }){\n        this.logic = typeof logic === \"string\" ? (0,_encoding_binarydata_js__WEBPACK_IMPORTED_MODULE_2__.base64ToBytes)(logic) : logic;\n        this.args = args;\n        this.logicMultisigSignature = logicMultisigSignature;\n        this.multisigSignature = multisigSignature;\n        this.signature = typeof signature === \"string\" ? (0,_encoding_binarydata_js__WEBPACK_IMPORTED_MODULE_2__.base64ToBytes)(signature) : signature;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return TransactionSignatureLogicsig.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"logic\",\n                this.logic\n            ],\n            [\n                \"args\",\n                this.args\n            ],\n            [\n                \"logic-multisig-signature\",\n                typeof this.logicMultisigSignature !== \"undefined\" ? this.logicMultisigSignature.toEncodingData() : undefined\n            ],\n            [\n                \"multisig-signature\",\n                typeof this.multisigSignature !== \"undefined\" ? this.multisigSignature.toEncodingData() : undefined\n            ],\n            [\n                \"signature\",\n                this.signature\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded TransactionSignatureLogicsig: ${data}`);\n        }\n        return new TransactionSignatureLogicsig({\n            logic: data.get(\"logic\"),\n            args: data.get(\"args\"),\n            logicMultisigSignature: typeof data.get(\"logic-multisig-signature\") !== \"undefined\" ? TransactionSignatureMultisig.fromEncodingData(data.get(\"logic-multisig-signature\")) : undefined,\n            multisigSignature: typeof data.get(\"multisig-signature\") !== \"undefined\" ? TransactionSignatureMultisig.fromEncodingData(data.get(\"multisig-signature\")) : undefined,\n            signature: data.get(\"signature\")\n        });\n    }\n}\n/**\n * structure holding multiple subsignatures.\n * Definition:\n * crypto/multisig.go : MultisigSig\n */ class TransactionSignatureMultisig {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"subsignature\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ArraySchema(TransactionSignatureMultisigSubsignature.encodingSchema)),\n                omitEmpty: true\n            }, {\n                key: \"threshold\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema()),\n                omitEmpty: true\n            }, {\n                key: \"version\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema()),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `TransactionSignatureMultisig` object.\n     * @param subsignature - (subsig) holds pairs of public key and signatures.\n     * @param threshold - (thr)\n     * @param version - (v)\n     */ constructor({ subsignature, threshold, version }){\n        this.subsignature = subsignature;\n        this.threshold = typeof threshold === \"undefined\" ? undefined : (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureSafeInteger)(threshold);\n        this.version = typeof version === \"undefined\" ? undefined : (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureSafeInteger)(version);\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return TransactionSignatureMultisig.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"subsignature\",\n                typeof this.subsignature !== \"undefined\" ? this.subsignature.map((v)=>v.toEncodingData()) : undefined\n            ],\n            [\n                \"threshold\",\n                this.threshold\n            ],\n            [\n                \"version\",\n                this.version\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded TransactionSignatureMultisig: ${data}`);\n        }\n        return new TransactionSignatureMultisig({\n            subsignature: typeof data.get(\"subsignature\") !== \"undefined\" ? data.get(\"subsignature\").map((v)=>TransactionSignatureMultisigSubsignature.fromEncodingData(v)) : undefined,\n            threshold: data.get(\"threshold\"),\n            version: data.get(\"version\")\n        });\n    }\n}\nclass TransactionSignatureMultisigSubsignature {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"public-key\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ByteArraySchema()),\n                omitEmpty: true\n            }, {\n                key: \"signature\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ByteArraySchema()),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `TransactionSignatureMultisigSubsignature` object.\n     * @param publicKey - (pk)\n     * @param signature - (s)\n     */ constructor({ publicKey, signature }){\n        this.publicKey = typeof publicKey === \"string\" ? (0,_encoding_binarydata_js__WEBPACK_IMPORTED_MODULE_2__.base64ToBytes)(publicKey) : publicKey;\n        this.signature = typeof signature === \"string\" ? (0,_encoding_binarydata_js__WEBPACK_IMPORTED_MODULE_2__.base64ToBytes)(signature) : signature;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return TransactionSignatureMultisigSubsignature.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"public-key\",\n                this.publicKey\n            ],\n            [\n                \"signature\",\n                this.signature\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded TransactionSignatureMultisigSubsignature: ${data}`);\n        }\n        return new TransactionSignatureMultisigSubsignature({\n            publicKey: data.get(\"public-key\"),\n            signature: data.get(\"signature\")\n        });\n    }\n}\n/**\n * Fields for a state proof transaction.\n * Definition:\n * data/transactions/stateproof.go : StateProofTxnFields\n */ class TransactionStateProof {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"message\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(IndexerStateProofMessage.encodingSchema),\n                omitEmpty: true\n            }, {\n                key: \"state-proof\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(StateProofFields.encodingSchema),\n                omitEmpty: true\n            }, {\n                key: \"state-proof-type\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema()),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `TransactionStateProof` object.\n     * @param message - (spmsg)\n     * @param stateProof - (sp) represents a state proof.\n     * Definition:\n     * crypto/stateproof/structs.go : StateProof\n     * @param stateProofType - (sptype) Type of the state proof. Integer representing an entry defined in\n     * protocol/stateproof.go\n     */ constructor({ message, stateProof, stateProofType }){\n        this.message = message;\n        this.stateProof = stateProof;\n        this.stateProofType = typeof stateProofType === \"undefined\" ? undefined : (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureSafeInteger)(stateProofType);\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return TransactionStateProof.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"message\",\n                typeof this.message !== \"undefined\" ? this.message.toEncodingData() : undefined\n            ],\n            [\n                \"state-proof\",\n                typeof this.stateProof !== \"undefined\" ? this.stateProof.toEncodingData() : undefined\n            ],\n            [\n                \"state-proof-type\",\n                this.stateProofType\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded TransactionStateProof: ${data}`);\n        }\n        return new TransactionStateProof({\n            message: typeof data.get(\"message\") !== \"undefined\" ? IndexerStateProofMessage.fromEncodingData(data.get(\"message\")) : undefined,\n            stateProof: typeof data.get(\"state-proof\") !== \"undefined\" ? StateProofFields.fromEncodingData(data.get(\"state-proof\")) : undefined,\n            stateProofType: data.get(\"state-proof-type\")\n        });\n    }\n}\n/**\n *\n */ class TransactionsResponse {\n    static get encodingSchema() {\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries({\n                key: \"current-round\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.Uint64Schema(),\n                omitEmpty: true\n            }, {\n                key: \"transactions\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.ArraySchema(Transaction.encodingSchema),\n                omitEmpty: true\n            }, {\n                key: \"next-token\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema()),\n                omitEmpty: true\n            });\n        }\n        return this.encodingSchemaValue;\n    }\n    /**\n     * Creates a new `TransactionsResponse` object.\n     * @param currentRound - Round at which the results were computed.\n     * @param transactions -\n     * @param nextToken - Used for pagination, when making another request provide this token with the\n     * next parameter.\n     */ constructor({ currentRound, transactions, nextToken }){\n        this.currentRound = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBigInt)(currentRound);\n        this.transactions = transactions;\n        this.nextToken = nextToken;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return TransactionsResponse.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"current-round\",\n                this.currentRound\n            ],\n            [\n                \"transactions\",\n                this.transactions.map((v)=>v.toEncodingData())\n            ],\n            [\n                \"next-token\",\n                this.nextToken\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded TransactionsResponse: ${data}`);\n        }\n        return new TransactionsResponse({\n            currentRound: data.get(\"current-round\"),\n            transactions: (data.get(\"transactions\") ?? []).map((v)=>Transaction.fromEncodingData(v)),\n            nextToken: data.get(\"next-token\")\n        });\n    }\n} //# sourceMappingURL=types.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/client/v2/indexer/models/types.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/client/v2/indexer/searchAccounts.js":
/*!***************************************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/client/v2/indexer/searchAccounts.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ SearchAccounts)\n/* harmony export */ });\n/* harmony import */ var _jsonrequest_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../jsonrequest.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/jsonrequest.js\");\n/* harmony import */ var _encoding_encoding_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../encoding/encoding.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/encoding.js\");\n/* harmony import */ var _models_types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./models/types.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/indexer/models/types.js\");\n\n\n\n/**\n * Returns information about indexed accounts.\n *\n * #### Example\n * ```typescript\n * const accounts = await indexerClient.searchAccounts().do();\n * ```\n *\n * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2accounts)\n * @category GET\n */ class SearchAccounts extends _jsonrequest_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * @returns `/v2/accounts`\n     */ // eslint-disable-next-line class-methods-use-this\n    path() {\n        return \"/v2/accounts\";\n    }\n    /**\n     * Filtered results should have an amount greater than this value, as int, representing microAlgos, unless an asset-id is provided, in which case units are in the asset's units.\n     *\n     * #### Example 1\n     * ```typescript\n     * const minBalance = 300000;\n     * const accounts = await indexerClient\n     *        .searchAccounts()\n     *        .currencyGreaterThan(minBalance - 1)\n     *        .do();\n     * ```\n     *\n     * #### Example 2\n     * ```typescript\n     * const assetID = 163650;\n     * const minBalance = 300000;\n     * const accounts = await indexerClient\n     *        .searchAccounts()\n     *        .assetID(assetID)\n     *        .currencyGreaterThan(minBalance - 1)\n     *        .do();\n     * ```\n     * @remarks\n     * If you are looking for accounts with the currency amount greater than 0, simply construct the query without `currencyGreaterThan` because it doesn't accept `-1`, and passing the `0` `currency-greater-than` value would exclude accounts with a 0 amount.\n     *\n     * @param greater\n     * @category query\n     */ currencyGreaterThan(greater) {\n        // We convert the following to a string for now to correctly include zero values in request parameters.\n        this.query[\"currency-greater-than\"] = greater.toString();\n        return this;\n    }\n    /**\n     * Filtered results should have an amount less than this value, as int, representing microAlgos, unless an asset-id is provided, in which case units are in the asset's units.\n     *\n     * #### Example 1\n     * ```typescript\n     * const maxBalance = 500000;\n     * const accounts = await indexerClient\n     *        .searchAccounts()\n     *        .currencyLessThan(maxBalance + 1)\n     *        .do();\n     * ```\n     *\n     * #### Example 2\n     * ```typescript\n     * const assetID = 163650;\n     * const maxBalance = 500000;\n     * const accounts = await indexerClient\n     *        .searchAccounts()\n     *        .assetID(assetID)\n     *        .currencyLessThan(maxBalance + 1)\n     *        .do();\n     * ```\n     *\n     * @param lesser\n     * @category query\n     */ currencyLessThan(lesser) {\n        this.query[\"currency-less-than\"] = lesser;\n        return this;\n    }\n    /**\n     * Maximum number of results to return.\n     *\n     * #### Example\n     * ```typescript\n     * const maxResults = 25;\n     * const accounts = await indexerClient\n     *        .searchAccounts()\n     *        .limit(maxResults)\n     *        .do();\n     * ```\n     *\n     * @param limit\n     * @category query\n     */ limit(limit) {\n        this.query.limit = limit;\n        return this;\n    }\n    /**\n     * Asset ID to filter with.\n     *\n     * #### Example\n     * ```typescript\n     * const assetID = 163650;\n     * const accounts = await indexerClient\n     *        .searchAccounts()\n     *        .assetID(assetID)\n     *        .do();\n     * ```\n     *\n     * @param id\n     * @category query\n     */ assetID(id) {\n        this.query[\"asset-id\"] = id;\n        return this;\n    }\n    /**\n     * The next page of results.\n     *\n     * #### Example\n     * ```typescript\n     * const maxResults = 25;\n     *\n     * const accountsPage1 = await indexerClient\n     *        .searchAccounts()\n     *        .limit(maxResults)\n     *        .do();\n     *\n     * const accountsPage2 = await indexerClient\n     *        .searchAccounts()\n     *        .limit(maxResults)\n     *        .nextToken(accountsPage1[\"next-token\"])\n     *        .do();\n     * ```\n     *\n     * @param nextToken - provided by the previous results\n     * @category query\n     */ nextToken(nextToken) {\n        this.query.next = nextToken;\n        return this;\n    }\n    /**\n     * Include results for the specified round.\n     *\n     * #### Example\n     * ```typescript\n     * const targetBlock = 18309917;\n     * const accounts = await indexerClient\n     *        .searchAccounts()\n     *        .round(targetBlock)\n     *        .do();\n     * ```\n     * @remarks For performance reasons, this parameter may be disabled on some configurations.\n     * @param round\n     * @category query\n     */ round(round) {\n        this.query.round = round;\n        return this;\n    }\n    /**\n     * Include accounts that use this spending key.\n     *\n     * #### Example\n     * ```typescript\n     * const authAddr = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accounts = await indexerClient\n     *        .searchAccounts()\n     *        .authAddr(authAddr)\n     *        .do();\n     * ```\n     *\n     * @param authAddr\n     */ authAddr(authAddr) {\n        this.query[\"auth-addr\"] = authAddr.toString();\n        return this;\n    }\n    /**\n     * Filter for this application.\n     *\n     * #### Example\n     * ```typescript\n     * const appId = 60553466;\n     * const accounts = await indexerClient\n     *        .searchAccounts()\n     *        .applicationID(appId)\n     *        .do();\n     * ```\n     *\n     * @param applicationID\n     * @category query\n     */ applicationID(applicationID) {\n        this.query[\"application-id\"] = applicationID;\n        return this;\n    }\n    /**\n     * Includes all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates\n     *\n     * #### Example 1\n     * ```typescript\n     * const assetId = 163650;\n     * const accounts = await indexerClient\n     *        .searchAccounts()\n     *        .includeAll(false)\n     *        .do();\n     * ```\n     *\n     * #### Example 2\n     * ```typescript\n     * const assetId = 163650;\n     * const accounts = await indexerClient\n     *        .searchAccounts()\n     *        .includeAll()\n     *        .do();\n     * ```\n     *\n     * @param value - default true when called without passing a value\n     * @category query\n     */ includeAll(value = true) {\n        this.query[\"include-all\"] = value;\n        return this;\n    }\n    /**\n     * Exclude additional items such as asset holdings, application local data stored for this account, asset parameters created by this account, and application parameters created by this account.\n     *\n     * #### Example 1\n     * ```typescript\n     * const accounts = await indexerClient\n     *        .searchAccounts()\n     *        .exclude(\"all\")\n     *        .do();\n     * ```\n     *\n     * #### Example 2\n     * ```typescript\n     * const accounts = await indexerClient\n     *        .searchAccounts()\n     *        .exclude(\"assets,created-assets\")\n     *        .do();\n     * ```\n     * @remarks By default, it behaves as exclude=none\n     * @param exclude - Array of `all`, `assets`, `created-assets`, `apps-local-state`, `created-apps`, `none`\n     * @category query\n     */ exclude(exclude) {\n        this.query.exclude = exclude;\n        return this;\n    }\n    /**\n     * If true, only online accounts will be returned in the response.\n     *\n     * #### Example\n     * ```typescript\n     * const onlineOnly = true;\n     * const accounts = await indexerClient\n     *        .searchAccounts\n     *        .onlineOnly(onlineOnly)\n     *        .do();\n     * ```\n     *\n     * @param onlineOnly - if true, only online accounts will be returned in the response\n     * @category query\n     */ onlineOnly(onlineOnly) {\n        this.query[\"online-only\"] = onlineOnly;\n        return this;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    prepare(response) {\n        return (0,_encoding_encoding_js__WEBPACK_IMPORTED_MODULE_1__.decodeJSON)(response.getJSONText(), _models_types_js__WEBPACK_IMPORTED_MODULE_2__.AccountsResponse);\n    }\n} //# sourceMappingURL=searchAccounts.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/client/v2/indexer/searchAccounts.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/client/v2/indexer/searchForApplicationBoxes.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/client/v2/indexer/searchForApplicationBoxes.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ SearchForApplicationBoxes)\n/* harmony export */ });\n/* harmony import */ var _jsonrequest_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../jsonrequest.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/jsonrequest.js\");\n/* harmony import */ var _encoding_encoding_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../encoding/encoding.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/encoding.js\");\n/* harmony import */ var _models_types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./models/types.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/indexer/models/types.js\");\n\n\n\nclass SearchForApplicationBoxes extends _jsonrequest_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * Returns information about indexed application boxes.\n     *\n     * #### Example\n     * ```typescript\n     * const maxResults = 20;\n     * const appID = 1234;\n     *\n     * const responsePage1 = await indexerClient\n     *        .searchForApplicationBoxes(appID)\n     *        .limit(maxResults)\n     *        .do();\n     * const boxNamesPage1 = responsePage1.boxes.map(box => box.name);\n     *\n     * const responsePage2 = await indexerClient\n     *        .searchForApplicationBoxes(appID)\n     *        .limit(maxResults)\n     *        .nextToken(responsePage1.nextToken)\n     *        .do();\n     * const boxNamesPage2 = responsePage2.boxes.map(box => box.name);\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2applicationsapplication-idboxes)\n     * @oaram index - application index.\n     * @category GET\n     */ constructor(c, index){\n        super(c);\n        this.index = BigInt(index);\n    }\n    /**\n     * @returns `/v2/applications/${index}/boxes`\n     */ path() {\n        return `/v2/applications/${this.index}/boxes`;\n    }\n    /**\n     * Specify the next page of results.\n     *\n     * #### Example\n     * ```typescript\n     * const maxResults = 20;\n     * const appID = 1234;\n     *\n     * const responsePage1 = await indexerClient\n     *        .searchForApplicationBoxes(appID)\n     *        .limit(maxResults)\n     *        .do();\n     * const boxNamesPage1 = responsePage1.boxes.map(box => box.name);\n     *\n     * const responsePage2 = await indexerClient\n     *        .searchForApplicationBoxes(appID)\n     *        .limit(maxResults)\n     *        .nextToken(responsePage1.nextToken)\n     *        .do();\n     * const boxNamesPage2 = responsePage2.boxes.map(box => box.name);\n     * ```\n     * @param nextToken - provided by the previous results.\n     * @category query\n     */ nextToken(next) {\n        this.query.next = next;\n        return this;\n    }\n    /**\n     * Limit results for pagination.\n     *\n     * #### Example\n     * ```typescript\n     * const maxResults = 20;\n     * const boxesResponse = await indexerClient\n     *        .searchForApplicationBoxes(1234)\n     *        .limit(maxResults)\n     *        .do();\n     * ```\n     *\n     * @param limit - maximum number of results to return.\n     * @category query\n     */ limit(limit) {\n        this.query.limit = limit;\n        return this;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    prepare(response) {\n        return (0,_encoding_encoding_js__WEBPACK_IMPORTED_MODULE_1__.decodeJSON)(response.getJSONText(), _models_types_js__WEBPACK_IMPORTED_MODULE_2__.BoxesResponse);\n    }\n} //# sourceMappingURL=searchForApplicationBoxes.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9jbGllbnQvdjIvaW5kZXhlci9zZWFyY2hGb3JBcHBsaWNhdGlvbkJveGVzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBNEM7QUFDZTtBQUNUO0FBQ25DLE1BQU1HLGtDQUFrQ0gsdURBQVdBO0lBQzlEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0tBeUJDLEdBQ0RJLFlBQVlDLENBQUMsRUFBRUMsS0FBSyxDQUFFO1FBQ2xCLEtBQUssQ0FBQ0Q7UUFDTixJQUFJLENBQUNDLEtBQUssR0FBR0MsT0FBT0Q7SUFDeEI7SUFDQTs7S0FFQyxHQUNERSxPQUFPO1FBQ0gsT0FBTyxDQUFDLGlCQUFpQixFQUFFLElBQUksQ0FBQ0YsS0FBSyxDQUFDLE1BQU0sQ0FBQztJQUNqRDtJQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztLQXVCQyxHQUNERyxVQUFVQyxJQUFJLEVBQUU7UUFDWixJQUFJLENBQUNDLEtBQUssQ0FBQ0QsSUFBSSxHQUFHQTtRQUNsQixPQUFPLElBQUk7SUFDZjtJQUNBOzs7Ozs7Ozs7Ozs7OztLQWNDLEdBQ0RFLE1BQU1BLEtBQUssRUFBRTtRQUNULElBQUksQ0FBQ0QsS0FBSyxDQUFDQyxLQUFLLEdBQUdBO1FBQ25CLE9BQU8sSUFBSTtJQUNmO0lBQ0Esa0RBQWtEO0lBQ2xEQyxRQUFRQyxRQUFRLEVBQUU7UUFDZCxPQUFPYixpRUFBVUEsQ0FBQ2EsU0FBU0MsV0FBVyxJQUFJYiwyREFBYUE7SUFDM0Q7QUFDSixFQUNBLHFEQUFxRCIsInNvdXJjZXMiOlsid2VicGFjazovL2FsZ29yYW5kLWNyb3dkZnVuZGluZy1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9hbGdvc2RrL2Rpc3QvZXNtL2NsaWVudC92Mi9pbmRleGVyL3NlYXJjaEZvckFwcGxpY2F0aW9uQm94ZXMuanM/YTNmMiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgSlNPTlJlcXVlc3QgZnJvbSAnLi4vanNvbnJlcXVlc3QuanMnO1xuaW1wb3J0IHsgZGVjb2RlSlNPTiB9IGZyb20gJy4uLy4uLy4uL2VuY29kaW5nL2VuY29kaW5nLmpzJztcbmltcG9ydCB7IEJveGVzUmVzcG9uc2UgfSBmcm9tICcuL21vZGVscy90eXBlcy5qcyc7XG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTZWFyY2hGb3JBcHBsaWNhdGlvbkJveGVzIGV4dGVuZHMgSlNPTlJlcXVlc3Qge1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgaW5mb3JtYXRpb24gYWJvdXQgaW5kZXhlZCBhcHBsaWNhdGlvbiBib3hlcy5cbiAgICAgKlxuICAgICAqICMjIyMgRXhhbXBsZVxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjb25zdCBtYXhSZXN1bHRzID0gMjA7XG4gICAgICogY29uc3QgYXBwSUQgPSAxMjM0O1xuICAgICAqXG4gICAgICogY29uc3QgcmVzcG9uc2VQYWdlMSA9IGF3YWl0IGluZGV4ZXJDbGllbnRcbiAgICAgKiAgICAgICAgLnNlYXJjaEZvckFwcGxpY2F0aW9uQm94ZXMoYXBwSUQpXG4gICAgICogICAgICAgIC5saW1pdChtYXhSZXN1bHRzKVxuICAgICAqICAgICAgICAuZG8oKTtcbiAgICAgKiBjb25zdCBib3hOYW1lc1BhZ2UxID0gcmVzcG9uc2VQYWdlMS5ib3hlcy5tYXAoYm94ID0+IGJveC5uYW1lKTtcbiAgICAgKlxuICAgICAqIGNvbnN0IHJlc3BvbnNlUGFnZTIgPSBhd2FpdCBpbmRleGVyQ2xpZW50XG4gICAgICogICAgICAgIC5zZWFyY2hGb3JBcHBsaWNhdGlvbkJveGVzKGFwcElEKVxuICAgICAqICAgICAgICAubGltaXQobWF4UmVzdWx0cylcbiAgICAgKiAgICAgICAgLm5leHRUb2tlbihyZXNwb25zZVBhZ2UxLm5leHRUb2tlbilcbiAgICAgKiAgICAgICAgLmRvKCk7XG4gICAgICogY29uc3QgYm94TmFtZXNQYWdlMiA9IHJlc3BvbnNlUGFnZTIuYm94ZXMubWFwKGJveCA9PiBib3gubmFtZSk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBbUmVzcG9uc2UgZGF0YSBzY2hlbWEgZGV0YWlsc10oaHR0cHM6Ly9kZXZlbG9wZXIuYWxnb3JhbmQub3JnL2RvY3MvcmVzdC1hcGlzL2luZGV4ZXIvI2dldC12MmFwcGxpY2F0aW9uc2FwcGxpY2F0aW9uLWlkYm94ZXMpXG4gICAgICogQG9hcmFtIGluZGV4IC0gYXBwbGljYXRpb24gaW5kZXguXG4gICAgICogQGNhdGVnb3J5IEdFVFxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGMsIGluZGV4KSB7XG4gICAgICAgIHN1cGVyKGMpO1xuICAgICAgICB0aGlzLmluZGV4ID0gQmlnSW50KGluZGV4KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHJldHVybnMgYC92Mi9hcHBsaWNhdGlvbnMvJHtpbmRleH0vYm94ZXNgXG4gICAgICovXG4gICAgcGF0aCgpIHtcbiAgICAgICAgcmV0dXJuIGAvdjIvYXBwbGljYXRpb25zLyR7dGhpcy5pbmRleH0vYm94ZXNgO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTcGVjaWZ5IHRoZSBuZXh0IHBhZ2Ugb2YgcmVzdWx0cy5cbiAgICAgKlxuICAgICAqICMjIyMgRXhhbXBsZVxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjb25zdCBtYXhSZXN1bHRzID0gMjA7XG4gICAgICogY29uc3QgYXBwSUQgPSAxMjM0O1xuICAgICAqXG4gICAgICogY29uc3QgcmVzcG9uc2VQYWdlMSA9IGF3YWl0IGluZGV4ZXJDbGllbnRcbiAgICAgKiAgICAgICAgLnNlYXJjaEZvckFwcGxpY2F0aW9uQm94ZXMoYXBwSUQpXG4gICAgICogICAgICAgIC5saW1pdChtYXhSZXN1bHRzKVxuICAgICAqICAgICAgICAuZG8oKTtcbiAgICAgKiBjb25zdCBib3hOYW1lc1BhZ2UxID0gcmVzcG9uc2VQYWdlMS5ib3hlcy5tYXAoYm94ID0+IGJveC5uYW1lKTtcbiAgICAgKlxuICAgICAqIGNvbnN0IHJlc3BvbnNlUGFnZTIgPSBhd2FpdCBpbmRleGVyQ2xpZW50XG4gICAgICogICAgICAgIC5zZWFyY2hGb3JBcHBsaWNhdGlvbkJveGVzKGFwcElEKVxuICAgICAqICAgICAgICAubGltaXQobWF4UmVzdWx0cylcbiAgICAgKiAgICAgICAgLm5leHRUb2tlbihyZXNwb25zZVBhZ2UxLm5leHRUb2tlbilcbiAgICAgKiAgICAgICAgLmRvKCk7XG4gICAgICogY29uc3QgYm94TmFtZXNQYWdlMiA9IHJlc3BvbnNlUGFnZTIuYm94ZXMubWFwKGJveCA9PiBib3gubmFtZSk7XG4gICAgICogYGBgXG4gICAgICogQHBhcmFtIG5leHRUb2tlbiAtIHByb3ZpZGVkIGJ5IHRoZSBwcmV2aW91cyByZXN1bHRzLlxuICAgICAqIEBjYXRlZ29yeSBxdWVyeVxuICAgICAqL1xuICAgIG5leHRUb2tlbihuZXh0KSB7XG4gICAgICAgIHRoaXMucXVlcnkubmV4dCA9IG5leHQ7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBMaW1pdCByZXN1bHRzIGZvciBwYWdpbmF0aW9uLlxuICAgICAqXG4gICAgICogIyMjIyBFeGFtcGxlXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IG1heFJlc3VsdHMgPSAyMDtcbiAgICAgKiBjb25zdCBib3hlc1Jlc3BvbnNlID0gYXdhaXQgaW5kZXhlckNsaWVudFxuICAgICAqICAgICAgICAuc2VhcmNoRm9yQXBwbGljYXRpb25Cb3hlcygxMjM0KVxuICAgICAqICAgICAgICAubGltaXQobWF4UmVzdWx0cylcbiAgICAgKiAgICAgICAgLmRvKCk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbGltaXQgLSBtYXhpbXVtIG51bWJlciBvZiByZXN1bHRzIHRvIHJldHVybi5cbiAgICAgKiBAY2F0ZWdvcnkgcXVlcnlcbiAgICAgKi9cbiAgICBsaW1pdChsaW1pdCkge1xuICAgICAgICB0aGlzLnF1ZXJ5LmxpbWl0ID0gbGltaXQ7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY2xhc3MtbWV0aG9kcy11c2UtdGhpc1xuICAgIHByZXBhcmUocmVzcG9uc2UpIHtcbiAgICAgICAgcmV0dXJuIGRlY29kZUpTT04ocmVzcG9uc2UuZ2V0SlNPTlRleHQoKSwgQm94ZXNSZXNwb25zZSk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2VhcmNoRm9yQXBwbGljYXRpb25Cb3hlcy5qcy5tYXAiXSwibmFtZXMiOlsiSlNPTlJlcXVlc3QiLCJkZWNvZGVKU09OIiwiQm94ZXNSZXNwb25zZSIsIlNlYXJjaEZvckFwcGxpY2F0aW9uQm94ZXMiLCJjb25zdHJ1Y3RvciIsImMiLCJpbmRleCIsIkJpZ0ludCIsInBhdGgiLCJuZXh0VG9rZW4iLCJuZXh0IiwicXVlcnkiLCJsaW1pdCIsInByZXBhcmUiLCJyZXNwb25zZSIsImdldEpTT05UZXh0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/client/v2/indexer/searchForApplicationBoxes.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/client/v2/indexer/searchForApplications.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/client/v2/indexer/searchForApplications.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ SearchForApplications)\n/* harmony export */ });\n/* harmony import */ var _jsonrequest_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../jsonrequest.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/jsonrequest.js\");\n/* harmony import */ var _encoding_encoding_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../encoding/encoding.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/encoding.js\");\n/* harmony import */ var _models_types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./models/types.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/indexer/models/types.js\");\n\n\n\n/**\n * Returns information about indexed applications.\n *\n * #### Example\n * ```typescript\n * const apps = await indexerClient.searchForApplications().do();\n * ```\n *\n * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2applications)\n * @category GET\n */ class SearchForApplications extends _jsonrequest_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * @returns `/v2/applications`\n     */ // eslint-disable-next-line class-methods-use-this\n    path() {\n        return \"/v2/applications\";\n    }\n    /**\n     * Application ID for filter, as int\n     *\n     * #### Example\n     * ```typescript\n     * const appId = 60553466;\n     * const apps = await indexerClient\n     *        .searchForApplications()\n     *        .index(appId)\n     *        .do();\n     * ```\n     * @remarks Alternatively, use `indexerClient.lookupApplications(appId).do()`\n     * @param index\n     * @category query\n     */ index(index) {\n        this.query[\"application-id\"] = index;\n        return this;\n    }\n    /**\n     * Creator for filter, as string\n     *\n     * #### Example\n     * ```typescript\n     * const creator = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const apps = await indexerClient\n     *        .searchForApplications()\n     *        .creator(creator)\n     *        .do();\n     * ```\n     * @param creator\n     * @category query\n     */ creator(creator) {\n        this.query.creator = creator.toString();\n        return this;\n    }\n    /**\n     * Specify the next page of results.\n     *\n     * #### Example\n     * ```typescript\n     * const maxResults = 20;\n     *\n     * const appsPage1 = await indexerClient\n     *        .searchForApplications()\n     *        .limit(maxResults)\n     *        .do();\n     *\n     * const appsPage2 = await indexerClient\n     *        .searchForApplications()\n     *        .limit(maxResults)\n     *        .nextToken(appsPage1[\"next-token\"])\n     *        .do();\n     * ```\n     * @param nextToken - provided by the previous results.\n     * @category query\n     */ nextToken(next) {\n        this.query.next = next;\n        return this;\n    }\n    /**\n     * Limit results for pagination.\n     *\n     * #### Example\n     * ```typescript\n     * const maxResults = 20;\n     * const apps = await indexerClient\n     *        .searchForApplications()\n     *        .limit(maxResults)\n     *        .do();\n     * ```\n     *\n     * @param limit - maximum number of results to return.\n     * @category query\n     */ limit(limit) {\n        this.query.limit = limit;\n        return this;\n    }\n    /**\n     * Includes all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates\n     *\n     * #### Example 1\n     * ```typescript\n     * const apps = await indexerClient\n     *        .searchForApplications()\n     *        .includeAll(false)\n     *        .do();\n     * ```\n     *\n     * #### Example 2\n     * ```typescript\n     * const apps = await indexerClient\n     *        .searchForApplications()\n     *        .includeAll()\n     *        .do();\n     * ```\n     *\n     * @param value - default true when called without passing a value\n     * @category query\n     */ includeAll(value = true) {\n        this.query[\"include-all\"] = value;\n        return this;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    prepare(response) {\n        return (0,_encoding_encoding_js__WEBPACK_IMPORTED_MODULE_1__.decodeJSON)(response.getJSONText(), _models_types_js__WEBPACK_IMPORTED_MODULE_2__.ApplicationsResponse);\n    }\n} //# sourceMappingURL=searchForApplications.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9jbGllbnQvdjIvaW5kZXhlci9zZWFyY2hGb3JBcHBsaWNhdGlvbnMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUE0QztBQUNlO0FBQ0Y7QUFDekQ7Ozs7Ozs7Ozs7Q0FVQyxHQUNjLE1BQU1HLDhCQUE4QkgsdURBQVdBO0lBQzFEOztLQUVDLEdBQ0Qsa0RBQWtEO0lBQ2xESSxPQUFPO1FBQ0gsT0FBTztJQUNYO0lBQ0E7Ozs7Ozs7Ozs7Ozs7O0tBY0MsR0FDREMsTUFBTUEsS0FBSyxFQUFFO1FBQ1QsSUFBSSxDQUFDQyxLQUFLLENBQUMsaUJBQWlCLEdBQUdEO1FBQy9CLE9BQU8sSUFBSTtJQUNmO0lBQ0E7Ozs7Ozs7Ozs7Ozs7S0FhQyxHQUNERSxRQUFRQSxPQUFPLEVBQUU7UUFDYixJQUFJLENBQUNELEtBQUssQ0FBQ0MsT0FBTyxHQUFHQSxRQUFRQyxRQUFRO1FBQ3JDLE9BQU8sSUFBSTtJQUNmO0lBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0tBb0JDLEdBQ0RDLFVBQVVDLElBQUksRUFBRTtRQUNaLElBQUksQ0FBQ0osS0FBSyxDQUFDSSxJQUFJLEdBQUdBO1FBQ2xCLE9BQU8sSUFBSTtJQUNmO0lBQ0E7Ozs7Ozs7Ozs7Ozs7O0tBY0MsR0FDREMsTUFBTUEsS0FBSyxFQUFFO1FBQ1QsSUFBSSxDQUFDTCxLQUFLLENBQUNLLEtBQUssR0FBR0E7UUFDbkIsT0FBTyxJQUFJO0lBQ2Y7SUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0tBcUJDLEdBQ0RDLFdBQVdDLFFBQVEsSUFBSSxFQUFFO1FBQ3JCLElBQUksQ0FBQ1AsS0FBSyxDQUFDLGNBQWMsR0FBR087UUFDNUIsT0FBTyxJQUFJO0lBQ2Y7SUFDQSxrREFBa0Q7SUFDbERDLFFBQVFDLFFBQVEsRUFBRTtRQUNkLE9BQU9kLGlFQUFVQSxDQUFDYyxTQUFTQyxXQUFXLElBQUlkLGtFQUFvQkE7SUFDbEU7QUFDSixFQUNBLGlEQUFpRCIsInNvdXJjZXMiOlsid2VicGFjazovL2FsZ29yYW5kLWNyb3dkZnVuZGluZy1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9hbGdvc2RrL2Rpc3QvZXNtL2NsaWVudC92Mi9pbmRleGVyL3NlYXJjaEZvckFwcGxpY2F0aW9ucy5qcz84NTk3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBKU09OUmVxdWVzdCBmcm9tICcuLi9qc29ucmVxdWVzdC5qcyc7XG5pbXBvcnQgeyBkZWNvZGVKU09OIH0gZnJvbSAnLi4vLi4vLi4vZW5jb2RpbmcvZW5jb2RpbmcuanMnO1xuaW1wb3J0IHsgQXBwbGljYXRpb25zUmVzcG9uc2UgfSBmcm9tICcuL21vZGVscy90eXBlcy5qcyc7XG4vKipcbiAqIFJldHVybnMgaW5mb3JtYXRpb24gYWJvdXQgaW5kZXhlZCBhcHBsaWNhdGlvbnMuXG4gKlxuICogIyMjIyBFeGFtcGxlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBjb25zdCBhcHBzID0gYXdhaXQgaW5kZXhlckNsaWVudC5zZWFyY2hGb3JBcHBsaWNhdGlvbnMoKS5kbygpO1xuICogYGBgXG4gKlxuICogW1Jlc3BvbnNlIGRhdGEgc2NoZW1hIGRldGFpbHNdKGh0dHBzOi8vZGV2ZWxvcGVyLmFsZ29yYW5kLm9yZy9kb2NzL3Jlc3QtYXBpcy9pbmRleGVyLyNnZXQtdjJhcHBsaWNhdGlvbnMpXG4gKiBAY2F0ZWdvcnkgR0VUXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNlYXJjaEZvckFwcGxpY2F0aW9ucyBleHRlbmRzIEpTT05SZXF1ZXN0IHtcbiAgICAvKipcbiAgICAgKiBAcmV0dXJucyBgL3YyL2FwcGxpY2F0aW9uc2BcbiAgICAgKi9cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY2xhc3MtbWV0aG9kcy11c2UtdGhpc1xuICAgIHBhdGgoKSB7XG4gICAgICAgIHJldHVybiAnL3YyL2FwcGxpY2F0aW9ucyc7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFwcGxpY2F0aW9uIElEIGZvciBmaWx0ZXIsIGFzIGludFxuICAgICAqXG4gICAgICogIyMjIyBFeGFtcGxlXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IGFwcElkID0gNjA1NTM0NjY7XG4gICAgICogY29uc3QgYXBwcyA9IGF3YWl0IGluZGV4ZXJDbGllbnRcbiAgICAgKiAgICAgICAgLnNlYXJjaEZvckFwcGxpY2F0aW9ucygpXG4gICAgICogICAgICAgIC5pbmRleChhcHBJZClcbiAgICAgKiAgICAgICAgLmRvKCk7XG4gICAgICogYGBgXG4gICAgICogQHJlbWFya3MgQWx0ZXJuYXRpdmVseSwgdXNlIGBpbmRleGVyQ2xpZW50Lmxvb2t1cEFwcGxpY2F0aW9ucyhhcHBJZCkuZG8oKWBcbiAgICAgKiBAcGFyYW0gaW5kZXhcbiAgICAgKiBAY2F0ZWdvcnkgcXVlcnlcbiAgICAgKi9cbiAgICBpbmRleChpbmRleCkge1xuICAgICAgICB0aGlzLnF1ZXJ5WydhcHBsaWNhdGlvbi1pZCddID0gaW5kZXg7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdG9yIGZvciBmaWx0ZXIsIGFzIHN0cmluZ1xuICAgICAqXG4gICAgICogIyMjIyBFeGFtcGxlXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IGNyZWF0b3IgPSBcIlhCWUxTMkU2WUk2WFhMNUJXQ0FNT0E0R1RXSFhXRU5aTVg1VUhYTVJOV1dVUTdCWENZNVdDNVRFUEFcIjtcbiAgICAgKiBjb25zdCBhcHBzID0gYXdhaXQgaW5kZXhlckNsaWVudFxuICAgICAqICAgICAgICAuc2VhcmNoRm9yQXBwbGljYXRpb25zKClcbiAgICAgKiAgICAgICAgLmNyZWF0b3IoY3JlYXRvcilcbiAgICAgKiAgICAgICAgLmRvKCk7XG4gICAgICogYGBgXG4gICAgICogQHBhcmFtIGNyZWF0b3JcbiAgICAgKiBAY2F0ZWdvcnkgcXVlcnlcbiAgICAgKi9cbiAgICBjcmVhdG9yKGNyZWF0b3IpIHtcbiAgICAgICAgdGhpcy5xdWVyeS5jcmVhdG9yID0gY3JlYXRvci50b1N0cmluZygpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogU3BlY2lmeSB0aGUgbmV4dCBwYWdlIG9mIHJlc3VsdHMuXG4gICAgICpcbiAgICAgKiAjIyMjIEV4YW1wbGVcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogY29uc3QgbWF4UmVzdWx0cyA9IDIwO1xuICAgICAqXG4gICAgICogY29uc3QgYXBwc1BhZ2UxID0gYXdhaXQgaW5kZXhlckNsaWVudFxuICAgICAqICAgICAgICAuc2VhcmNoRm9yQXBwbGljYXRpb25zKClcbiAgICAgKiAgICAgICAgLmxpbWl0KG1heFJlc3VsdHMpXG4gICAgICogICAgICAgIC5kbygpO1xuICAgICAqXG4gICAgICogY29uc3QgYXBwc1BhZ2UyID0gYXdhaXQgaW5kZXhlckNsaWVudFxuICAgICAqICAgICAgICAuc2VhcmNoRm9yQXBwbGljYXRpb25zKClcbiAgICAgKiAgICAgICAgLmxpbWl0KG1heFJlc3VsdHMpXG4gICAgICogICAgICAgIC5uZXh0VG9rZW4oYXBwc1BhZ2UxW1wibmV4dC10b2tlblwiXSlcbiAgICAgKiAgICAgICAgLmRvKCk7XG4gICAgICogYGBgXG4gICAgICogQHBhcmFtIG5leHRUb2tlbiAtIHByb3ZpZGVkIGJ5IHRoZSBwcmV2aW91cyByZXN1bHRzLlxuICAgICAqIEBjYXRlZ29yeSBxdWVyeVxuICAgICAqL1xuICAgIG5leHRUb2tlbihuZXh0KSB7XG4gICAgICAgIHRoaXMucXVlcnkubmV4dCA9IG5leHQ7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBMaW1pdCByZXN1bHRzIGZvciBwYWdpbmF0aW9uLlxuICAgICAqXG4gICAgICogIyMjIyBFeGFtcGxlXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IG1heFJlc3VsdHMgPSAyMDtcbiAgICAgKiBjb25zdCBhcHBzID0gYXdhaXQgaW5kZXhlckNsaWVudFxuICAgICAqICAgICAgICAuc2VhcmNoRm9yQXBwbGljYXRpb25zKClcbiAgICAgKiAgICAgICAgLmxpbWl0KG1heFJlc3VsdHMpXG4gICAgICogICAgICAgIC5kbygpO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQHBhcmFtIGxpbWl0IC0gbWF4aW11bSBudW1iZXIgb2YgcmVzdWx0cyB0byByZXR1cm4uXG4gICAgICogQGNhdGVnb3J5IHF1ZXJ5XG4gICAgICovXG4gICAgbGltaXQobGltaXQpIHtcbiAgICAgICAgdGhpcy5xdWVyeS5saW1pdCA9IGxpbWl0O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogSW5jbHVkZXMgYWxsIGl0ZW1zIGluY2x1ZGluZyBjbG9zZWQgYWNjb3VudHMsIGRlbGV0ZWQgYXBwbGljYXRpb25zLCBkZXN0cm95ZWQgYXNzZXRzLCBvcHRlZC1vdXQgYXNzZXQgaG9sZGluZ3MsIGFuZCBjbG9zZWQtb3V0IGFwcGxpY2F0aW9uIGxvY2Fsc3RhdGVzXG4gICAgICpcbiAgICAgKiAjIyMjIEV4YW1wbGUgMVxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjb25zdCBhcHBzID0gYXdhaXQgaW5kZXhlckNsaWVudFxuICAgICAqICAgICAgICAuc2VhcmNoRm9yQXBwbGljYXRpb25zKClcbiAgICAgKiAgICAgICAgLmluY2x1ZGVBbGwoZmFsc2UpXG4gICAgICogICAgICAgIC5kbygpO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogIyMjIyBFeGFtcGxlIDJcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogY29uc3QgYXBwcyA9IGF3YWl0IGluZGV4ZXJDbGllbnRcbiAgICAgKiAgICAgICAgLnNlYXJjaEZvckFwcGxpY2F0aW9ucygpXG4gICAgICogICAgICAgIC5pbmNsdWRlQWxsKClcbiAgICAgKiAgICAgICAgLmRvKCk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdmFsdWUgLSBkZWZhdWx0IHRydWUgd2hlbiBjYWxsZWQgd2l0aG91dCBwYXNzaW5nIGEgdmFsdWVcbiAgICAgKiBAY2F0ZWdvcnkgcXVlcnlcbiAgICAgKi9cbiAgICBpbmNsdWRlQWxsKHZhbHVlID0gdHJ1ZSkge1xuICAgICAgICB0aGlzLnF1ZXJ5WydpbmNsdWRlLWFsbCddID0gdmFsdWU7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY2xhc3MtbWV0aG9kcy11c2UtdGhpc1xuICAgIHByZXBhcmUocmVzcG9uc2UpIHtcbiAgICAgICAgcmV0dXJuIGRlY29kZUpTT04ocmVzcG9uc2UuZ2V0SlNPTlRleHQoKSwgQXBwbGljYXRpb25zUmVzcG9uc2UpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNlYXJjaEZvckFwcGxpY2F0aW9ucy5qcy5tYXAiXSwibmFtZXMiOlsiSlNPTlJlcXVlc3QiLCJkZWNvZGVKU09OIiwiQXBwbGljYXRpb25zUmVzcG9uc2UiLCJTZWFyY2hGb3JBcHBsaWNhdGlvbnMiLCJwYXRoIiwiaW5kZXgiLCJxdWVyeSIsImNyZWF0b3IiLCJ0b1N0cmluZyIsIm5leHRUb2tlbiIsIm5leHQiLCJsaW1pdCIsImluY2x1ZGVBbGwiLCJ2YWx1ZSIsInByZXBhcmUiLCJyZXNwb25zZSIsImdldEpTT05UZXh0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/client/v2/indexer/searchForApplications.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/client/v2/indexer/searchForAssets.js":
/*!****************************************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/client/v2/indexer/searchForAssets.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ SearchForAssets)\n/* harmony export */ });\n/* harmony import */ var _jsonrequest_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../jsonrequest.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/jsonrequest.js\");\n/* harmony import */ var _encoding_encoding_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../encoding/encoding.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/encoding.js\");\n/* harmony import */ var _models_types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./models/types.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/indexer/models/types.js\");\n\n\n\n/**\n * Returns information about indexed assets.\n *\n * #### Example\n * ```typescript\n * const assets = await indexerClient.searchForAssets().do();\n * ```\n *\n * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2assets)\n * @category GET\n */ class SearchForAssets extends _jsonrequest_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * @returns `/v2/assets`\n     */ // eslint-disable-next-line class-methods-use-this\n    path() {\n        return \"/v2/assets\";\n    }\n    /**\n     * Limit results for pagination.\n     *\n     * #### Example\n     * ```typescript\n     * const maxResults = 20;\n     * const assets = await indexerClient\n     *        .searchForAssets()\n     *        .limit(maxResults)\n     *        .do();\n     * ```\n     *\n     * @param limit - maximum number of results to return.\n     * @category query\n     */ limit(limit) {\n        this.query.limit = limit;\n        return this;\n    }\n    /**\n     * Filter just assets with the given creator address.\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const assets = await indexerClient\n     *        .searchForAssets()\n     *        .creator(address)\n     *        .do();\n     * ```\n     *\n     * @param creator\n     * @category query\n     */ creator(creator) {\n        this.query.creator = creator.toString();\n        return this;\n    }\n    /**\n     * Filter just assets with the given name.\n     *\n     * #### Example\n     * ```typescript\n     * const name = \"Test Token\";\n     * const assets = await indexerClient\n     *        .searchForAssets()\n     *        .name(name)\n     *        .do();\n     * ```\n     *\n     * @param name\n     * @category query\n     */ name(name) {\n        this.query.name = name;\n        return this;\n    }\n    /**\n     * Filter just assets with the given unit.\n     *\n     * #### Example\n     * ```typescript\n     * const unit = \"test\";\n     * const assets = await indexerClient\n     *        .searchForAssets()\n     *        .unit(unit)\n     *        .do();\n     * ```\n     *\n     * @param unit\n     * @category query\n     */ unit(unit) {\n        this.query.unit = unit;\n        return this;\n    }\n    /**\n     * Asset ID for filter, as int.\n     *\n     * #### Example\n     * ```typescript\n     * const assetId = 163650;\n     * const assets = await indexerClient\n     *        .searchForAssets()\n     *        .index(assetId)\n     *        .do();\n     * ```\n     * @remarks Alternatively, use `indexerClient.lookupAssetByID(assetId).do();`\n     * @param index\n     * @category query\n     */ index(index) {\n        this.query[\"asset-id\"] = index;\n        return this;\n    }\n    /**\n     * Specify the next page of results.\n     *\n     * #### Example\n     * ```typescript\n     * const maxResults = 20;\n     *\n     * const assetsPage1 = await indexerClient\n     *        .searchForAssets()\n     *        .limit(maxResults)\n     *        .do();\n     *\n     * const assetsPage2 = await indexerClient\n     *        .searchForAssets()\n     *        .limit(maxResults)\n     *        .nextToken(assetsPage1[\"next-token\"])\n     *        .do();\n     * ```\n     * @param nextToken - provided by the previous results.\n     * @category query\n     */ nextToken(nextToken) {\n        this.query.next = nextToken;\n        return this;\n    }\n    /**\n     * Includes all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates\n     *\n     * #### Example 1\n     * ```typescript\n     * const assets = await indexerClient\n     *        .searchForAssets()\n     *        .includeAll(false)\n     *        .do();\n     * ```\n     *\n     * #### Example 2\n     * ```typescript\n     * const assets = await indexerClient\n     *        .searchForAssets()\n     *        .includeAll()\n     *        .do();\n     * ```\n     *\n     * @param value - default true when called without passing a value\n     * @category query\n     */ includeAll(value = true) {\n        this.query[\"include-all\"] = value;\n        return this;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    prepare(response) {\n        return (0,_encoding_encoding_js__WEBPACK_IMPORTED_MODULE_1__.decodeJSON)(response.getJSONText(), _models_types_js__WEBPACK_IMPORTED_MODULE_2__.AssetsResponse);\n    }\n} //# sourceMappingURL=searchForAssets.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/client/v2/indexer/searchForAssets.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/client/v2/indexer/searchForBlockHeaders.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/client/v2/indexer/searchForBlockHeaders.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ SearchForBlockHeaders)\n/* harmony export */ });\n/* harmony import */ var _jsonrequest_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../jsonrequest.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/jsonrequest.js\");\n/* harmony import */ var _encoding_encoding_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../encoding/encoding.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/encoding.js\");\n/* harmony import */ var _models_types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./models/types.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/indexer/models/types.js\");\n\n\n\n/**\n * Returns information about indexed block headers.\n *\n * #### Example\n * ```typescript\n * const bhs = await indexerClient.searchForBlockHeaders().do();\n * ```\n *\n * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2block-headers)\n * @category GET\n */ class SearchForBlockHeaders extends _jsonrequest_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * @returns `/v2/block-headers`\n     */ // eslint-disable-next-line class-methods-use-this\n    path() {\n        return \"/v2/block-headers\";\n    }\n    /**\n     * Accounts marked as absent in the block header's participation updates.\n     *\n     * #### Example\n     * ```typescript\n     * const address1 = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const address2 = \"4H5UNRBJ2Q6JENAXQ6HNTGKLKINP4J4VTQBEPK5F3I6RDICMZBPGNH6KD4\";\n     * const bhs = await indexerClient\n     *        .searchForBlockHeaders()\n     *        .absent([address1,address2])\n     *        .do();\n     * ```\n     *\n     * @param absent - a comma separated list of addresses\n     * @category query\n     */ absent(absent) {\n        this.query.absent = absent;\n        return this;\n    }\n    /**\n     * Include results after the given time.\n     *\n     * #### Example\n     * ```typescript\n     * const afterTime = \"2022-10-21T00:00:11.55Z\";\n     * const bhs = await indexerClient\n     *        .searchForBlockHeaders()\n     *        .afterTime(afterTime)\n     *        .do();\n     * ```\n     *\n     * @param after - rfc3339 string or Date object\n     * @category query\n     */ afterTime(after) {\n        this.query[\"after-time\"] = after instanceof Date ? after.toISOString() : after;\n        return this;\n    }\n    /**\n     * Include results before the given time.\n     *\n     * #### Example\n     * ```typescript\n     * const beforeTime = \"2022-02-02T20:20:22.02Z\";\n     * const bhs = await indexerClient\n     *        .searchForBlockHeaders()\n     *        .beforeTime(beforeTime)\n     *        .do();\n     * ```\n     *\n     * @param before - rfc3339 string or Date object\n     * @category query\n     */ beforeTime(before) {\n        this.query[\"before-time\"] = before instanceof Date ? before.toISOString() : before;\n        return this;\n    }\n    /**\n     * Accounts marked as expired in the block header's participation updates.\n     *\n     * #### Example\n     * ```typescript\n     * const address1 = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const address2 = \"4H5UNRBJ2Q6JENAXQ6HNTGKLKINP4J4VTQBEPK5F3I6RDICMZBPGNH6KD4\";\n     * const bhs = await indexerClient\n     *        .searchForBlockHeaders()\n     *        .expired([address1,address2])\n     *        .do();\n     * ```\n     *\n     * @param expired - - a comma separated list of addresses\n     * @category query\n     */ expired(expired) {\n        this.query.expired = expired;\n        return this;\n    }\n    /**\n     * Maximum number of results to return.\n     *\n     * #### Example\n     * ```typescript\n     * const maxResults = 25;\n     * const bhs = await indexerClient\n     *        .searchForBlockHeaders()\n     *        .limit(maxResults)\n     *        .do();\n     * ```\n     *\n     * @param limit\n     * @category query\n     */ limit(limit) {\n        this.query.limit = limit;\n        return this;\n    }\n    /**\n     * Include results at or before the specified max-round.\n     *\n     * #### Example\n     * ```typescript\n     * const maxRound = 18309917;\n     * const bhs = await indexerClient\n     *        .searchForBlockHeaders()\n     *        .maxRound(maxRound)\n     *        .do();\n     * ```\n     *\n     * @param round\n     * @category query\n     */ maxRound(round) {\n        this.query[\"max-round\"] = round;\n        return this;\n    }\n    /**\n     * Include results at or after the specified min-round.\n     *\n     * #### Example\n     * ```typescript\n     * const minRound = 18309917;\n     * const bhs = await indexerClient\n     *        .searchForBlockHeaders()\n     *        .minRound(minRound)\n     *        .do();\n     * ```\n     *\n     * @param round\n     * @category query\n     */ minRound(round) {\n        this.query[\"min-round\"] = round;\n        return this;\n    }\n    /**\n     * The next page of results.\n     *\n     * #### Example\n     * ```typescript\n     * const maxResults = 25;\n     *\n     * const bh1 = await indexerClient\n     *        .searchForBlockHeaders()\n     *        .limit(maxResults)\n     *        .do();\n     *\n     * const bh2 = await indexerClient\n     *        .searchForBlockHeaders()\n     *        .limit(maxResults)\n     *        .nextToken(bh1[\"next-token\"])\n     *        .do();\n     * ```\n     *\n     * @param nextToken - provided by the previous results\n     * @category query\n     */ nextToken(nextToken) {\n        this.query.next = nextToken;\n        return this;\n    }\n    /**\n     * Accounts marked as proposer in the block header's participation updates.\n     *\n     * #### Example\n     * ```typescript\n     * const address1 = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const address2 = \"4H5UNRBJ2Q6JENAXQ6HNTGKLKINP4J4VTQBEPK5F3I6RDICMZBPGNH6KD4\";\n     * const bhs = await indexerClient\n     *        .searchForBlockHeaders()\n     *        .proposers([address1,address2])\n     *        .do();\n     * ```\n     *\n     * @param proposers - a comma separated list of addresses\n     * @category query\n     */ proposers(proposers) {\n        this.query.proposers = proposers;\n        return this;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    prepare(response) {\n        return (0,_encoding_encoding_js__WEBPACK_IMPORTED_MODULE_1__.decodeJSON)(response.getJSONText(), _models_types_js__WEBPACK_IMPORTED_MODULE_2__.BlockHeadersResponse);\n    }\n} //# sourceMappingURL=searchForBlockHeaders.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/client/v2/indexer/searchForBlockHeaders.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/client/v2/indexer/searchForTransactions.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/client/v2/indexer/searchForTransactions.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ SearchForTransactions)\n/* harmony export */ });\n/* harmony import */ var _jsonrequest_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../jsonrequest.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/jsonrequest.js\");\n/* harmony import */ var _encoding_encoding_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../encoding/encoding.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/encoding.js\");\n/* harmony import */ var _lookupAccountTransactions_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./lookupAccountTransactions.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/indexer/lookupAccountTransactions.js\");\n/* harmony import */ var _models_types_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./models/types.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/indexer/models/types.js\");\n\n\n\n\n/**\n * Returns information about indexed transactions.\n *\n * #### Example\n * ```typescript\n * const txns = await indexerClient.searchForTransactions().do();\n * ```\n *\n * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2transactions)\n * @category GET\n */ class SearchForTransactions extends _jsonrequest_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n     * @returns `/v2/transactions`\n     */ // eslint-disable-next-line class-methods-use-this\n    path() {\n        return \"/v2/transactions\";\n    }\n    /**\n     * Specifies a prefix which must be contained in the note field.\n     *\n     * #### Example\n     * ```typescript\n     * const notePrefixBase64Encoded = \"Y3JlYXRl\";\n     * const txns = await indexerClient\n     *        .searchForTransactions()\n     *        .notePrefix(notePrefixBase64Encoded)\n     *        .do();\n     * ```\n     *\n     * @param prefix - base64 string or uint8array\n     * @category query\n     */ notePrefix(prefix) {\n        this.query[\"note-prefix\"] = (0,_lookupAccountTransactions_js__WEBPACK_IMPORTED_MODULE_2__.base64StringFunnel)(prefix);\n        return this;\n    }\n    /**\n     * Type of transaction to filter with.\n     *\n     * #### Example\n     * ```typescript\n     * const txns = await indexerClient\n     *        .searchForTransactions()\n     *        .txType(\"keyreg\")\n     *        .do();\n     * ```\n     *\n     * @param type - one of `pay`, `keyreg`, `acfg`, `axfer`, `afrz`, `appl`, `stpf`\n     * @category query\n     */ txType(type) {\n        this.query[\"tx-type\"] = type;\n        return this;\n    }\n    /**\n     * Type of signature to filter with.\n     * - sig: Standard\n     * - msig: MultiSig\n     * - lsig: LogicSig\n     *\n     * #### Example\n     * ```typescript\n     * const txns = await indexerClient\n     *        .searchForTransactions()\n     *        .sigType(\"sig\")\n     *        .do();\n     * ```\n     *\n     * @param type - one of `sig`, `msig`, `lsig`\n     * @category query\n     */ sigType(type) {\n        this.query[\"sig-type\"] = type;\n        return this;\n    }\n    /**\n     * Lookup the specific transaction by ID.\n     *\n     * #### Example\n     * ```typescript\n     * const txId = \"MEUOC4RQJB23CQZRFRKYEI6WBO73VTTPST5A7B3S5OKBUY6LFUDA\";\n     * const txns = await indexerClient\n     *        .searchForTransactions()\n     *        .txid(txId)\n     *        .do();\n     * ```\n     * @remarks Alternatively, use `indexerClient.lookupTransactionByID(txnId).do()`\n     * @param txid\n     * @category query\n     */ txid(txid) {\n        this.query.txid = txid;\n        return this;\n    }\n    /**\n     * Lookup transactions by group ID.\n     *\n     * #### Example\n     * ```typescript\n     * const groupIdBase64Encoded = \"A62qVigWtWo0laUzcE1iZY8+KXWzK1vSkgwN/eKgvjc=\";\n     * const txns = await indexerClient\n     *        .searchForTransactions()\n     *        .groupid(groupIdBase64Encoded)\n     *        .do();\n     * ```\n     *\n     * @param groupid - base64 string or uint8array\n     * @category query\n     */ groupid(groupid) {\n        this.query[\"group-id\"] = (0,_lookupAccountTransactions_js__WEBPACK_IMPORTED_MODULE_2__.base64StringFunnel)(groupid);\n        return this;\n    }\n    /**\n     * Include results for the specified round.\n     *\n     * #### Example\n     * ```typescript\n     * const targetBlock = 18309917;\n     * const txns = await indexerClient\n     *        .searchForTransactions()\n     *        .round(targetBlock)\n     *        .do();\n     * ```\n     * @remarks Alternatively, use `indexerClient.lookupBlock(targetBlock).do()`\n     * @param round\n     * @category query\n     */ round(round) {\n        this.query.round = round;\n        return this;\n    }\n    /**\n     * Include results at or after the specified min-round.\n     *\n     * #### Example\n     * ```typescript\n     * const minRound = 18309917;\n     * const txns = await indexerClient\n     *        .searchForTransactions()\n     *        .minRound(minRound)\n     *        .do();\n     * ```\n     *\n     * @param round\n     * @category query\n     */ minRound(round) {\n        this.query[\"min-round\"] = round;\n        return this;\n    }\n    /**\n     * Include results at or before the specified max-round.\n     *\n     * #### Example\n     * ```typescript\n     * const maxRound = 18309917;\n     * const txns = await indexerClient\n     *        .searchForTransactions()\n     *        .maxRound(maxRound)\n     *        .do();\n     * ```\n     *\n     * @param round\n     * @category query\n     */ maxRound(round) {\n        this.query[\"max-round\"] = round;\n        return this;\n    }\n    /**\n     * Asset ID to filter with.\n     *\n     * #### Example\n     * ```typescript\n     * const assetID = 163650;\n     * const txns = await indexerClient\n     *        .searchForTransactions()\n     *        .assetID(assetID)\n     *        .do();\n     * ```\n     * @remarks Alternatively, use `indexerClient.lookupAssetTransactions(assetId).do()`\n     * @param id\n     * @category query\n     */ assetID(id) {\n        this.query[\"asset-id\"] = id;\n        return this;\n    }\n    /**\n     * Maximum number of results to return.\n     *\n     * #### Example\n     * ```typescript\n     * const maxResults = 25;\n     * const txns = await indexerClient\n     *        .searchForTransactions()\n     *        .limit(maxResults)\n     *        .do();\n     * ```\n     *\n     * @param limit\n     * @category query\n     */ limit(limit) {\n        this.query.limit = limit;\n        return this;\n    }\n    /**\n     * Include results before the given time.\n     *\n     * #### Example\n     * ```typescript\n     * const beforeTime = \"2022-02-02T20:20:22.02Z\";\n     * const txns = await indexerClient\n     *        .searchForTransactions()\n     *        .beforeTime(beforeTime)\n     *        .do();\n     * ```\n     *\n     * @param before - rfc3339 string or Date object\n     * @category query\n     */ beforeTime(before) {\n        this.query[\"before-time\"] = before instanceof Date ? before.toISOString() : before;\n        return this;\n    }\n    /**\n     * Include results after the given time.\n     *\n     * #### Example\n     * ```typescript\n     * const afterTime = \"2022-10-21T00:00:11.55Z\";\n     * const txns = await indexerClient\n     *        .searchForTransactions()\n     *        .afterTime(afterTime)\n     *        .do();\n     * ```\n     *\n     * @param after - rfc3339 string or Date object\n     * @category query\n     */ afterTime(after) {\n        this.query[\"after-time\"] = after instanceof Date ? after.toISOString() : after;\n        return this;\n    }\n    /**\n     * Combined with address, defines what address to filter on, as string.\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const role = \"freeze-target\";\n     * const txns = await indexerClient\n     *        .searchForTransactions()\n     *        .address(address)\n     *        .addressRole(role)\n     *        .do();\n     * ```\n     *\n     * @param role - one of `sender`, `receiver`, `freeze-target`\n     * @category query\n     */ addressRole(role) {\n        this.query[\"address-role\"] = role;\n        return this;\n    }\n    /**\n     * Only include transactions with this address in one of the transaction fields.\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const txns = await indexerClient\n     *        .searchForTransactions()\n     *        .address(address)\n     *        .do();\n     * ```\n     * @remarks Alternatively, use `indexerClient.lookupAccountTransactions(address).do()`\n     * @param address\n     * @category query\n     */ address(address) {\n        this.query.address = address.toString();\n        return this;\n    }\n    /**\n     * Whether or not to consider the `close-to` field as a receiver when filtering transactions, as bool. Set to `true` to ignore `close-to`.\n     *\n     * #### Example\n     * ```typescript\n     * const txns = await indexerClient\n     *        .searchForTransactions()\n     *        .excludeCloseTo(true)\n     *        .do();\n     * ```\n     *\n     * @param exclude\n     * @category query\n     */ excludeCloseTo(exclude) {\n        this.query[\"exclude-close-to\"] = exclude;\n        return this;\n    }\n    /**\n     * The next page of results.\n     *\n     * #### Example\n     * ```typescript\n     * const maxResults = 25;\n     *\n     * const txnsPage1 = await indexerClient\n     *        .searchForTransactions()\n     *        .limit(maxResults)\n     *        .do();\n     *\n     * const txnsPage2 = await indexerClient\n     *        .searchForTransactions()\n     *        .limit(maxResults)\n     *        .nextToken(txnsPage1[\"next-token\"])\n     *        .do();\n     * ```\n     *\n     * @param nextToken - provided by the previous results\n     * @category query\n     */ nextToken(nextToken) {\n        this.query.next = nextToken;\n        return this;\n    }\n    /**\n     * Whether or not to include rekeying transactions.\n     *\n     * #### Example\n     * ```typescript\n     * const txns = await indexerClient\n     *        .searchForTransactions()\n     *        .rekeyTo(false)\n     *        .do();\n     * ```\n     *\n     * @param rekeyTo\n     * @category query\n     */ rekeyTo(rekeyTo) {\n        this.query[\"rekey-to\"] = rekeyTo;\n        return this;\n    }\n    /**\n     * Filter for this application.\n     *\n     * #### Example\n     * ```typescript\n     * const appId = 60553466;\n     * const txns = await indexerClient\n     *        .searchForTransactions()\n     *        .applicationID(appId)\n     *        .do();\n     * ```\n     *\n     * @param applicationID\n     * @category query\n     */ applicationID(applicationID) {\n        this.query[\"application-id\"] = applicationID;\n        return this;\n    }\n    /**\n     * Filtered results should have an amount greater than this value, as int, representing microAlgos, unless an asset-id is provided, in which case units are in the asset's units.\n     *\n     * #### Example 1\n     * ```typescript\n     * const minBalance = 300000;\n     * const txns = await indexerClient\n     *        .searchForTransactions()\n     *        .currencyGreaterThan(minBalance - 1)\n     *        .do();\n     * ```\n     *\n     * #### Example 2\n     * ```typescript\n     * const assetID = 163650;\n     * const minBalance = 300000;\n     * const txns = await indexerClient\n     *        .searchForTransactions()\n     *        .assetID(assetID)\n     *        .currencyGreaterThan(minBalance - 1)\n     *        .do();\n     * ```\n     *\n     * @param greater\n     * @category query\n     */ currencyGreaterThan(greater) {\n        // We convert the following to a string for now to correctly include zero values in request parameters.\n        this.query[\"currency-greater-than\"] = greater.toString();\n        return this;\n    }\n    /**\n     * Filtered results should have an amount less than this value, as int, representing microAlgos, unless an asset-id is provided, in which case units are in the asset's units.\n     *\n     * #### Example 1\n     * ```typescript\n     * const maxBalance = 500000;\n     * const txns = await indexerClient\n     *        .searchForTransactions()\n     *        .currencyLessThan(maxBalance + 1)\n     *        .do();\n     * ```\n     *\n     * #### Example 2\n     * ```typescript\n     * const assetID = 163650;\n     * const maxBalance = 500000;\n     * const txns = await indexerClient\n     *        .searchForTransactions()\n     *        .assetID(assetID)\n     *        .currencyLessThan(maxBalance + 1)\n     *        .do();\n     * ```\n     *\n     * @param lesser\n     * @category query\n     */ currencyLessThan(lesser) {\n        this.query[\"currency-less-than\"] = lesser;\n        return this;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    prepare(response) {\n        return (0,_encoding_encoding_js__WEBPACK_IMPORTED_MODULE_1__.decodeJSON)(response.getJSONText(), _models_types_js__WEBPACK_IMPORTED_MODULE_3__.TransactionsResponse);\n    }\n} //# sourceMappingURL=searchForTransactions.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/client/v2/indexer/searchForTransactions.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/client/v2/jsonrequest.js":
/*!****************************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/client/v2/jsonrequest.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ JSONRequest)\n/* harmony export */ });\n/**\n * Base abstract class for JSON requests.\n *\n * Data: The type returned from the `do()` method\n *\n * Body: The structure of the response's body\n */ class JSONRequest {\n    /**\n     * @param client - HTTPClient object.\n     */ constructor(client){\n        this.c = client;\n        this.query = {};\n    }\n    /**\n     * Execute the request\n     */ executeRequest(headers, customOptions) {\n        return this.c.get({\n            relativePath: this.path(),\n            query: this.query,\n            requestHeaders: headers,\n            customOptions\n        });\n    }\n    /**\n     * Execute the request and decode the response.\n     * @param headers - Additional headers to send in the request. Optional.\n     * @param customOptions - Additional options to pass to the underlying BaseHTTPClient. For\n     *   {@link URLTokenBaseHTTPClient}, which is the default client, this will be treated as\n     *   additional options to pass to the network `fetch` method.\n     * @returns A promise which resolves to the parsed response object.\n     * @category JSONRequest\n     */ async do(headers, customOptions) {\n        const res = await this.executeRequest(headers, customOptions);\n        return this.prepare(res);\n    }\n    /**\n     * Execute the request, but do not process the response data in any way.\n     * @param headers - Additional headers to send in the request. Optional.\n     * @param customOptions - Additional options to pass to the underlying BaseHTTPClient. For\n     *   {@link URLTokenBaseHTTPClient}, which is the default client, this will be treated as\n     *   additional options to pass to the network `fetch` method.\n     * @returns A promise which resolves to the raw response data, exactly as returned by the server.\n     * @category JSONRequest\n     */ async doRaw(headers, customOptions) {\n        const res = await this.executeRequest(headers, customOptions);\n        return res.body;\n    }\n} //# sourceMappingURL=jsonrequest.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9jbGllbnQvdjIvanNvbnJlcXVlc3QuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBOzs7Ozs7Q0FNQyxHQUNjLE1BQU1BO0lBQ2pCOztLQUVDLEdBQ0RDLFlBQVlDLE1BQU0sQ0FBRTtRQUNoQixJQUFJLENBQUNDLENBQUMsR0FBR0Q7UUFDVCxJQUFJLENBQUNFLEtBQUssR0FBRyxDQUFDO0lBQ2xCO0lBQ0E7O0tBRUMsR0FDREMsZUFBZUMsT0FBTyxFQUFFQyxhQUFhLEVBQUU7UUFDbkMsT0FBTyxJQUFJLENBQUNKLENBQUMsQ0FBQ0ssR0FBRyxDQUFDO1lBQ2RDLGNBQWMsSUFBSSxDQUFDQyxJQUFJO1lBQ3ZCTixPQUFPLElBQUksQ0FBQ0EsS0FBSztZQUNqQk8sZ0JBQWdCTDtZQUNoQkM7UUFDSjtJQUNKO0lBQ0E7Ozs7Ozs7O0tBUUMsR0FDRCxNQUFNSyxHQUFHTixPQUFPLEVBQUVDLGFBQWEsRUFBRTtRQUM3QixNQUFNTSxNQUFNLE1BQU0sSUFBSSxDQUFDUixjQUFjLENBQUNDLFNBQVNDO1FBQy9DLE9BQU8sSUFBSSxDQUFDTyxPQUFPLENBQUNEO0lBQ3hCO0lBQ0E7Ozs7Ozs7O0tBUUMsR0FDRCxNQUFNRSxNQUFNVCxPQUFPLEVBQUVDLGFBQWEsRUFBRTtRQUNoQyxNQUFNTSxNQUFNLE1BQU0sSUFBSSxDQUFDUixjQUFjLENBQUNDLFNBQVNDO1FBQy9DLE9BQU9NLElBQUlHLElBQUk7SUFDbkI7QUFDSixFQUNBLHVDQUF1QyIsInNvdXJjZXMiOlsid2VicGFjazovL2FsZ29yYW5kLWNyb3dkZnVuZGluZy1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9hbGdvc2RrL2Rpc3QvZXNtL2NsaWVudC92Mi9qc29ucmVxdWVzdC5qcz9kZDUxIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQmFzZSBhYnN0cmFjdCBjbGFzcyBmb3IgSlNPTiByZXF1ZXN0cy5cbiAqXG4gKiBEYXRhOiBUaGUgdHlwZSByZXR1cm5lZCBmcm9tIHRoZSBgZG8oKWAgbWV0aG9kXG4gKlxuICogQm9keTogVGhlIHN0cnVjdHVyZSBvZiB0aGUgcmVzcG9uc2UncyBib2R5XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEpTT05SZXF1ZXN0IHtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gY2xpZW50IC0gSFRUUENsaWVudCBvYmplY3QuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoY2xpZW50KSB7XG4gICAgICAgIHRoaXMuYyA9IGNsaWVudDtcbiAgICAgICAgdGhpcy5xdWVyeSA9IHt9O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBFeGVjdXRlIHRoZSByZXF1ZXN0XG4gICAgICovXG4gICAgZXhlY3V0ZVJlcXVlc3QoaGVhZGVycywgY3VzdG9tT3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5jLmdldCh7XG4gICAgICAgICAgICByZWxhdGl2ZVBhdGg6IHRoaXMucGF0aCgpLFxuICAgICAgICAgICAgcXVlcnk6IHRoaXMucXVlcnksXG4gICAgICAgICAgICByZXF1ZXN0SGVhZGVyczogaGVhZGVycyxcbiAgICAgICAgICAgIGN1c3RvbU9wdGlvbnMsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBFeGVjdXRlIHRoZSByZXF1ZXN0IGFuZCBkZWNvZGUgdGhlIHJlc3BvbnNlLlxuICAgICAqIEBwYXJhbSBoZWFkZXJzIC0gQWRkaXRpb25hbCBoZWFkZXJzIHRvIHNlbmQgaW4gdGhlIHJlcXVlc3QuIE9wdGlvbmFsLlxuICAgICAqIEBwYXJhbSBjdXN0b21PcHRpb25zIC0gQWRkaXRpb25hbCBvcHRpb25zIHRvIHBhc3MgdG8gdGhlIHVuZGVybHlpbmcgQmFzZUhUVFBDbGllbnQuIEZvclxuICAgICAqICAge0BsaW5rIFVSTFRva2VuQmFzZUhUVFBDbGllbnR9LCB3aGljaCBpcyB0aGUgZGVmYXVsdCBjbGllbnQsIHRoaXMgd2lsbCBiZSB0cmVhdGVkIGFzXG4gICAgICogICBhZGRpdGlvbmFsIG9wdGlvbnMgdG8gcGFzcyB0byB0aGUgbmV0d29yayBgZmV0Y2hgIG1ldGhvZC5cbiAgICAgKiBAcmV0dXJucyBBIHByb21pc2Ugd2hpY2ggcmVzb2x2ZXMgdG8gdGhlIHBhcnNlZCByZXNwb25zZSBvYmplY3QuXG4gICAgICogQGNhdGVnb3J5IEpTT05SZXF1ZXN0XG4gICAgICovXG4gICAgYXN5bmMgZG8oaGVhZGVycywgY3VzdG9tT3B0aW9ucykge1xuICAgICAgICBjb25zdCByZXMgPSBhd2FpdCB0aGlzLmV4ZWN1dGVSZXF1ZXN0KGhlYWRlcnMsIGN1c3RvbU9wdGlvbnMpO1xuICAgICAgICByZXR1cm4gdGhpcy5wcmVwYXJlKHJlcyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEV4ZWN1dGUgdGhlIHJlcXVlc3QsIGJ1dCBkbyBub3QgcHJvY2VzcyB0aGUgcmVzcG9uc2UgZGF0YSBpbiBhbnkgd2F5LlxuICAgICAqIEBwYXJhbSBoZWFkZXJzIC0gQWRkaXRpb25hbCBoZWFkZXJzIHRvIHNlbmQgaW4gdGhlIHJlcXVlc3QuIE9wdGlvbmFsLlxuICAgICAqIEBwYXJhbSBjdXN0b21PcHRpb25zIC0gQWRkaXRpb25hbCBvcHRpb25zIHRvIHBhc3MgdG8gdGhlIHVuZGVybHlpbmcgQmFzZUhUVFBDbGllbnQuIEZvclxuICAgICAqICAge0BsaW5rIFVSTFRva2VuQmFzZUhUVFBDbGllbnR9LCB3aGljaCBpcyB0aGUgZGVmYXVsdCBjbGllbnQsIHRoaXMgd2lsbCBiZSB0cmVhdGVkIGFzXG4gICAgICogICBhZGRpdGlvbmFsIG9wdGlvbnMgdG8gcGFzcyB0byB0aGUgbmV0d29yayBgZmV0Y2hgIG1ldGhvZC5cbiAgICAgKiBAcmV0dXJucyBBIHByb21pc2Ugd2hpY2ggcmVzb2x2ZXMgdG8gdGhlIHJhdyByZXNwb25zZSBkYXRhLCBleGFjdGx5IGFzIHJldHVybmVkIGJ5IHRoZSBzZXJ2ZXIuXG4gICAgICogQGNhdGVnb3J5IEpTT05SZXF1ZXN0XG4gICAgICovXG4gICAgYXN5bmMgZG9SYXcoaGVhZGVycywgY3VzdG9tT3B0aW9ucykge1xuICAgICAgICBjb25zdCByZXMgPSBhd2FpdCB0aGlzLmV4ZWN1dGVSZXF1ZXN0KGhlYWRlcnMsIGN1c3RvbU9wdGlvbnMpO1xuICAgICAgICByZXR1cm4gcmVzLmJvZHk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9anNvbnJlcXVlc3QuanMubWFwIl0sIm5hbWVzIjpbIkpTT05SZXF1ZXN0IiwiY29uc3RydWN0b3IiLCJjbGllbnQiLCJjIiwicXVlcnkiLCJleGVjdXRlUmVxdWVzdCIsImhlYWRlcnMiLCJjdXN0b21PcHRpb25zIiwiZ2V0IiwicmVsYXRpdmVQYXRoIiwicGF0aCIsInJlcXVlc3RIZWFkZXJzIiwiZG8iLCJyZXMiLCJwcmVwYXJlIiwiZG9SYXciLCJib2R5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/client/v2/jsonrequest.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/client/v2/serviceClient.js":
/*!******************************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/client/v2/serviceClient.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ServiceClient)\n/* harmony export */ });\n/* harmony import */ var _client_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../client.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/client.js\");\n\n/**\n * Convert a token string to a token header\n * @param token - The token string\n * @param headerIdentifier - An identifier for the token header\n */ function convertTokenStringToTokenHeader(headerIdentifier, token = \"\") {\n    const tokenHeader = {};\n    if (token === \"\") {\n        return tokenHeader;\n    }\n    tokenHeader[headerIdentifier] = token;\n    return tokenHeader;\n}\nfunction isBaseHTTPClient(tbc) {\n    return typeof tbc.get === \"function\";\n}\n/**\n * Abstract service client to encapsulate shared AlgodClient and IndexerClient logic\n */ class ServiceClient {\n    constructor(tokenHeaderIdentifier, tokenHeaderOrStrOrBaseClient, baseServer, port, defaultHeaders = {}){\n        if (isBaseHTTPClient(tokenHeaderOrStrOrBaseClient)) {\n            // we are using a base client\n            this.c = new _client_js__WEBPACK_IMPORTED_MODULE_0__.HTTPClient(tokenHeaderOrStrOrBaseClient);\n        } else {\n            // Accept token header as string or object\n            // - workaround to allow backwards compatibility for multiple headers\n            let tokenHeader;\n            if (typeof tokenHeaderOrStrOrBaseClient === \"string\") {\n                tokenHeader = convertTokenStringToTokenHeader(tokenHeaderIdentifier, tokenHeaderOrStrOrBaseClient);\n            } else {\n                tokenHeader = tokenHeaderOrStrOrBaseClient;\n            }\n            this.c = new _client_js__WEBPACK_IMPORTED_MODULE_0__.HTTPClient(tokenHeader, baseServer, port, defaultHeaders);\n        }\n    }\n} //# sourceMappingURL=serviceClient.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9jbGllbnQvdjIvc2VydmljZUNsaWVudC5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUEwQztBQUMxQzs7OztDQUlDLEdBQ0QsU0FBU0MsZ0NBQWdDQyxnQkFBZ0IsRUFBRUMsUUFBUSxFQUFFO0lBQ2pFLE1BQU1DLGNBQWMsQ0FBQztJQUNyQixJQUFJRCxVQUFVLElBQUk7UUFDZCxPQUFPQztJQUNYO0lBQ0FBLFdBQVcsQ0FBQ0YsaUJBQWlCLEdBQUdDO0lBQ2hDLE9BQU9DO0FBQ1g7QUFDQSxTQUFTQyxpQkFBaUJDLEdBQUc7SUFDekIsT0FBTyxPQUFPQSxJQUFJQyxHQUFHLEtBQUs7QUFDOUI7QUFDQTs7Q0FFQyxHQUNjLE1BQU1DO0lBQ2pCQyxZQUFZQyxxQkFBcUIsRUFBRUMsNEJBQTRCLEVBQUVDLFVBQVUsRUFBRUMsSUFBSSxFQUFFQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUU7UUFDcEcsSUFBSVQsaUJBQWlCTSwrQkFBK0I7WUFDaEQsNkJBQTZCO1lBQzdCLElBQUksQ0FBQ0ksQ0FBQyxHQUFHLElBQUlmLGtEQUFVQSxDQUFDVztRQUM1QixPQUNLO1lBQ0QsMENBQTBDO1lBQzFDLHFFQUFxRTtZQUNyRSxJQUFJUDtZQUNKLElBQUksT0FBT08saUNBQWlDLFVBQVU7Z0JBQ2xEUCxjQUFjSCxnQ0FBZ0NTLHVCQUF1QkM7WUFDekUsT0FDSztnQkFDRFAsY0FBY087WUFDbEI7WUFDQSxJQUFJLENBQUNJLENBQUMsR0FBRyxJQUFJZixrREFBVUEsQ0FBQ0ksYUFBYVEsWUFBWUMsTUFBTUM7UUFDM0Q7SUFDSjtBQUNKLEVBQ0EseUNBQXlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWxnb3JhbmQtY3Jvd2RmdW5kaW5nLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vY2xpZW50L3YyL3NlcnZpY2VDbGllbnQuanM/YTAzMSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIVFRQQ2xpZW50IH0gZnJvbSAnLi4vY2xpZW50LmpzJztcbi8qKlxuICogQ29udmVydCBhIHRva2VuIHN0cmluZyB0byBhIHRva2VuIGhlYWRlclxuICogQHBhcmFtIHRva2VuIC0gVGhlIHRva2VuIHN0cmluZ1xuICogQHBhcmFtIGhlYWRlcklkZW50aWZpZXIgLSBBbiBpZGVudGlmaWVyIGZvciB0aGUgdG9rZW4gaGVhZGVyXG4gKi9cbmZ1bmN0aW9uIGNvbnZlcnRUb2tlblN0cmluZ1RvVG9rZW5IZWFkZXIoaGVhZGVySWRlbnRpZmllciwgdG9rZW4gPSAnJykge1xuICAgIGNvbnN0IHRva2VuSGVhZGVyID0ge307XG4gICAgaWYgKHRva2VuID09PSAnJykge1xuICAgICAgICByZXR1cm4gdG9rZW5IZWFkZXI7XG4gICAgfVxuICAgIHRva2VuSGVhZGVyW2hlYWRlcklkZW50aWZpZXJdID0gdG9rZW47XG4gICAgcmV0dXJuIHRva2VuSGVhZGVyO1xufVxuZnVuY3Rpb24gaXNCYXNlSFRUUENsaWVudCh0YmMpIHtcbiAgICByZXR1cm4gdHlwZW9mIHRiYy5nZXQgPT09ICdmdW5jdGlvbic7XG59XG4vKipcbiAqIEFic3RyYWN0IHNlcnZpY2UgY2xpZW50IHRvIGVuY2Fwc3VsYXRlIHNoYXJlZCBBbGdvZENsaWVudCBhbmQgSW5kZXhlckNsaWVudCBsb2dpY1xuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTZXJ2aWNlQ2xpZW50IHtcbiAgICBjb25zdHJ1Y3Rvcih0b2tlbkhlYWRlcklkZW50aWZpZXIsIHRva2VuSGVhZGVyT3JTdHJPckJhc2VDbGllbnQsIGJhc2VTZXJ2ZXIsIHBvcnQsIGRlZmF1bHRIZWFkZXJzID0ge30pIHtcbiAgICAgICAgaWYgKGlzQmFzZUhUVFBDbGllbnQodG9rZW5IZWFkZXJPclN0ck9yQmFzZUNsaWVudCkpIHtcbiAgICAgICAgICAgIC8vIHdlIGFyZSB1c2luZyBhIGJhc2UgY2xpZW50XG4gICAgICAgICAgICB0aGlzLmMgPSBuZXcgSFRUUENsaWVudCh0b2tlbkhlYWRlck9yU3RyT3JCYXNlQ2xpZW50KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIEFjY2VwdCB0b2tlbiBoZWFkZXIgYXMgc3RyaW5nIG9yIG9iamVjdFxuICAgICAgICAgICAgLy8gLSB3b3JrYXJvdW5kIHRvIGFsbG93IGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5IGZvciBtdWx0aXBsZSBoZWFkZXJzXG4gICAgICAgICAgICBsZXQgdG9rZW5IZWFkZXI7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHRva2VuSGVhZGVyT3JTdHJPckJhc2VDbGllbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgdG9rZW5IZWFkZXIgPSBjb252ZXJ0VG9rZW5TdHJpbmdUb1Rva2VuSGVhZGVyKHRva2VuSGVhZGVySWRlbnRpZmllciwgdG9rZW5IZWFkZXJPclN0ck9yQmFzZUNsaWVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0b2tlbkhlYWRlciA9IHRva2VuSGVhZGVyT3JTdHJPckJhc2VDbGllbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmMgPSBuZXcgSFRUUENsaWVudCh0b2tlbkhlYWRlciwgYmFzZVNlcnZlciwgcG9ydCwgZGVmYXVsdEhlYWRlcnMpO1xuICAgICAgICB9XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2VydmljZUNsaWVudC5qcy5tYXAiXSwibmFtZXMiOlsiSFRUUENsaWVudCIsImNvbnZlcnRUb2tlblN0cmluZ1RvVG9rZW5IZWFkZXIiLCJoZWFkZXJJZGVudGlmaWVyIiwidG9rZW4iLCJ0b2tlbkhlYWRlciIsImlzQmFzZUhUVFBDbGllbnQiLCJ0YmMiLCJnZXQiLCJTZXJ2aWNlQ2xpZW50IiwiY29uc3RydWN0b3IiLCJ0b2tlbkhlYWRlcklkZW50aWZpZXIiLCJ0b2tlbkhlYWRlck9yU3RyT3JCYXNlQ2xpZW50IiwiYmFzZVNlcnZlciIsInBvcnQiLCJkZWZhdWx0SGVhZGVycyIsImMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/client/v2/serviceClient.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/client/v2/untypedmodel.js":
/*!*****************************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/client/v2/untypedmodel.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   UntypedValue: () => (/* binding */ UntypedValue)\n/* harmony export */ });\n/* harmony import */ var _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../encoding/schema/index.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/schema/index.js\");\n\nclass UntypedValue {\n    constructor(data){\n        this.data = data;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return UntypedValue.encodingSchema;\n    }\n    toEncodingData() {\n        return this.data;\n    }\n    static fromEncodingData(data) {\n        return new UntypedValue(data);\n    }\n}\nUntypedValue.encodingSchema = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.UntypedSchema(); //# sourceMappingURL=untypedmodel.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9jbGllbnQvdjIvdW50eXBlZG1vZGVsLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQStEO0FBQ3hELE1BQU1DO0lBQ1RDLFlBQVlDLElBQUksQ0FBRTtRQUNkLElBQUksQ0FBQ0EsSUFBSSxHQUFHQTtJQUNoQjtJQUNBLGtEQUFrRDtJQUNsREMsb0JBQW9CO1FBQ2hCLE9BQU9ILGFBQWFJLGNBQWM7SUFDdEM7SUFDQUMsaUJBQWlCO1FBQ2IsT0FBTyxJQUFJLENBQUNILElBQUk7SUFDcEI7SUFDQSxPQUFPSSxpQkFBaUJKLElBQUksRUFBRTtRQUMxQixPQUFPLElBQUlGLGFBQWFFO0lBQzVCO0FBQ0o7QUFDQUYsYUFBYUksY0FBYyxHQUFHLElBQUlMLG9FQUFhQSxJQUMvQyx3Q0FBd0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hbGdvcmFuZC1jcm93ZGZ1bmRpbmctZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9jbGllbnQvdjIvdW50eXBlZG1vZGVsLmpzP2M5YmQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVW50eXBlZFNjaGVtYSB9IGZyb20gJy4uLy4uL2VuY29kaW5nL3NjaGVtYS9pbmRleC5qcyc7XG5leHBvcnQgY2xhc3MgVW50eXBlZFZhbHVlIHtcbiAgICBjb25zdHJ1Y3RvcihkYXRhKSB7XG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgfVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjbGFzcy1tZXRob2RzLXVzZS10aGlzXG4gICAgZ2V0RW5jb2RpbmdTY2hlbWEoKSB7XG4gICAgICAgIHJldHVybiBVbnR5cGVkVmFsdWUuZW5jb2RpbmdTY2hlbWE7XG4gICAgfVxuICAgIHRvRW5jb2RpbmdEYXRhKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kYXRhO1xuICAgIH1cbiAgICBzdGF0aWMgZnJvbUVuY29kaW5nRGF0YShkYXRhKSB7XG4gICAgICAgIHJldHVybiBuZXcgVW50eXBlZFZhbHVlKGRhdGEpO1xuICAgIH1cbn1cblVudHlwZWRWYWx1ZS5lbmNvZGluZ1NjaGVtYSA9IG5ldyBVbnR5cGVkU2NoZW1hKCk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD11bnR5cGVkbW9kZWwuanMubWFwIl0sIm5hbWVzIjpbIlVudHlwZWRTY2hlbWEiLCJVbnR5cGVkVmFsdWUiLCJjb25zdHJ1Y3RvciIsImRhdGEiLCJnZXRFbmNvZGluZ1NjaGVtYSIsImVuY29kaW5nU2NoZW1hIiwidG9FbmNvZGluZ0RhdGEiLCJmcm9tRW5jb2RpbmdEYXRhIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/client/v2/untypedmodel.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/composer.js":
/*!***************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/composer.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AtomicTransactionComposer: () => (/* binding */ AtomicTransactionComposer),\n/* harmony export */   AtomicTransactionComposerStatus: () => (/* binding */ AtomicTransactionComposerStatus)\n/* harmony export */ });\n/* harmony import */ var _abi_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./abi/index.js */ \"(ssr)/./node_modules/algosdk/dist/esm/abi/index.js\");\n/* harmony import */ var _client_v2_algod_models_types_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./client/v2/algod/models/types.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/models/types.js\");\n/* harmony import */ var _encoding_encoding_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./encoding/encoding.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/encoding.js\");\n/* harmony import */ var _group_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./group.js */ \"(ssr)/./node_modules/algosdk/dist/esm/group.js\");\n/* harmony import */ var _makeTxn_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./makeTxn.js */ \"(ssr)/./node_modules/algosdk/dist/esm/makeTxn.js\");\n/* harmony import */ var _signer_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./signer.js */ \"(ssr)/./node_modules/algosdk/dist/esm/signer.js\");\n/* harmony import */ var _transaction_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./transaction.js */ \"(ssr)/./node_modules/algosdk/dist/esm/transaction.js\");\n/* harmony import */ var _signedTransaction_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./signedTransaction.js */ \"(ssr)/./node_modules/algosdk/dist/esm/signedTransaction.js\");\n/* harmony import */ var _types_transactions_base_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./types/transactions/base.js */ \"(ssr)/./node_modules/algosdk/dist/esm/types/transactions/base.js\");\n/* harmony import */ var _utils_utils_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./utils/utils.js */ \"(ssr)/./node_modules/algosdk/dist/esm/utils/utils.js\");\n/* harmony import */ var _wait_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./wait.js */ \"(ssr)/./node_modules/algosdk/dist/esm/wait.js\");\n\n\n\n\n\n\n\n\n\n\n\n// First 4 bytes of SHA-512/256 hash of \"return\"\nconst RETURN_PREFIX = new Uint8Array([\n    21,\n    31,\n    124,\n    117\n]);\n// The maximum number of arguments for an application call transaction\nconst MAX_APP_ARGS = 16;\nvar AtomicTransactionComposerStatus;\n(function(AtomicTransactionComposerStatus) {\n    /** The atomic group is still under construction. */ AtomicTransactionComposerStatus[AtomicTransactionComposerStatus[\"BUILDING\"] = 0] = \"BUILDING\";\n    /** The atomic group has been finalized, but not yet signed. */ AtomicTransactionComposerStatus[AtomicTransactionComposerStatus[\"BUILT\"] = 1] = \"BUILT\";\n    /** The atomic group has been finalized and signed, but not yet submitted to the network. */ AtomicTransactionComposerStatus[AtomicTransactionComposerStatus[\"SIGNED\"] = 2] = \"SIGNED\";\n    /** The atomic group has been finalized, signed, and submitted to the network. */ AtomicTransactionComposerStatus[AtomicTransactionComposerStatus[\"SUBMITTED\"] = 3] = \"SUBMITTED\";\n    /** The atomic group has been finalized, signed, submitted, and successfully committed to a block. */ AtomicTransactionComposerStatus[AtomicTransactionComposerStatus[\"COMMITTED\"] = 4] = \"COMMITTED\";\n})(AtomicTransactionComposerStatus || (AtomicTransactionComposerStatus = {}));\n/**\n * Add a value to an application call's foreign array. The addition will be as compact as possible,\n * and this function will return an index that can be used to reference `valueToAdd` in `array`.\n *\n * @param valueToAdd - The value to add to the array. If this value is already present in the array,\n *   it will not be added again. Instead, the existing index will be returned.\n * @param array - The existing foreign array. This input may be modified to append `valueToAdd`.\n * @param zeroValue - If provided, this value indicated two things: the 0 value is special for this\n *   array, so all indexes into `array` must start at 1; additionally, if `valueToAdd` equals\n *   `zeroValue`, then `valueToAdd` will not be added to the array, and instead the 0 indexes will\n *   be returned.\n * @returns An index that can be used to reference `valueToAdd` in `array`.\n */ function populateForeignArray(valueToAdd, array, zeroValue) {\n    if (zeroValue != null && valueToAdd === zeroValue) {\n        return 0;\n    }\n    const offset = zeroValue == null ? 0 : 1;\n    for(let i = 0; i < array.length; i++){\n        if (valueToAdd === array[i]) {\n            return i + offset;\n        }\n    }\n    array.push(valueToAdd);\n    return array.length - 1 + offset;\n}\n/** A class used to construct and execute atomic transaction groups */ class AtomicTransactionComposer {\n    constructor(){\n        this.status = AtomicTransactionComposerStatus.BUILDING;\n        this.transactions = [];\n        this.methodCalls = new Map();\n        this.signedTxns = [];\n        this.txIDs = [];\n    }\n    /**\n     * Get the status of this composer's transaction group.\n     */ getStatus() {\n        return this.status;\n    }\n    /**\n     * Get the number of transactions currently in this atomic group.\n     */ count() {\n        return this.transactions.length;\n    }\n    /**\n     * Create a new composer with the same underlying transactions. The new composer's status will be\n     * BUILDING, so additional transactions may be added to it.\n     */ clone() {\n        const theClone = new AtomicTransactionComposer();\n        theClone.transactions = this.transactions.map(({ txn, signer })=>{\n            const txnMap = txn.toEncodingData();\n            // erase the group ID\n            txnMap.delete(\"grp\");\n            return {\n                // not quite a deep copy, but good enough for our purposes (modifying txn.group in buildGroup)\n                txn: _transaction_js__WEBPACK_IMPORTED_MODULE_6__.Transaction.fromEncodingData(txnMap),\n                signer\n            };\n        });\n        theClone.methodCalls = new Map(this.methodCalls);\n        return theClone;\n    }\n    /**\n     * Add a transaction to this atomic group.\n     *\n     * An error will be thrown if the transaction has a nonzero group ID, the composer's status is\n     * not BUILDING, or if adding this transaction causes the current group to exceed MAX_GROUP_SIZE.\n     */ addTransaction(txnAndSigner) {\n        if (this.status !== AtomicTransactionComposerStatus.BUILDING) {\n            throw new Error(\"Cannot add transactions when composer status is not BUILDING\");\n        }\n        if (this.transactions.length === AtomicTransactionComposer.MAX_GROUP_SIZE) {\n            throw new Error(`Adding an additional transaction exceeds the maximum atomic group size of ${AtomicTransactionComposer.MAX_GROUP_SIZE}`);\n        }\n        if (txnAndSigner.txn.group && txnAndSigner.txn.group.some((v)=>v !== 0)) {\n            throw new Error(\"Cannot add a transaction with nonzero group ID\");\n        }\n        this.transactions.push(txnAndSigner);\n    }\n    /**\n     * Add a smart contract method call to this atomic group.\n     *\n     * An error will be thrown if the composer's status is not BUILDING, if adding this transaction\n     * causes the current group to exceed MAX_GROUP_SIZE, or if the provided arguments are invalid\n     * for the given method.\n     */ addMethodCall({ appID, method, methodArgs, sender, suggestedParams, onComplete, approvalProgram, clearProgram, numGlobalInts, numGlobalByteSlices, numLocalInts, numLocalByteSlices, extraPages, appAccounts, appForeignApps, appForeignAssets, boxes, note, lease, rekeyTo, signer }) {\n        if (this.status !== AtomicTransactionComposerStatus.BUILDING) {\n            throw new Error(\"Cannot add transactions when composer status is not BUILDING\");\n        }\n        if (this.transactions.length + method.txnCount() > AtomicTransactionComposer.MAX_GROUP_SIZE) {\n            throw new Error(`Adding additional transactions exceeds the maximum atomic group size of ${AtomicTransactionComposer.MAX_GROUP_SIZE}`);\n        }\n        if (BigInt(appID) === BigInt(0)) {\n            if (approvalProgram == null || clearProgram == null || numGlobalInts == null || numGlobalByteSlices == null || numLocalInts == null || numLocalByteSlices == null) {\n                throw new Error(\"One of the following required parameters for application creation is missing: approvalProgram, clearProgram, numGlobalInts, numGlobalByteSlices, numLocalInts, numLocalByteSlices\");\n            }\n        } else if (onComplete === _types_transactions_base_js__WEBPACK_IMPORTED_MODULE_8__.OnApplicationComplete.UpdateApplicationOC) {\n            if (approvalProgram == null || clearProgram == null) {\n                throw new Error(\"One of the following required parameters for OnApplicationComplete.UpdateApplicationOC is missing: approvalProgram, clearProgram\");\n            }\n            if (numGlobalInts != null || numGlobalByteSlices != null || numLocalInts != null || numLocalByteSlices != null || extraPages != null) {\n                throw new Error(\"One of the following application creation parameters were set on a non-creation call: numGlobalInts, numGlobalByteSlices, numLocalInts, numLocalByteSlices, extraPages\");\n            }\n        } else if (approvalProgram != null || clearProgram != null || numGlobalInts != null || numGlobalByteSlices != null || numLocalInts != null || numLocalByteSlices != null || extraPages != null) {\n            throw new Error(\"One of the following application creation parameters were set on a non-creation call: approvalProgram, clearProgram, numGlobalInts, numGlobalByteSlices, numLocalInts, numLocalByteSlices, extraPages\");\n        }\n        if (methodArgs == null) {\n            // eslint-disable-next-line no-param-reassign\n            methodArgs = [];\n        }\n        if (methodArgs.length !== method.args.length) {\n            throw new Error(`Incorrect number of method arguments. Expected ${method.args.length}, got ${methodArgs.length}`);\n        }\n        let basicArgTypes = [];\n        let basicArgValues = [];\n        const txnArgs = [];\n        const refArgTypes = [];\n        const refArgValues = [];\n        const refArgIndexToBasicArgIndex = new Map();\n        // TODO: Box encoding for ABI\n        const boxReferences = !boxes ? [] : boxes;\n        for(let i = 0; i < methodArgs.length; i++){\n            let argType = method.args[i].type;\n            const argValue = methodArgs[i];\n            if ((0,_abi_index_js__WEBPACK_IMPORTED_MODULE_0__.abiTypeIsTransaction)(argType)) {\n                if (!(0,_signer_js__WEBPACK_IMPORTED_MODULE_5__.isTransactionWithSigner)(argValue) || !(0,_abi_index_js__WEBPACK_IMPORTED_MODULE_0__.abiCheckTransactionType)(argType, argValue.txn)) {\n                    throw new Error(`Expected ${argType} TransactionWithSigner for argument at index ${i}`);\n                }\n                if (argValue.txn.group && argValue.txn.group.some((v)=>v !== 0)) {\n                    throw new Error(\"Cannot add a transaction with nonzero group ID\");\n                }\n                txnArgs.push(argValue);\n                continue;\n            }\n            if ((0,_signer_js__WEBPACK_IMPORTED_MODULE_5__.isTransactionWithSigner)(argValue)) {\n                throw new Error(`Expected non-transaction value for argument at index ${i}`);\n            }\n            if ((0,_abi_index_js__WEBPACK_IMPORTED_MODULE_0__.abiTypeIsReference)(argType)) {\n                refArgIndexToBasicArgIndex.set(refArgTypes.length, basicArgTypes.length);\n                refArgTypes.push(argType);\n                refArgValues.push(argValue);\n                // treat the reference as a uint8 for encoding purposes\n                argType = new _abi_index_js__WEBPACK_IMPORTED_MODULE_0__.ABIUintType(8);\n            }\n            if (typeof argType === \"string\") {\n                throw new Error(`Unknown ABI type: ${argType}`);\n            }\n            basicArgTypes.push(argType);\n            basicArgValues.push(argValue);\n        }\n        const resolvedRefIndexes = [];\n        // Converting addresses to string form for easier comparison\n        const foreignAccounts = appAccounts == null ? [] : appAccounts.map((addr)=>addr.toString());\n        const foreignApps = appForeignApps == null ? [] : appForeignApps.map(_utils_utils_js__WEBPACK_IMPORTED_MODULE_9__.ensureUint64);\n        const foreignAssets = appForeignAssets == null ? [] : appForeignAssets.map(_utils_utils_js__WEBPACK_IMPORTED_MODULE_9__.ensureUint64);\n        for(let i = 0; i < refArgTypes.length; i++){\n            const refType = refArgTypes[i];\n            const refValue = refArgValues[i];\n            let resolved = 0;\n            switch(refType){\n                case _abi_index_js__WEBPACK_IMPORTED_MODULE_0__.ABIReferenceType.account:\n                    {\n                        const addressType = new _abi_index_js__WEBPACK_IMPORTED_MODULE_0__.ABIAddressType();\n                        const address = addressType.decode(addressType.encode(refValue));\n                        resolved = populateForeignArray(address, foreignAccounts, sender.toString());\n                        break;\n                    }\n                case _abi_index_js__WEBPACK_IMPORTED_MODULE_0__.ABIReferenceType.application:\n                    {\n                        const uint64Type = new _abi_index_js__WEBPACK_IMPORTED_MODULE_0__.ABIUintType(64);\n                        const refAppID = uint64Type.decode(uint64Type.encode(refValue));\n                        if (refAppID > Number.MAX_SAFE_INTEGER) {\n                            throw new Error(`Expected safe integer for application value, got ${refAppID}`);\n                        }\n                        resolved = populateForeignArray(refAppID, foreignApps, (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_9__.ensureUint64)(appID));\n                        break;\n                    }\n                case _abi_index_js__WEBPACK_IMPORTED_MODULE_0__.ABIReferenceType.asset:\n                    {\n                        const uint64Type = new _abi_index_js__WEBPACK_IMPORTED_MODULE_0__.ABIUintType(64);\n                        const refAssetID = uint64Type.decode(uint64Type.encode(refValue));\n                        if (refAssetID > Number.MAX_SAFE_INTEGER) {\n                            throw new Error(`Expected safe integer for asset value, got ${refAssetID}`);\n                        }\n                        resolved = populateForeignArray(refAssetID, foreignAssets);\n                        break;\n                    }\n                default:\n                    throw new Error(`Unknown reference type: ${refType}`);\n            }\n            resolvedRefIndexes.push(resolved);\n        }\n        for(let i = 0; i < resolvedRefIndexes.length; i++){\n            const basicArgIndex = refArgIndexToBasicArgIndex.get(i);\n            basicArgValues[basicArgIndex] = resolvedRefIndexes[i];\n        }\n        if (basicArgTypes.length > MAX_APP_ARGS - 1) {\n            const lastArgTupleTypes = basicArgTypes.slice(MAX_APP_ARGS - 2);\n            const lastArgTupleValues = basicArgValues.slice(MAX_APP_ARGS - 2);\n            basicArgTypes = basicArgTypes.slice(0, MAX_APP_ARGS - 2);\n            basicArgValues = basicArgValues.slice(0, MAX_APP_ARGS - 2);\n            basicArgTypes.push(new _abi_index_js__WEBPACK_IMPORTED_MODULE_0__.ABITupleType(lastArgTupleTypes));\n            basicArgValues.push(lastArgTupleValues);\n        }\n        const appArgsEncoded = [\n            method.getSelector()\n        ];\n        for(let i = 0; i < basicArgTypes.length; i++){\n            appArgsEncoded.push(basicArgTypes[i].encode(basicArgValues[i]));\n        }\n        const appCall = {\n            txn: (0,_makeTxn_js__WEBPACK_IMPORTED_MODULE_4__.makeApplicationCallTxnFromObject)({\n                sender,\n                appIndex: appID,\n                appArgs: appArgsEncoded,\n                accounts: foreignAccounts,\n                foreignApps,\n                foreignAssets,\n                boxes: boxReferences,\n                onComplete: onComplete == null ? _types_transactions_base_js__WEBPACK_IMPORTED_MODULE_8__.OnApplicationComplete.NoOpOC : onComplete,\n                approvalProgram,\n                clearProgram,\n                numGlobalInts,\n                numGlobalByteSlices,\n                numLocalInts,\n                numLocalByteSlices,\n                extraPages,\n                lease,\n                note,\n                rekeyTo,\n                suggestedParams\n            }),\n            signer\n        };\n        this.transactions.push(...txnArgs, appCall);\n        this.methodCalls.set(this.transactions.length - 1, method);\n    }\n    /**\n     * Finalize the transaction group and returned the finalized transactions.\n     *\n     * The composer's status will be at least BUILT after executing this method.\n     */ buildGroup() {\n        if (this.status === AtomicTransactionComposerStatus.BUILDING) {\n            if (this.transactions.length === 0) {\n                throw new Error(\"Cannot build a group with 0 transactions\");\n            }\n            if (this.transactions.length > 1) {\n                (0,_group_js__WEBPACK_IMPORTED_MODULE_3__.assignGroupID)(this.transactions.map((txnWithSigner)=>txnWithSigner.txn));\n            }\n            this.status = AtomicTransactionComposerStatus.BUILT;\n        }\n        return this.transactions;\n    }\n    /**\n     * Obtain signatures for each transaction in this group. If signatures have already been obtained,\n     * this method will return cached versions of the signatures.\n     *\n     * The composer's status will be at least SIGNED after executing this method.\n     *\n     * An error will be thrown if signing any of the transactions fails.\n     *\n     * @returns A promise that resolves to an array of signed transactions.\n     */ async gatherSignatures() {\n        if (this.status >= AtomicTransactionComposerStatus.SIGNED) {\n            return this.signedTxns;\n        }\n        // retrieve built transactions and verify status is BUILT\n        const txnsWithSigners = this.buildGroup();\n        const txnGroup = txnsWithSigners.map((txnWithSigner)=>txnWithSigner.txn);\n        const indexesPerSigner = new Map();\n        for(let i = 0; i < txnsWithSigners.length; i++){\n            const { signer } = txnsWithSigners[i];\n            if (!indexesPerSigner.has(signer)) {\n                indexesPerSigner.set(signer, []);\n            }\n            indexesPerSigner.get(signer).push(i);\n        }\n        const orderedSigners = Array.from(indexesPerSigner);\n        const batchedSigs = await Promise.all(orderedSigners.map(([signer, indexes])=>signer(txnGroup, indexes)));\n        const signedTxns = txnsWithSigners.map(()=>null);\n        for(let signerIndex = 0; signerIndex < orderedSigners.length; signerIndex++){\n            const indexes = orderedSigners[signerIndex][1];\n            const sigs = batchedSigs[signerIndex];\n            for(let i = 0; i < indexes.length; i++){\n                signedTxns[indexes[i]] = sigs[i];\n            }\n        }\n        function fullyPopulated(a) {\n            return a.every((v)=>v != null);\n        }\n        if (!fullyPopulated(signedTxns)) {\n            throw new Error(`Missing signatures. Got ${signedTxns}`);\n        }\n        const txIDs = signedTxns.map((stxn, index)=>{\n            try {\n                return _encoding_encoding_js__WEBPACK_IMPORTED_MODULE_2__.decodeMsgpack(stxn, _signedTransaction_js__WEBPACK_IMPORTED_MODULE_7__.SignedTransaction).txn.txID();\n            } catch (err) {\n                throw new Error(`Cannot decode signed transaction at index ${index}. ${err}`);\n            }\n        });\n        this.signedTxns = signedTxns;\n        this.txIDs = txIDs;\n        this.status = AtomicTransactionComposerStatus.SIGNED;\n        return signedTxns;\n    }\n    /**\n     * Send the transaction group to the network, but don't wait for it to be committed to a block. An\n     * error will be thrown if submission fails.\n     *\n     * The composer's status must be SUBMITTED or lower before calling this method. If submission is\n     * successful, this composer's status will update to SUBMITTED.\n     *\n     * Note: a group can only be submitted again if it fails.\n     *\n     * @param client - An Algodv2 client\n     *\n     * @returns A promise that, upon success, resolves to a list of TxIDs of the submitted transactions.\n     */ async submit(client) {\n        if (this.status > AtomicTransactionComposerStatus.SUBMITTED) {\n            throw new Error(\"Transaction group cannot be resubmitted\");\n        }\n        const stxns = await this.gatherSignatures();\n        await client.sendRawTransaction(stxns).do();\n        this.status = AtomicTransactionComposerStatus.SUBMITTED;\n        return this.txIDs;\n    }\n    /**\n     * Simulates the transaction group in the network.\n     *\n     * The composer will try to sign any transactions in the group, then simulate\n     * the results.\n     * Simulating the group will not change the composer's status.\n     *\n     * @param client - An Algodv2 client\n     * @param request - SimulateRequest with options in simulation.\n     *   If provided, the request's transaction group will be overrwritten by the composer's group,\n     *   only simulation related options will be used.\n     *\n     * @returns A promise that, upon success, resolves to an object containing an\n     *   array of results containing one element for each method call transaction\n     *   in this group (ABIResult[]) and the SimulateResponse object.\n     */ async simulate(client, request) {\n        if (this.status > AtomicTransactionComposerStatus.SUBMITTED) {\n            throw new Error(\"Simulated Transaction group has already been submitted to the network\");\n        }\n        const stxns = await this.gatherSignatures();\n        const txnObjects = stxns.map((stxn)=>_encoding_encoding_js__WEBPACK_IMPORTED_MODULE_2__.decodeMsgpack(stxn, _signedTransaction_js__WEBPACK_IMPORTED_MODULE_7__.SignedTransaction));\n        const currentRequest = request == null ? new _client_v2_algod_models_types_js__WEBPACK_IMPORTED_MODULE_1__.SimulateRequest({\n            txnGroups: []\n        }) : request;\n        currentRequest.txnGroups = [\n            new _client_v2_algod_models_types_js__WEBPACK_IMPORTED_MODULE_1__.SimulateRequestTransactionGroup({\n                txns: txnObjects\n            })\n        ];\n        const simulateResponse = await client.simulateTransactions(currentRequest).do();\n        // Parse method response\n        const methodResults = [];\n        for (const [txnIndex, method] of this.methodCalls){\n            const txID = this.txIDs[txnIndex];\n            const pendingInfo = simulateResponse.txnGroups[0].txnResults[txnIndex].txnResult;\n            const methodResult = {\n                txID,\n                rawReturnValue: new Uint8Array(),\n                method\n            };\n            methodResults.push(AtomicTransactionComposer.parseMethodResponse(method, methodResult, pendingInfo));\n        }\n        return {\n            methodResults,\n            simulateResponse\n        };\n    }\n    /**\n     * Send the transaction group to the network and wait until it's committed to a block. An error\n     * will be thrown if submission or execution fails.\n     *\n     * The composer's status must be SUBMITTED or lower before calling this method, since execution is\n     * only allowed once. If submission is successful, this composer's status will update to SUBMITTED.\n     * If the execution is also successful, this composer's status will update to COMMITTED.\n     *\n     * Note: a group can only be submitted again if it fails.\n     *\n     * @param client - An Algodv2 client\n     * @param waitRounds - The maximum number of rounds to wait for transaction confirmation\n     *\n     * @returns A promise that, upon success, resolves to an object containing the confirmed round for\n     *   this transaction, the txIDs of the submitted transactions, and an array of results containing\n     *   one element for each method call transaction in this group.\n     */ async execute(client, waitRounds) {\n        if (this.status === AtomicTransactionComposerStatus.COMMITTED) {\n            throw new Error(\"Transaction group has already been executed successfully\");\n        }\n        const txIDs = await this.submit(client);\n        this.status = AtomicTransactionComposerStatus.SUBMITTED;\n        const firstMethodCallIndex = this.transactions.findIndex((_, index)=>this.methodCalls.has(index));\n        const indexToWaitFor = firstMethodCallIndex === -1 ? 0 : firstMethodCallIndex;\n        const confirmedTxnInfo = await (0,_wait_js__WEBPACK_IMPORTED_MODULE_10__.waitForConfirmation)(client, txIDs[indexToWaitFor], waitRounds);\n        this.status = AtomicTransactionComposerStatus.COMMITTED;\n        const confirmedRound = confirmedTxnInfo.confirmedRound;\n        const methodResults = [];\n        for (const [txnIndex, method] of this.methodCalls){\n            const txID = txIDs[txnIndex];\n            let methodResult = {\n                txID,\n                rawReturnValue: new Uint8Array(),\n                method\n            };\n            try {\n                const pendingInfo = txnIndex === firstMethodCallIndex ? confirmedTxnInfo : await client.pendingTransactionInformation(txID).do();\n                methodResult = AtomicTransactionComposer.parseMethodResponse(method, methodResult, pendingInfo);\n            } catch (err) {\n                methodResult.decodeError = err;\n            }\n            methodResults.push(methodResult);\n        }\n        return {\n            confirmedRound,\n            txIDs,\n            methodResults\n        };\n    }\n    /**\n     * Parses a single ABI Method transaction log into a ABI result object.\n     *\n     * @param method\n     * @param methodResult\n     * @param pendingInfo\n     * @returns An ABIResult object\n     */ static parseMethodResponse(method, methodResult, pendingInfo) {\n        const returnedResult = methodResult;\n        try {\n            returnedResult.txInfo = pendingInfo;\n            if (method.returns.type !== \"void\") {\n                const logs = pendingInfo.logs || [];\n                if (logs.length === 0) {\n                    throw new Error(`App call transaction did not log a return value ${(0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_9__.stringifyJSON)(pendingInfo)}`);\n                }\n                const lastLog = logs[logs.length - 1];\n                if (lastLog.byteLength < 4 || !(0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_9__.arrayEqual)(lastLog.slice(0, 4), RETURN_PREFIX)) {\n                    throw new Error(`App call transaction did not log a ABI return value ${(0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_9__.stringifyJSON)(pendingInfo)}`);\n                }\n                returnedResult.rawReturnValue = new Uint8Array(lastLog.slice(4));\n                returnedResult.returnValue = method.returns.type.decode(methodResult.rawReturnValue);\n            }\n        } catch (err) {\n            returnedResult.decodeError = err;\n        }\n        return returnedResult;\n    }\n}\n/** The maximum size of an atomic transaction group. */ AtomicTransactionComposer.MAX_GROUP_SIZE = 16; //# sourceMappingURL=composer.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/composer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/convert.js":
/*!**************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/convert.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   INVALID_MICROALGOS_ERROR_MSG: () => (/* binding */ INVALID_MICROALGOS_ERROR_MSG),\n/* harmony export */   algosToMicroalgos: () => (/* binding */ algosToMicroalgos),\n/* harmony export */   microalgosToAlgos: () => (/* binding */ microalgosToAlgos)\n/* harmony export */ });\nconst MICROALGOS_TO_ALGOS_RATIO = 1e6;\nconst INVALID_MICROALGOS_ERROR_MSG = \"Microalgos should be positive and less than 2^53 - 1.\";\n/**\n * microalgosToAlgos converts microalgos to algos\n * @param microalgos - number\n * @returns number\n */ function microalgosToAlgos(microalgos) {\n    if (microalgos < 0 || !Number.isSafeInteger(microalgos)) {\n        throw new Error(INVALID_MICROALGOS_ERROR_MSG);\n    }\n    return microalgos / MICROALGOS_TO_ALGOS_RATIO;\n}\n/**\n * algosToMicroalgos converts algos to microalgos\n * @param algos - number\n * @returns number\n */ function algosToMicroalgos(algos) {\n    const microalgos = algos * MICROALGOS_TO_ALGOS_RATIO;\n    return Math.round(microalgos);\n} //# sourceMappingURL=convert.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9jb252ZXJ0LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLE1BQU1BLDRCQUE0QjtBQUMzQixNQUFNQywrQkFBK0Isd0RBQXdEO0FBQ3BHOzs7O0NBSUMsR0FDTSxTQUFTQyxrQkFBa0JDLFVBQVU7SUFDeEMsSUFBSUEsYUFBYSxLQUFLLENBQUNDLE9BQU9DLGFBQWEsQ0FBQ0YsYUFBYTtRQUNyRCxNQUFNLElBQUlHLE1BQU1MO0lBQ3BCO0lBQ0EsT0FBT0UsYUFBYUg7QUFDeEI7QUFDQTs7OztDQUlDLEdBQ00sU0FBU08sa0JBQWtCQyxLQUFLO0lBQ25DLE1BQU1MLGFBQWFLLFFBQVFSO0lBQzNCLE9BQU9TLEtBQUtDLEtBQUssQ0FBQ1A7QUFDdEIsRUFDQSxtQ0FBbUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hbGdvcmFuZC1jcm93ZGZ1bmRpbmctZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9jb252ZXJ0LmpzPzRlZDIiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgTUlDUk9BTEdPU19UT19BTEdPU19SQVRJTyA9IDFlNjtcbmV4cG9ydCBjb25zdCBJTlZBTElEX01JQ1JPQUxHT1NfRVJST1JfTVNHID0gJ01pY3JvYWxnb3Mgc2hvdWxkIGJlIHBvc2l0aXZlIGFuZCBsZXNzIHRoYW4gMl41MyAtIDEuJztcbi8qKlxuICogbWljcm9hbGdvc1RvQWxnb3MgY29udmVydHMgbWljcm9hbGdvcyB0byBhbGdvc1xuICogQHBhcmFtIG1pY3JvYWxnb3MgLSBudW1iZXJcbiAqIEByZXR1cm5zIG51bWJlclxuICovXG5leHBvcnQgZnVuY3Rpb24gbWljcm9hbGdvc1RvQWxnb3MobWljcm9hbGdvcykge1xuICAgIGlmIChtaWNyb2FsZ29zIDwgMCB8fCAhTnVtYmVyLmlzU2FmZUludGVnZXIobWljcm9hbGdvcykpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKElOVkFMSURfTUlDUk9BTEdPU19FUlJPUl9NU0cpO1xuICAgIH1cbiAgICByZXR1cm4gbWljcm9hbGdvcyAvIE1JQ1JPQUxHT1NfVE9fQUxHT1NfUkFUSU87XG59XG4vKipcbiAqIGFsZ29zVG9NaWNyb2FsZ29zIGNvbnZlcnRzIGFsZ29zIHRvIG1pY3JvYWxnb3NcbiAqIEBwYXJhbSBhbGdvcyAtIG51bWJlclxuICogQHJldHVybnMgbnVtYmVyXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhbGdvc1RvTWljcm9hbGdvcyhhbGdvcykge1xuICAgIGNvbnN0IG1pY3JvYWxnb3MgPSBhbGdvcyAqIE1JQ1JPQUxHT1NfVE9fQUxHT1NfUkFUSU87XG4gICAgcmV0dXJuIE1hdGgucm91bmQobWljcm9hbGdvcyk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb252ZXJ0LmpzLm1hcCJdLCJuYW1lcyI6WyJNSUNST0FMR09TX1RPX0FMR09TX1JBVElPIiwiSU5WQUxJRF9NSUNST0FMR09TX0VSUk9SX01TRyIsIm1pY3JvYWxnb3NUb0FsZ29zIiwibWljcm9hbGdvcyIsIk51bWJlciIsImlzU2FmZUludGVnZXIiLCJFcnJvciIsImFsZ29zVG9NaWNyb2FsZ29zIiwiYWxnb3MiLCJNYXRoIiwicm91bmQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/convert.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/dryrun.js":
/*!*************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/dryrun.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createDryrun: () => (/* binding */ createDryrun),\n/* harmony export */   dryrunTxnResultAppTrace: () => (/* binding */ dryrunTxnResultAppTrace),\n/* harmony export */   dryrunTxnResultLogicSigTrace: () => (/* binding */ dryrunTxnResultLogicSigTrace)\n/* harmony export */ });\n/* harmony import */ var _client_v2_algod_models_types_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./client/v2/algod/models/types.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/models/types.js\");\n/* harmony import */ var _encoding_address_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./encoding/address.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/address.js\");\n/* harmony import */ var _encoding_binarydata_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./encoding/binarydata.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/binarydata.js\");\n/* harmony import */ var _types_transactions_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./types/transactions/index.js */ \"(ssr)/./node_modules/algosdk/dist/esm/types/transactions/index.js\");\n/* harmony import */ var _utils_utils_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils/utils.js */ \"(ssr)/./node_modules/algosdk/dist/esm/utils/utils.js\");\n\n\n\n\n\nconst defaultAppId = 1380011588;\nconst defaultMaxWidth = 30;\n/**\n * createDryrun takes an Algod Client (from algod.AlgodV2Client) and an array of Signed Transactions\n * from (transaction.SignedTransaction) and creates a DryrunRequest object with relevant balances\n * @param client - the AlgodClient to make requests against\n * @param txns - the array of SignedTransaction to use for generating the DryrunRequest object\n * @param protocolVersion - the string representing the protocol version to use\n * @param latestTimestamp - the timestamp\n * @param round - the round available to some TEAL scripts. Defaults to the current round on the network.\n * @param sources - TEAL source text that gets uploaded, compiled, and inserted into transactions or application state.\n * @returns the DryrunRequest object constructed from the SignedTransactions passed\n */ async function createDryrun({ client, txns, protocolVersion, latestTimestamp, round, sources }) {\n    const appInfos = [];\n    const acctInfos = [];\n    const apps = [];\n    const assets = [];\n    const accts = [];\n    for (const t of txns){\n        if (t.txn.type === _types_transactions_index_js__WEBPACK_IMPORTED_MODULE_3__.TransactionType.appl) {\n            accts.push(t.txn.sender.toString());\n            accts.push(...t.txn.applicationCall.accounts.map((a)=>a.toString()));\n            apps.push(...t.txn.applicationCall.foreignApps);\n            accts.push(...t.txn.applicationCall.foreignApps.map(_encoding_address_js__WEBPACK_IMPORTED_MODULE_1__.getApplicationAddress).map((a)=>a.toString()));\n            assets.push(...t.txn.applicationCall.foreignAssets);\n            // Create application,\n            if (t.txn.applicationCall.appIndex === BigInt(0)) {\n                appInfos.push(new _client_v2_algod_models_types_js__WEBPACK_IMPORTED_MODULE_0__.Application({\n                    id: defaultAppId,\n                    params: new _client_v2_algod_models_types_js__WEBPACK_IMPORTED_MODULE_0__.ApplicationParams({\n                        creator: t.txn.sender.toString(),\n                        approvalProgram: t.txn.applicationCall.approvalProgram,\n                        clearStateProgram: t.txn.applicationCall.clearProgram,\n                        localStateSchema: new _client_v2_algod_models_types_js__WEBPACK_IMPORTED_MODULE_0__.ApplicationStateSchema({\n                            numUint: t.txn.applicationCall.numLocalInts,\n                            numByteSlice: t.txn.applicationCall.numLocalByteSlices\n                        }),\n                        globalStateSchema: new _client_v2_algod_models_types_js__WEBPACK_IMPORTED_MODULE_0__.ApplicationStateSchema({\n                            numUint: t.txn.applicationCall.numGlobalInts,\n                            numByteSlice: t.txn.applicationCall.numGlobalByteSlices\n                        })\n                    })\n                }));\n            } else {\n                const { appIndex } = t.txn.applicationCall;\n                apps.push(appIndex);\n                accts.push((0,_encoding_address_js__WEBPACK_IMPORTED_MODULE_1__.getApplicationAddress)(appIndex).toString());\n            }\n        }\n    }\n    // Dedupe and add creator to accts array\n    const assetPromises = [];\n    for (const assetId of new Set(assets)){\n        assetPromises.push(client.getAssetByID(assetId).do().then((assetInfo)=>{\n            accts.push(assetInfo.params.creator);\n        }));\n    }\n    // Wait for assets to finish since we append to accts array\n    await Promise.all(assetPromises);\n    // Dedupe and get app info for all apps\n    const appPromises = [];\n    for (const appId of new Set(apps)){\n        appPromises.push(client.getApplicationByID(appId).do().then((appInfo)=>{\n            appInfos.push(appInfo);\n            accts.push(appInfo.params.creator.toString());\n        }));\n    }\n    await Promise.all(appPromises);\n    const acctPromises = [];\n    for (const acct of new Set(accts)){\n        acctPromises.push(client.accountInformation(acct).do().then((acctInfo)=>{\n            acctInfos.push(acctInfo);\n        }));\n    }\n    await Promise.all(acctPromises);\n    return new _client_v2_algod_models_types_js__WEBPACK_IMPORTED_MODULE_0__.DryrunRequest({\n        txns: txns.slice(),\n        accounts: acctInfos,\n        apps: appInfos,\n        latestTimestamp: latestTimestamp ?? 0,\n        round: round ?? 0,\n        protocolVersion: protocolVersion ?? \"\",\n        sources: sources ?? []\n    });\n}\nfunction truncate(str, maxValueWidth) {\n    if (str.length > maxValueWidth && maxValueWidth > 0) {\n        return `${str.slice(0, maxValueWidth)}...`;\n    }\n    return str;\n}\nfunction scratchToString(prevScratch, currScratch) {\n    if (currScratch.length === 0) return \"\";\n    let newScratchIdx = null;\n    for(let idx = 0; idx < currScratch.length; idx++){\n        if (idx > prevScratch.length) {\n            newScratchIdx = idx;\n            continue;\n        }\n        if ((0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_4__.stringifyJSON)(prevScratch[idx]) !== (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_4__.stringifyJSON)(currScratch[idx])) {\n            newScratchIdx = idx;\n        }\n    }\n    if (newScratchIdx == null) return \"\";\n    const newScratch = currScratch[newScratchIdx];\n    if (newScratch.bytes.length > 0) {\n        return `${newScratchIdx} = 0x${(0,_encoding_binarydata_js__WEBPACK_IMPORTED_MODULE_2__.bytesToHex)(newScratch.bytes)}`;\n    }\n    return `${newScratchIdx} = ${newScratch.uint.toString()}`;\n}\nfunction stackToString(stack, reverse) {\n    const svs = reverse ? stack.reverse() : stack;\n    return `[${svs.map((sv)=>{\n        switch(sv.type){\n            case 1:\n                return `0x${(0,_encoding_binarydata_js__WEBPACK_IMPORTED_MODULE_2__.bytesToHex)(sv.bytes)}`;\n            case 2:\n                return sv.uint.toString();\n            default:\n                return \"\";\n        }\n    }).join(\", \")}]`;\n}\nfunction dryrunTrace(trace, disassembly, spc) {\n    const maxWidth = spc.maxValueWidth || defaultMaxWidth;\n    // Create the array of arrays, each sub array contains N columns\n    const lines = [\n        [\n            \"pc#\",\n            \"ln#\",\n            \"source\",\n            \"scratch\",\n            \"stack\"\n        ]\n    ];\n    for(let idx = 0; idx < trace.length; idx++){\n        const { line, error, pc, scratch, stack } = trace[idx];\n        const currScratch = scratch !== undefined ? scratch : [];\n        const prevScratch = idx > 0 && trace[idx - 1].scratch !== undefined ? trace[idx - 1].scratch : [];\n        const src = !error ? disassembly[line] : `!! ${error} !!`;\n        lines.push([\n            pc.toString().padEnd(3, \" \"),\n            line.toString().padEnd(3, \" \"),\n            truncate(src, maxWidth),\n            truncate(scratchToString(prevScratch, currScratch), maxWidth),\n            truncate(stackToString(stack, spc.topOfStackFirst), maxWidth)\n        ]);\n    }\n    // Get the max length for each column\n    const maxLengths = lines.reduce((prev, curr)=>{\n        const newVal = new Array(lines[0].length).fill(0);\n        for(let idx = 0; idx < prev.length; idx++){\n            newVal[idx] = curr[idx].length > prev[idx] ? curr[idx].length : prev[idx];\n        }\n        return newVal;\n    }, new Array(lines[0].length).fill(0));\n    return `${lines.map((line)=>line.map((v, idx)=>v.padEnd(maxLengths[idx] + 1, \" \")).join(\"|\").trim()).join(\"\\n\")}\\n`;\n}\nfunction dryrunTxnResultAppTrace(result, spc) {\n    if (!result.appCallTrace || !result.disassembly) return \"\";\n    let conf = spc;\n    if (spc !== undefined) conf = spc;\n    else {\n        conf = {\n            maxValueWidth: defaultMaxWidth,\n            topOfStackFirst: false\n        };\n    }\n    return dryrunTrace(result.appCallTrace, result.disassembly, conf);\n}\nfunction dryrunTxnResultLogicSigTrace(result, spc) {\n    if (!result.logicSigTrace || !result.logicSigDisassembly) return \"\";\n    let conf;\n    if (spc !== undefined) conf = spc;\n    else {\n        conf = {\n            maxValueWidth: defaultMaxWidth,\n            topOfStackFirst: true\n        };\n    }\n    return dryrunTrace(result.logicSigTrace, result.logicSigDisassembly, conf);\n} //# sourceMappingURL=dryrun.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/dryrun.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/encoding/address.js":
/*!***********************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/encoding/address.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ALGORAND_ADDRESS_BYTE_LENGTH: () => (/* binding */ ALGORAND_ADDRESS_BYTE_LENGTH),\n/* harmony export */   ALGORAND_ADDRESS_LENGTH: () => (/* binding */ ALGORAND_ADDRESS_LENGTH),\n/* harmony export */   ALGORAND_CHECKSUM_BYTE_LENGTH: () => (/* binding */ ALGORAND_CHECKSUM_BYTE_LENGTH),\n/* harmony export */   ALGORAND_ZERO_ADDRESS_STRING: () => (/* binding */ ALGORAND_ZERO_ADDRESS_STRING),\n/* harmony export */   Address: () => (/* binding */ Address),\n/* harmony export */   CHECKSUM_ADDRESS_ERROR_MSG: () => (/* binding */ CHECKSUM_ADDRESS_ERROR_MSG),\n/* harmony export */   MALFORMED_ADDRESS_ERROR_MSG: () => (/* binding */ MALFORMED_ADDRESS_ERROR_MSG),\n/* harmony export */   decodeAddress: () => (/* binding */ decodeAddress),\n/* harmony export */   encodeAddress: () => (/* binding */ encodeAddress),\n/* harmony export */   getApplicationAddress: () => (/* binding */ getApplicationAddress),\n/* harmony export */   isValidAddress: () => (/* binding */ isValidAddress)\n/* harmony export */ });\n/* harmony import */ var hi_base32__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! hi-base32 */ \"(ssr)/./node_modules/hi-base32/src/base32.js\");\n/* harmony import */ var _nacl_naclWrappers_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../nacl/naclWrappers.js */ \"(ssr)/./node_modules/algosdk/dist/esm/nacl/naclWrappers.js\");\n/* harmony import */ var _utils_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/utils.js */ \"(ssr)/./node_modules/algosdk/dist/esm/utils/utils.js\");\n/* harmony import */ var _uint64_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./uint64.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/uint64.js\");\n/* harmony import */ var _binarydata_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./binarydata.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/binarydata.js\");\n\n\n\n\n\nconst ALGORAND_ADDRESS_BYTE_LENGTH = 36;\nconst ALGORAND_CHECKSUM_BYTE_LENGTH = 4;\nconst ALGORAND_ADDRESS_LENGTH = 58;\nconst ALGORAND_ZERO_ADDRESS_STRING = \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ\";\nconst MALFORMED_ADDRESS_ERROR_MSG = \"address seems to be malformed\";\nconst CHECKSUM_ADDRESS_ERROR_MSG = \"wrong checksum for address\";\nfunction checksumFromPublicKey(pk) {\n    return Uint8Array.from(_nacl_naclWrappers_js__WEBPACK_IMPORTED_MODULE_1__.genericHash(pk).slice(_nacl_naclWrappers_js__WEBPACK_IMPORTED_MODULE_1__.HASH_BYTES_LENGTH - ALGORAND_CHECKSUM_BYTE_LENGTH, _nacl_naclWrappers_js__WEBPACK_IMPORTED_MODULE_1__.HASH_BYTES_LENGTH));\n}\n/**\n * Represents an Algorand address\n */ class Address {\n    /**\n     * Create a new Address object from its binary form.\n     * @param publicKey - The binary form of the address. Must be 32 bytes.\n     */ constructor(publicKey){\n        if (!(publicKey instanceof Uint8Array)) {\n            throw new Error(`${MALFORMED_ADDRESS_ERROR_MSG}: ${publicKey} is not Uint8Array, type ${typeof publicKey}`);\n        }\n        if (publicKey.length !== ALGORAND_ADDRESS_BYTE_LENGTH - ALGORAND_CHECKSUM_BYTE_LENGTH) throw new Error(`${MALFORMED_ADDRESS_ERROR_MSG}: 0x${(0,_binarydata_js__WEBPACK_IMPORTED_MODULE_4__.bytesToHex)(publicKey)}, length ${publicKey.length}`);\n        this.publicKey = publicKey;\n    }\n    /**\n     * Check if the address is equal to another address.\n     */ equals(other) {\n        return other instanceof Address && _utils_utils_js__WEBPACK_IMPORTED_MODULE_2__.arrayEqual(this.publicKey, other.publicKey);\n    }\n    /**\n     * Compute the 4 byte checksum of the address.\n     */ checksum() {\n        return checksumFromPublicKey(this.publicKey);\n    }\n    /**\n     * Encode the address into a string form.\n     */ toString() {\n        const addr = hi_base32__WEBPACK_IMPORTED_MODULE_0__.encode(_utils_utils_js__WEBPACK_IMPORTED_MODULE_2__.concatArrays(this.publicKey, this.checksum()));\n        return addr.slice(0, ALGORAND_ADDRESS_LENGTH); // removing the extra '===='\n    }\n    /**\n     * Decode an address from a string.\n     * @param address - The address to decode. Must be 58 bytes long.\n     * @returns An Address object corresponding to the input string.\n     */ static fromString(address) {\n        if (typeof address !== \"string\") throw new Error(`${MALFORMED_ADDRESS_ERROR_MSG}: expected string, got ${typeof address}, ${address}`);\n        if (address.length !== ALGORAND_ADDRESS_LENGTH) throw new Error(`${MALFORMED_ADDRESS_ERROR_MSG}: expected length ${ALGORAND_ADDRESS_LENGTH}, got ${address.length}: ${address}`);\n        // try to decode\n        const decoded = hi_base32__WEBPACK_IMPORTED_MODULE_0__.decode.asBytes(address);\n        // Sanity check\n        if (decoded.length !== ALGORAND_ADDRESS_BYTE_LENGTH) throw new Error(`${MALFORMED_ADDRESS_ERROR_MSG}: expected byte length ${ALGORAND_ADDRESS_BYTE_LENGTH}, got ${decoded.length}`);\n        // Find publickey and checksum\n        const pk = new Uint8Array(decoded.slice(0, ALGORAND_ADDRESS_BYTE_LENGTH - ALGORAND_CHECKSUM_BYTE_LENGTH));\n        const cs = new Uint8Array(decoded.slice(_nacl_naclWrappers_js__WEBPACK_IMPORTED_MODULE_1__.PUBLIC_KEY_LENGTH, ALGORAND_ADDRESS_BYTE_LENGTH));\n        const checksum = checksumFromPublicKey(pk);\n        // Check if the checksum and the address are equal\n        if (!_utils_utils_js__WEBPACK_IMPORTED_MODULE_2__.arrayEqual(checksum, cs)) throw new Error(CHECKSUM_ADDRESS_ERROR_MSG);\n        return new Address(pk);\n    }\n    /**\n     * Get the zero address.\n     */ static zeroAddress() {\n        return new Address(new Uint8Array(ALGORAND_ADDRESS_BYTE_LENGTH - ALGORAND_CHECKSUM_BYTE_LENGTH));\n    }\n}\n/**\n * decodeAddress takes an Algorand address in string form and decodes it into a Uint8Array.\n * @param address - an Algorand address with checksum.\n * @returns the decoded form of the address's public key and checksum\n */ function decodeAddress(address) {\n    return Address.fromString(address);\n}\n/**\n * isValidAddress checks if a string is a valid Algorand address.\n * @param address - an Algorand address with checksum.\n * @returns true if valid, false otherwise\n */ function isValidAddress(address) {\n    // Try to decode\n    try {\n        Address.fromString(address);\n    } catch (e) {\n        return false;\n    }\n    return true;\n}\n/**\n * encodeAddress takes an Algorand address as a Uint8Array and encodes it into a string with checksum.\n * @param address - a raw Algorand address\n * @returns the address and checksum encoded as a string.\n */ function encodeAddress(address) {\n    return new Address(address).toString();\n}\nconst APP_ID_PREFIX = new TextEncoder().encode(\"appID\");\n/**\n * Get the escrow address of an application.\n * @param appID - The ID of the application.\n * @returns The address corresponding to that application's escrow account.\n */ function getApplicationAddress(appID) {\n    const toBeSigned = _utils_utils_js__WEBPACK_IMPORTED_MODULE_2__.concatArrays(APP_ID_PREFIX, (0,_uint64_js__WEBPACK_IMPORTED_MODULE_3__.encodeUint64)(appID));\n    const hash = _nacl_naclWrappers_js__WEBPACK_IMPORTED_MODULE_1__.genericHash(toBeSigned);\n    return new Address(Uint8Array.from(hash));\n} //# sourceMappingURL=address.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9lbmNvZGluZy9hZGRyZXNzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBK0I7QUFDaUI7QUFDTDtBQUNBO0FBQ0U7QUFDdEMsTUFBTUssK0JBQStCLEdBQUc7QUFDeEMsTUFBTUMsZ0NBQWdDLEVBQUU7QUFDeEMsTUFBTUMsMEJBQTBCLEdBQUc7QUFDbkMsTUFBTUMsK0JBQStCLDZEQUE2RDtBQUNsRyxNQUFNQyw4QkFBOEIsZ0NBQWdDO0FBQ3BFLE1BQU1DLDZCQUE2Qiw2QkFBNkI7QUFDdkUsU0FBU0Msc0JBQXNCQyxFQUFFO0lBQzdCLE9BQU9DLFdBQVdDLElBQUksQ0FBQ2IsOERBQ1AsQ0FBQ1csSUFDWkksS0FBSyxDQUFDZixvRUFBc0IsR0FBR0ssK0JBQStCTCxvRUFBc0I7QUFDN0Y7QUFDQTs7Q0FFQyxHQUNNLE1BQU1pQjtJQUNUOzs7S0FHQyxHQUNEQyxZQUFZQyxTQUFTLENBQUU7UUFDbkIsSUFBSSxDQUFFQSxDQUFBQSxxQkFBcUJQLFVBQVMsR0FBSTtZQUNwQyxNQUFNLElBQUlRLE1BQU0sQ0FBQyxFQUFFWiw0QkFBNEIsRUFBRSxFQUFFVyxVQUFVLHlCQUF5QixFQUFFLE9BQU9BLFVBQVUsQ0FBQztRQUM5RztRQUNBLElBQUlBLFVBQVVFLE1BQU0sS0FDaEJqQiwrQkFBK0JDLCtCQUMvQixNQUFNLElBQUllLE1BQU0sQ0FBQyxFQUFFWiw0QkFBNEIsSUFBSSxFQUFFTCwwREFBVUEsQ0FBQ2dCLFdBQVcsU0FBUyxFQUFFQSxVQUFVRSxNQUFNLENBQUMsQ0FBQztRQUM1RyxJQUFJLENBQUNGLFNBQVMsR0FBR0E7SUFDckI7SUFDQTs7S0FFQyxHQUNERyxPQUFPQyxLQUFLLEVBQUU7UUFDVixPQUFRQSxpQkFBaUJOLFdBQ3JCaEIsdURBQWdCLENBQUMsSUFBSSxDQUFDa0IsU0FBUyxFQUFFSSxNQUFNSixTQUFTO0lBQ3hEO0lBQ0E7O0tBRUMsR0FDRE0sV0FBVztRQUNQLE9BQU9mLHNCQUFzQixJQUFJLENBQUNTLFNBQVM7SUFDL0M7SUFDQTs7S0FFQyxHQUNETyxXQUFXO1FBQ1AsTUFBTUMsT0FBTzVCLDZDQUFhLENBQUNFLHlEQUFrQixDQUFDLElBQUksQ0FBQ2tCLFNBQVMsRUFBRSxJQUFJLENBQUNNLFFBQVE7UUFDM0UsT0FBT0UsS0FBS1osS0FBSyxDQUFDLEdBQUdULDBCQUEwQiw0QkFBNEI7SUFDL0U7SUFDQTs7OztLQUlDLEdBQ0QsT0FBT3dCLFdBQVdDLE9BQU8sRUFBRTtRQUN2QixJQUFJLE9BQU9BLFlBQVksVUFDbkIsTUFBTSxJQUFJWCxNQUFNLENBQUMsRUFBRVosNEJBQTRCLHVCQUF1QixFQUFFLE9BQU91QixRQUFRLEVBQUUsRUFBRUEsUUFBUSxDQUFDO1FBQ3hHLElBQUlBLFFBQVFWLE1BQU0sS0FBS2YseUJBQ25CLE1BQU0sSUFBSWMsTUFBTSxDQUFDLEVBQUVaLDRCQUE0QixrQkFBa0IsRUFBRUYsd0JBQXdCLE1BQU0sRUFBRXlCLFFBQVFWLE1BQU0sQ0FBQyxFQUFFLEVBQUVVLFFBQVEsQ0FBQztRQUNuSSxnQkFBZ0I7UUFDaEIsTUFBTUMsVUFBVWpDLDZDQUFhLENBQUNtQyxPQUFPLENBQUNIO1FBQ3RDLGVBQWU7UUFDZixJQUFJQyxRQUFRWCxNQUFNLEtBQUtqQiw4QkFDbkIsTUFBTSxJQUFJZ0IsTUFBTSxDQUFDLEVBQUVaLDRCQUE0Qix1QkFBdUIsRUFBRUosNkJBQTZCLE1BQU0sRUFBRTRCLFFBQVFYLE1BQU0sQ0FBQyxDQUFDO1FBQ2pJLDhCQUE4QjtRQUM5QixNQUFNVixLQUFLLElBQUlDLFdBQVdvQixRQUFRakIsS0FBSyxDQUFDLEdBQUdYLCtCQUErQkM7UUFDMUUsTUFBTThCLEtBQUssSUFBSXZCLFdBQVdvQixRQUFRakIsS0FBSyxDQUFDZixvRUFBc0IsRUFBRUk7UUFDaEUsTUFBTXFCLFdBQVdmLHNCQUFzQkM7UUFDdkMsa0RBQWtEO1FBQ2xELElBQUksQ0FBQ1YsdURBQWdCLENBQUN3QixVQUFVVSxLQUM1QixNQUFNLElBQUlmLE1BQU1YO1FBQ3BCLE9BQU8sSUFBSVEsUUFBUU47SUFDdkI7SUFDQTs7S0FFQyxHQUNELE9BQU8wQixjQUFjO1FBQ2pCLE9BQU8sSUFBSXBCLFFBQVEsSUFBSUwsV0FBV1IsK0JBQStCQztJQUNyRTtBQUNKO0FBQ0E7Ozs7Q0FJQyxHQUNNLFNBQVNpQyxjQUFjUCxPQUFPO0lBQ2pDLE9BQU9kLFFBQVFhLFVBQVUsQ0FBQ0M7QUFDOUI7QUFDQTs7OztDQUlDLEdBQ00sU0FBU1EsZUFBZVIsT0FBTztJQUNsQyxnQkFBZ0I7SUFDaEIsSUFBSTtRQUNBZCxRQUFRYSxVQUFVLENBQUNDO0lBQ3ZCLEVBQ0EsT0FBT1MsR0FBRztRQUNOLE9BQU87SUFDWDtJQUNBLE9BQU87QUFDWDtBQUNBOzs7O0NBSUMsR0FDTSxTQUFTQyxjQUFjVixPQUFPO0lBQ2pDLE9BQU8sSUFBSWQsUUFBUWMsU0FBU0wsUUFBUTtBQUN4QztBQUNBLE1BQU1nQixnQkFBZ0IsSUFBSUMsY0FBY2YsTUFBTSxDQUFDO0FBQy9DOzs7O0NBSUMsR0FDTSxTQUFTZ0Isc0JBQXNCQyxLQUFLO0lBQ3ZDLE1BQU1DLGFBQWE3Qyx5REFBa0IsQ0FBQ3lDLGVBQWV4Qyx3REFBWUEsQ0FBQzJDO0lBQ2xFLE1BQU1FLE9BQU8vQyw4REFBZ0IsQ0FBQzhDO0lBQzlCLE9BQU8sSUFBSTdCLFFBQVFMLFdBQVdDLElBQUksQ0FBQ2tDO0FBQ3ZDLEVBQ0EsbUNBQW1DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWxnb3JhbmQtY3Jvd2RmdW5kaW5nLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vZW5jb2RpbmcvYWRkcmVzcy5qcz9iMTc5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBiYXNlMzIgZnJvbSAnaGktYmFzZTMyJztcbmltcG9ydCAqIGFzIG5hY2wgZnJvbSAnLi4vbmFjbC9uYWNsV3JhcHBlcnMuanMnO1xuaW1wb3J0ICogYXMgdXRpbHMgZnJvbSAnLi4vdXRpbHMvdXRpbHMuanMnO1xuaW1wb3J0IHsgZW5jb2RlVWludDY0IH0gZnJvbSAnLi91aW50NjQuanMnO1xuaW1wb3J0IHsgYnl0ZXNUb0hleCB9IGZyb20gJy4vYmluYXJ5ZGF0YS5qcyc7XG5leHBvcnQgY29uc3QgQUxHT1JBTkRfQUREUkVTU19CWVRFX0xFTkdUSCA9IDM2O1xuZXhwb3J0IGNvbnN0IEFMR09SQU5EX0NIRUNLU1VNX0JZVEVfTEVOR1RIID0gNDtcbmV4cG9ydCBjb25zdCBBTEdPUkFORF9BRERSRVNTX0xFTkdUSCA9IDU4O1xuZXhwb3J0IGNvbnN0IEFMR09SQU5EX1pFUk9fQUREUkVTU19TVFJJTkcgPSAnQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQVk1SEZLUSc7XG5leHBvcnQgY29uc3QgTUFMRk9STUVEX0FERFJFU1NfRVJST1JfTVNHID0gJ2FkZHJlc3Mgc2VlbXMgdG8gYmUgbWFsZm9ybWVkJztcbmV4cG9ydCBjb25zdCBDSEVDS1NVTV9BRERSRVNTX0VSUk9SX01TRyA9ICd3cm9uZyBjaGVja3N1bSBmb3IgYWRkcmVzcyc7XG5mdW5jdGlvbiBjaGVja3N1bUZyb21QdWJsaWNLZXkocGspIHtcbiAgICByZXR1cm4gVWludDhBcnJheS5mcm9tKG5hY2xcbiAgICAgICAgLmdlbmVyaWNIYXNoKHBrKVxuICAgICAgICAuc2xpY2UobmFjbC5IQVNIX0JZVEVTX0xFTkdUSCAtIEFMR09SQU5EX0NIRUNLU1VNX0JZVEVfTEVOR1RILCBuYWNsLkhBU0hfQllURVNfTEVOR1RIKSk7XG59XG4vKipcbiAqIFJlcHJlc2VudHMgYW4gQWxnb3JhbmQgYWRkcmVzc1xuICovXG5leHBvcnQgY2xhc3MgQWRkcmVzcyB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbmV3IEFkZHJlc3Mgb2JqZWN0IGZyb20gaXRzIGJpbmFyeSBmb3JtLlxuICAgICAqIEBwYXJhbSBwdWJsaWNLZXkgLSBUaGUgYmluYXJ5IGZvcm0gb2YgdGhlIGFkZHJlc3MuIE11c3QgYmUgMzIgYnl0ZXMuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IocHVibGljS2V5KSB7XG4gICAgICAgIGlmICghKHB1YmxpY0tleSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7TUFMRk9STUVEX0FERFJFU1NfRVJST1JfTVNHfTogJHtwdWJsaWNLZXl9IGlzIG5vdCBVaW50OEFycmF5LCB0eXBlICR7dHlwZW9mIHB1YmxpY0tleX1gKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocHVibGljS2V5Lmxlbmd0aCAhPT1cbiAgICAgICAgICAgIEFMR09SQU5EX0FERFJFU1NfQllURV9MRU5HVEggLSBBTEdPUkFORF9DSEVDS1NVTV9CWVRFX0xFTkdUSClcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgJHtNQUxGT1JNRURfQUREUkVTU19FUlJPUl9NU0d9OiAweCR7Ynl0ZXNUb0hleChwdWJsaWNLZXkpfSwgbGVuZ3RoICR7cHVibGljS2V5Lmxlbmd0aH1gKTtcbiAgICAgICAgdGhpcy5wdWJsaWNLZXkgPSBwdWJsaWNLZXk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENoZWNrIGlmIHRoZSBhZGRyZXNzIGlzIGVxdWFsIHRvIGFub3RoZXIgYWRkcmVzcy5cbiAgICAgKi9cbiAgICBlcXVhbHMob3RoZXIpIHtcbiAgICAgICAgcmV0dXJuIChvdGhlciBpbnN0YW5jZW9mIEFkZHJlc3MgJiZcbiAgICAgICAgICAgIHV0aWxzLmFycmF5RXF1YWwodGhpcy5wdWJsaWNLZXksIG90aGVyLnB1YmxpY0tleSkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb21wdXRlIHRoZSA0IGJ5dGUgY2hlY2tzdW0gb2YgdGhlIGFkZHJlc3MuXG4gICAgICovXG4gICAgY2hlY2tzdW0oKSB7XG4gICAgICAgIHJldHVybiBjaGVja3N1bUZyb21QdWJsaWNLZXkodGhpcy5wdWJsaWNLZXkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBFbmNvZGUgdGhlIGFkZHJlc3MgaW50byBhIHN0cmluZyBmb3JtLlxuICAgICAqL1xuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICBjb25zdCBhZGRyID0gYmFzZTMyLmVuY29kZSh1dGlscy5jb25jYXRBcnJheXModGhpcy5wdWJsaWNLZXksIHRoaXMuY2hlY2tzdW0oKSkpO1xuICAgICAgICByZXR1cm4gYWRkci5zbGljZSgwLCBBTEdPUkFORF9BRERSRVNTX0xFTkdUSCk7IC8vIHJlbW92aW5nIHRoZSBleHRyYSAnPT09PSdcbiAgICB9XG4gICAgLyoqXG4gICAgICogRGVjb2RlIGFuIGFkZHJlc3MgZnJvbSBhIHN0cmluZy5cbiAgICAgKiBAcGFyYW0gYWRkcmVzcyAtIFRoZSBhZGRyZXNzIHRvIGRlY29kZS4gTXVzdCBiZSA1OCBieXRlcyBsb25nLlxuICAgICAqIEByZXR1cm5zIEFuIEFkZHJlc3Mgb2JqZWN0IGNvcnJlc3BvbmRpbmcgdG8gdGhlIGlucHV0IHN0cmluZy5cbiAgICAgKi9cbiAgICBzdGF0aWMgZnJvbVN0cmluZyhhZGRyZXNzKSB7XG4gICAgICAgIGlmICh0eXBlb2YgYWRkcmVzcyAhPT0gJ3N0cmluZycpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7TUFMRk9STUVEX0FERFJFU1NfRVJST1JfTVNHfTogZXhwZWN0ZWQgc3RyaW5nLCBnb3QgJHt0eXBlb2YgYWRkcmVzc30sICR7YWRkcmVzc31gKTtcbiAgICAgICAgaWYgKGFkZHJlc3MubGVuZ3RoICE9PSBBTEdPUkFORF9BRERSRVNTX0xFTkdUSClcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgJHtNQUxGT1JNRURfQUREUkVTU19FUlJPUl9NU0d9OiBleHBlY3RlZCBsZW5ndGggJHtBTEdPUkFORF9BRERSRVNTX0xFTkdUSH0sIGdvdCAke2FkZHJlc3MubGVuZ3RofTogJHthZGRyZXNzfWApO1xuICAgICAgICAvLyB0cnkgdG8gZGVjb2RlXG4gICAgICAgIGNvbnN0IGRlY29kZWQgPSBiYXNlMzIuZGVjb2RlLmFzQnl0ZXMoYWRkcmVzcyk7XG4gICAgICAgIC8vIFNhbml0eSBjaGVja1xuICAgICAgICBpZiAoZGVjb2RlZC5sZW5ndGggIT09IEFMR09SQU5EX0FERFJFU1NfQllURV9MRU5HVEgpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7TUFMRk9STUVEX0FERFJFU1NfRVJST1JfTVNHfTogZXhwZWN0ZWQgYnl0ZSBsZW5ndGggJHtBTEdPUkFORF9BRERSRVNTX0JZVEVfTEVOR1RIfSwgZ290ICR7ZGVjb2RlZC5sZW5ndGh9YCk7XG4gICAgICAgIC8vIEZpbmQgcHVibGlja2V5IGFuZCBjaGVja3N1bVxuICAgICAgICBjb25zdCBwayA9IG5ldyBVaW50OEFycmF5KGRlY29kZWQuc2xpY2UoMCwgQUxHT1JBTkRfQUREUkVTU19CWVRFX0xFTkdUSCAtIEFMR09SQU5EX0NIRUNLU1VNX0JZVEVfTEVOR1RIKSk7XG4gICAgICAgIGNvbnN0IGNzID0gbmV3IFVpbnQ4QXJyYXkoZGVjb2RlZC5zbGljZShuYWNsLlBVQkxJQ19LRVlfTEVOR1RILCBBTEdPUkFORF9BRERSRVNTX0JZVEVfTEVOR1RIKSk7XG4gICAgICAgIGNvbnN0IGNoZWNrc3VtID0gY2hlY2tzdW1Gcm9tUHVibGljS2V5KHBrKTtcbiAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIGNoZWNrc3VtIGFuZCB0aGUgYWRkcmVzcyBhcmUgZXF1YWxcbiAgICAgICAgaWYgKCF1dGlscy5hcnJheUVxdWFsKGNoZWNrc3VtLCBjcykpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoQ0hFQ0tTVU1fQUREUkVTU19FUlJPUl9NU0cpO1xuICAgICAgICByZXR1cm4gbmV3IEFkZHJlc3MocGspO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIHplcm8gYWRkcmVzcy5cbiAgICAgKi9cbiAgICBzdGF0aWMgemVyb0FkZHJlc3MoKSB7XG4gICAgICAgIHJldHVybiBuZXcgQWRkcmVzcyhuZXcgVWludDhBcnJheShBTEdPUkFORF9BRERSRVNTX0JZVEVfTEVOR1RIIC0gQUxHT1JBTkRfQ0hFQ0tTVU1fQllURV9MRU5HVEgpKTtcbiAgICB9XG59XG4vKipcbiAqIGRlY29kZUFkZHJlc3MgdGFrZXMgYW4gQWxnb3JhbmQgYWRkcmVzcyBpbiBzdHJpbmcgZm9ybSBhbmQgZGVjb2RlcyBpdCBpbnRvIGEgVWludDhBcnJheS5cbiAqIEBwYXJhbSBhZGRyZXNzIC0gYW4gQWxnb3JhbmQgYWRkcmVzcyB3aXRoIGNoZWNrc3VtLlxuICogQHJldHVybnMgdGhlIGRlY29kZWQgZm9ybSBvZiB0aGUgYWRkcmVzcydzIHB1YmxpYyBrZXkgYW5kIGNoZWNrc3VtXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWNvZGVBZGRyZXNzKGFkZHJlc3MpIHtcbiAgICByZXR1cm4gQWRkcmVzcy5mcm9tU3RyaW5nKGFkZHJlc3MpO1xufVxuLyoqXG4gKiBpc1ZhbGlkQWRkcmVzcyBjaGVja3MgaWYgYSBzdHJpbmcgaXMgYSB2YWxpZCBBbGdvcmFuZCBhZGRyZXNzLlxuICogQHBhcmFtIGFkZHJlc3MgLSBhbiBBbGdvcmFuZCBhZGRyZXNzIHdpdGggY2hlY2tzdW0uXG4gKiBAcmV0dXJucyB0cnVlIGlmIHZhbGlkLCBmYWxzZSBvdGhlcndpc2VcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzVmFsaWRBZGRyZXNzKGFkZHJlc3MpIHtcbiAgICAvLyBUcnkgdG8gZGVjb2RlXG4gICAgdHJ5IHtcbiAgICAgICAgQWRkcmVzcy5mcm9tU3RyaW5nKGFkZHJlc3MpO1xuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuLyoqXG4gKiBlbmNvZGVBZGRyZXNzIHRha2VzIGFuIEFsZ29yYW5kIGFkZHJlc3MgYXMgYSBVaW50OEFycmF5IGFuZCBlbmNvZGVzIGl0IGludG8gYSBzdHJpbmcgd2l0aCBjaGVja3N1bS5cbiAqIEBwYXJhbSBhZGRyZXNzIC0gYSByYXcgQWxnb3JhbmQgYWRkcmVzc1xuICogQHJldHVybnMgdGhlIGFkZHJlc3MgYW5kIGNoZWNrc3VtIGVuY29kZWQgYXMgYSBzdHJpbmcuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBlbmNvZGVBZGRyZXNzKGFkZHJlc3MpIHtcbiAgICByZXR1cm4gbmV3IEFkZHJlc3MoYWRkcmVzcykudG9TdHJpbmcoKTtcbn1cbmNvbnN0IEFQUF9JRF9QUkVGSVggPSBuZXcgVGV4dEVuY29kZXIoKS5lbmNvZGUoJ2FwcElEJyk7XG4vKipcbiAqIEdldCB0aGUgZXNjcm93IGFkZHJlc3Mgb2YgYW4gYXBwbGljYXRpb24uXG4gKiBAcGFyYW0gYXBwSUQgLSBUaGUgSUQgb2YgdGhlIGFwcGxpY2F0aW9uLlxuICogQHJldHVybnMgVGhlIGFkZHJlc3MgY29ycmVzcG9uZGluZyB0byB0aGF0IGFwcGxpY2F0aW9uJ3MgZXNjcm93IGFjY291bnQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRBcHBsaWNhdGlvbkFkZHJlc3MoYXBwSUQpIHtcbiAgICBjb25zdCB0b0JlU2lnbmVkID0gdXRpbHMuY29uY2F0QXJyYXlzKEFQUF9JRF9QUkVGSVgsIGVuY29kZVVpbnQ2NChhcHBJRCkpO1xuICAgIGNvbnN0IGhhc2ggPSBuYWNsLmdlbmVyaWNIYXNoKHRvQmVTaWduZWQpO1xuICAgIHJldHVybiBuZXcgQWRkcmVzcyhVaW50OEFycmF5LmZyb20oaGFzaCkpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YWRkcmVzcy5qcy5tYXAiXSwibmFtZXMiOlsiYmFzZTMyIiwibmFjbCIsInV0aWxzIiwiZW5jb2RlVWludDY0IiwiYnl0ZXNUb0hleCIsIkFMR09SQU5EX0FERFJFU1NfQllURV9MRU5HVEgiLCJBTEdPUkFORF9DSEVDS1NVTV9CWVRFX0xFTkdUSCIsIkFMR09SQU5EX0FERFJFU1NfTEVOR1RIIiwiQUxHT1JBTkRfWkVST19BRERSRVNTX1NUUklORyIsIk1BTEZPUk1FRF9BRERSRVNTX0VSUk9SX01TRyIsIkNIRUNLU1VNX0FERFJFU1NfRVJST1JfTVNHIiwiY2hlY2tzdW1Gcm9tUHVibGljS2V5IiwicGsiLCJVaW50OEFycmF5IiwiZnJvbSIsImdlbmVyaWNIYXNoIiwic2xpY2UiLCJIQVNIX0JZVEVTX0xFTkdUSCIsIkFkZHJlc3MiLCJjb25zdHJ1Y3RvciIsInB1YmxpY0tleSIsIkVycm9yIiwibGVuZ3RoIiwiZXF1YWxzIiwib3RoZXIiLCJhcnJheUVxdWFsIiwiY2hlY2tzdW0iLCJ0b1N0cmluZyIsImFkZHIiLCJlbmNvZGUiLCJjb25jYXRBcnJheXMiLCJmcm9tU3RyaW5nIiwiYWRkcmVzcyIsImRlY29kZWQiLCJkZWNvZGUiLCJhc0J5dGVzIiwiY3MiLCJQVUJMSUNfS0VZX0xFTkdUSCIsInplcm9BZGRyZXNzIiwiZGVjb2RlQWRkcmVzcyIsImlzVmFsaWRBZGRyZXNzIiwiZSIsImVuY29kZUFkZHJlc3MiLCJBUFBfSURfUFJFRklYIiwiVGV4dEVuY29kZXIiLCJnZXRBcHBsaWNhdGlvbkFkZHJlc3MiLCJhcHBJRCIsInRvQmVTaWduZWQiLCJoYXNoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/encoding/address.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/encoding/bigint.js":
/*!**********************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/encoding/bigint.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   bigIntToBytes: () => (/* binding */ bigIntToBytes),\n/* harmony export */   bytesToBigInt: () => (/* binding */ bytesToBigInt)\n/* harmony export */ });\n/**\n * bigIntToBytes converts a BigInt to a big-endian Uint8Array for encoding.\n * @param bi - The bigint to convert.\n * @param size - The size of the resulting byte array.\n * @returns A byte array containing the big-endian encoding of the input bigint\n */ function bigIntToBytes(bi, size) {\n    let hex = bi.toString(16);\n    // Pad the hex with zeros so it matches the size in bytes\n    if (hex.length !== size * 2) {\n        hex = hex.padStart(size * 2, \"0\");\n    }\n    const byteArray = new Uint8Array(hex.length / 2);\n    for(let i = 0, j = 0; i < hex.length / 2; i++, j += 2){\n        byteArray[i] = parseInt(hex.slice(j, j + 2), 16);\n    }\n    return byteArray;\n}\n/**\n * bytesToBigInt produces a bigint from a binary representation.\n *\n * @param bytes - The Uint8Array to convert.\n * @returns The bigint that was encoded in the input data.\n */ function bytesToBigInt(bytes) {\n    let res = BigInt(0);\n    const buf = new DataView(bytes.buffer, bytes.byteOffset);\n    for(let i = 0; i < bytes.length; i++){\n        res = BigInt(Number(buf.getUint8(i))) + res * BigInt(256);\n    }\n    return res;\n} //# sourceMappingURL=bigint.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9lbmNvZGluZy9iaWdpbnQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTs7Ozs7Q0FLQyxHQUNNLFNBQVNBLGNBQWNDLEVBQUUsRUFBRUMsSUFBSTtJQUNsQyxJQUFJQyxNQUFNRixHQUFHRyxRQUFRLENBQUM7SUFDdEIseURBQXlEO0lBQ3pELElBQUlELElBQUlFLE1BQU0sS0FBS0gsT0FBTyxHQUFHO1FBQ3pCQyxNQUFNQSxJQUFJRyxRQUFRLENBQUNKLE9BQU8sR0FBRztJQUNqQztJQUNBLE1BQU1LLFlBQVksSUFBSUMsV0FBV0wsSUFBSUUsTUFBTSxHQUFHO0lBQzlDLElBQUssSUFBSUksSUFBSSxHQUFHQyxJQUFJLEdBQUdELElBQUlOLElBQUlFLE1BQU0sR0FBRyxHQUFHSSxLQUFLQyxLQUFLLEVBQUc7UUFDcERILFNBQVMsQ0FBQ0UsRUFBRSxHQUFHRSxTQUFTUixJQUFJUyxLQUFLLENBQUNGLEdBQUdBLElBQUksSUFBSTtJQUNqRDtJQUNBLE9BQU9IO0FBQ1g7QUFDQTs7Ozs7Q0FLQyxHQUNNLFNBQVNNLGNBQWNDLEtBQUs7SUFDL0IsSUFBSUMsTUFBTUMsT0FBTztJQUNqQixNQUFNQyxNQUFNLElBQUlDLFNBQVNKLE1BQU1LLE1BQU0sRUFBRUwsTUFBTU0sVUFBVTtJQUN2RCxJQUFLLElBQUlYLElBQUksR0FBR0EsSUFBSUssTUFBTVQsTUFBTSxFQUFFSSxJQUFLO1FBQ25DTSxNQUFNQyxPQUFPSyxPQUFPSixJQUFJSyxRQUFRLENBQUNiLE9BQU9NLE1BQU1DLE9BQU87SUFDekQ7SUFDQSxPQUFPRDtBQUNYLEVBQ0Esa0NBQWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWxnb3JhbmQtY3Jvd2RmdW5kaW5nLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vZW5jb2RpbmcvYmlnaW50LmpzPzY1ZDIiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBiaWdJbnRUb0J5dGVzIGNvbnZlcnRzIGEgQmlnSW50IHRvIGEgYmlnLWVuZGlhbiBVaW50OEFycmF5IGZvciBlbmNvZGluZy5cbiAqIEBwYXJhbSBiaSAtIFRoZSBiaWdpbnQgdG8gY29udmVydC5cbiAqIEBwYXJhbSBzaXplIC0gVGhlIHNpemUgb2YgdGhlIHJlc3VsdGluZyBieXRlIGFycmF5LlxuICogQHJldHVybnMgQSBieXRlIGFycmF5IGNvbnRhaW5pbmcgdGhlIGJpZy1lbmRpYW4gZW5jb2Rpbmcgb2YgdGhlIGlucHV0IGJpZ2ludFxuICovXG5leHBvcnQgZnVuY3Rpb24gYmlnSW50VG9CeXRlcyhiaSwgc2l6ZSkge1xuICAgIGxldCBoZXggPSBiaS50b1N0cmluZygxNik7XG4gICAgLy8gUGFkIHRoZSBoZXggd2l0aCB6ZXJvcyBzbyBpdCBtYXRjaGVzIHRoZSBzaXplIGluIGJ5dGVzXG4gICAgaWYgKGhleC5sZW5ndGggIT09IHNpemUgKiAyKSB7XG4gICAgICAgIGhleCA9IGhleC5wYWRTdGFydChzaXplICogMiwgJzAnKTtcbiAgICB9XG4gICAgY29uc3QgYnl0ZUFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoaGV4Lmxlbmd0aCAvIDIpO1xuICAgIGZvciAobGV0IGkgPSAwLCBqID0gMDsgaSA8IGhleC5sZW5ndGggLyAyOyBpKyssIGogKz0gMikge1xuICAgICAgICBieXRlQXJyYXlbaV0gPSBwYXJzZUludChoZXguc2xpY2UoaiwgaiArIDIpLCAxNik7XG4gICAgfVxuICAgIHJldHVybiBieXRlQXJyYXk7XG59XG4vKipcbiAqIGJ5dGVzVG9CaWdJbnQgcHJvZHVjZXMgYSBiaWdpbnQgZnJvbSBhIGJpbmFyeSByZXByZXNlbnRhdGlvbi5cbiAqXG4gKiBAcGFyYW0gYnl0ZXMgLSBUaGUgVWludDhBcnJheSB0byBjb252ZXJ0LlxuICogQHJldHVybnMgVGhlIGJpZ2ludCB0aGF0IHdhcyBlbmNvZGVkIGluIHRoZSBpbnB1dCBkYXRhLlxuICovXG5leHBvcnQgZnVuY3Rpb24gYnl0ZXNUb0JpZ0ludChieXRlcykge1xuICAgIGxldCByZXMgPSBCaWdJbnQoMCk7XG4gICAgY29uc3QgYnVmID0gbmV3IERhdGFWaWV3KGJ5dGVzLmJ1ZmZlciwgYnl0ZXMuYnl0ZU9mZnNldCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBieXRlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICByZXMgPSBCaWdJbnQoTnVtYmVyKGJ1Zi5nZXRVaW50OChpKSkpICsgcmVzICogQmlnSW50KDI1Nik7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1iaWdpbnQuanMubWFwIl0sIm5hbWVzIjpbImJpZ0ludFRvQnl0ZXMiLCJiaSIsInNpemUiLCJoZXgiLCJ0b1N0cmluZyIsImxlbmd0aCIsInBhZFN0YXJ0IiwiYnl0ZUFycmF5IiwiVWludDhBcnJheSIsImkiLCJqIiwicGFyc2VJbnQiLCJzbGljZSIsImJ5dGVzVG9CaWdJbnQiLCJieXRlcyIsInJlcyIsIkJpZ0ludCIsImJ1ZiIsIkRhdGFWaWV3IiwiYnVmZmVyIiwiYnl0ZU9mZnNldCIsIk51bWJlciIsImdldFVpbnQ4Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/encoding/bigint.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/encoding/binarydata.js":
/*!**************************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/encoding/binarydata.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   base64ToBytes: () => (/* binding */ base64ToBytes),\n/* harmony export */   bytesToBase64: () => (/* binding */ bytesToBase64),\n/* harmony export */   bytesToHex: () => (/* binding */ bytesToHex),\n/* harmony export */   bytesToString: () => (/* binding */ bytesToString),\n/* harmony export */   coerceToBytes: () => (/* binding */ coerceToBytes),\n/* harmony export */   hexToBytes: () => (/* binding */ hexToBytes)\n/* harmony export */ });\n/* harmony import */ var _utils_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/utils.js */ \"(ssr)/./node_modules/algosdk/dist/esm/utils/utils.js\");\n\n/**\n * Convert a base64 string to a Uint8Array for Node.js and browser environments.\n * @returns A Uint8Array\n */ function base64ToBytes(base64String) {\n    if ((0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.isNode)()) {\n        return new Uint8Array(Buffer.from(base64String, \"base64\"));\n    }\n    /* eslint-env browser */ const binString = atob(base64String);\n    return Uint8Array.from(binString, (m)=>m.codePointAt(0));\n}\n/**\n * Convert a Uint8Array to a base64 string for Node.js and browser environments.\n * @returns A base64 string\n */ function bytesToBase64(byteArray) {\n    if ((0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.isNode)()) {\n        return Buffer.from(byteArray).toString(\"base64\");\n    }\n    /* eslint-env browser */ const binString = Array.from(byteArray, (x)=>String.fromCodePoint(x)).join(\"\");\n    return btoa(binString);\n}\n/**\n * Convert a byte array to a UTF-8 string. Warning: not all byte arrays are valid UTF-8.\n * @returns A decoded string\n */ function bytesToString(byteArray) {\n    return new TextDecoder().decode(byteArray);\n}\n/**\n * Returns a Uint8Array given an input string or Uint8Array.\n * @returns A base64 string\n */ function coerceToBytes(input) {\n    if (typeof input === \"string\") {\n        return new TextEncoder().encode(input);\n    }\n    return input;\n}\n/**\n * Convert a Uint8Array to a hex string for Node.js and browser environments.\n * @returns A hex string\n */ function bytesToHex(byteArray) {\n    if ((0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.isNode)()) {\n        return Buffer.from(byteArray).toString(\"hex\");\n    }\n    return Array.from(byteArray).map((i)=>i.toString(16).padStart(2, \"0\")).join(\"\");\n}\n/**\n * Convert a hex string to Uint8Array for Node.js and browser environments.\n * @returns A Uint8Array\n */ function hexToBytes(hexString) {\n    if ((0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.isNode)()) {\n        return Buffer.from(hexString, \"hex\");\n    }\n    let hex = hexString;\n    if (hexString.length % 2 !== 0) {\n        hex = hexString.padStart(1, \"0\");\n    }\n    const byteArray = new Uint8Array(hex.length / 2);\n    for(let i = 0; i < hex.length / 2; i++){\n        byteArray[i] = parseInt(hex.slice(2 * i, 2 * i + 2), 16);\n    }\n    return byteArray;\n} //# sourceMappingURL=binarydata.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9lbmNvZGluZy9iaW5hcnlkYXRhLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBMkM7QUFDM0M7OztDQUdDLEdBQ00sU0FBU0MsY0FBY0MsWUFBWTtJQUN0QyxJQUFJRix1REFBTUEsSUFBSTtRQUNWLE9BQU8sSUFBSUcsV0FBV0MsT0FBT0MsSUFBSSxDQUFDSCxjQUFjO0lBQ3BEO0lBQ0Esc0JBQXNCLEdBQ3RCLE1BQU1JLFlBQVlDLEtBQUtMO0lBQ3ZCLE9BQU9DLFdBQVdFLElBQUksQ0FBQ0MsV0FBVyxDQUFDRSxJQUFNQSxFQUFFQyxXQUFXLENBQUM7QUFDM0Q7QUFDQTs7O0NBR0MsR0FDTSxTQUFTQyxjQUFjQyxTQUFTO0lBQ25DLElBQUlYLHVEQUFNQSxJQUFJO1FBQ1YsT0FBT0ksT0FBT0MsSUFBSSxDQUFDTSxXQUFXQyxRQUFRLENBQUM7SUFDM0M7SUFDQSxzQkFBc0IsR0FDdEIsTUFBTU4sWUFBWU8sTUFBTVIsSUFBSSxDQUFDTSxXQUFXLENBQUNHLElBQU1DLE9BQU9DLGFBQWEsQ0FBQ0YsSUFBSUcsSUFBSSxDQUFDO0lBQzdFLE9BQU9DLEtBQUtaO0FBQ2hCO0FBQ0E7OztDQUdDLEdBQ00sU0FBU2EsY0FBY1IsU0FBUztJQUNuQyxPQUFPLElBQUlTLGNBQWNDLE1BQU0sQ0FBQ1Y7QUFDcEM7QUFDQTs7O0NBR0MsR0FDTSxTQUFTVyxjQUFjQyxLQUFLO0lBQy9CLElBQUksT0FBT0EsVUFBVSxVQUFVO1FBQzNCLE9BQU8sSUFBSUMsY0FBY0MsTUFBTSxDQUFDRjtJQUNwQztJQUNBLE9BQU9BO0FBQ1g7QUFDQTs7O0NBR0MsR0FDTSxTQUFTRyxXQUFXZixTQUFTO0lBQ2hDLElBQUlYLHVEQUFNQSxJQUFJO1FBQ1YsT0FBT0ksT0FBT0MsSUFBSSxDQUFDTSxXQUFXQyxRQUFRLENBQUM7SUFDM0M7SUFDQSxPQUFPQyxNQUFNUixJQUFJLENBQUNNLFdBQ2JnQixHQUFHLENBQUMsQ0FBQ0MsSUFBTUEsRUFBRWhCLFFBQVEsQ0FBQyxJQUFJaUIsUUFBUSxDQUFDLEdBQUcsTUFDdENaLElBQUksQ0FBQztBQUNkO0FBQ0E7OztDQUdDLEdBQ00sU0FBU2EsV0FBV0MsU0FBUztJQUNoQyxJQUFJL0IsdURBQU1BLElBQUk7UUFDVixPQUFPSSxPQUFPQyxJQUFJLENBQUMwQixXQUFXO0lBQ2xDO0lBQ0EsSUFBSUMsTUFBTUQ7SUFDVixJQUFJQSxVQUFVRSxNQUFNLEdBQUcsTUFBTSxHQUFHO1FBQzVCRCxNQUFNRCxVQUFVRixRQUFRLENBQUMsR0FBRztJQUNoQztJQUNBLE1BQU1sQixZQUFZLElBQUlSLFdBQVc2QixJQUFJQyxNQUFNLEdBQUc7SUFDOUMsSUFBSyxJQUFJTCxJQUFJLEdBQUdBLElBQUlJLElBQUlDLE1BQU0sR0FBRyxHQUFHTCxJQUFLO1FBQ3JDakIsU0FBUyxDQUFDaUIsRUFBRSxHQUFHTSxTQUFTRixJQUFJRyxLQUFLLENBQUMsSUFBSVAsR0FBRyxJQUFJQSxJQUFJLElBQUk7SUFDekQ7SUFDQSxPQUFPakI7QUFDWCxFQUNBLHNDQUFzQyIsInNvdXJjZXMiOlsid2VicGFjazovL2FsZ29yYW5kLWNyb3dkZnVuZGluZy1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9hbGdvc2RrL2Rpc3QvZXNtL2VuY29kaW5nL2JpbmFyeWRhdGEuanM/NjVkZiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpc05vZGUgfSBmcm9tICcuLi91dGlscy91dGlscy5qcyc7XG4vKipcbiAqIENvbnZlcnQgYSBiYXNlNjQgc3RyaW5nIHRvIGEgVWludDhBcnJheSBmb3IgTm9kZS5qcyBhbmQgYnJvd3NlciBlbnZpcm9ubWVudHMuXG4gKiBAcmV0dXJucyBBIFVpbnQ4QXJyYXlcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGJhc2U2NFRvQnl0ZXMoYmFzZTY0U3RyaW5nKSB7XG4gICAgaWYgKGlzTm9kZSgpKSB7XG4gICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShCdWZmZXIuZnJvbShiYXNlNjRTdHJpbmcsICdiYXNlNjQnKSk7XG4gICAgfVxuICAgIC8qIGVzbGludC1lbnYgYnJvd3NlciAqL1xuICAgIGNvbnN0IGJpblN0cmluZyA9IGF0b2IoYmFzZTY0U3RyaW5nKTtcbiAgICByZXR1cm4gVWludDhBcnJheS5mcm9tKGJpblN0cmluZywgKG0pID0+IG0uY29kZVBvaW50QXQoMCkpO1xufVxuLyoqXG4gKiBDb252ZXJ0IGEgVWludDhBcnJheSB0byBhIGJhc2U2NCBzdHJpbmcgZm9yIE5vZGUuanMgYW5kIGJyb3dzZXIgZW52aXJvbm1lbnRzLlxuICogQHJldHVybnMgQSBiYXNlNjQgc3RyaW5nXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBieXRlc1RvQmFzZTY0KGJ5dGVBcnJheSkge1xuICAgIGlmIChpc05vZGUoKSkge1xuICAgICAgICByZXR1cm4gQnVmZmVyLmZyb20oYnl0ZUFycmF5KS50b1N0cmluZygnYmFzZTY0Jyk7XG4gICAgfVxuICAgIC8qIGVzbGludC1lbnYgYnJvd3NlciAqL1xuICAgIGNvbnN0IGJpblN0cmluZyA9IEFycmF5LmZyb20oYnl0ZUFycmF5LCAoeCkgPT4gU3RyaW5nLmZyb21Db2RlUG9pbnQoeCkpLmpvaW4oJycpO1xuICAgIHJldHVybiBidG9hKGJpblN0cmluZyk7XG59XG4vKipcbiAqIENvbnZlcnQgYSBieXRlIGFycmF5IHRvIGEgVVRGLTggc3RyaW5nLiBXYXJuaW5nOiBub3QgYWxsIGJ5dGUgYXJyYXlzIGFyZSB2YWxpZCBVVEYtOC5cbiAqIEByZXR1cm5zIEEgZGVjb2RlZCBzdHJpbmdcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGJ5dGVzVG9TdHJpbmcoYnl0ZUFycmF5KSB7XG4gICAgcmV0dXJuIG5ldyBUZXh0RGVjb2RlcigpLmRlY29kZShieXRlQXJyYXkpO1xufVxuLyoqXG4gKiBSZXR1cm5zIGEgVWludDhBcnJheSBnaXZlbiBhbiBpbnB1dCBzdHJpbmcgb3IgVWludDhBcnJheS5cbiAqIEByZXR1cm5zIEEgYmFzZTY0IHN0cmluZ1xuICovXG5leHBvcnQgZnVuY3Rpb24gY29lcmNlVG9CeXRlcyhpbnB1dCkge1xuICAgIGlmICh0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiBuZXcgVGV4dEVuY29kZXIoKS5lbmNvZGUoaW5wdXQpO1xuICAgIH1cbiAgICByZXR1cm4gaW5wdXQ7XG59XG4vKipcbiAqIENvbnZlcnQgYSBVaW50OEFycmF5IHRvIGEgaGV4IHN0cmluZyBmb3IgTm9kZS5qcyBhbmQgYnJvd3NlciBlbnZpcm9ubWVudHMuXG4gKiBAcmV0dXJucyBBIGhleCBzdHJpbmdcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGJ5dGVzVG9IZXgoYnl0ZUFycmF5KSB7XG4gICAgaWYgKGlzTm9kZSgpKSB7XG4gICAgICAgIHJldHVybiBCdWZmZXIuZnJvbShieXRlQXJyYXkpLnRvU3RyaW5nKCdoZXgnKTtcbiAgICB9XG4gICAgcmV0dXJuIEFycmF5LmZyb20oYnl0ZUFycmF5KVxuICAgICAgICAubWFwKChpKSA9PiBpLnRvU3RyaW5nKDE2KS5wYWRTdGFydCgyLCAnMCcpKVxuICAgICAgICAuam9pbignJyk7XG59XG4vKipcbiAqIENvbnZlcnQgYSBoZXggc3RyaW5nIHRvIFVpbnQ4QXJyYXkgZm9yIE5vZGUuanMgYW5kIGJyb3dzZXIgZW52aXJvbm1lbnRzLlxuICogQHJldHVybnMgQSBVaW50OEFycmF5XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBoZXhUb0J5dGVzKGhleFN0cmluZykge1xuICAgIGlmIChpc05vZGUoKSkge1xuICAgICAgICByZXR1cm4gQnVmZmVyLmZyb20oaGV4U3RyaW5nLCAnaGV4Jyk7XG4gICAgfVxuICAgIGxldCBoZXggPSBoZXhTdHJpbmc7XG4gICAgaWYgKGhleFN0cmluZy5sZW5ndGggJSAyICE9PSAwKSB7XG4gICAgICAgIGhleCA9IGhleFN0cmluZy5wYWRTdGFydCgxLCAnMCcpO1xuICAgIH1cbiAgICBjb25zdCBieXRlQXJyYXkgPSBuZXcgVWludDhBcnJheShoZXgubGVuZ3RoIC8gMik7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBoZXgubGVuZ3RoIC8gMjsgaSsrKSB7XG4gICAgICAgIGJ5dGVBcnJheVtpXSA9IHBhcnNlSW50KGhleC5zbGljZSgyICogaSwgMiAqIGkgKyAyKSwgMTYpO1xuICAgIH1cbiAgICByZXR1cm4gYnl0ZUFycmF5O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YmluYXJ5ZGF0YS5qcy5tYXAiXSwibmFtZXMiOlsiaXNOb2RlIiwiYmFzZTY0VG9CeXRlcyIsImJhc2U2NFN0cmluZyIsIlVpbnQ4QXJyYXkiLCJCdWZmZXIiLCJmcm9tIiwiYmluU3RyaW5nIiwiYXRvYiIsIm0iLCJjb2RlUG9pbnRBdCIsImJ5dGVzVG9CYXNlNjQiLCJieXRlQXJyYXkiLCJ0b1N0cmluZyIsIkFycmF5IiwieCIsIlN0cmluZyIsImZyb21Db2RlUG9pbnQiLCJqb2luIiwiYnRvYSIsImJ5dGVzVG9TdHJpbmciLCJUZXh0RGVjb2RlciIsImRlY29kZSIsImNvZXJjZVRvQnl0ZXMiLCJpbnB1dCIsIlRleHRFbmNvZGVyIiwiZW5jb2RlIiwiYnl0ZXNUb0hleCIsIm1hcCIsImkiLCJwYWRTdGFydCIsImhleFRvQnl0ZXMiLCJoZXhTdHJpbmciLCJoZXgiLCJsZW5ndGgiLCJwYXJzZUludCIsInNsaWNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/encoding/binarydata.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/encoding/encoding.js":
/*!************************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/encoding/encoding.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ERROR_CONTAINS_EMPTY_STRING: () => (/* binding */ ERROR_CONTAINS_EMPTY_STRING),\n/* harmony export */   MsgpackRawStringProvider: () => (/* binding */ MsgpackRawStringProvider),\n/* harmony export */   Schema: () => (/* binding */ Schema),\n/* harmony export */   decodeJSON: () => (/* binding */ decodeJSON),\n/* harmony export */   decodeMsgpack: () => (/* binding */ decodeMsgpack),\n/* harmony export */   decodeObj: () => (/* binding */ decodeObj),\n/* harmony export */   encodeJSON: () => (/* binding */ encodeJSON),\n/* harmony export */   encodeMsgpack: () => (/* binding */ encodeMsgpack),\n/* harmony export */   encodeObj: () => (/* binding */ encodeObj),\n/* harmony export */   jsonEncodingDataToMsgpackEncodingData: () => (/* binding */ jsonEncodingDataToMsgpackEncodingData),\n/* harmony export */   msgpackEncodingDataToJSONEncodingData: () => (/* binding */ msgpackEncodingDataToJSONEncodingData),\n/* harmony export */   msgpackRawDecode: () => (/* binding */ msgpackRawDecode),\n/* harmony export */   msgpackRawDecodeAsMap: () => (/* binding */ msgpackRawDecodeAsMap),\n/* harmony export */   msgpackRawEncode: () => (/* binding */ msgpackRawEncode)\n/* harmony export */ });\n/* harmony import */ var algorand_msgpack__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! algorand-msgpack */ \"(ssr)/./node_modules/algorand-msgpack/dist.es5+esm/encode.mjs\");\n/* harmony import */ var algorand_msgpack__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! algorand-msgpack */ \"(ssr)/./node_modules/algorand-msgpack/dist.es5+esm/utils/int.mjs\");\n/* harmony import */ var algorand_msgpack__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! algorand-msgpack */ \"(ssr)/./node_modules/algorand-msgpack/dist.es5+esm/decode.mjs\");\n/* harmony import */ var algorand_msgpack__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! algorand-msgpack */ \"(ssr)/./node_modules/algorand-msgpack/dist.es5+esm/utils/typedArrays.mjs\");\n/* harmony import */ var _binarydata_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./binarydata.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/binarydata.js\");\n/* harmony import */ var _types_intDecoding_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../types/intDecoding.js */ \"(ssr)/./node_modules/algosdk/dist/esm/types/intDecoding.js\");\n/* harmony import */ var _utils_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/utils.js */ \"(ssr)/./node_modules/algosdk/dist/esm/utils/utils.js\");\n/**\n * This file is a wrapper of msgpack.js.\n * The wrapper was written in order to ensure correct encoding of Algorand Transaction and other formats.\n * In particular, it matches go-algorand blockchain client, written in go (https://www.github.com/algorand/go-algorand.\n * Algorand's msgpack encoding follows to following rules -\n *  1. Every integer must be encoded to the smallest type possible (0-255-\\>8bit, 256-65535-\\>16bit, etx)\n *  2. All fields names must be sorted\n *  3. All empty and 0 fields should be omitted\n *  4. Every positive number must be encoded as uint\n *  5. Binary blob should be used for binary data and string for strings\n *  */ \n\n\n\n// Errors\nconst ERROR_CONTAINS_EMPTY_STRING = \"The object contains empty or 0 values. First empty or 0 value encountered during encoding: \";\n/**\n * containsEmpty returns true if any of the object's values are empty, false otherwise.\n * Empty arrays considered empty\n * @param obj - The object to check\n * @returns \\{true, empty key\\} if contains empty, \\{false, undefined\\} otherwise\n */ function containsEmpty(obj) {\n    for(const key in obj){\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            if (!obj[key] || obj[key].length === 0) {\n                return {\n                    containsEmpty: true,\n                    firstEmptyKey: key\n                };\n            }\n        }\n    }\n    return {\n        containsEmpty: false,\n        firstEmptyKey: undefined\n    };\n}\n/**\n * msgpackRawEncode encodes objects using msgpack, regardless of whether there are\n * empty or 0 value fields.\n * @param obj - a dictionary to be encoded. May or may not contain empty or 0 values.\n * @returns msgpack representation of the object\n */ function msgpackRawEncode(obj) {\n    // enable the canonical option\n    const options = {\n        sortKeys: true\n    };\n    return (0,algorand_msgpack__WEBPACK_IMPORTED_MODULE_3__.encode)(obj, options);\n}\n/**\n * encodeObj takes a javascript object and returns its msgpack encoding\n * Note that the encoding sorts the fields alphabetically\n * @param o - js object to be encoded. Must not contain empty or 0 values.\n * @returns Uint8Array binary representation\n * @throws Error containing ERROR_CONTAINS_EMPTY_STRING if the object contains empty or zero values\n *\n * @deprecated Use {@link msgpackRawEncode} instead. Note that function does not\n *   check for empty values like this one does.\n */ function encodeObj(obj) {\n    // Check for empty values\n    const emptyCheck = containsEmpty(obj);\n    if (emptyCheck.containsEmpty) {\n        throw new Error(ERROR_CONTAINS_EMPTY_STRING + emptyCheck.firstEmptyKey);\n    }\n    return msgpackRawEncode(obj);\n}\nfunction intDecodingToIntMode(intDecoding) {\n    switch(intDecoding){\n        case _types_intDecoding_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].UNSAFE:\n            return algorand_msgpack__WEBPACK_IMPORTED_MODULE_4__.IntMode.UNSAFE_NUMBER;\n        case _types_intDecoding_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].SAFE:\n            return algorand_msgpack__WEBPACK_IMPORTED_MODULE_4__.IntMode.SAFE_NUMBER;\n        case _types_intDecoding_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].MIXED:\n            return algorand_msgpack__WEBPACK_IMPORTED_MODULE_4__.IntMode.MIXED;\n        case _types_intDecoding_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].BIGINT:\n            return algorand_msgpack__WEBPACK_IMPORTED_MODULE_4__.IntMode.BIGINT;\n        default:\n            throw new Error(`Invalid intDecoding: ${intDecoding}`);\n    }\n}\n/**\n * Decodes msgpack bytes into a plain JavaScript object.\n * @param buffer - The msgpack bytes to decode\n * @param options - Options for decoding, including int decoding mode. See {@link IntDecoding} for more information.\n * @returns The decoded object\n */ function msgpackRawDecode(buffer, options) {\n    const decoderOptions = {\n        intMode: options?.intDecoding ? intDecodingToIntMode(options?.intDecoding) : algorand_msgpack__WEBPACK_IMPORTED_MODULE_4__.IntMode.BIGINT\n    };\n    return (0,algorand_msgpack__WEBPACK_IMPORTED_MODULE_5__.decode)(buffer, decoderOptions);\n}\n/**\n * decodeObj takes a Uint8Array and returns its javascript obj\n * @param o - Uint8Array to decode\n * @returns object\n *\n * @deprecated Use {@link msgpackRawDecode} instead. Note that this function uses `IntDecoding.MIXED`\n *   while `msgpackRawDecode` defaults to `IntDecoding.BIGINT` for int decoding, though it is\n *   configurable.\n */ function decodeObj(o) {\n    return msgpackRawDecode(o, {\n        intDecoding: _types_intDecoding_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].MIXED\n    });\n}\n/**\n * Decodes msgpack bytes into a Map object. This supports decoding non-string map keys.\n * @param encoded - The msgpack bytes to decode\n * @param options - Options for decoding, including int decoding mode. See {@link IntDecoding} for more information.\n * @returns The decoded Map object\n */ function msgpackRawDecodeAsMap(encoded, options) {\n    const decoderOptions = {\n        intMode: options?.intDecoding ? intDecodingToIntMode(options?.intDecoding) : algorand_msgpack__WEBPACK_IMPORTED_MODULE_4__.IntMode.BIGINT,\n        useMap: true\n    };\n    return (0,algorand_msgpack__WEBPACK_IMPORTED_MODULE_5__.decode)(encoded, decoderOptions);\n}\nfunction msgpackRawDecodeAsMapWithRawStrings(encoded, options) {\n    const decoderOptions = {\n        intMode: options?.intDecoding ? intDecodingToIntMode(options?.intDecoding) : algorand_msgpack__WEBPACK_IMPORTED_MODULE_4__.IntMode.BIGINT,\n        useMap: true,\n        rawBinaryStringKeys: true,\n        rawBinaryStringValues: true,\n        useRawBinaryStringClass: true\n    };\n    return (0,algorand_msgpack__WEBPACK_IMPORTED_MODULE_5__.decode)(encoded, decoderOptions);\n}\nfunction msgpackEncodingDataToJSONEncodingData(e) {\n    if (e === null || e === undefined) {\n        return e;\n    }\n    if (e instanceof Uint8Array) {\n        return (0,_binarydata_js__WEBPACK_IMPORTED_MODULE_0__.bytesToBase64)(e);\n    }\n    if (Array.isArray(e)) {\n        return e.map(msgpackEncodingDataToJSONEncodingData);\n    }\n    if (e instanceof Map) {\n        const obj = {};\n        for (const [k, v] of e){\n            if (typeof k !== \"string\") {\n                throw new Error(`JSON map key must be a string: ${k}`);\n            }\n            obj[k] = msgpackEncodingDataToJSONEncodingData(v);\n        }\n        return obj;\n    }\n    return e;\n}\nfunction jsonEncodingDataToMsgpackEncodingData(e) {\n    if (e === null || e === undefined) {\n        return e;\n    }\n    if (typeof e === \"string\" || // Note, this will not convert base64 to Uint8Array\n    typeof e === \"number\" || typeof e === \"bigint\" || typeof e === \"boolean\") {\n        return e;\n    }\n    if (Array.isArray(e)) {\n        return e.map(jsonEncodingDataToMsgpackEncodingData);\n    }\n    if (typeof e === \"object\") {\n        const obj = new Map();\n        for (const [key, value] of Object.entries(e)){\n            obj.set(key, jsonEncodingDataToMsgpackEncodingData(value));\n        }\n        return obj;\n    }\n    throw new Error(`Invalid JSON encoding data: ${e}`);\n}\n/* eslint-disable class-methods-use-this */ /* eslint-disable no-useless-constructor,no-empty-function */ var MsgpackObjectPathSegmentKind;\n(function(MsgpackObjectPathSegmentKind) {\n    MsgpackObjectPathSegmentKind[MsgpackObjectPathSegmentKind[\"MAP_VALUE\"] = 0] = \"MAP_VALUE\";\n    MsgpackObjectPathSegmentKind[MsgpackObjectPathSegmentKind[\"ARRAY_ELEMENT\"] = 1] = \"ARRAY_ELEMENT\";\n})(MsgpackObjectPathSegmentKind || (MsgpackObjectPathSegmentKind = {}));\n/**\n * This class is used to index into an encoded msgpack object and extract raw strings.\n */ class MsgpackRawStringProvider {\n    constructor({ parent, segment, baseObjectBytes }){\n        this.resolvedCache = null;\n        this.resolvedCachePresent = false;\n        this.parent = parent;\n        this.segment = segment;\n        this.baseObjectBytes = baseObjectBytes;\n    }\n    /**\n     * Create a new provider that resolves to the current provider's map value at the given key.\n     */ withMapValue(key) {\n        return new MsgpackRawStringProvider({\n            parent: this,\n            segment: {\n                kind: MsgpackObjectPathSegmentKind.MAP_VALUE,\n                key\n            }\n        });\n    }\n    /**\n     * Create a new provider that resolves to the current provider's array element at the given index.\n     */ withArrayElement(index) {\n        return new MsgpackRawStringProvider({\n            parent: this,\n            segment: {\n                kind: MsgpackObjectPathSegmentKind.ARRAY_ELEMENT,\n                key: index\n            }\n        });\n    }\n    /**\n     * Get the raw string at the current location. If the current location is not a raw string, an error is thrown.\n     */ getRawStringAtCurrentLocation() {\n        const resolved = this.resolve();\n        if (resolved instanceof algorand_msgpack__WEBPACK_IMPORTED_MODULE_6__.RawBinaryString) {\n            // Decoded rawBinaryValue will always be a Uint8Array\n            return resolved.rawBinaryValue;\n        }\n        throw new Error(`Invalid type. Expected RawBinaryString, got ${resolved} (${typeof resolved})`);\n    }\n    /**\n     * Get the raw string map keys and values at the current location. If the current location is not a map, an error is thrown.\n     */ getRawStringKeysAndValuesAtCurrentLocation() {\n        const resolved = this.resolve();\n        if (!(resolved instanceof Map)) {\n            throw new Error(`Invalid type. Expected Map, got ${resolved} (${typeof resolved})`);\n        }\n        const keysAndValues = new Map();\n        for (const [key, value] of resolved){\n            if (key instanceof algorand_msgpack__WEBPACK_IMPORTED_MODULE_6__.RawBinaryString) {\n                // Decoded rawBinaryValue will always be a Uint8Array\n                keysAndValues.set(key.rawBinaryValue, value);\n            } else {\n                throw new Error(`Invalid type for map key. Expected RawBinaryString, got ${key} (${typeof key})`);\n            }\n        }\n        return keysAndValues;\n    }\n    /**\n     * Resolve the provider by extracting the value it indicates from the base msgpack object.\n     */ resolve() {\n        if (this.resolvedCachePresent) {\n            return this.resolvedCache;\n        }\n        let parentResolved;\n        if (this.parent) {\n            parentResolved = this.parent.resolve();\n        } else {\n            // Need to parse baseObjectBytes\n            parentResolved = msgpackRawDecodeAsMapWithRawStrings(this.baseObjectBytes);\n        }\n        if (!this.segment) {\n            this.resolvedCache = parentResolved;\n            this.resolvedCachePresent = true;\n            return parentResolved;\n        }\n        if (this.segment.kind === MsgpackObjectPathSegmentKind.MAP_VALUE) {\n            if (!(parentResolved instanceof Map)) {\n                throw new Error(`Invalid type. Expected Map, got ${parentResolved} (${typeof parentResolved})`);\n            }\n            // All decoded map keys will be raw strings, and Map objects compare complex values by reference,\n            // so we must check all the values for value-equality.\n            if (typeof this.segment.key === \"string\" || this.segment.key instanceof Uint8Array || this.segment.key instanceof algorand_msgpack__WEBPACK_IMPORTED_MODULE_6__.RawBinaryString) {\n                const targetBytes = this.segment.key instanceof algorand_msgpack__WEBPACK_IMPORTED_MODULE_6__.RawBinaryString ? this.segment.key.rawBinaryValue : (0,_binarydata_js__WEBPACK_IMPORTED_MODULE_0__.coerceToBytes)(this.segment.key);\n                const targetIsRawString = typeof this.segment.key === \"string\" || this.segment.key instanceof algorand_msgpack__WEBPACK_IMPORTED_MODULE_6__.RawBinaryString;\n                for (const [key, value] of parentResolved){\n                    let potentialKeyBytes;\n                    if (targetIsRawString) {\n                        if (key instanceof algorand_msgpack__WEBPACK_IMPORTED_MODULE_6__.RawBinaryString) {\n                            // Decoded rawBinaryValue will always be a Uint8Array\n                            potentialKeyBytes = key.rawBinaryValue;\n                        }\n                    } else if (key instanceof Uint8Array) {\n                        potentialKeyBytes = key;\n                    }\n                    if (potentialKeyBytes && (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_2__.arrayEqual)(targetBytes, potentialKeyBytes)) {\n                        this.resolvedCache = value;\n                        break;\n                    }\n                }\n            } else {\n                this.resolvedCache = parentResolved.get(this.segment.key);\n            }\n            this.resolvedCachePresent = true;\n            return this.resolvedCache;\n        }\n        if (this.segment.kind === MsgpackObjectPathSegmentKind.ARRAY_ELEMENT) {\n            if (!Array.isArray(parentResolved)) {\n                throw new Error(`Invalid type. Expected Array, got ${parentResolved} (${typeof parentResolved})`);\n            }\n            this.resolvedCache = parentResolved[this.segment.key];\n            this.resolvedCachePresent = true;\n            return this.resolvedCache;\n        }\n        throw new Error(`Invalid segment kind: ${this.segment.kind}`);\n    }\n    /**\n     * Get the path string of the current location indicated by the provider. Useful for debugging.\n     */ getPathString() {\n        const parentPathString = this.parent ? this.parent.getPathString() : \"root\";\n        if (!this.segment) {\n            return parentPathString;\n        }\n        if (this.segment.kind === MsgpackObjectPathSegmentKind.MAP_VALUE) {\n            return `${parentPathString} -> map key \"${this.segment.key}\" (${typeof this.segment.key})`;\n        }\n        if (this.segment.kind === MsgpackObjectPathSegmentKind.ARRAY_ELEMENT) {\n            return `${parentPathString} -> array index ${this.segment.key} (${typeof this.segment.key})`;\n        }\n        return `${parentPathString} -> unknown segment kind ${this.segment.kind}`;\n    }\n}\n/**\n * A Schema is used to prepare objects for encoding and decoding from msgpack and JSON.\n *\n * Schemas represent a specific type.\n */ class Schema {\n}\n/**\n * Decode a msgpack byte array to an Encodable object.\n * @param encoded - The msgpack bytes to decode\n * @param c - The class of the object to decode. This class must match the object that was encoded.\n * @returns An instance of the class with the decoded data\n */ function decodeMsgpack(encoded, c) {\n    const decoded = msgpackRawDecodeAsMap(encoded);\n    const rawStringProvider = new MsgpackRawStringProvider({\n        baseObjectBytes: encoded\n    });\n    return c.fromEncodingData(c.encodingSchema.fromPreparedMsgpack(decoded, rawStringProvider));\n}\n/**\n * Encode an Encodable object to a msgpack byte array.\n * @param e - The object to encode\n * @returns A msgpack byte array encoding of the object\n */ function encodeMsgpack(e) {\n    return msgpackRawEncode(e.getEncodingSchema().prepareMsgpack(e.toEncodingData()));\n}\n/**\n * Decode a JSON string to an Encodable object.\n * @param encoded - The JSON string to decode\n * @param c - The class of the object to decode. This class must match the object that was encoded.\n * @returns An instance of the class with the decoded data\n */ function decodeJSON(encoded, c) {\n    const decoded = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_2__.parseJSON)(encoded, {\n        intDecoding: _types_intDecoding_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].BIGINT\n    });\n    return c.fromEncodingData(c.encodingSchema.fromPreparedJSON(decoded));\n}\n/**\n * Encode an Encodable object to a JSON string.\n * @param e - The object to encode\n * @param options - Optional encoding options. See {@link EncodeJSONOptions} for more information.\n * @returns A JSON string encoding of the object\n */ function encodeJSON(e, options) {\n    const { space, ...prepareJSONOptions } = options ?? {};\n    const prepared = e.getEncodingSchema().prepareJSON(e.toEncodingData(), prepareJSONOptions);\n    return (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_2__.stringifyJSON)(prepared, undefined, space);\n} //# sourceMappingURL=encoding.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/encoding/encoding.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/encoding/schema/address.js":
/*!******************************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/encoding/schema/address.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AddressSchema: () => (/* binding */ AddressSchema)\n/* harmony export */ });\n/* harmony import */ var _encoding_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../encoding.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/encoding.js\");\n/* harmony import */ var _address_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../address.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/address.js\");\n\n\n/* eslint-disable class-methods-use-this */ class AddressSchema extends _encoding_js__WEBPACK_IMPORTED_MODULE_0__.Schema {\n    defaultValue() {\n        return _address_js__WEBPACK_IMPORTED_MODULE_1__.Address.zeroAddress();\n    }\n    isDefaultValue(data) {\n        // The equals method checks if the input is an Address\n        return _address_js__WEBPACK_IMPORTED_MODULE_1__.Address.zeroAddress().equals(data);\n    }\n    prepareMsgpack(data) {\n        if (data instanceof _address_js__WEBPACK_IMPORTED_MODULE_1__.Address) {\n            return data.publicKey;\n        }\n        throw new Error(`Invalid address: (${typeof data}) ${data}`);\n    }\n    fromPreparedMsgpack(encoded, // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _rawStringProvider) {\n        // The Address constructor checks that the input is a Uint8Array\n        return new _address_js__WEBPACK_IMPORTED_MODULE_1__.Address(encoded);\n    }\n    prepareJSON(data, // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _options) {\n        if (data instanceof _address_js__WEBPACK_IMPORTED_MODULE_1__.Address) {\n            return data.toString();\n        }\n        throw new Error(`Invalid address: (${typeof data}) ${data}`);\n    }\n    fromPreparedJSON(encoded) {\n        // The Address.fromString method checks that the input is a string\n        return _address_js__WEBPACK_IMPORTED_MODULE_1__.Address.fromString(encoded);\n    }\n} //# sourceMappingURL=address.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9lbmNvZGluZy9zY2hlbWEvYWRkcmVzcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBeUM7QUFDRDtBQUN4Qyx5Q0FBeUMsR0FDbEMsTUFBTUUsc0JBQXNCRixnREFBTUE7SUFDckNHLGVBQWU7UUFDWCxPQUFPRixnREFBT0EsQ0FBQ0csV0FBVztJQUM5QjtJQUNBQyxlQUFlQyxJQUFJLEVBQUU7UUFDakIsc0RBQXNEO1FBQ3RELE9BQU9MLGdEQUFPQSxDQUFDRyxXQUFXLEdBQUdHLE1BQU0sQ0FBQ0Q7SUFDeEM7SUFDQUUsZUFBZUYsSUFBSSxFQUFFO1FBQ2pCLElBQUlBLGdCQUFnQkwsZ0RBQU9BLEVBQUU7WUFDekIsT0FBT0ssS0FBS0csU0FBUztRQUN6QjtRQUNBLE1BQU0sSUFBSUMsTUFBTSxDQUFDLGtCQUFrQixFQUFFLE9BQU9KLEtBQUssRUFBRSxFQUFFQSxLQUFLLENBQUM7SUFDL0Q7SUFDQUssb0JBQW9CQyxPQUFPLEVBQzNCLDZEQUE2RDtJQUM3REMsa0JBQWtCLEVBQUU7UUFDaEIsZ0VBQWdFO1FBQ2hFLE9BQU8sSUFBSVosZ0RBQU9BLENBQUNXO0lBQ3ZCO0lBQ0FFLFlBQVlSLElBQUksRUFDaEIsNkRBQTZEO0lBQzdEUyxRQUFRLEVBQUU7UUFDTixJQUFJVCxnQkFBZ0JMLGdEQUFPQSxFQUFFO1lBQ3pCLE9BQU9LLEtBQUtVLFFBQVE7UUFDeEI7UUFDQSxNQUFNLElBQUlOLE1BQU0sQ0FBQyxrQkFBa0IsRUFBRSxPQUFPSixLQUFLLEVBQUUsRUFBRUEsS0FBSyxDQUFDO0lBQy9EO0lBQ0FXLGlCQUFpQkwsT0FBTyxFQUFFO1FBQ3RCLGtFQUFrRTtRQUNsRSxPQUFPWCxnREFBT0EsQ0FBQ2lCLFVBQVUsQ0FBQ047SUFDOUI7QUFDSixFQUNBLG1DQUFtQyIsInNvdXJjZXMiOlsid2VicGFjazovL2FsZ29yYW5kLWNyb3dkZnVuZGluZy1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9hbGdvc2RrL2Rpc3QvZXNtL2VuY29kaW5nL3NjaGVtYS9hZGRyZXNzLmpzP2QyYWMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU2NoZW1hLCB9IGZyb20gJy4uL2VuY29kaW5nLmpzJztcbmltcG9ydCB7IEFkZHJlc3MgfSBmcm9tICcuLi9hZGRyZXNzLmpzJztcbi8qIGVzbGludC1kaXNhYmxlIGNsYXNzLW1ldGhvZHMtdXNlLXRoaXMgKi9cbmV4cG9ydCBjbGFzcyBBZGRyZXNzU2NoZW1hIGV4dGVuZHMgU2NoZW1hIHtcbiAgICBkZWZhdWx0VmFsdWUoKSB7XG4gICAgICAgIHJldHVybiBBZGRyZXNzLnplcm9BZGRyZXNzKCk7XG4gICAgfVxuICAgIGlzRGVmYXVsdFZhbHVlKGRhdGEpIHtcbiAgICAgICAgLy8gVGhlIGVxdWFscyBtZXRob2QgY2hlY2tzIGlmIHRoZSBpbnB1dCBpcyBhbiBBZGRyZXNzXG4gICAgICAgIHJldHVybiBBZGRyZXNzLnplcm9BZGRyZXNzKCkuZXF1YWxzKGRhdGEpO1xuICAgIH1cbiAgICBwcmVwYXJlTXNncGFjayhkYXRhKSB7XG4gICAgICAgIGlmIChkYXRhIGluc3RhbmNlb2YgQWRkcmVzcykge1xuICAgICAgICAgICAgcmV0dXJuIGRhdGEucHVibGljS2V5O1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBhZGRyZXNzOiAoJHt0eXBlb2YgZGF0YX0pICR7ZGF0YX1gKTtcbiAgICB9XG4gICAgZnJvbVByZXBhcmVkTXNncGFjayhlbmNvZGVkLCBcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXG4gICAgX3Jhd1N0cmluZ1Byb3ZpZGVyKSB7XG4gICAgICAgIC8vIFRoZSBBZGRyZXNzIGNvbnN0cnVjdG9yIGNoZWNrcyB0aGF0IHRoZSBpbnB1dCBpcyBhIFVpbnQ4QXJyYXlcbiAgICAgICAgcmV0dXJuIG5ldyBBZGRyZXNzKGVuY29kZWQpO1xuICAgIH1cbiAgICBwcmVwYXJlSlNPTihkYXRhLCBcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXG4gICAgX29wdGlvbnMpIHtcbiAgICAgICAgaWYgKGRhdGEgaW5zdGFuY2VvZiBBZGRyZXNzKSB7XG4gICAgICAgICAgICByZXR1cm4gZGF0YS50b1N0cmluZygpO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBhZGRyZXNzOiAoJHt0eXBlb2YgZGF0YX0pICR7ZGF0YX1gKTtcbiAgICB9XG4gICAgZnJvbVByZXBhcmVkSlNPTihlbmNvZGVkKSB7XG4gICAgICAgIC8vIFRoZSBBZGRyZXNzLmZyb21TdHJpbmcgbWV0aG9kIGNoZWNrcyB0aGF0IHRoZSBpbnB1dCBpcyBhIHN0cmluZ1xuICAgICAgICByZXR1cm4gQWRkcmVzcy5mcm9tU3RyaW5nKGVuY29kZWQpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFkZHJlc3MuanMubWFwIl0sIm5hbWVzIjpbIlNjaGVtYSIsIkFkZHJlc3MiLCJBZGRyZXNzU2NoZW1hIiwiZGVmYXVsdFZhbHVlIiwiemVyb0FkZHJlc3MiLCJpc0RlZmF1bHRWYWx1ZSIsImRhdGEiLCJlcXVhbHMiLCJwcmVwYXJlTXNncGFjayIsInB1YmxpY0tleSIsIkVycm9yIiwiZnJvbVByZXBhcmVkTXNncGFjayIsImVuY29kZWQiLCJfcmF3U3RyaW5nUHJvdmlkZXIiLCJwcmVwYXJlSlNPTiIsIl9vcHRpb25zIiwidG9TdHJpbmciLCJmcm9tUHJlcGFyZWRKU09OIiwiZnJvbVN0cmluZyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/encoding/schema/address.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/encoding/schema/array.js":
/*!****************************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/encoding/schema/array.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ArraySchema: () => (/* binding */ ArraySchema)\n/* harmony export */ });\n/* harmony import */ var _encoding_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../encoding.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/encoding.js\");\n\n/* eslint-disable class-methods-use-this */ class ArraySchema extends _encoding_js__WEBPACK_IMPORTED_MODULE_0__.Schema {\n    constructor(itemSchema){\n        super();\n        this.itemSchema = itemSchema;\n    }\n    defaultValue() {\n        return [];\n    }\n    isDefaultValue(data) {\n        return Array.isArray(data) && data.length === 0;\n    }\n    prepareMsgpack(data) {\n        if (Array.isArray(data)) {\n            return data.map((item)=>this.itemSchema.prepareMsgpack(item));\n        }\n        throw new Error(\"ArraySchema data must be an array\");\n    }\n    fromPreparedMsgpack(encoded, rawStringProvider) {\n        if (Array.isArray(encoded)) {\n            return encoded.map((item, index)=>this.itemSchema.fromPreparedMsgpack(item, rawStringProvider.withArrayElement(index)));\n        }\n        throw new Error(`ArraySchema encoded data must be an array: ${encoded} (${typeof encoded})`);\n    }\n    prepareJSON(data, options) {\n        if (Array.isArray(data)) {\n            return data.map((item)=>this.itemSchema.prepareJSON(item, options));\n        }\n        throw new Error(\"ArraySchema data must be an array\");\n    }\n    fromPreparedJSON(encoded) {\n        if (Array.isArray(encoded)) {\n            return encoded.map((item)=>this.itemSchema.fromPreparedJSON(item));\n        }\n        throw new Error(`ArraySchema encoded data must be an array: ${encoded} (${typeof encoded})`);\n    }\n} //# sourceMappingURL=array.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9lbmNvZGluZy9zY2hlbWEvYXJyYXkuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBeUM7QUFDekMseUNBQXlDLEdBQ2xDLE1BQU1DLG9CQUFvQkQsZ0RBQU1BO0lBQ25DRSxZQUFZQyxVQUFVLENBQUU7UUFDcEIsS0FBSztRQUNMLElBQUksQ0FBQ0EsVUFBVSxHQUFHQTtJQUN0QjtJQUNBQyxlQUFlO1FBQ1gsT0FBTyxFQUFFO0lBQ2I7SUFDQUMsZUFBZUMsSUFBSSxFQUFFO1FBQ2pCLE9BQU9DLE1BQU1DLE9BQU8sQ0FBQ0YsU0FBU0EsS0FBS0csTUFBTSxLQUFLO0lBQ2xEO0lBQ0FDLGVBQWVKLElBQUksRUFBRTtRQUNqQixJQUFJQyxNQUFNQyxPQUFPLENBQUNGLE9BQU87WUFDckIsT0FBT0EsS0FBS0ssR0FBRyxDQUFDLENBQUNDLE9BQVMsSUFBSSxDQUFDVCxVQUFVLENBQUNPLGNBQWMsQ0FBQ0U7UUFDN0Q7UUFDQSxNQUFNLElBQUlDLE1BQU07SUFDcEI7SUFDQUMsb0JBQW9CQyxPQUFPLEVBQUVDLGlCQUFpQixFQUFFO1FBQzVDLElBQUlULE1BQU1DLE9BQU8sQ0FBQ08sVUFBVTtZQUN4QixPQUFPQSxRQUFRSixHQUFHLENBQUMsQ0FBQ0MsTUFBTUssUUFBVSxJQUFJLENBQUNkLFVBQVUsQ0FBQ1csbUJBQW1CLENBQUNGLE1BQU1JLGtCQUFrQkUsZ0JBQWdCLENBQUNEO1FBQ3JIO1FBQ0EsTUFBTSxJQUFJSixNQUFNLENBQUMsMkNBQTJDLEVBQUVFLFFBQVEsRUFBRSxFQUFFLE9BQU9BLFFBQVEsQ0FBQyxDQUFDO0lBQy9GO0lBQ0FJLFlBQVliLElBQUksRUFBRWMsT0FBTyxFQUFFO1FBQ3ZCLElBQUliLE1BQU1DLE9BQU8sQ0FBQ0YsT0FBTztZQUNyQixPQUFPQSxLQUFLSyxHQUFHLENBQUMsQ0FBQ0MsT0FBUyxJQUFJLENBQUNULFVBQVUsQ0FBQ2dCLFdBQVcsQ0FBQ1AsTUFBTVE7UUFDaEU7UUFDQSxNQUFNLElBQUlQLE1BQU07SUFDcEI7SUFDQVEsaUJBQWlCTixPQUFPLEVBQUU7UUFDdEIsSUFBSVIsTUFBTUMsT0FBTyxDQUFDTyxVQUFVO1lBQ3hCLE9BQU9BLFFBQVFKLEdBQUcsQ0FBQyxDQUFDQyxPQUFTLElBQUksQ0FBQ1QsVUFBVSxDQUFDa0IsZ0JBQWdCLENBQUNUO1FBQ2xFO1FBQ0EsTUFBTSxJQUFJQyxNQUFNLENBQUMsMkNBQTJDLEVBQUVFLFFBQVEsRUFBRSxFQUFFLE9BQU9BLFFBQVEsQ0FBQyxDQUFDO0lBQy9GO0FBQ0osRUFDQSxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hbGdvcmFuZC1jcm93ZGZ1bmRpbmctZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9lbmNvZGluZy9zY2hlbWEvYXJyYXkuanM/ZDQ1ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTY2hlbWEsIH0gZnJvbSAnLi4vZW5jb2RpbmcuanMnO1xuLyogZXNsaW50LWRpc2FibGUgY2xhc3MtbWV0aG9kcy11c2UtdGhpcyAqL1xuZXhwb3J0IGNsYXNzIEFycmF5U2NoZW1hIGV4dGVuZHMgU2NoZW1hIHtcbiAgICBjb25zdHJ1Y3RvcihpdGVtU2NoZW1hKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuaXRlbVNjaGVtYSA9IGl0ZW1TY2hlbWE7XG4gICAgfVxuICAgIGRlZmF1bHRWYWx1ZSgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgICBpc0RlZmF1bHRWYWx1ZShkYXRhKSB7XG4gICAgICAgIHJldHVybiBBcnJheS5pc0FycmF5KGRhdGEpICYmIGRhdGEubGVuZ3RoID09PSAwO1xuICAgIH1cbiAgICBwcmVwYXJlTXNncGFjayhkYXRhKSB7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KGRhdGEpKSB7XG4gICAgICAgICAgICByZXR1cm4gZGF0YS5tYXAoKGl0ZW0pID0+IHRoaXMuaXRlbVNjaGVtYS5wcmVwYXJlTXNncGFjayhpdGVtKSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdBcnJheVNjaGVtYSBkYXRhIG11c3QgYmUgYW4gYXJyYXknKTtcbiAgICB9XG4gICAgZnJvbVByZXBhcmVkTXNncGFjayhlbmNvZGVkLCByYXdTdHJpbmdQcm92aWRlcikge1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShlbmNvZGVkKSkge1xuICAgICAgICAgICAgcmV0dXJuIGVuY29kZWQubWFwKChpdGVtLCBpbmRleCkgPT4gdGhpcy5pdGVtU2NoZW1hLmZyb21QcmVwYXJlZE1zZ3BhY2soaXRlbSwgcmF3U3RyaW5nUHJvdmlkZXIud2l0aEFycmF5RWxlbWVudChpbmRleCkpKTtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEFycmF5U2NoZW1hIGVuY29kZWQgZGF0YSBtdXN0IGJlIGFuIGFycmF5OiAke2VuY29kZWR9ICgke3R5cGVvZiBlbmNvZGVkfSlgKTtcbiAgICB9XG4gICAgcHJlcGFyZUpTT04oZGF0YSwgb3B0aW9ucykge1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShkYXRhKSkge1xuICAgICAgICAgICAgcmV0dXJuIGRhdGEubWFwKChpdGVtKSA9PiB0aGlzLml0ZW1TY2hlbWEucHJlcGFyZUpTT04oaXRlbSwgb3B0aW9ucykpO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignQXJyYXlTY2hlbWEgZGF0YSBtdXN0IGJlIGFuIGFycmF5Jyk7XG4gICAgfVxuICAgIGZyb21QcmVwYXJlZEpTT04oZW5jb2RlZCkge1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShlbmNvZGVkKSkge1xuICAgICAgICAgICAgcmV0dXJuIGVuY29kZWQubWFwKChpdGVtKSA9PiB0aGlzLml0ZW1TY2hlbWEuZnJvbVByZXBhcmVkSlNPTihpdGVtKSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBBcnJheVNjaGVtYSBlbmNvZGVkIGRhdGEgbXVzdCBiZSBhbiBhcnJheTogJHtlbmNvZGVkfSAoJHt0eXBlb2YgZW5jb2RlZH0pYCk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXJyYXkuanMubWFwIl0sIm5hbWVzIjpbIlNjaGVtYSIsIkFycmF5U2NoZW1hIiwiY29uc3RydWN0b3IiLCJpdGVtU2NoZW1hIiwiZGVmYXVsdFZhbHVlIiwiaXNEZWZhdWx0VmFsdWUiLCJkYXRhIiwiQXJyYXkiLCJpc0FycmF5IiwibGVuZ3RoIiwicHJlcGFyZU1zZ3BhY2siLCJtYXAiLCJpdGVtIiwiRXJyb3IiLCJmcm9tUHJlcGFyZWRNc2dwYWNrIiwiZW5jb2RlZCIsInJhd1N0cmluZ1Byb3ZpZGVyIiwiaW5kZXgiLCJ3aXRoQXJyYXlFbGVtZW50IiwicHJlcGFyZUpTT04iLCJvcHRpb25zIiwiZnJvbVByZXBhcmVkSlNPTiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/encoding/schema/array.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/encoding/schema/binarystring.js":
/*!***********************************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/encoding/schema/binarystring.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SpecialCaseBinaryStringSchema: () => (/* binding */ SpecialCaseBinaryStringSchema)\n/* harmony export */ });\n/* harmony import */ var algorand_msgpack__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! algorand-msgpack */ \"(ssr)/./node_modules/algorand-msgpack/dist.es5+esm/utils/typedArrays.mjs\");\n/* harmony import */ var _encoding_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../encoding.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/encoding.js\");\n/* harmony import */ var _binarydata_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../binarydata.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/binarydata.js\");\n/* harmony import */ var _utils_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/utils.js */ \"(ssr)/./node_modules/algosdk/dist/esm/utils/utils.js\");\n\n\n\n\n/* eslint-disable class-methods-use-this */ /**\n * SpecialCaseBinaryStringSchema is a schema for byte arrays which are encoded\n * as strings in msgpack and JSON.\n *\n * This schema allows lossless conversion between the in memory representation\n * and the msgpack encoded representation, but NOT between the in memory and\n * JSON encoded representations if the byte array contains invalid UTF-8\n * sequences.\n */ class SpecialCaseBinaryStringSchema extends _encoding_js__WEBPACK_IMPORTED_MODULE_0__.Schema {\n    defaultValue() {\n        return new Uint8Array();\n    }\n    isDefaultValue(data) {\n        return data instanceof Uint8Array && data.byteLength === 0;\n    }\n    prepareMsgpack(data) {\n        if (data instanceof Uint8Array) {\n            // Cast is needed because RawBinaryString is not part of the standard MsgpackEncodingData\n            return new algorand_msgpack__WEBPACK_IMPORTED_MODULE_3__.RawBinaryString(data);\n        }\n        throw new Error(`Invalid byte array: (${typeof data}) ${data}`);\n    }\n    fromPreparedMsgpack(_encoded, rawStringProvider) {\n        return rawStringProvider.getRawStringAtCurrentLocation();\n    }\n    prepareJSON(data, options) {\n        if (data instanceof Uint8Array) {\n            // Not safe to convert to string for all binary data\n            const stringValue = (0,_binarydata_js__WEBPACK_IMPORTED_MODULE_1__.bytesToString)(data);\n            if (!options.lossyBinaryStringConversion && !(0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_2__.arrayEqual)((0,_binarydata_js__WEBPACK_IMPORTED_MODULE_1__.coerceToBytes)(stringValue), data)) {\n                throw new Error(`Invalid UTF-8 byte array encountered. Encode with lossyBinaryStringConversion enabled to bypass this check. Base64 value: ${(0,_binarydata_js__WEBPACK_IMPORTED_MODULE_1__.bytesToBase64)(data)}`);\n            }\n            return stringValue;\n        }\n        throw new Error(`Invalid byte array: (${typeof data}) ${data}`);\n    }\n    fromPreparedJSON(encoded) {\n        if (typeof encoded === \"string\") {\n            return (0,_binarydata_js__WEBPACK_IMPORTED_MODULE_1__.coerceToBytes)(encoded);\n        }\n        throw new Error(`Invalid byte array: (${typeof encoded}) ${encoded}`);\n    }\n} //# sourceMappingURL=binarystring.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9lbmNvZGluZy9zY2hlbWEvYmluYXJ5c3RyaW5nLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQW1EO0FBQ1Y7QUFDc0M7QUFDN0I7QUFDbEQseUNBQXlDLEdBQ3pDOzs7Ozs7OztDQVFDLEdBQ00sTUFBTU0sc0NBQXNDTCxnREFBTUE7SUFDckRNLGVBQWU7UUFDWCxPQUFPLElBQUlDO0lBQ2Y7SUFDQUMsZUFBZUMsSUFBSSxFQUFFO1FBQ2pCLE9BQU9BLGdCQUFnQkYsY0FBY0UsS0FBS0MsVUFBVSxLQUFLO0lBQzdEO0lBQ0FDLGVBQWVGLElBQUksRUFBRTtRQUNqQixJQUFJQSxnQkFBZ0JGLFlBQVk7WUFDNUIseUZBQXlGO1lBQ3pGLE9BQU8sSUFBSVIsNkRBQWVBLENBQUNVO1FBQy9CO1FBQ0EsTUFBTSxJQUFJRyxNQUFNLENBQUMscUJBQXFCLEVBQUUsT0FBT0gsS0FBSyxFQUFFLEVBQUVBLEtBQUssQ0FBQztJQUNsRTtJQUNBSSxvQkFBb0JDLFFBQVEsRUFBRUMsaUJBQWlCLEVBQUU7UUFDN0MsT0FBT0Esa0JBQWtCQyw2QkFBNkI7SUFDMUQ7SUFDQUMsWUFBWVIsSUFBSSxFQUFFUyxPQUFPLEVBQUU7UUFDdkIsSUFBSVQsZ0JBQWdCRixZQUFZO1lBQzVCLG9EQUFvRDtZQUNwRCxNQUFNWSxjQUFjakIsNkRBQWFBLENBQUNPO1lBQ2xDLElBQUksQ0FBQ1MsUUFBUUUsMkJBQTJCLElBQ3BDLENBQUNoQiwyREFBVUEsQ0FBQ0gsNkRBQWFBLENBQUNrQixjQUFjVixPQUFPO2dCQUMvQyxNQUFNLElBQUlHLE1BQU0sQ0FBQywwSEFBMEgsRUFBRVQsNkRBQWFBLENBQUNNLE1BQU0sQ0FBQztZQUN0SztZQUNBLE9BQU9VO1FBQ1g7UUFDQSxNQUFNLElBQUlQLE1BQU0sQ0FBQyxxQkFBcUIsRUFBRSxPQUFPSCxLQUFLLEVBQUUsRUFBRUEsS0FBSyxDQUFDO0lBQ2xFO0lBQ0FZLGlCQUFpQkMsT0FBTyxFQUFFO1FBQ3RCLElBQUksT0FBT0EsWUFBWSxVQUFVO1lBQzdCLE9BQU9yQiw2REFBYUEsQ0FBQ3FCO1FBQ3pCO1FBQ0EsTUFBTSxJQUFJVixNQUFNLENBQUMscUJBQXFCLEVBQUUsT0FBT1UsUUFBUSxFQUFFLEVBQUVBLFFBQVEsQ0FBQztJQUN4RTtBQUNKLEVBQ0Esd0NBQXdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWxnb3JhbmQtY3Jvd2RmdW5kaW5nLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vZW5jb2Rpbmcvc2NoZW1hL2JpbmFyeXN0cmluZy5qcz9mOWUxIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJhd0JpbmFyeVN0cmluZyB9IGZyb20gJ2FsZ29yYW5kLW1zZ3BhY2snO1xuaW1wb3J0IHsgU2NoZW1hLCB9IGZyb20gJy4uL2VuY29kaW5nLmpzJztcbmltcG9ydCB7IGNvZXJjZVRvQnl0ZXMsIGJ5dGVzVG9TdHJpbmcsIGJ5dGVzVG9CYXNlNjQgfSBmcm9tICcuLi9iaW5hcnlkYXRhLmpzJztcbmltcG9ydCB7IGFycmF5RXF1YWwgfSBmcm9tICcuLi8uLi91dGlscy91dGlscy5qcyc7XG4vKiBlc2xpbnQtZGlzYWJsZSBjbGFzcy1tZXRob2RzLXVzZS10aGlzICovXG4vKipcbiAqIFNwZWNpYWxDYXNlQmluYXJ5U3RyaW5nU2NoZW1hIGlzIGEgc2NoZW1hIGZvciBieXRlIGFycmF5cyB3aGljaCBhcmUgZW5jb2RlZFxuICogYXMgc3RyaW5ncyBpbiBtc2dwYWNrIGFuZCBKU09OLlxuICpcbiAqIFRoaXMgc2NoZW1hIGFsbG93cyBsb3NzbGVzcyBjb252ZXJzaW9uIGJldHdlZW4gdGhlIGluIG1lbW9yeSByZXByZXNlbnRhdGlvblxuICogYW5kIHRoZSBtc2dwYWNrIGVuY29kZWQgcmVwcmVzZW50YXRpb24sIGJ1dCBOT1QgYmV0d2VlbiB0aGUgaW4gbWVtb3J5IGFuZFxuICogSlNPTiBlbmNvZGVkIHJlcHJlc2VudGF0aW9ucyBpZiB0aGUgYnl0ZSBhcnJheSBjb250YWlucyBpbnZhbGlkIFVURi04XG4gKiBzZXF1ZW5jZXMuXG4gKi9cbmV4cG9ydCBjbGFzcyBTcGVjaWFsQ2FzZUJpbmFyeVN0cmluZ1NjaGVtYSBleHRlbmRzIFNjaGVtYSB7XG4gICAgZGVmYXVsdFZhbHVlKCkge1xuICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoKTtcbiAgICB9XG4gICAgaXNEZWZhdWx0VmFsdWUoZGF0YSkge1xuICAgICAgICByZXR1cm4gZGF0YSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkgJiYgZGF0YS5ieXRlTGVuZ3RoID09PSAwO1xuICAgIH1cbiAgICBwcmVwYXJlTXNncGFjayhkYXRhKSB7XG4gICAgICAgIGlmIChkYXRhIGluc3RhbmNlb2YgVWludDhBcnJheSkge1xuICAgICAgICAgICAgLy8gQ2FzdCBpcyBuZWVkZWQgYmVjYXVzZSBSYXdCaW5hcnlTdHJpbmcgaXMgbm90IHBhcnQgb2YgdGhlIHN0YW5kYXJkIE1zZ3BhY2tFbmNvZGluZ0RhdGFcbiAgICAgICAgICAgIHJldHVybiBuZXcgUmF3QmluYXJ5U3RyaW5nKGRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBieXRlIGFycmF5OiAoJHt0eXBlb2YgZGF0YX0pICR7ZGF0YX1gKTtcbiAgICB9XG4gICAgZnJvbVByZXBhcmVkTXNncGFjayhfZW5jb2RlZCwgcmF3U3RyaW5nUHJvdmlkZXIpIHtcbiAgICAgICAgcmV0dXJuIHJhd1N0cmluZ1Byb3ZpZGVyLmdldFJhd1N0cmluZ0F0Q3VycmVudExvY2F0aW9uKCk7XG4gICAgfVxuICAgIHByZXBhcmVKU09OKGRhdGEsIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKGRhdGEgaW5zdGFuY2VvZiBVaW50OEFycmF5KSB7XG4gICAgICAgICAgICAvLyBOb3Qgc2FmZSB0byBjb252ZXJ0IHRvIHN0cmluZyBmb3IgYWxsIGJpbmFyeSBkYXRhXG4gICAgICAgICAgICBjb25zdCBzdHJpbmdWYWx1ZSA9IGJ5dGVzVG9TdHJpbmcoZGF0YSk7XG4gICAgICAgICAgICBpZiAoIW9wdGlvbnMubG9zc3lCaW5hcnlTdHJpbmdDb252ZXJzaW9uICYmXG4gICAgICAgICAgICAgICAgIWFycmF5RXF1YWwoY29lcmNlVG9CeXRlcyhzdHJpbmdWYWx1ZSksIGRhdGEpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIFVURi04IGJ5dGUgYXJyYXkgZW5jb3VudGVyZWQuIEVuY29kZSB3aXRoIGxvc3N5QmluYXJ5U3RyaW5nQ29udmVyc2lvbiBlbmFibGVkIHRvIGJ5cGFzcyB0aGlzIGNoZWNrLiBCYXNlNjQgdmFsdWU6ICR7Ynl0ZXNUb0Jhc2U2NChkYXRhKX1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBzdHJpbmdWYWx1ZTtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgYnl0ZSBhcnJheTogKCR7dHlwZW9mIGRhdGF9KSAke2RhdGF9YCk7XG4gICAgfVxuICAgIGZyb21QcmVwYXJlZEpTT04oZW5jb2RlZCkge1xuICAgICAgICBpZiAodHlwZW9mIGVuY29kZWQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICByZXR1cm4gY29lcmNlVG9CeXRlcyhlbmNvZGVkKTtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgYnl0ZSBhcnJheTogKCR7dHlwZW9mIGVuY29kZWR9KSAke2VuY29kZWR9YCk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YmluYXJ5c3RyaW5nLmpzLm1hcCJdLCJuYW1lcyI6WyJSYXdCaW5hcnlTdHJpbmciLCJTY2hlbWEiLCJjb2VyY2VUb0J5dGVzIiwiYnl0ZXNUb1N0cmluZyIsImJ5dGVzVG9CYXNlNjQiLCJhcnJheUVxdWFsIiwiU3BlY2lhbENhc2VCaW5hcnlTdHJpbmdTY2hlbWEiLCJkZWZhdWx0VmFsdWUiLCJVaW50OEFycmF5IiwiaXNEZWZhdWx0VmFsdWUiLCJkYXRhIiwiYnl0ZUxlbmd0aCIsInByZXBhcmVNc2dwYWNrIiwiRXJyb3IiLCJmcm9tUHJlcGFyZWRNc2dwYWNrIiwiX2VuY29kZWQiLCJyYXdTdHJpbmdQcm92aWRlciIsImdldFJhd1N0cmluZ0F0Q3VycmVudExvY2F0aW9uIiwicHJlcGFyZUpTT04iLCJvcHRpb25zIiwic3RyaW5nVmFsdWUiLCJsb3NzeUJpbmFyeVN0cmluZ0NvbnZlcnNpb24iLCJmcm9tUHJlcGFyZWRKU09OIiwiZW5jb2RlZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/encoding/schema/binarystring.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/encoding/schema/blockhash.js":
/*!********************************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/encoding/schema/blockhash.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BlockHashSchema: () => (/* binding */ BlockHashSchema)\n/* harmony export */ });\n/* harmony import */ var hi_base32__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! hi-base32 */ \"(ssr)/./node_modules/hi-base32/src/base32.js\");\n/* harmony import */ var _encoding_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../encoding.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/encoding.js\");\n\n\n/**\n * Length of a block hash in bytes\n */ const blockHashByteLength = 32;\n/* eslint-disable class-methods-use-this */ /**\n * Length of a 32-byte encoded in base32 without padding\n */ const base32Length = 52;\n/**\n * BlockHashSchema is a schema for block hashes.\n *\n * In msgapck, these types are encoded as 32-byte binary strings. In JSON, they\n * are encoded as strings prefixed with \"blk-\" followed by the base32 encoding\n * of the 32-byte block hash without any padding.\n */ class BlockHashSchema extends _encoding_js__WEBPACK_IMPORTED_MODULE_1__.Schema {\n    defaultValue() {\n        return new Uint8Array(blockHashByteLength);\n    }\n    isDefaultValue(data) {\n        return data instanceof Uint8Array && data.byteLength === blockHashByteLength && data.every((byte)=>byte === 0);\n    }\n    prepareMsgpack(data) {\n        if (data instanceof Uint8Array && data.byteLength === blockHashByteLength) {\n            return data;\n        }\n        throw new Error(`Invalid block hash: (${typeof data}) ${data}`);\n    }\n    fromPreparedMsgpack(encoded, // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _rawStringProvider) {\n        if (encoded instanceof Uint8Array && encoded.byteLength === blockHashByteLength) {\n            return encoded;\n        }\n        throw new Error(`Invalid block hash: (${typeof encoded}) ${encoded}`);\n    }\n    prepareJSON(data, // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _options) {\n        if (data instanceof Uint8Array && data.byteLength === blockHashByteLength) {\n            return `blk-${hi_base32__WEBPACK_IMPORTED_MODULE_0__.encode(data).slice(0, base32Length)}`;\n        }\n        throw new Error(`Invalid block hash: (${typeof data}) ${data}`);\n    }\n    fromPreparedJSON(encoded) {\n        if (typeof encoded === \"string\" && encoded.length === base32Length + 4 && encoded.startsWith(\"blk-\")) {\n            return Uint8Array.from(hi_base32__WEBPACK_IMPORTED_MODULE_0__.decode.asBytes(encoded.slice(4)));\n        }\n        throw new Error(`Invalid block hash: (${typeof encoded}) ${encoded}`);\n    }\n} //# sourceMappingURL=blockhash.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9lbmNvZGluZy9zY2hlbWEvYmxvY2toYXNoLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUErQjtBQUNVO0FBQ3pDOztDQUVDLEdBQ0QsTUFBTUUsc0JBQXNCO0FBQzVCLHlDQUF5QyxHQUN6Qzs7Q0FFQyxHQUNELE1BQU1DLGVBQWU7QUFDckI7Ozs7OztDQU1DLEdBQ00sTUFBTUMsd0JBQXdCSCxnREFBTUE7SUFDdkNJLGVBQWU7UUFDWCxPQUFPLElBQUlDLFdBQVdKO0lBQzFCO0lBQ0FLLGVBQWVDLElBQUksRUFBRTtRQUNqQixPQUFRQSxnQkFBZ0JGLGNBQ3BCRSxLQUFLQyxVQUFVLEtBQUtQLHVCQUNwQk0sS0FBS0UsS0FBSyxDQUFDLENBQUNDLE9BQVNBLFNBQVM7SUFDdEM7SUFDQUMsZUFBZUosSUFBSSxFQUFFO1FBQ2pCLElBQUlBLGdCQUFnQkYsY0FBY0UsS0FBS0MsVUFBVSxLQUFLUCxxQkFBcUI7WUFDdkUsT0FBT007UUFDWDtRQUNBLE1BQU0sSUFBSUssTUFBTSxDQUFDLHFCQUFxQixFQUFFLE9BQU9MLEtBQUssRUFBRSxFQUFFQSxLQUFLLENBQUM7SUFDbEU7SUFDQU0sb0JBQW9CQyxPQUFPLEVBQzNCLDZEQUE2RDtJQUM3REMsa0JBQWtCLEVBQUU7UUFDaEIsSUFBSUQsbUJBQW1CVCxjQUNuQlMsUUFBUU4sVUFBVSxLQUFLUCxxQkFBcUI7WUFDNUMsT0FBT2E7UUFDWDtRQUNBLE1BQU0sSUFBSUYsTUFBTSxDQUFDLHFCQUFxQixFQUFFLE9BQU9FLFFBQVEsRUFBRSxFQUFFQSxRQUFRLENBQUM7SUFDeEU7SUFDQUUsWUFBWVQsSUFBSSxFQUNoQiw2REFBNkQ7SUFDN0RVLFFBQVEsRUFBRTtRQUNOLElBQUlWLGdCQUFnQkYsY0FBY0UsS0FBS0MsVUFBVSxLQUFLUCxxQkFBcUI7WUFDdkUsT0FBTyxDQUFDLElBQUksRUFBRUYsNkNBQWEsQ0FBQ1EsTUFBTVksS0FBSyxDQUFDLEdBQUdqQixjQUFjLENBQUM7UUFDOUQ7UUFDQSxNQUFNLElBQUlVLE1BQU0sQ0FBQyxxQkFBcUIsRUFBRSxPQUFPTCxLQUFLLEVBQUUsRUFBRUEsS0FBSyxDQUFDO0lBQ2xFO0lBQ0FhLGlCQUFpQk4sT0FBTyxFQUFFO1FBQ3RCLElBQUksT0FBT0EsWUFBWSxZQUNuQkEsUUFBUU8sTUFBTSxLQUFLbkIsZUFBZSxLQUNsQ1ksUUFBUVEsVUFBVSxDQUFDLFNBQVM7WUFDNUIsT0FBT2pCLFdBQVdrQixJQUFJLENBQUN4Qiw2Q0FBYSxDQUFDMEIsT0FBTyxDQUFDWCxRQUFRSyxLQUFLLENBQUM7UUFDL0Q7UUFDQSxNQUFNLElBQUlQLE1BQU0sQ0FBQyxxQkFBcUIsRUFBRSxPQUFPRSxRQUFRLEVBQUUsRUFBRUEsUUFBUSxDQUFDO0lBQ3hFO0FBQ0osRUFDQSxxQ0FBcUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hbGdvcmFuZC1jcm93ZGZ1bmRpbmctZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9lbmNvZGluZy9zY2hlbWEvYmxvY2toYXNoLmpzPzMzM2EiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGJhc2UzMiBmcm9tICdoaS1iYXNlMzInO1xuaW1wb3J0IHsgU2NoZW1hLCB9IGZyb20gJy4uL2VuY29kaW5nLmpzJztcbi8qKlxuICogTGVuZ3RoIG9mIGEgYmxvY2sgaGFzaCBpbiBieXRlc1xuICovXG5jb25zdCBibG9ja0hhc2hCeXRlTGVuZ3RoID0gMzI7XG4vKiBlc2xpbnQtZGlzYWJsZSBjbGFzcy1tZXRob2RzLXVzZS10aGlzICovXG4vKipcbiAqIExlbmd0aCBvZiBhIDMyLWJ5dGUgZW5jb2RlZCBpbiBiYXNlMzIgd2l0aG91dCBwYWRkaW5nXG4gKi9cbmNvbnN0IGJhc2UzMkxlbmd0aCA9IDUyO1xuLyoqXG4gKiBCbG9ja0hhc2hTY2hlbWEgaXMgYSBzY2hlbWEgZm9yIGJsb2NrIGhhc2hlcy5cbiAqXG4gKiBJbiBtc2dhcGNrLCB0aGVzZSB0eXBlcyBhcmUgZW5jb2RlZCBhcyAzMi1ieXRlIGJpbmFyeSBzdHJpbmdzLiBJbiBKU09OLCB0aGV5XG4gKiBhcmUgZW5jb2RlZCBhcyBzdHJpbmdzIHByZWZpeGVkIHdpdGggXCJibGstXCIgZm9sbG93ZWQgYnkgdGhlIGJhc2UzMiBlbmNvZGluZ1xuICogb2YgdGhlIDMyLWJ5dGUgYmxvY2sgaGFzaCB3aXRob3V0IGFueSBwYWRkaW5nLlxuICovXG5leHBvcnQgY2xhc3MgQmxvY2tIYXNoU2NoZW1hIGV4dGVuZHMgU2NoZW1hIHtcbiAgICBkZWZhdWx0VmFsdWUoKSB7XG4gICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShibG9ja0hhc2hCeXRlTGVuZ3RoKTtcbiAgICB9XG4gICAgaXNEZWZhdWx0VmFsdWUoZGF0YSkge1xuICAgICAgICByZXR1cm4gKGRhdGEgaW5zdGFuY2VvZiBVaW50OEFycmF5ICYmXG4gICAgICAgICAgICBkYXRhLmJ5dGVMZW5ndGggPT09IGJsb2NrSGFzaEJ5dGVMZW5ndGggJiZcbiAgICAgICAgICAgIGRhdGEuZXZlcnkoKGJ5dGUpID0+IGJ5dGUgPT09IDApKTtcbiAgICB9XG4gICAgcHJlcGFyZU1zZ3BhY2soZGF0YSkge1xuICAgICAgICBpZiAoZGF0YSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkgJiYgZGF0YS5ieXRlTGVuZ3RoID09PSBibG9ja0hhc2hCeXRlTGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgYmxvY2sgaGFzaDogKCR7dHlwZW9mIGRhdGF9KSAke2RhdGF9YCk7XG4gICAgfVxuICAgIGZyb21QcmVwYXJlZE1zZ3BhY2soZW5jb2RlZCwgXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyc1xuICAgIF9yYXdTdHJpbmdQcm92aWRlcikge1xuICAgICAgICBpZiAoZW5jb2RlZCBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkgJiZcbiAgICAgICAgICAgIGVuY29kZWQuYnl0ZUxlbmd0aCA9PT0gYmxvY2tIYXNoQnl0ZUxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIGVuY29kZWQ7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIGJsb2NrIGhhc2g6ICgke3R5cGVvZiBlbmNvZGVkfSkgJHtlbmNvZGVkfWApO1xuICAgIH1cbiAgICBwcmVwYXJlSlNPTihkYXRhLCBcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXG4gICAgX29wdGlvbnMpIHtcbiAgICAgICAgaWYgKGRhdGEgaW5zdGFuY2VvZiBVaW50OEFycmF5ICYmIGRhdGEuYnl0ZUxlbmd0aCA9PT0gYmxvY2tIYXNoQnl0ZUxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIGBibGstJHtiYXNlMzIuZW5jb2RlKGRhdGEpLnNsaWNlKDAsIGJhc2UzMkxlbmd0aCl9YDtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgYmxvY2sgaGFzaDogKCR7dHlwZW9mIGRhdGF9KSAke2RhdGF9YCk7XG4gICAgfVxuICAgIGZyb21QcmVwYXJlZEpTT04oZW5jb2RlZCkge1xuICAgICAgICBpZiAodHlwZW9mIGVuY29kZWQgPT09ICdzdHJpbmcnICYmXG4gICAgICAgICAgICBlbmNvZGVkLmxlbmd0aCA9PT0gYmFzZTMyTGVuZ3RoICsgNCAmJlxuICAgICAgICAgICAgZW5jb2RlZC5zdGFydHNXaXRoKCdibGstJykpIHtcbiAgICAgICAgICAgIHJldHVybiBVaW50OEFycmF5LmZyb20oYmFzZTMyLmRlY29kZS5hc0J5dGVzKGVuY29kZWQuc2xpY2UoNCkpKTtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgYmxvY2sgaGFzaDogKCR7dHlwZW9mIGVuY29kZWR9KSAke2VuY29kZWR9YCk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YmxvY2toYXNoLmpzLm1hcCJdLCJuYW1lcyI6WyJiYXNlMzIiLCJTY2hlbWEiLCJibG9ja0hhc2hCeXRlTGVuZ3RoIiwiYmFzZTMyTGVuZ3RoIiwiQmxvY2tIYXNoU2NoZW1hIiwiZGVmYXVsdFZhbHVlIiwiVWludDhBcnJheSIsImlzRGVmYXVsdFZhbHVlIiwiZGF0YSIsImJ5dGVMZW5ndGgiLCJldmVyeSIsImJ5dGUiLCJwcmVwYXJlTXNncGFjayIsIkVycm9yIiwiZnJvbVByZXBhcmVkTXNncGFjayIsImVuY29kZWQiLCJfcmF3U3RyaW5nUHJvdmlkZXIiLCJwcmVwYXJlSlNPTiIsIl9vcHRpb25zIiwiZW5jb2RlIiwic2xpY2UiLCJmcm9tUHJlcGFyZWRKU09OIiwibGVuZ3RoIiwic3RhcnRzV2l0aCIsImZyb20iLCJkZWNvZGUiLCJhc0J5dGVzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/encoding/schema/blockhash.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/encoding/schema/boolean.js":
/*!******************************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/encoding/schema/boolean.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BooleanSchema: () => (/* binding */ BooleanSchema)\n/* harmony export */ });\n/* harmony import */ var _encoding_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../encoding.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/encoding.js\");\n\n/* eslint-disable class-methods-use-this */ class BooleanSchema extends _encoding_js__WEBPACK_IMPORTED_MODULE_0__.Schema {\n    defaultValue() {\n        return false;\n    }\n    isDefaultValue(data) {\n        return data === false;\n    }\n    prepareMsgpack(data) {\n        if (typeof data === \"boolean\") {\n            return data;\n        }\n        throw new Error(\"Invalid boolean\");\n    }\n    fromPreparedMsgpack(encoded, // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _rawStringProvider) {\n        if (typeof encoded === \"boolean\") {\n            return encoded;\n        }\n        throw new Error(\"Invalid boolean\");\n    }\n    prepareJSON(data, _options) {\n        if (typeof data === \"boolean\") {\n            return data;\n        }\n        throw new Error(\"Invalid boolean\");\n    }\n    fromPreparedJSON(encoded) {\n        if (typeof encoded === \"boolean\") {\n            return encoded;\n        }\n        throw new Error(\"Invalid boolean\");\n    }\n} //# sourceMappingURL=boolean.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9lbmNvZGluZy9zY2hlbWEvYm9vbGVhbi5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUF5QztBQUN6Qyx5Q0FBeUMsR0FDbEMsTUFBTUMsc0JBQXNCRCxnREFBTUE7SUFDckNFLGVBQWU7UUFDWCxPQUFPO0lBQ1g7SUFDQUMsZUFBZUMsSUFBSSxFQUFFO1FBQ2pCLE9BQU9BLFNBQVM7SUFDcEI7SUFDQUMsZUFBZUQsSUFBSSxFQUFFO1FBQ2pCLElBQUksT0FBT0EsU0FBUyxXQUFXO1lBQzNCLE9BQU9BO1FBQ1g7UUFDQSxNQUFNLElBQUlFLE1BQU07SUFDcEI7SUFDQUMsb0JBQW9CQyxPQUFPLEVBQzNCLDZEQUE2RDtJQUM3REMsa0JBQWtCLEVBQUU7UUFDaEIsSUFBSSxPQUFPRCxZQUFZLFdBQVc7WUFDOUIsT0FBT0E7UUFDWDtRQUNBLE1BQU0sSUFBSUYsTUFBTTtJQUNwQjtJQUNBSSxZQUFZTixJQUFJLEVBQ2hCTyxRQUFRLEVBQUU7UUFDTixJQUFJLE9BQU9QLFNBQVMsV0FBVztZQUMzQixPQUFPQTtRQUNYO1FBQ0EsTUFBTSxJQUFJRSxNQUFNO0lBQ3BCO0lBQ0FNLGlCQUFpQkosT0FBTyxFQUFFO1FBQ3RCLElBQUksT0FBT0EsWUFBWSxXQUFXO1lBQzlCLE9BQU9BO1FBQ1g7UUFDQSxNQUFNLElBQUlGLE1BQU07SUFDcEI7QUFDSixFQUNBLG1DQUFtQyIsInNvdXJjZXMiOlsid2VicGFjazovL2FsZ29yYW5kLWNyb3dkZnVuZGluZy1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9hbGdvc2RrL2Rpc3QvZXNtL2VuY29kaW5nL3NjaGVtYS9ib29sZWFuLmpzP2I2MDkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU2NoZW1hLCB9IGZyb20gJy4uL2VuY29kaW5nLmpzJztcbi8qIGVzbGludC1kaXNhYmxlIGNsYXNzLW1ldGhvZHMtdXNlLXRoaXMgKi9cbmV4cG9ydCBjbGFzcyBCb29sZWFuU2NoZW1hIGV4dGVuZHMgU2NoZW1hIHtcbiAgICBkZWZhdWx0VmFsdWUoKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaXNEZWZhdWx0VmFsdWUoZGF0YSkge1xuICAgICAgICByZXR1cm4gZGF0YSA9PT0gZmFsc2U7XG4gICAgfVxuICAgIHByZXBhcmVNc2dwYWNrKGRhdGEpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBkYXRhID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBib29sZWFuJyk7XG4gICAgfVxuICAgIGZyb21QcmVwYXJlZE1zZ3BhY2soZW5jb2RlZCwgXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyc1xuICAgIF9yYXdTdHJpbmdQcm92aWRlcikge1xuICAgICAgICBpZiAodHlwZW9mIGVuY29kZWQgPT09ICdib29sZWFuJykge1xuICAgICAgICAgICAgcmV0dXJuIGVuY29kZWQ7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGJvb2xlYW4nKTtcbiAgICB9XG4gICAgcHJlcGFyZUpTT04oZGF0YSwgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyc1xuICAgIF9vcHRpb25zKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZGF0YSA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgYm9vbGVhbicpO1xuICAgIH1cbiAgICBmcm9tUHJlcGFyZWRKU09OKGVuY29kZWQpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBlbmNvZGVkID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICAgIHJldHVybiBlbmNvZGVkO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBib29sZWFuJyk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Ym9vbGVhbi5qcy5tYXAiXSwibmFtZXMiOlsiU2NoZW1hIiwiQm9vbGVhblNjaGVtYSIsImRlZmF1bHRWYWx1ZSIsImlzRGVmYXVsdFZhbHVlIiwiZGF0YSIsInByZXBhcmVNc2dwYWNrIiwiRXJyb3IiLCJmcm9tUHJlcGFyZWRNc2dwYWNrIiwiZW5jb2RlZCIsIl9yYXdTdHJpbmdQcm92aWRlciIsInByZXBhcmVKU09OIiwiX29wdGlvbnMiLCJmcm9tUHJlcGFyZWRKU09OIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/encoding/schema/boolean.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/encoding/schema/bytearray.js":
/*!********************************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/encoding/schema/bytearray.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ByteArraySchema: () => (/* binding */ ByteArraySchema),\n/* harmony export */   FixedLengthByteArraySchema: () => (/* binding */ FixedLengthByteArraySchema)\n/* harmony export */ });\n/* harmony import */ var _encoding_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../encoding.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/encoding.js\");\n/* harmony import */ var _binarydata_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../binarydata.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/binarydata.js\");\n\n\n/* eslint-disable class-methods-use-this */ class ByteArraySchema extends _encoding_js__WEBPACK_IMPORTED_MODULE_0__.Schema {\n    defaultValue() {\n        return new Uint8Array();\n    }\n    isDefaultValue(data) {\n        return data instanceof Uint8Array && data.byteLength === 0;\n    }\n    prepareMsgpack(data) {\n        if (data instanceof Uint8Array) {\n            return data;\n        }\n        throw new Error(`Invalid byte array: (${typeof data}) ${data}`);\n    }\n    fromPreparedMsgpack(encoded, // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _rawStringProvider) {\n        if (encoded instanceof Uint8Array) {\n            return encoded;\n        }\n        throw new Error(`Invalid byte array: (${typeof encoded}) ${encoded}`);\n    }\n    prepareJSON(data, // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _options) {\n        if (data instanceof Uint8Array) {\n            return (0,_binarydata_js__WEBPACK_IMPORTED_MODULE_1__.bytesToBase64)(data);\n        }\n        throw new Error(`Invalid byte array: (${typeof data}) ${data}`);\n    }\n    fromPreparedJSON(encoded) {\n        if (encoded === null || encoded === undefined) {\n            return this.defaultValue();\n        }\n        if (typeof encoded === \"string\") {\n            return (0,_binarydata_js__WEBPACK_IMPORTED_MODULE_1__.base64ToBytes)(encoded);\n        }\n        throw new Error(`Invalid byte array: (${typeof encoded}) ${encoded}`);\n    }\n}\nclass FixedLengthByteArraySchema extends _encoding_js__WEBPACK_IMPORTED_MODULE_0__.Schema {\n    constructor(length){\n        super();\n        this.length = length;\n    }\n    defaultValue() {\n        return new Uint8Array(this.length);\n    }\n    isDefaultValue(data) {\n        return data instanceof Uint8Array && data.byteLength === this.length && data.every((byte)=>byte === 0);\n    }\n    prepareMsgpack(data) {\n        if (data instanceof Uint8Array) {\n            if (data.byteLength === this.length) {\n                return data;\n            }\n            throw new Error(`Invalid byte array length: wanted ${this.length}, got ${data.byteLength}`);\n        }\n        throw new Error(\"Invalid byte array\");\n    }\n    fromPreparedMsgpack(encoded, // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _rawStringProvider) {\n        if (encoded instanceof Uint8Array) {\n            if (encoded.byteLength === this.length) {\n                return encoded;\n            }\n            throw new Error(`Invalid byte array length: wanted ${this.length}, got ${encoded.byteLength}`);\n        }\n        throw new Error(\"Invalid byte array\");\n    }\n    prepareJSON(data) {\n        if (data instanceof Uint8Array) {\n            if (data.byteLength === this.length) {\n                return (0,_binarydata_js__WEBPACK_IMPORTED_MODULE_1__.bytesToBase64)(data);\n            }\n            throw new Error(`Invalid byte array length: wanted ${this.length}, got ${data.byteLength}`);\n        }\n        throw new Error(\"Invalid byte array\");\n    }\n    fromPreparedJSON(encoded) {\n        if (typeof encoded === \"string\") {\n            const bytes = (0,_binarydata_js__WEBPACK_IMPORTED_MODULE_1__.base64ToBytes)(encoded);\n            if (bytes.byteLength === this.length) {\n                return bytes;\n            }\n            throw new Error(`Invalid byte array length: wanted ${this.length}, got ${bytes.byteLength}`);\n        }\n        throw new Error(\"Invalid base64 byte array\");\n    }\n} //# sourceMappingURL=bytearray.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9lbmNvZGluZy9zY2hlbWEvYnl0ZWFycmF5LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBeUM7QUFDdUI7QUFDaEUseUNBQXlDLEdBQ2xDLE1BQU1HLHdCQUF3QkgsZ0RBQU1BO0lBQ3ZDSSxlQUFlO1FBQ1gsT0FBTyxJQUFJQztJQUNmO0lBQ0FDLGVBQWVDLElBQUksRUFBRTtRQUNqQixPQUFPQSxnQkFBZ0JGLGNBQWNFLEtBQUtDLFVBQVUsS0FBSztJQUM3RDtJQUNBQyxlQUFlRixJQUFJLEVBQUU7UUFDakIsSUFBSUEsZ0JBQWdCRixZQUFZO1lBQzVCLE9BQU9FO1FBQ1g7UUFDQSxNQUFNLElBQUlHLE1BQU0sQ0FBQyxxQkFBcUIsRUFBRSxPQUFPSCxLQUFLLEVBQUUsRUFBRUEsS0FBSyxDQUFDO0lBQ2xFO0lBQ0FJLG9CQUFvQkMsT0FBTyxFQUMzQiw2REFBNkQ7SUFDN0RDLGtCQUFrQixFQUFFO1FBQ2hCLElBQUlELG1CQUFtQlAsWUFBWTtZQUMvQixPQUFPTztRQUNYO1FBQ0EsTUFBTSxJQUFJRixNQUFNLENBQUMscUJBQXFCLEVBQUUsT0FBT0UsUUFBUSxFQUFFLEVBQUVBLFFBQVEsQ0FBQztJQUN4RTtJQUNBRSxZQUFZUCxJQUFJLEVBQ2hCLDZEQUE2RDtJQUM3RFEsUUFBUSxFQUFFO1FBQ04sSUFBSVIsZ0JBQWdCRixZQUFZO1lBQzVCLE9BQU9ILDZEQUFhQSxDQUFDSztRQUN6QjtRQUNBLE1BQU0sSUFBSUcsTUFBTSxDQUFDLHFCQUFxQixFQUFFLE9BQU9ILEtBQUssRUFBRSxFQUFFQSxLQUFLLENBQUM7SUFDbEU7SUFDQVMsaUJBQWlCSixPQUFPLEVBQUU7UUFDdEIsSUFBSUEsWUFBWSxRQUFRQSxZQUFZSyxXQUFXO1lBQzNDLE9BQU8sSUFBSSxDQUFDYixZQUFZO1FBQzVCO1FBQ0EsSUFBSSxPQUFPUSxZQUFZLFVBQVU7WUFDN0IsT0FBT1gsNkRBQWFBLENBQUNXO1FBQ3pCO1FBQ0EsTUFBTSxJQUFJRixNQUFNLENBQUMscUJBQXFCLEVBQUUsT0FBT0UsUUFBUSxFQUFFLEVBQUVBLFFBQVEsQ0FBQztJQUN4RTtBQUNKO0FBQ08sTUFBTU0sbUNBQW1DbEIsZ0RBQU1BO0lBQ2xEbUIsWUFBWUMsTUFBTSxDQUFFO1FBQ2hCLEtBQUs7UUFDTCxJQUFJLENBQUNBLE1BQU0sR0FBR0E7SUFDbEI7SUFDQWhCLGVBQWU7UUFDWCxPQUFPLElBQUlDLFdBQVcsSUFBSSxDQUFDZSxNQUFNO0lBQ3JDO0lBQ0FkLGVBQWVDLElBQUksRUFBRTtRQUNqQixPQUFRQSxnQkFBZ0JGLGNBQ3BCRSxLQUFLQyxVQUFVLEtBQUssSUFBSSxDQUFDWSxNQUFNLElBQy9CYixLQUFLYyxLQUFLLENBQUMsQ0FBQ0MsT0FBU0EsU0FBUztJQUN0QztJQUNBYixlQUFlRixJQUFJLEVBQUU7UUFDakIsSUFBSUEsZ0JBQWdCRixZQUFZO1lBQzVCLElBQUlFLEtBQUtDLFVBQVUsS0FBSyxJQUFJLENBQUNZLE1BQU0sRUFBRTtnQkFDakMsT0FBT2I7WUFDWDtZQUNBLE1BQU0sSUFBSUcsTUFBTSxDQUFDLGtDQUFrQyxFQUFFLElBQUksQ0FBQ1UsTUFBTSxDQUFDLE1BQU0sRUFBRWIsS0FBS0MsVUFBVSxDQUFDLENBQUM7UUFDOUY7UUFDQSxNQUFNLElBQUlFLE1BQU07SUFDcEI7SUFDQUMsb0JBQW9CQyxPQUFPLEVBQzNCLDZEQUE2RDtJQUM3REMsa0JBQWtCLEVBQUU7UUFDaEIsSUFBSUQsbUJBQW1CUCxZQUFZO1lBQy9CLElBQUlPLFFBQVFKLFVBQVUsS0FBSyxJQUFJLENBQUNZLE1BQU0sRUFBRTtnQkFDcEMsT0FBT1I7WUFDWDtZQUNBLE1BQU0sSUFBSUYsTUFBTSxDQUFDLGtDQUFrQyxFQUFFLElBQUksQ0FBQ1UsTUFBTSxDQUFDLE1BQU0sRUFBRVIsUUFBUUosVUFBVSxDQUFDLENBQUM7UUFDakc7UUFDQSxNQUFNLElBQUlFLE1BQU07SUFDcEI7SUFDQUksWUFBWVAsSUFBSSxFQUFFO1FBQ2QsSUFBSUEsZ0JBQWdCRixZQUFZO1lBQzVCLElBQUlFLEtBQUtDLFVBQVUsS0FBSyxJQUFJLENBQUNZLE1BQU0sRUFBRTtnQkFDakMsT0FBT2xCLDZEQUFhQSxDQUFDSztZQUN6QjtZQUNBLE1BQU0sSUFBSUcsTUFBTSxDQUFDLGtDQUFrQyxFQUFFLElBQUksQ0FBQ1UsTUFBTSxDQUFDLE1BQU0sRUFBRWIsS0FBS0MsVUFBVSxDQUFDLENBQUM7UUFDOUY7UUFDQSxNQUFNLElBQUlFLE1BQU07SUFDcEI7SUFDQU0saUJBQWlCSixPQUFPLEVBQUU7UUFDdEIsSUFBSSxPQUFPQSxZQUFZLFVBQVU7WUFDN0IsTUFBTVcsUUFBUXRCLDZEQUFhQSxDQUFDVztZQUM1QixJQUFJVyxNQUFNZixVQUFVLEtBQUssSUFBSSxDQUFDWSxNQUFNLEVBQUU7Z0JBQ2xDLE9BQU9HO1lBQ1g7WUFDQSxNQUFNLElBQUliLE1BQU0sQ0FBQyxrQ0FBa0MsRUFBRSxJQUFJLENBQUNVLE1BQU0sQ0FBQyxNQUFNLEVBQUVHLE1BQU1mLFVBQVUsQ0FBQyxDQUFDO1FBQy9GO1FBQ0EsTUFBTSxJQUFJRSxNQUFNO0lBQ3BCO0FBQ0osRUFDQSxxQ0FBcUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hbGdvcmFuZC1jcm93ZGZ1bmRpbmctZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9lbmNvZGluZy9zY2hlbWEvYnl0ZWFycmF5LmpzP2M5Y2IiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU2NoZW1hLCB9IGZyb20gJy4uL2VuY29kaW5nLmpzJztcbmltcG9ydCB7IGJhc2U2NFRvQnl0ZXMsIGJ5dGVzVG9CYXNlNjQgfSBmcm9tICcuLi9iaW5hcnlkYXRhLmpzJztcbi8qIGVzbGludC1kaXNhYmxlIGNsYXNzLW1ldGhvZHMtdXNlLXRoaXMgKi9cbmV4cG9ydCBjbGFzcyBCeXRlQXJyYXlTY2hlbWEgZXh0ZW5kcyBTY2hlbWEge1xuICAgIGRlZmF1bHRWYWx1ZSgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KCk7XG4gICAgfVxuICAgIGlzRGVmYXVsdFZhbHVlKGRhdGEpIHtcbiAgICAgICAgcmV0dXJuIGRhdGEgaW5zdGFuY2VvZiBVaW50OEFycmF5ICYmIGRhdGEuYnl0ZUxlbmd0aCA9PT0gMDtcbiAgICB9XG4gICAgcHJlcGFyZU1zZ3BhY2soZGF0YSkge1xuICAgICAgICBpZiAoZGF0YSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpIHtcbiAgICAgICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBieXRlIGFycmF5OiAoJHt0eXBlb2YgZGF0YX0pICR7ZGF0YX1gKTtcbiAgICB9XG4gICAgZnJvbVByZXBhcmVkTXNncGFjayhlbmNvZGVkLCBcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXG4gICAgX3Jhd1N0cmluZ1Byb3ZpZGVyKSB7XG4gICAgICAgIGlmIChlbmNvZGVkIGluc3RhbmNlb2YgVWludDhBcnJheSkge1xuICAgICAgICAgICAgcmV0dXJuIGVuY29kZWQ7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIGJ5dGUgYXJyYXk6ICgke3R5cGVvZiBlbmNvZGVkfSkgJHtlbmNvZGVkfWApO1xuICAgIH1cbiAgICBwcmVwYXJlSlNPTihkYXRhLCBcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXG4gICAgX29wdGlvbnMpIHtcbiAgICAgICAgaWYgKGRhdGEgaW5zdGFuY2VvZiBVaW50OEFycmF5KSB7XG4gICAgICAgICAgICByZXR1cm4gYnl0ZXNUb0Jhc2U2NChkYXRhKTtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgYnl0ZSBhcnJheTogKCR7dHlwZW9mIGRhdGF9KSAke2RhdGF9YCk7XG4gICAgfVxuICAgIGZyb21QcmVwYXJlZEpTT04oZW5jb2RlZCkge1xuICAgICAgICBpZiAoZW5jb2RlZCA9PT0gbnVsbCB8fCBlbmNvZGVkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRlZmF1bHRWYWx1ZSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgZW5jb2RlZCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHJldHVybiBiYXNlNjRUb0J5dGVzKGVuY29kZWQpO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBieXRlIGFycmF5OiAoJHt0eXBlb2YgZW5jb2RlZH0pICR7ZW5jb2RlZH1gKTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgRml4ZWRMZW5ndGhCeXRlQXJyYXlTY2hlbWEgZXh0ZW5kcyBTY2hlbWEge1xuICAgIGNvbnN0cnVjdG9yKGxlbmd0aCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmxlbmd0aCA9IGxlbmd0aDtcbiAgICB9XG4gICAgZGVmYXVsdFZhbHVlKCkge1xuICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkodGhpcy5sZW5ndGgpO1xuICAgIH1cbiAgICBpc0RlZmF1bHRWYWx1ZShkYXRhKSB7XG4gICAgICAgIHJldHVybiAoZGF0YSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkgJiZcbiAgICAgICAgICAgIGRhdGEuYnl0ZUxlbmd0aCA9PT0gdGhpcy5sZW5ndGggJiZcbiAgICAgICAgICAgIGRhdGEuZXZlcnkoKGJ5dGUpID0+IGJ5dGUgPT09IDApKTtcbiAgICB9XG4gICAgcHJlcGFyZU1zZ3BhY2soZGF0YSkge1xuICAgICAgICBpZiAoZGF0YSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpIHtcbiAgICAgICAgICAgIGlmIChkYXRhLmJ5dGVMZW5ndGggPT09IHRoaXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgYnl0ZSBhcnJheSBsZW5ndGg6IHdhbnRlZCAke3RoaXMubGVuZ3RofSwgZ290ICR7ZGF0YS5ieXRlTGVuZ3RofWApO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBieXRlIGFycmF5Jyk7XG4gICAgfVxuICAgIGZyb21QcmVwYXJlZE1zZ3BhY2soZW5jb2RlZCwgXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyc1xuICAgIF9yYXdTdHJpbmdQcm92aWRlcikge1xuICAgICAgICBpZiAoZW5jb2RlZCBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpIHtcbiAgICAgICAgICAgIGlmIChlbmNvZGVkLmJ5dGVMZW5ndGggPT09IHRoaXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVuY29kZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgYnl0ZSBhcnJheSBsZW5ndGg6IHdhbnRlZCAke3RoaXMubGVuZ3RofSwgZ290ICR7ZW5jb2RlZC5ieXRlTGVuZ3RofWApO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBieXRlIGFycmF5Jyk7XG4gICAgfVxuICAgIHByZXBhcmVKU09OKGRhdGEpIHtcbiAgICAgICAgaWYgKGRhdGEgaW5zdGFuY2VvZiBVaW50OEFycmF5KSB7XG4gICAgICAgICAgICBpZiAoZGF0YS5ieXRlTGVuZ3RoID09PSB0aGlzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBieXRlc1RvQmFzZTY0KGRhdGEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIGJ5dGUgYXJyYXkgbGVuZ3RoOiB3YW50ZWQgJHt0aGlzLmxlbmd0aH0sIGdvdCAke2RhdGEuYnl0ZUxlbmd0aH1gKTtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgYnl0ZSBhcnJheScpO1xuICAgIH1cbiAgICBmcm9tUHJlcGFyZWRKU09OKGVuY29kZWQpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBlbmNvZGVkID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgY29uc3QgYnl0ZXMgPSBiYXNlNjRUb0J5dGVzKGVuY29kZWQpO1xuICAgICAgICAgICAgaWYgKGJ5dGVzLmJ5dGVMZW5ndGggPT09IHRoaXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGJ5dGVzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIGJ5dGUgYXJyYXkgbGVuZ3RoOiB3YW50ZWQgJHt0aGlzLmxlbmd0aH0sIGdvdCAke2J5dGVzLmJ5dGVMZW5ndGh9YCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGJhc2U2NCBieXRlIGFycmF5Jyk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Ynl0ZWFycmF5LmpzLm1hcCJdLCJuYW1lcyI6WyJTY2hlbWEiLCJiYXNlNjRUb0J5dGVzIiwiYnl0ZXNUb0Jhc2U2NCIsIkJ5dGVBcnJheVNjaGVtYSIsImRlZmF1bHRWYWx1ZSIsIlVpbnQ4QXJyYXkiLCJpc0RlZmF1bHRWYWx1ZSIsImRhdGEiLCJieXRlTGVuZ3RoIiwicHJlcGFyZU1zZ3BhY2siLCJFcnJvciIsImZyb21QcmVwYXJlZE1zZ3BhY2siLCJlbmNvZGVkIiwiX3Jhd1N0cmluZ1Byb3ZpZGVyIiwicHJlcGFyZUpTT04iLCJfb3B0aW9ucyIsImZyb21QcmVwYXJlZEpTT04iLCJ1bmRlZmluZWQiLCJGaXhlZExlbmd0aEJ5dGVBcnJheVNjaGVtYSIsImNvbnN0cnVjdG9yIiwibGVuZ3RoIiwiZXZlcnkiLCJieXRlIiwiYnl0ZXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/encoding/schema/bytearray.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/encoding/schema/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/encoding/schema/index.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AddressSchema: () => (/* reexport safe */ _address_js__WEBPACK_IMPORTED_MODULE_3__.AddressSchema),\n/* harmony export */   ArraySchema: () => (/* reexport safe */ _array_js__WEBPACK_IMPORTED_MODULE_7__.ArraySchema),\n/* harmony export */   BlockHashSchema: () => (/* reexport safe */ _blockhash_js__WEBPACK_IMPORTED_MODULE_5__.BlockHashSchema),\n/* harmony export */   BooleanSchema: () => (/* reexport safe */ _boolean_js__WEBPACK_IMPORTED_MODULE_0__.BooleanSchema),\n/* harmony export */   ByteArrayMapSchema: () => (/* reexport safe */ _map_js__WEBPACK_IMPORTED_MODULE_8__.ByteArrayMapSchema),\n/* harmony export */   ByteArraySchema: () => (/* reexport safe */ _bytearray_js__WEBPACK_IMPORTED_MODULE_4__.ByteArraySchema),\n/* harmony export */   FixedLengthByteArraySchema: () => (/* reexport safe */ _bytearray_js__WEBPACK_IMPORTED_MODULE_4__.FixedLengthByteArraySchema),\n/* harmony export */   NamedMapSchema: () => (/* reexport safe */ _map_js__WEBPACK_IMPORTED_MODULE_8__.NamedMapSchema),\n/* harmony export */   OptionalSchema: () => (/* reexport safe */ _optional_js__WEBPACK_IMPORTED_MODULE_9__.OptionalSchema),\n/* harmony export */   SpecialCaseBinaryStringMapSchema: () => (/* reexport safe */ _map_js__WEBPACK_IMPORTED_MODULE_8__.SpecialCaseBinaryStringMapSchema),\n/* harmony export */   SpecialCaseBinaryStringSchema: () => (/* reexport safe */ _binarystring_js__WEBPACK_IMPORTED_MODULE_6__.SpecialCaseBinaryStringSchema),\n/* harmony export */   StringMapSchema: () => (/* reexport safe */ _map_js__WEBPACK_IMPORTED_MODULE_8__.StringMapSchema),\n/* harmony export */   StringSchema: () => (/* reexport safe */ _string_js__WEBPACK_IMPORTED_MODULE_1__.StringSchema),\n/* harmony export */   Uint64MapSchema: () => (/* reexport safe */ _map_js__WEBPACK_IMPORTED_MODULE_8__.Uint64MapSchema),\n/* harmony export */   Uint64Schema: () => (/* reexport safe */ _uint64_js__WEBPACK_IMPORTED_MODULE_2__.Uint64Schema),\n/* harmony export */   UntypedSchema: () => (/* reexport safe */ _untyped_js__WEBPACK_IMPORTED_MODULE_10__.UntypedSchema),\n/* harmony export */   allOmitEmpty: () => (/* reexport safe */ _map_js__WEBPACK_IMPORTED_MODULE_8__.allOmitEmpty),\n/* harmony export */   combineMaps: () => (/* reexport safe */ _map_js__WEBPACK_IMPORTED_MODULE_8__.combineMaps),\n/* harmony export */   convertMap: () => (/* reexport safe */ _map_js__WEBPACK_IMPORTED_MODULE_8__.convertMap)\n/* harmony export */ });\n/* harmony import */ var _boolean_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./boolean.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/schema/boolean.js\");\n/* harmony import */ var _string_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./string.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/schema/string.js\");\n/* harmony import */ var _uint64_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./uint64.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/schema/uint64.js\");\n/* harmony import */ var _address_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./address.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/schema/address.js\");\n/* harmony import */ var _bytearray_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./bytearray.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/schema/bytearray.js\");\n/* harmony import */ var _blockhash_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./blockhash.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/schema/blockhash.js\");\n/* harmony import */ var _binarystring_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./binarystring.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/schema/binarystring.js\");\n/* harmony import */ var _array_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./array.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/schema/array.js\");\n/* harmony import */ var _map_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./map.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/schema/map.js\");\n/* harmony import */ var _optional_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./optional.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/schema/optional.js\");\n/* harmony import */ var _untyped_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./untyped.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/schema/untyped.js\");\n\n\n\n\n\n\n\n\n\n\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9lbmNvZGluZy9zY2hlbWEvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQTZDO0FBQ0Y7QUFDQTtBQUNFO0FBQ2dDO0FBQzVCO0FBQ2lCO0FBQ3pCO0FBQ2lJO0FBQzNIO0FBQ0YsQ0FDN0MsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWxnb3JhbmQtY3Jvd2RmdW5kaW5nLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vZW5jb2Rpbmcvc2NoZW1hL2luZGV4LmpzPzM5MGYiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHsgQm9vbGVhblNjaGVtYSB9IGZyb20gJy4vYm9vbGVhbi5qcyc7XG5leHBvcnQgeyBTdHJpbmdTY2hlbWEgfSBmcm9tICcuL3N0cmluZy5qcyc7XG5leHBvcnQgeyBVaW50NjRTY2hlbWEgfSBmcm9tICcuL3VpbnQ2NC5qcyc7XG5leHBvcnQgeyBBZGRyZXNzU2NoZW1hIH0gZnJvbSAnLi9hZGRyZXNzLmpzJztcbmV4cG9ydCB7IEJ5dGVBcnJheVNjaGVtYSwgRml4ZWRMZW5ndGhCeXRlQXJyYXlTY2hlbWEgfSBmcm9tICcuL2J5dGVhcnJheS5qcyc7XG5leHBvcnQgeyBCbG9ja0hhc2hTY2hlbWEgfSBmcm9tICcuL2Jsb2NraGFzaC5qcyc7XG5leHBvcnQgeyBTcGVjaWFsQ2FzZUJpbmFyeVN0cmluZ1NjaGVtYSB9IGZyb20gJy4vYmluYXJ5c3RyaW5nLmpzJztcbmV4cG9ydCB7IEFycmF5U2NoZW1hIH0gZnJvbSAnLi9hcnJheS5qcyc7XG5leHBvcnQgeyBOYW1lZE1hcFNjaGVtYSwgYWxsT21pdEVtcHR5LCBjb21iaW5lTWFwcywgY29udmVydE1hcCwgVWludDY0TWFwU2NoZW1hLCBTdHJpbmdNYXBTY2hlbWEsIEJ5dGVBcnJheU1hcFNjaGVtYSwgU3BlY2lhbENhc2VCaW5hcnlTdHJpbmdNYXBTY2hlbWEsIH0gZnJvbSAnLi9tYXAuanMnO1xuZXhwb3J0IHsgT3B0aW9uYWxTY2hlbWEgfSBmcm9tICcuL29wdGlvbmFsLmpzJztcbmV4cG9ydCB7IFVudHlwZWRTY2hlbWEgfSBmcm9tICcuL3VudHlwZWQuanMnO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbIkJvb2xlYW5TY2hlbWEiLCJTdHJpbmdTY2hlbWEiLCJVaW50NjRTY2hlbWEiLCJBZGRyZXNzU2NoZW1hIiwiQnl0ZUFycmF5U2NoZW1hIiwiRml4ZWRMZW5ndGhCeXRlQXJyYXlTY2hlbWEiLCJCbG9ja0hhc2hTY2hlbWEiLCJTcGVjaWFsQ2FzZUJpbmFyeVN0cmluZ1NjaGVtYSIsIkFycmF5U2NoZW1hIiwiTmFtZWRNYXBTY2hlbWEiLCJhbGxPbWl0RW1wdHkiLCJjb21iaW5lTWFwcyIsImNvbnZlcnRNYXAiLCJVaW50NjRNYXBTY2hlbWEiLCJTdHJpbmdNYXBTY2hlbWEiLCJCeXRlQXJyYXlNYXBTY2hlbWEiLCJTcGVjaWFsQ2FzZUJpbmFyeVN0cmluZ01hcFNjaGVtYSIsIk9wdGlvbmFsU2NoZW1hIiwiVW50eXBlZFNjaGVtYSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/encoding/schema/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/encoding/schema/map.js":
/*!**************************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/encoding/schema/map.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ByteArrayMapSchema: () => (/* binding */ ByteArrayMapSchema),\n/* harmony export */   NamedMapSchema: () => (/* binding */ NamedMapSchema),\n/* harmony export */   SpecialCaseBinaryStringMapSchema: () => (/* binding */ SpecialCaseBinaryStringMapSchema),\n/* harmony export */   StringMapSchema: () => (/* binding */ StringMapSchema),\n/* harmony export */   Uint64MapSchema: () => (/* binding */ Uint64MapSchema),\n/* harmony export */   allOmitEmpty: () => (/* binding */ allOmitEmpty),\n/* harmony export */   combineMaps: () => (/* binding */ combineMaps),\n/* harmony export */   convertMap: () => (/* binding */ convertMap)\n/* harmony export */ });\n/* harmony import */ var algorand_msgpack__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! algorand-msgpack */ \"(ssr)/./node_modules/algorand-msgpack/dist.es5+esm/utils/typedArrays.mjs\");\n/* harmony import */ var _encoding_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../encoding.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/encoding.js\");\n/* harmony import */ var _utils_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/utils.js */ \"(ssr)/./node_modules/algosdk/dist/esm/utils/utils.js\");\n/* harmony import */ var _binarydata_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../binarydata.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/binarydata.js\");\n\n\n\n\n/**\n * Applies the omitEmpty flag to all entries in the array.\n * @param entries - The entries to apply the flag to.\n * @returns A new array with the omitEmpty flag applied to all entries.\n */ function allOmitEmpty(entries) {\n    return entries.map((entry)=>({\n            ...entry,\n            omitEmpty: true\n        }));\n}\n/**\n * Schema for a map/struct with a fixed set of known string fields.\n */ class NamedMapSchema extends _encoding_js__WEBPACK_IMPORTED_MODULE_0__.Schema {\n    constructor(entries){\n        super();\n        this.entries = entries;\n        this.checkEntries();\n    }\n    /**\n     * Adds new entries to the map schema. WARNING: this is a mutable operation, and you should be very\n     * careful when using it. Any error that happens here is non-recoverable and will corrupt the\n     * NamedMapSchema object;\n     * @param entries - The entries to add.\n     */ pushEntries(...entries) {\n        this.entries.push(...entries);\n        this.checkEntries();\n    }\n    checkEntries() {\n        for (const entry of this.entries){\n            if (entry.embedded) {\n                if (entry.key !== \"\") {\n                    throw new Error(\"Embedded entries must have an empty key\");\n                }\n                if (!(entry.valueSchema instanceof NamedMapSchema)) {\n                    throw new Error(\"Embedded entry valueSchema must be a NamedMapSchema\");\n                }\n            }\n        }\n        const keys = new Set();\n        for (const entry of this.getEntries()){\n            if (keys.has(entry.key)) {\n                throw new Error(`Duplicate key: ${entry.key}`);\n            }\n            keys.add(entry.key);\n        }\n    }\n    /**\n     * Returns all top-level entries, properly accounting for fields from embedded entries.\n     * @returns An array of all top-level entries for this map.\n     */ getEntries() {\n        const entries = [];\n        for (const entry of this.entries){\n            if (entry.embedded) {\n                const embeddedMapSchema = entry.valueSchema;\n                entries.push(...embeddedMapSchema.getEntries());\n            } else {\n                entries.push(entry);\n            }\n        }\n        return entries;\n    }\n    defaultValue() {\n        const map = new Map();\n        for (const entry of this.getEntries()){\n            map.set(entry.key, entry.valueSchema.defaultValue());\n        }\n        return map;\n    }\n    isDefaultValue(data) {\n        if (!(data instanceof Map)) return false;\n        for (const entry of this.getEntries()){\n            if (!entry.valueSchema.isDefaultValue(data.get(entry.key))) {\n                return false;\n            }\n        }\n        return true;\n    }\n    prepareMsgpack(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`NamedMapSchema data must be a Map. Got (${typeof data}) ${data}`);\n        }\n        const map = new Map();\n        for (const entry of this.getEntries()){\n            const value = data.get(entry.key);\n            if (entry.omitEmpty && entry.valueSchema.isDefaultValue(value)) {\n                continue;\n            }\n            map.set(entry.key, entry.valueSchema.prepareMsgpack(value));\n        }\n        return map;\n    }\n    fromPreparedMsgpack(encoded, rawStringProvider) {\n        if (!(encoded instanceof Map)) {\n            throw new Error(\"NamedMapSchema data must be a Map\");\n        }\n        const map = new Map();\n        for (const entry of this.getEntries()){\n            if (encoded.has(entry.key)) {\n                map.set(entry.key, entry.valueSchema.fromPreparedMsgpack(encoded.get(entry.key), rawStringProvider.withMapValue(entry.key)));\n            } else if (entry.omitEmpty) {\n                map.set(entry.key, entry.valueSchema.defaultValue());\n            } else {\n                throw new Error(`Missing key: ${entry.key}`);\n            }\n        }\n        return map;\n    }\n    prepareJSON(data, options) {\n        if (!(data instanceof Map)) {\n            throw new Error(\"NamedMapSchema data must be a Map\");\n        }\n        const obj = {};\n        for (const entry of this.getEntries()){\n            const value = data.get(entry.key);\n            if (entry.omitEmpty && entry.valueSchema.isDefaultValue(value)) {\n                continue;\n            }\n            obj[entry.key] = entry.valueSchema.prepareJSON(value, options);\n        }\n        return obj;\n    }\n    fromPreparedJSON(encoded) {\n        if (encoded == null || typeof encoded !== \"object\" || Array.isArray(encoded)) {\n            throw new Error(\"NamedMapSchema data must be an object\");\n        }\n        const map = new Map();\n        for (const entry of this.getEntries()){\n            if (Object.prototype.hasOwnProperty.call(encoded, entry.key)) {\n                map.set(entry.key, entry.valueSchema.fromPreparedJSON(encoded[entry.key]));\n            } else if (entry.omitEmpty) {\n                map.set(entry.key, entry.valueSchema.defaultValue());\n            } else {\n                throw new Error(`Missing key: ${entry.key}`);\n            }\n        }\n        return map;\n    }\n}\n/**\n * Combines multiple maps into a single map. Throws an error if any of the maps have duplicate keys.\n * @param maps - The maps to combine.\n * @returns A new map with all the entries from the input maps.\n */ function combineMaps(...maps) {\n    const combined = new Map();\n    for (const map of maps){\n        for (const [key, value] of map){\n            if (combined.has(key)) {\n                throw new Error(`Duplicate key: ${key}`);\n            }\n            combined.set(key, value);\n        }\n    }\n    return combined;\n}\n/**\n * Converts a map to a new map with different keys and values.\n * @param map - The map to convert.\n * @param func - The function to convert each entry.\n * @returns A new map with the converted entries.\n */ function convertMap(map, func) {\n    const mapped = new Map();\n    for (const [key, value] of map){\n        const [newKey, newValue] = func(key, value);\n        mapped.set(newKey, newValue);\n    }\n    return mapped;\n}\n/**\n * Schema for a map with a variable number of uint64 keys.\n */ class Uint64MapSchema extends _encoding_js__WEBPACK_IMPORTED_MODULE_0__.Schema {\n    constructor(valueSchema){\n        super();\n        this.valueSchema = valueSchema;\n    }\n    defaultValue() {\n        return new Map();\n    }\n    isDefaultValue(data) {\n        return data instanceof Map && data.size === 0;\n    }\n    prepareMsgpack(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Uint64MapSchema data must be a Map. Got (${typeof data}) ${data}`);\n        }\n        const prepared = new Map();\n        for (const [key, value] of data){\n            const bigintKey = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureUint64)(key);\n            if (prepared.has(bigintKey)) {\n                throw new Error(`Duplicate key: ${bigintKey}`);\n            }\n            prepared.set(bigintKey, this.valueSchema.prepareMsgpack(value));\n        }\n        return prepared;\n    }\n    fromPreparedMsgpack(encoded, rawStringProvider) {\n        if (!(encoded instanceof Map)) {\n            throw new Error(\"Uint64MapSchema data must be a Map\");\n        }\n        const map = new Map();\n        for (const [key, value] of encoded){\n            const bigintKey = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureUint64)(key);\n            if (map.has(bigintKey)) {\n                throw new Error(`Duplicate key: ${bigintKey}`);\n            }\n            map.set(bigintKey, this.valueSchema.fromPreparedMsgpack(value, rawStringProvider.withMapValue(key)));\n        }\n        return map;\n    }\n    prepareJSON(data, options) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Uint64MapSchema data must be a Map. Got (${typeof data}) ${data}`);\n        }\n        const prepared = new Map();\n        for (const [key, value] of data){\n            const bigintKey = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureUint64)(key);\n            if (prepared.has(bigintKey)) {\n                throw new Error(`Duplicate key: ${bigintKey}`);\n            }\n            prepared.set(bigintKey, this.valueSchema.prepareJSON(value, options));\n        }\n        // Convert map to object\n        const obj = {};\n        for (const [key, value] of prepared){\n            obj[key.toString()] = value;\n        }\n        return obj;\n    }\n    fromPreparedJSON(encoded) {\n        if (encoded == null || typeof encoded !== \"object\" || Array.isArray(encoded)) {\n            throw new Error(\"Uint64MapSchema data must be an object\");\n        }\n        const map = new Map();\n        for (const [key, value] of Object.entries(encoded)){\n            const bigintKey = BigInt(key);\n            if (map.has(bigintKey)) {\n                throw new Error(`Duplicate key: ${bigintKey}`);\n            }\n            map.set(bigintKey, this.valueSchema.fromPreparedJSON(value));\n        }\n        return map;\n    }\n}\n/**\n * Schema for a map with a variable number of string keys.\n */ class StringMapSchema extends _encoding_js__WEBPACK_IMPORTED_MODULE_0__.Schema {\n    constructor(valueSchema){\n        super();\n        this.valueSchema = valueSchema;\n    }\n    defaultValue() {\n        return new Map();\n    }\n    isDefaultValue(data) {\n        return data instanceof Map && data.size === 0;\n    }\n    prepareMsgpack(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`StringMapSchema data must be a Map. Got (${typeof data}) ${data}`);\n        }\n        const prepared = new Map();\n        for (const [key, value] of data){\n            if (typeof key !== \"string\") {\n                throw new Error(`Invalid key: ${key}`);\n            }\n            if (prepared.has(key)) {\n                throw new Error(`Duplicate key: ${key}`);\n            }\n            prepared.set(key, this.valueSchema.prepareMsgpack(value));\n        }\n        return prepared;\n    }\n    fromPreparedMsgpack(encoded, rawStringProvider) {\n        if (!(encoded instanceof Map)) {\n            throw new Error(\"StringMapSchema data must be a Map\");\n        }\n        const map = new Map();\n        for (const [key, value] of encoded){\n            if (typeof key !== \"string\") {\n                throw new Error(`Invalid key: ${key}`);\n            }\n            if (map.has(key)) {\n                throw new Error(`Duplicate key: ${key}`);\n            }\n            map.set(key, this.valueSchema.fromPreparedMsgpack(value, rawStringProvider.withMapValue(key)));\n        }\n        return map;\n    }\n    prepareJSON(data, options) {\n        if (!(data instanceof Map)) {\n            throw new Error(`StringMapSchema data must be a Map. Got (${typeof data}) ${data}`);\n        }\n        const prepared = new Map();\n        for (const [key, value] of data){\n            if (typeof key !== \"string\") {\n                throw new Error(`Invalid key: ${key}`);\n            }\n            if (prepared.has(key)) {\n                throw new Error(`Duplicate key: ${key}`);\n            }\n            prepared.set(key, this.valueSchema.prepareJSON(value, options));\n        }\n        // Convert map to object\n        const obj = {};\n        for (const [key, value] of prepared){\n            obj[key] = value;\n        }\n        return obj;\n    }\n    fromPreparedJSON(encoded) {\n        if (encoded == null || typeof encoded !== \"object\" || Array.isArray(encoded)) {\n            throw new Error(\"StringMapSchema data must be an object\");\n        }\n        const map = new Map();\n        for (const [key, value] of Object.entries(encoded)){\n            if (map.has(key)) {\n                throw new Error(`Duplicate key: ${key}`);\n            }\n            map.set(key, this.valueSchema.fromPreparedJSON(value));\n        }\n        return map;\n    }\n}\n/**\n * Schema for a map with a variable number of byte array keys.\n */ class ByteArrayMapSchema extends _encoding_js__WEBPACK_IMPORTED_MODULE_0__.Schema {\n    constructor(valueSchema){\n        super();\n        this.valueSchema = valueSchema;\n    }\n    defaultValue() {\n        return new Map();\n    }\n    isDefaultValue(data) {\n        return data instanceof Map && data.size === 0;\n    }\n    prepareMsgpack(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`ByteArrayMapSchema data must be a Map. Got (${typeof data}) ${data}`);\n        }\n        const prepared = new Map();\n        for (const [key, value] of data){\n            if (!(key instanceof Uint8Array)) {\n                throw new Error(`Invalid key: ${key} (${typeof key})`);\n            }\n            prepared.set(key, this.valueSchema.prepareMsgpack(value));\n        }\n        return prepared;\n    }\n    fromPreparedMsgpack(encoded, rawStringProvider) {\n        if (!(encoded instanceof Map)) {\n            throw new Error(\"ByteArrayMapSchema data must be a Map\");\n        }\n        const map = new Map();\n        for (const [key, value] of encoded){\n            if (!(key instanceof Uint8Array)) {\n                throw new Error(`Invalid key: ${key} (${typeof key})`);\n            }\n            map.set(key, this.valueSchema.fromPreparedMsgpack(value, rawStringProvider.withMapValue(key)));\n        }\n        return map;\n    }\n    prepareJSON(data, options) {\n        if (!(data instanceof Map)) {\n            throw new Error(`ByteArrayMapSchema data must be a Map. Got (${typeof data}) ${data}`);\n        }\n        const prepared = new Map();\n        for (const [key, value] of data){\n            if (!(key instanceof Uint8Array)) {\n                throw new Error(`Invalid key: ${key} (${typeof key})`);\n            }\n            const b64Encoded = (0,_binarydata_js__WEBPACK_IMPORTED_MODULE_2__.bytesToBase64)(key);\n            if (prepared.has(b64Encoded)) {\n                throw new Error(`Duplicate key (base64): ${b64Encoded}`);\n            }\n            prepared.set(b64Encoded, this.valueSchema.prepareJSON(value, options));\n        }\n        // Convert map to object\n        const obj = {};\n        for (const [key, value] of prepared){\n            obj[key] = value;\n        }\n        return obj;\n    }\n    fromPreparedJSON(encoded) {\n        if (encoded == null || typeof encoded !== \"object\" || Array.isArray(encoded)) {\n            throw new Error(\"ByteArrayMapSchema data must be an object\");\n        }\n        const map = new Map();\n        for (const [key, value] of Object.entries(encoded)){\n            map.set((0,_binarydata_js__WEBPACK_IMPORTED_MODULE_2__.base64ToBytes)(key), this.valueSchema.fromPreparedJSON(value));\n        }\n        return map;\n    }\n}\n/**\n * Converts any RawBinaryString values to regular strings in a MsgpackEncodingData object.\n *\n * Note this conversion may be lossy if the binary data is not valid UTF-8.\n *\n * @returns A new object with RawBinaryString values converted to strings.\n */ function convertRawStringsInMsgpackValue(value) {\n    if (value instanceof algorand_msgpack__WEBPACK_IMPORTED_MODULE_3__.RawBinaryString) {\n        return (0,_binarydata_js__WEBPACK_IMPORTED_MODULE_2__.bytesToString)(value.rawBinaryValue);\n    }\n    if (value instanceof Map) {\n        const newMap = new Map();\n        for (const [key, val] of value){\n            newMap.set(convertRawStringsInMsgpackValue(key), convertRawStringsInMsgpackValue(val));\n        }\n        return newMap;\n    }\n    if (Array.isArray(value)) {\n        return value.map(convertRawStringsInMsgpackValue);\n    }\n    return value;\n}\n/**\n * Schema for a map with a variable number of binary string keys.\n *\n * See SpecialCaseBinaryStringSchema for more information about the key type.\n */ class SpecialCaseBinaryStringMapSchema extends _encoding_js__WEBPACK_IMPORTED_MODULE_0__.Schema {\n    constructor(valueSchema){\n        super();\n        this.valueSchema = valueSchema;\n    }\n    defaultValue() {\n        return new Map();\n    }\n    isDefaultValue(data) {\n        return data instanceof Map && data.size === 0;\n    }\n    prepareMsgpack(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`SpecialCaseBinaryStringMapSchema data must be a Map. Got (${typeof data}) ${data}`);\n        }\n        const prepared = new Map();\n        for (const [key, value] of data){\n            if (!(key instanceof Uint8Array)) {\n                throw new Error(`Invalid key: ${key} (${typeof key})`);\n            }\n            prepared.set(new algorand_msgpack__WEBPACK_IMPORTED_MODULE_3__.RawBinaryString(key), this.valueSchema.prepareMsgpack(value));\n        }\n        // Cast is needed because RawBinaryString is not part of the standard MsgpackEncodingData\n        return prepared;\n    }\n    fromPreparedMsgpack(_encoded, rawStringProvider) {\n        const map = new Map();\n        const keysAndValues = rawStringProvider.getRawStringKeysAndValuesAtCurrentLocation();\n        for (const [key, value] of keysAndValues){\n            map.set(key, this.valueSchema.fromPreparedMsgpack(convertRawStringsInMsgpackValue(value), rawStringProvider.withMapValue(new algorand_msgpack__WEBPACK_IMPORTED_MODULE_3__.RawBinaryString(key))));\n        }\n        return map;\n    }\n    prepareJSON(data, options) {\n        if (!(data instanceof Map)) {\n            throw new Error(`SpecialCaseBinaryStringMapSchema data must be a Map. Got (${typeof data}) ${data}`);\n        }\n        const prepared = new Map();\n        for (const [key, value] of data){\n            if (!(key instanceof Uint8Array)) {\n                throw new Error(`Invalid key: ${key}`);\n            }\n            // Not safe to convert to string for all binary data\n            const keyStringValue = (0,_binarydata_js__WEBPACK_IMPORTED_MODULE_2__.bytesToString)(key);\n            if (!options.lossyBinaryStringConversion && !(0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_1__.arrayEqual)((0,_binarydata_js__WEBPACK_IMPORTED_MODULE_2__.coerceToBytes)(keyStringValue), key)) {\n                throw new Error(`Invalid UTF-8 byte array encountered. Encode with lossyBinaryStringConversion enabled to bypass this check. Base64 value: ${(0,_binarydata_js__WEBPACK_IMPORTED_MODULE_2__.bytesToBase64)(key)}`);\n            }\n            prepared.set(keyStringValue, this.valueSchema.prepareJSON(value, options));\n        }\n        // Convert map to object\n        const obj = {};\n        for (const [key, value] of prepared){\n            obj[key] = value;\n        }\n        return obj;\n    }\n    fromPreparedJSON(encoded) {\n        if (encoded == null || typeof encoded !== \"object\" || Array.isArray(encoded)) {\n            throw new Error(\"SpecialCaseBinaryStringMapSchema data must be an object\");\n        }\n        const map = new Map();\n        for (const [key, value] of Object.entries(encoded)){\n            map.set((0,_binarydata_js__WEBPACK_IMPORTED_MODULE_2__.coerceToBytes)(key), this.valueSchema.fromPreparedJSON(value));\n        }\n        return map;\n    }\n} //# sourceMappingURL=map.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/encoding/schema/map.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/encoding/schema/optional.js":
/*!*******************************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/encoding/schema/optional.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OptionalSchema: () => (/* binding */ OptionalSchema)\n/* harmony export */ });\n/* harmony import */ var _encoding_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../encoding.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/encoding.js\");\n\n/* eslint-disable class-methods-use-this */ /**\n * OptionalSchema allows for another schema-defined value to be optional.\n *\n * This expands the set of values which can be represented by the given schema to include `undefined`.\n *\n * Note that this schema considers `undefined` _and_ any default values from the underlying schema\n * to all be default values. This means that when using NamedMapSchema to omit default values, an\n * `undefined` value is indistinguishable from the given schema's default value; in this respect,\n * OptionalSchema does not affect the encoding of NamedMapSchema values, but rather allows the\n * application to restore omitted values as `undefined` instead of their default value.\n *\n * Upon decoding, this schema also allows null/undefined values to be acceptable as values.\n */ class OptionalSchema extends _encoding_js__WEBPACK_IMPORTED_MODULE_0__.Schema {\n    constructor(valueSchema){\n        super();\n        this.valueSchema = valueSchema;\n    }\n    defaultValue() {\n        return undefined;\n    }\n    isDefaultValue(data) {\n        return data === undefined || this.valueSchema.isDefaultValue(data);\n    }\n    prepareMsgpack(data) {\n        if (data === undefined) {\n            return undefined;\n        }\n        return this.valueSchema.prepareMsgpack(data);\n    }\n    fromPreparedMsgpack(encoded, rawStringProvider) {\n        // JS undefined is encoded as msgpack nil, which may be decoded as JS null\n        if (encoded === undefined || encoded === null) {\n            return undefined;\n        }\n        return this.valueSchema.fromPreparedMsgpack(encoded, rawStringProvider);\n    }\n    prepareJSON(data, options) {\n        if (data === undefined) {\n            // JSON representation does not have undefined, only null\n            return null;\n        }\n        return this.valueSchema.prepareJSON(data, options);\n    }\n    fromPreparedJSON(encoded) {\n        if (encoded === undefined || encoded === null) {\n            return undefined;\n        }\n        return this.valueSchema.fromPreparedJSON(encoded);\n    }\n} //# sourceMappingURL=optional.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9lbmNvZGluZy9zY2hlbWEvb3B0aW9uYWwuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBeUM7QUFDekMseUNBQXlDLEdBQ3pDOzs7Ozs7Ozs7Ozs7Q0FZQyxHQUNNLE1BQU1DLHVCQUF1QkQsZ0RBQU1BO0lBQ3RDRSxZQUFZQyxXQUFXLENBQUU7UUFDckIsS0FBSztRQUNMLElBQUksQ0FBQ0EsV0FBVyxHQUFHQTtJQUN2QjtJQUNBQyxlQUFlO1FBQ1gsT0FBT0M7SUFDWDtJQUNBQyxlQUFlQyxJQUFJLEVBQUU7UUFDakIsT0FBT0EsU0FBU0YsYUFBYSxJQUFJLENBQUNGLFdBQVcsQ0FBQ0csY0FBYyxDQUFDQztJQUNqRTtJQUNBQyxlQUFlRCxJQUFJLEVBQUU7UUFDakIsSUFBSUEsU0FBU0YsV0FBVztZQUNwQixPQUFPQTtRQUNYO1FBQ0EsT0FBTyxJQUFJLENBQUNGLFdBQVcsQ0FBQ0ssY0FBYyxDQUFDRDtJQUMzQztJQUNBRSxvQkFBb0JDLE9BQU8sRUFBRUMsaUJBQWlCLEVBQUU7UUFDNUMsMEVBQTBFO1FBQzFFLElBQUlELFlBQVlMLGFBQWFLLFlBQVksTUFBTTtZQUMzQyxPQUFPTDtRQUNYO1FBQ0EsT0FBTyxJQUFJLENBQUNGLFdBQVcsQ0FBQ00sbUJBQW1CLENBQUNDLFNBQVNDO0lBQ3pEO0lBQ0FDLFlBQVlMLElBQUksRUFBRU0sT0FBTyxFQUFFO1FBQ3ZCLElBQUlOLFNBQVNGLFdBQVc7WUFDcEIseURBQXlEO1lBQ3pELE9BQU87UUFDWDtRQUNBLE9BQU8sSUFBSSxDQUFDRixXQUFXLENBQUNTLFdBQVcsQ0FBQ0wsTUFBTU07SUFDOUM7SUFDQUMsaUJBQWlCSixPQUFPLEVBQUU7UUFDdEIsSUFBSUEsWUFBWUwsYUFBYUssWUFBWSxNQUFNO1lBQzNDLE9BQU9MO1FBQ1g7UUFDQSxPQUFPLElBQUksQ0FBQ0YsV0FBVyxDQUFDVyxnQkFBZ0IsQ0FBQ0o7SUFDN0M7QUFDSixFQUNBLG9DQUFvQyIsInNvdXJjZXMiOlsid2VicGFjazovL2FsZ29yYW5kLWNyb3dkZnVuZGluZy1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9hbGdvc2RrL2Rpc3QvZXNtL2VuY29kaW5nL3NjaGVtYS9vcHRpb25hbC5qcz83OGMxIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFNjaGVtYSwgfSBmcm9tICcuLi9lbmNvZGluZy5qcyc7XG4vKiBlc2xpbnQtZGlzYWJsZSBjbGFzcy1tZXRob2RzLXVzZS10aGlzICovXG4vKipcbiAqIE9wdGlvbmFsU2NoZW1hIGFsbG93cyBmb3IgYW5vdGhlciBzY2hlbWEtZGVmaW5lZCB2YWx1ZSB0byBiZSBvcHRpb25hbC5cbiAqXG4gKiBUaGlzIGV4cGFuZHMgdGhlIHNldCBvZiB2YWx1ZXMgd2hpY2ggY2FuIGJlIHJlcHJlc2VudGVkIGJ5IHRoZSBnaXZlbiBzY2hlbWEgdG8gaW5jbHVkZSBgdW5kZWZpbmVkYC5cbiAqXG4gKiBOb3RlIHRoYXQgdGhpcyBzY2hlbWEgY29uc2lkZXJzIGB1bmRlZmluZWRgIF9hbmRfIGFueSBkZWZhdWx0IHZhbHVlcyBmcm9tIHRoZSB1bmRlcmx5aW5nIHNjaGVtYVxuICogdG8gYWxsIGJlIGRlZmF1bHQgdmFsdWVzLiBUaGlzIG1lYW5zIHRoYXQgd2hlbiB1c2luZyBOYW1lZE1hcFNjaGVtYSB0byBvbWl0IGRlZmF1bHQgdmFsdWVzLCBhblxuICogYHVuZGVmaW5lZGAgdmFsdWUgaXMgaW5kaXN0aW5ndWlzaGFibGUgZnJvbSB0aGUgZ2l2ZW4gc2NoZW1hJ3MgZGVmYXVsdCB2YWx1ZTsgaW4gdGhpcyByZXNwZWN0LFxuICogT3B0aW9uYWxTY2hlbWEgZG9lcyBub3QgYWZmZWN0IHRoZSBlbmNvZGluZyBvZiBOYW1lZE1hcFNjaGVtYSB2YWx1ZXMsIGJ1dCByYXRoZXIgYWxsb3dzIHRoZVxuICogYXBwbGljYXRpb24gdG8gcmVzdG9yZSBvbWl0dGVkIHZhbHVlcyBhcyBgdW5kZWZpbmVkYCBpbnN0ZWFkIG9mIHRoZWlyIGRlZmF1bHQgdmFsdWUuXG4gKlxuICogVXBvbiBkZWNvZGluZywgdGhpcyBzY2hlbWEgYWxzbyBhbGxvd3MgbnVsbC91bmRlZmluZWQgdmFsdWVzIHRvIGJlIGFjY2VwdGFibGUgYXMgdmFsdWVzLlxuICovXG5leHBvcnQgY2xhc3MgT3B0aW9uYWxTY2hlbWEgZXh0ZW5kcyBTY2hlbWEge1xuICAgIGNvbnN0cnVjdG9yKHZhbHVlU2NoZW1hKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMudmFsdWVTY2hlbWEgPSB2YWx1ZVNjaGVtYTtcbiAgICB9XG4gICAgZGVmYXVsdFZhbHVlKCkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBpc0RlZmF1bHRWYWx1ZShkYXRhKSB7XG4gICAgICAgIHJldHVybiBkYXRhID09PSB1bmRlZmluZWQgfHwgdGhpcy52YWx1ZVNjaGVtYS5pc0RlZmF1bHRWYWx1ZShkYXRhKTtcbiAgICB9XG4gICAgcHJlcGFyZU1zZ3BhY2soZGF0YSkge1xuICAgICAgICBpZiAoZGF0YSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlU2NoZW1hLnByZXBhcmVNc2dwYWNrKGRhdGEpO1xuICAgIH1cbiAgICBmcm9tUHJlcGFyZWRNc2dwYWNrKGVuY29kZWQsIHJhd1N0cmluZ1Byb3ZpZGVyKSB7XG4gICAgICAgIC8vIEpTIHVuZGVmaW5lZCBpcyBlbmNvZGVkIGFzIG1zZ3BhY2sgbmlsLCB3aGljaCBtYXkgYmUgZGVjb2RlZCBhcyBKUyBudWxsXG4gICAgICAgIGlmIChlbmNvZGVkID09PSB1bmRlZmluZWQgfHwgZW5jb2RlZCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZVNjaGVtYS5mcm9tUHJlcGFyZWRNc2dwYWNrKGVuY29kZWQsIHJhd1N0cmluZ1Byb3ZpZGVyKTtcbiAgICB9XG4gICAgcHJlcGFyZUpTT04oZGF0YSwgb3B0aW9ucykge1xuICAgICAgICBpZiAoZGF0YSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAvLyBKU09OIHJlcHJlc2VudGF0aW9uIGRvZXMgbm90IGhhdmUgdW5kZWZpbmVkLCBvbmx5IG51bGxcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlU2NoZW1hLnByZXBhcmVKU09OKGRhdGEsIG9wdGlvbnMpO1xuICAgIH1cbiAgICBmcm9tUHJlcGFyZWRKU09OKGVuY29kZWQpIHtcbiAgICAgICAgaWYgKGVuY29kZWQgPT09IHVuZGVmaW5lZCB8fCBlbmNvZGVkID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlU2NoZW1hLmZyb21QcmVwYXJlZEpTT04oZW5jb2RlZCk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b3B0aW9uYWwuanMubWFwIl0sIm5hbWVzIjpbIlNjaGVtYSIsIk9wdGlvbmFsU2NoZW1hIiwiY29uc3RydWN0b3IiLCJ2YWx1ZVNjaGVtYSIsImRlZmF1bHRWYWx1ZSIsInVuZGVmaW5lZCIsImlzRGVmYXVsdFZhbHVlIiwiZGF0YSIsInByZXBhcmVNc2dwYWNrIiwiZnJvbVByZXBhcmVkTXNncGFjayIsImVuY29kZWQiLCJyYXdTdHJpbmdQcm92aWRlciIsInByZXBhcmVKU09OIiwib3B0aW9ucyIsImZyb21QcmVwYXJlZEpTT04iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/encoding/schema/optional.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/encoding/schema/string.js":
/*!*****************************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/encoding/schema/string.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StringSchema: () => (/* binding */ StringSchema)\n/* harmony export */ });\n/* harmony import */ var _encoding_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../encoding.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/encoding.js\");\n\n/* eslint-disable class-methods-use-this */ class StringSchema extends _encoding_js__WEBPACK_IMPORTED_MODULE_0__.Schema {\n    defaultValue() {\n        return \"\";\n    }\n    isDefaultValue(data) {\n        return data === \"\";\n    }\n    prepareMsgpack(data) {\n        if (typeof data === \"string\") {\n            return data;\n        }\n        throw new Error(`Invalid string: (${typeof data}) ${data}`);\n    }\n    fromPreparedMsgpack(encoded, // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _rawStringProvider) {\n        if (typeof encoded === \"string\") {\n            return encoded;\n        }\n        throw new Error(`Invalid string: (${typeof encoded}) ${encoded}`);\n    }\n    prepareJSON(data, // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _options) {\n        if (typeof data === \"string\") {\n            return data;\n        }\n        throw new Error(`Invalid string: (${typeof data}) ${data}`);\n    }\n    fromPreparedJSON(encoded) {\n        if (typeof encoded === \"string\") {\n            return encoded;\n        }\n        throw new Error(`Invalid string: (${typeof encoded}) ${encoded}`);\n    }\n} //# sourceMappingURL=string.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9lbmNvZGluZy9zY2hlbWEvc3RyaW5nLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXlDO0FBQ3pDLHlDQUF5QyxHQUNsQyxNQUFNQyxxQkFBcUJELGdEQUFNQTtJQUNwQ0UsZUFBZTtRQUNYLE9BQU87SUFDWDtJQUNBQyxlQUFlQyxJQUFJLEVBQUU7UUFDakIsT0FBT0EsU0FBUztJQUNwQjtJQUNBQyxlQUFlRCxJQUFJLEVBQUU7UUFDakIsSUFBSSxPQUFPQSxTQUFTLFVBQVU7WUFDMUIsT0FBT0E7UUFDWDtRQUNBLE1BQU0sSUFBSUUsTUFBTSxDQUFDLGlCQUFpQixFQUFFLE9BQU9GLEtBQUssRUFBRSxFQUFFQSxLQUFLLENBQUM7SUFDOUQ7SUFDQUcsb0JBQW9CQyxPQUFPLEVBQzNCLDZEQUE2RDtJQUM3REMsa0JBQWtCLEVBQUU7UUFDaEIsSUFBSSxPQUFPRCxZQUFZLFVBQVU7WUFDN0IsT0FBT0E7UUFDWDtRQUNBLE1BQU0sSUFBSUYsTUFBTSxDQUFDLGlCQUFpQixFQUFFLE9BQU9FLFFBQVEsRUFBRSxFQUFFQSxRQUFRLENBQUM7SUFDcEU7SUFDQUUsWUFBWU4sSUFBSSxFQUNoQiw2REFBNkQ7SUFDN0RPLFFBQVEsRUFBRTtRQUNOLElBQUksT0FBT1AsU0FBUyxVQUFVO1lBQzFCLE9BQU9BO1FBQ1g7UUFDQSxNQUFNLElBQUlFLE1BQU0sQ0FBQyxpQkFBaUIsRUFBRSxPQUFPRixLQUFLLEVBQUUsRUFBRUEsS0FBSyxDQUFDO0lBQzlEO0lBQ0FRLGlCQUFpQkosT0FBTyxFQUFFO1FBQ3RCLElBQUksT0FBT0EsWUFBWSxVQUFVO1lBQzdCLE9BQU9BO1FBQ1g7UUFDQSxNQUFNLElBQUlGLE1BQU0sQ0FBQyxpQkFBaUIsRUFBRSxPQUFPRSxRQUFRLEVBQUUsRUFBRUEsUUFBUSxDQUFDO0lBQ3BFO0FBQ0osRUFDQSxrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hbGdvcmFuZC1jcm93ZGZ1bmRpbmctZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9lbmNvZGluZy9zY2hlbWEvc3RyaW5nLmpzP2I0ZGIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU2NoZW1hLCB9IGZyb20gJy4uL2VuY29kaW5nLmpzJztcbi8qIGVzbGludC1kaXNhYmxlIGNsYXNzLW1ldGhvZHMtdXNlLXRoaXMgKi9cbmV4cG9ydCBjbGFzcyBTdHJpbmdTY2hlbWEgZXh0ZW5kcyBTY2hlbWEge1xuICAgIGRlZmF1bHRWYWx1ZSgpIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgICBpc0RlZmF1bHRWYWx1ZShkYXRhKSB7XG4gICAgICAgIHJldHVybiBkYXRhID09PSAnJztcbiAgICB9XG4gICAgcHJlcGFyZU1zZ3BhY2soZGF0YSkge1xuICAgICAgICBpZiAodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgc3RyaW5nOiAoJHt0eXBlb2YgZGF0YX0pICR7ZGF0YX1gKTtcbiAgICB9XG4gICAgZnJvbVByZXBhcmVkTXNncGFjayhlbmNvZGVkLCBcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXG4gICAgX3Jhd1N0cmluZ1Byb3ZpZGVyKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZW5jb2RlZCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHJldHVybiBlbmNvZGVkO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBzdHJpbmc6ICgke3R5cGVvZiBlbmNvZGVkfSkgJHtlbmNvZGVkfWApO1xuICAgIH1cbiAgICBwcmVwYXJlSlNPTihkYXRhLCBcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXG4gICAgX29wdGlvbnMpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIHN0cmluZzogKCR7dHlwZW9mIGRhdGF9KSAke2RhdGF9YCk7XG4gICAgfVxuICAgIGZyb21QcmVwYXJlZEpTT04oZW5jb2RlZCkge1xuICAgICAgICBpZiAodHlwZW9mIGVuY29kZWQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICByZXR1cm4gZW5jb2RlZDtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgc3RyaW5nOiAoJHt0eXBlb2YgZW5jb2RlZH0pICR7ZW5jb2RlZH1gKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdHJpbmcuanMubWFwIl0sIm5hbWVzIjpbIlNjaGVtYSIsIlN0cmluZ1NjaGVtYSIsImRlZmF1bHRWYWx1ZSIsImlzRGVmYXVsdFZhbHVlIiwiZGF0YSIsInByZXBhcmVNc2dwYWNrIiwiRXJyb3IiLCJmcm9tUHJlcGFyZWRNc2dwYWNrIiwiZW5jb2RlZCIsIl9yYXdTdHJpbmdQcm92aWRlciIsInByZXBhcmVKU09OIiwiX29wdGlvbnMiLCJmcm9tUHJlcGFyZWRKU09OIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/encoding/schema/string.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/encoding/schema/uint64.js":
/*!*****************************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/encoding/schema/uint64.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Uint64Schema: () => (/* binding */ Uint64Schema)\n/* harmony export */ });\n/* harmony import */ var _encoding_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../encoding.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/encoding.js\");\n/* harmony import */ var _utils_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/utils.js */ \"(ssr)/./node_modules/algosdk/dist/esm/utils/utils.js\");\n\n\n/* eslint-disable class-methods-use-this */ class Uint64Schema extends _encoding_js__WEBPACK_IMPORTED_MODULE_0__.Schema {\n    defaultValue() {\n        return BigInt(0);\n    }\n    isDefaultValue(data) {\n        if (typeof data === \"bigint\") return data === BigInt(0);\n        if (typeof data === \"number\") return data === 0;\n        return false;\n    }\n    prepareMsgpack(data) {\n        return (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureUint64)(data);\n    }\n    fromPreparedMsgpack(encoded, // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _rawStringProvider) {\n        return (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureUint64)(encoded);\n    }\n    prepareJSON(data, // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _options) {\n        return (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureUint64)(data);\n    }\n    fromPreparedJSON(encoded) {\n        return (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureUint64)(encoded);\n    }\n} //# sourceMappingURL=uint64.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9lbmNvZGluZy9zY2hlbWEvdWludDY0LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUF5QztBQUNXO0FBQ3BELHlDQUF5QyxHQUNsQyxNQUFNRSxxQkFBcUJGLGdEQUFNQTtJQUNwQ0csZUFBZTtRQUNYLE9BQU9DLE9BQU87SUFDbEI7SUFDQUMsZUFBZUMsSUFBSSxFQUFFO1FBQ2pCLElBQUksT0FBT0EsU0FBUyxVQUNoQixPQUFPQSxTQUFTRixPQUFPO1FBQzNCLElBQUksT0FBT0UsU0FBUyxVQUNoQixPQUFPQSxTQUFTO1FBQ3BCLE9BQU87SUFDWDtJQUNBQyxlQUFlRCxJQUFJLEVBQUU7UUFDakIsT0FBT0wsNkRBQVlBLENBQUNLO0lBQ3hCO0lBQ0FFLG9CQUFvQkMsT0FBTyxFQUMzQiw2REFBNkQ7SUFDN0RDLGtCQUFrQixFQUFFO1FBQ2hCLE9BQU9ULDZEQUFZQSxDQUFDUTtJQUN4QjtJQUNBRSxZQUFZTCxJQUFJLEVBQ2hCLDZEQUE2RDtJQUM3RE0sUUFBUSxFQUFFO1FBQ04sT0FBT1gsNkRBQVlBLENBQUNLO0lBQ3hCO0lBQ0FPLGlCQUFpQkosT0FBTyxFQUFFO1FBQ3RCLE9BQU9SLDZEQUFZQSxDQUFDUTtJQUN4QjtBQUNKLEVBQ0Esa0NBQWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWxnb3JhbmQtY3Jvd2RmdW5kaW5nLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vZW5jb2Rpbmcvc2NoZW1hL3VpbnQ2NC5qcz9iMTVlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFNjaGVtYSwgfSBmcm9tICcuLi9lbmNvZGluZy5qcyc7XG5pbXBvcnQgeyBlbnN1cmVVaW50NjQgfSBmcm9tICcuLi8uLi91dGlscy91dGlscy5qcyc7XG4vKiBlc2xpbnQtZGlzYWJsZSBjbGFzcy1tZXRob2RzLXVzZS10aGlzICovXG5leHBvcnQgY2xhc3MgVWludDY0U2NoZW1hIGV4dGVuZHMgU2NoZW1hIHtcbiAgICBkZWZhdWx0VmFsdWUoKSB7XG4gICAgICAgIHJldHVybiBCaWdJbnQoMCk7XG4gICAgfVxuICAgIGlzRGVmYXVsdFZhbHVlKGRhdGEpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBkYXRhID09PSAnYmlnaW50JylcbiAgICAgICAgICAgIHJldHVybiBkYXRhID09PSBCaWdJbnQoMCk7XG4gICAgICAgIGlmICh0eXBlb2YgZGF0YSA9PT0gJ251bWJlcicpXG4gICAgICAgICAgICByZXR1cm4gZGF0YSA9PT0gMDtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBwcmVwYXJlTXNncGFjayhkYXRhKSB7XG4gICAgICAgIHJldHVybiBlbnN1cmVVaW50NjQoZGF0YSk7XG4gICAgfVxuICAgIGZyb21QcmVwYXJlZE1zZ3BhY2soZW5jb2RlZCwgXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyc1xuICAgIF9yYXdTdHJpbmdQcm92aWRlcikge1xuICAgICAgICByZXR1cm4gZW5zdXJlVWludDY0KGVuY29kZWQpO1xuICAgIH1cbiAgICBwcmVwYXJlSlNPTihkYXRhLCBcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXG4gICAgX29wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIGVuc3VyZVVpbnQ2NChkYXRhKTtcbiAgICB9XG4gICAgZnJvbVByZXBhcmVkSlNPTihlbmNvZGVkKSB7XG4gICAgICAgIHJldHVybiBlbnN1cmVVaW50NjQoZW5jb2RlZCk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dWludDY0LmpzLm1hcCJdLCJuYW1lcyI6WyJTY2hlbWEiLCJlbnN1cmVVaW50NjQiLCJVaW50NjRTY2hlbWEiLCJkZWZhdWx0VmFsdWUiLCJCaWdJbnQiLCJpc0RlZmF1bHRWYWx1ZSIsImRhdGEiLCJwcmVwYXJlTXNncGFjayIsImZyb21QcmVwYXJlZE1zZ3BhY2siLCJlbmNvZGVkIiwiX3Jhd1N0cmluZ1Byb3ZpZGVyIiwicHJlcGFyZUpTT04iLCJfb3B0aW9ucyIsImZyb21QcmVwYXJlZEpTT04iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/encoding/schema/uint64.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/encoding/schema/untyped.js":
/*!******************************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/encoding/schema/untyped.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   UntypedSchema: () => (/* binding */ UntypedSchema)\n/* harmony export */ });\n/* harmony import */ var _encoding_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../encoding.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/encoding.js\");\n\n/* eslint-disable class-methods-use-this */ class UntypedSchema extends _encoding_js__WEBPACK_IMPORTED_MODULE_0__.Schema {\n    defaultValue() {\n        return undefined;\n    }\n    isDefaultValue(data) {\n        return data === undefined;\n    }\n    prepareMsgpack(data) {\n        // Value is already MsgpackEncodingData, since it is returned as such from\n        // fromPreparedMsgpack and fromPreparedJSON\n        return data;\n    }\n    fromPreparedMsgpack(encoded, // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _rawStringProvider) {\n        return encoded;\n    }\n    prepareJSON(data, // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _options) {\n        return (0,_encoding_js__WEBPACK_IMPORTED_MODULE_0__.msgpackEncodingDataToJSONEncodingData)(data);\n    }\n    fromPreparedJSON(encoded) {\n        return (0,_encoding_js__WEBPACK_IMPORTED_MODULE_0__.jsonEncodingDataToMsgpackEncodingData)(encoded);\n    }\n} //# sourceMappingURL=untyped.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9lbmNvZGluZy9zY2hlbWEvdW50eXBlZC5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUF1SDtBQUN2SCx5Q0FBeUMsR0FDbEMsTUFBTUcsc0JBQXNCSCxnREFBTUE7SUFDckNJLGVBQWU7UUFDWCxPQUFPQztJQUNYO0lBQ0FDLGVBQWVDLElBQUksRUFBRTtRQUNqQixPQUFPQSxTQUFTRjtJQUNwQjtJQUNBRyxlQUFlRCxJQUFJLEVBQUU7UUFDakIsMEVBQTBFO1FBQzFFLDJDQUEyQztRQUMzQyxPQUFPQTtJQUNYO0lBQ0FFLG9CQUFvQkMsT0FBTyxFQUMzQiw2REFBNkQ7SUFDN0RDLGtCQUFrQixFQUFFO1FBQ2hCLE9BQU9EO0lBQ1g7SUFDQUUsWUFBWUwsSUFBSSxFQUNoQiw2REFBNkQ7SUFDN0RNLFFBQVEsRUFBRTtRQUNOLE9BQU9aLG1GQUFxQ0EsQ0FBQ007SUFDakQ7SUFDQU8saUJBQWlCSixPQUFPLEVBQUU7UUFDdEIsT0FBT1IsbUZBQXFDQSxDQUFDUTtJQUNqRDtBQUNKLEVBQ0EsbUNBQW1DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWxnb3JhbmQtY3Jvd2RmdW5kaW5nLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vZW5jb2Rpbmcvc2NoZW1hL3VudHlwZWQuanM/ZDI0YSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTY2hlbWEsIG1zZ3BhY2tFbmNvZGluZ0RhdGFUb0pTT05FbmNvZGluZ0RhdGEsIGpzb25FbmNvZGluZ0RhdGFUb01zZ3BhY2tFbmNvZGluZ0RhdGEsIH0gZnJvbSAnLi4vZW5jb2RpbmcuanMnO1xuLyogZXNsaW50LWRpc2FibGUgY2xhc3MtbWV0aG9kcy11c2UtdGhpcyAqL1xuZXhwb3J0IGNsYXNzIFVudHlwZWRTY2hlbWEgZXh0ZW5kcyBTY2hlbWEge1xuICAgIGRlZmF1bHRWYWx1ZSgpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgaXNEZWZhdWx0VmFsdWUoZGF0YSkge1xuICAgICAgICByZXR1cm4gZGF0YSA9PT0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBwcmVwYXJlTXNncGFjayhkYXRhKSB7XG4gICAgICAgIC8vIFZhbHVlIGlzIGFscmVhZHkgTXNncGFja0VuY29kaW5nRGF0YSwgc2luY2UgaXQgaXMgcmV0dXJuZWQgYXMgc3VjaCBmcm9tXG4gICAgICAgIC8vIGZyb21QcmVwYXJlZE1zZ3BhY2sgYW5kIGZyb21QcmVwYXJlZEpTT05cbiAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuICAgIGZyb21QcmVwYXJlZE1zZ3BhY2soZW5jb2RlZCwgXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyc1xuICAgIF9yYXdTdHJpbmdQcm92aWRlcikge1xuICAgICAgICByZXR1cm4gZW5jb2RlZDtcbiAgICB9XG4gICAgcHJlcGFyZUpTT04oZGF0YSwgXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyc1xuICAgIF9vcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBtc2dwYWNrRW5jb2RpbmdEYXRhVG9KU09ORW5jb2RpbmdEYXRhKGRhdGEpO1xuICAgIH1cbiAgICBmcm9tUHJlcGFyZWRKU09OKGVuY29kZWQpIHtcbiAgICAgICAgcmV0dXJuIGpzb25FbmNvZGluZ0RhdGFUb01zZ3BhY2tFbmNvZGluZ0RhdGEoZW5jb2RlZCk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dW50eXBlZC5qcy5tYXAiXSwibmFtZXMiOlsiU2NoZW1hIiwibXNncGFja0VuY29kaW5nRGF0YVRvSlNPTkVuY29kaW5nRGF0YSIsImpzb25FbmNvZGluZ0RhdGFUb01zZ3BhY2tFbmNvZGluZ0RhdGEiLCJVbnR5cGVkU2NoZW1hIiwiZGVmYXVsdFZhbHVlIiwidW5kZWZpbmVkIiwiaXNEZWZhdWx0VmFsdWUiLCJkYXRhIiwicHJlcGFyZU1zZ3BhY2siLCJmcm9tUHJlcGFyZWRNc2dwYWNrIiwiZW5jb2RlZCIsIl9yYXdTdHJpbmdQcm92aWRlciIsInByZXBhcmVKU09OIiwiX29wdGlvbnMiLCJmcm9tUHJlcGFyZWRKU09OIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/encoding/schema/untyped.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/encoding/uint64.js":
/*!**********************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/encoding/uint64.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decodeUint64: () => (/* binding */ decodeUint64),\n/* harmony export */   encodeUint64: () => (/* binding */ encodeUint64)\n/* harmony export */ });\n/* harmony import */ var _utils_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/utils.js */ \"(ssr)/./node_modules/algosdk/dist/esm/utils/utils.js\");\n\n// NOTE: at the moment we specifically do not use Buffer.writeBigUInt64BE and\n// Buffer.readBigUInt64BE. This is because projects using webpack v4\n// automatically include an old version of the npm `buffer` package (v4.9.2 at\n// the time of writing), and this old version does not have these methods.\n/**\n * encodeUint64 converts an integer to its binary representation.\n * @param num - The number to convert. This must be an unsigned integer less than\n *   2^64.\n * @returns An 8-byte typed array containing the big-endian encoding of the input\n *   integer.\n */ function encodeUint64(num) {\n    const isInteger = typeof num === \"bigint\" || Number.isInteger(num);\n    if (!isInteger || num < 0 || num > BigInt(\"0xffffffffffffffff\")) {\n        throw new Error(\"Input is not a 64-bit unsigned integer\");\n    }\n    const encoding = new Uint8Array(8);\n    const view = new DataView(encoding.buffer);\n    view.setBigUint64(0, BigInt(num));\n    return encoding;\n}\nfunction decodeUint64(data, decodingMode = \"safe\") {\n    if (decodingMode !== \"safe\" && decodingMode !== \"mixed\" && decodingMode !== \"bigint\") {\n        throw new Error(`Unknown decodingMode option: ${decodingMode}`);\n    }\n    if (data.byteLength === 0 || data.byteLength > 8) {\n        throw new Error(`Data has unacceptable length. Expected length is between 1 and 8, got ${data.byteLength}`);\n    }\n    // insert 0s at the beginning if data is smaller than 8 bytes\n    const padding = new Uint8Array(8 - data.byteLength);\n    const encoding = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.concatArrays)(padding, data);\n    const view = new DataView(encoding.buffer);\n    const num = view.getBigUint64(0);\n    const isBig = num > BigInt(Number.MAX_SAFE_INTEGER);\n    if (decodingMode === \"safe\") {\n        if (isBig) {\n            throw new Error(`Integer exceeds maximum safe integer: ${num.toString()}. Try decoding with \"mixed\" or \"safe\" decodingMode.`);\n        }\n        return Number(num);\n    }\n    if (decodingMode === \"mixed\" && !isBig) {\n        return Number(num);\n    }\n    return num;\n} //# sourceMappingURL=uint64.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9lbmNvZGluZy91aW50NjQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQWlEO0FBQ2pELDZFQUE2RTtBQUM3RSxvRUFBb0U7QUFDcEUsOEVBQThFO0FBQzlFLDBFQUEwRTtBQUMxRTs7Ozs7O0NBTUMsR0FDTSxTQUFTQyxhQUFhQyxHQUFHO0lBQzVCLE1BQU1DLFlBQVksT0FBT0QsUUFBUSxZQUFZRSxPQUFPRCxTQUFTLENBQUNEO0lBQzlELElBQUksQ0FBQ0MsYUFBYUQsTUFBTSxLQUFLQSxNQUFNRyxPQUFPLHVCQUF1QjtRQUM3RCxNQUFNLElBQUlDLE1BQU07SUFDcEI7SUFDQSxNQUFNQyxXQUFXLElBQUlDLFdBQVc7SUFDaEMsTUFBTUMsT0FBTyxJQUFJQyxTQUFTSCxTQUFTSSxNQUFNO0lBQ3pDRixLQUFLRyxZQUFZLENBQUMsR0FBR1AsT0FBT0g7SUFDNUIsT0FBT0s7QUFDWDtBQUNPLFNBQVNNLGFBQWFDLElBQUksRUFBRUMsZUFBZSxNQUFNO0lBQ3BELElBQUlBLGlCQUFpQixVQUNqQkEsaUJBQWlCLFdBQ2pCQSxpQkFBaUIsVUFBVTtRQUMzQixNQUFNLElBQUlULE1BQU0sQ0FBQyw2QkFBNkIsRUFBRVMsYUFBYSxDQUFDO0lBQ2xFO0lBQ0EsSUFBSUQsS0FBS0UsVUFBVSxLQUFLLEtBQUtGLEtBQUtFLFVBQVUsR0FBRyxHQUFHO1FBQzlDLE1BQU0sSUFBSVYsTUFBTSxDQUFDLHNFQUFzRSxFQUFFUSxLQUFLRSxVQUFVLENBQUMsQ0FBQztJQUM5RztJQUNBLDZEQUE2RDtJQUM3RCxNQUFNQyxVQUFVLElBQUlULFdBQVcsSUFBSU0sS0FBS0UsVUFBVTtJQUNsRCxNQUFNVCxXQUFXUCw2REFBWUEsQ0FBQ2lCLFNBQVNIO0lBQ3ZDLE1BQU1MLE9BQU8sSUFBSUMsU0FBU0gsU0FBU0ksTUFBTTtJQUN6QyxNQUFNVCxNQUFNTyxLQUFLUyxZQUFZLENBQUM7SUFDOUIsTUFBTUMsUUFBUWpCLE1BQU1HLE9BQU9ELE9BQU9nQixnQkFBZ0I7SUFDbEQsSUFBSUwsaUJBQWlCLFFBQVE7UUFDekIsSUFBSUksT0FBTztZQUNQLE1BQU0sSUFBSWIsTUFBTSxDQUFDLHNDQUFzQyxFQUFFSixJQUFJbUIsUUFBUSxHQUFHLG1EQUFtRCxDQUFDO1FBQ2hJO1FBQ0EsT0FBT2pCLE9BQU9GO0lBQ2xCO0lBQ0EsSUFBSWEsaUJBQWlCLFdBQVcsQ0FBQ0ksT0FBTztRQUNwQyxPQUFPZixPQUFPRjtJQUNsQjtJQUNBLE9BQU9BO0FBQ1gsRUFDQSxrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hbGdvcmFuZC1jcm93ZGZ1bmRpbmctZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9lbmNvZGluZy91aW50NjQuanM/YjRhNCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjb25jYXRBcnJheXMgfSBmcm9tICcuLi91dGlscy91dGlscy5qcyc7XG4vLyBOT1RFOiBhdCB0aGUgbW9tZW50IHdlIHNwZWNpZmljYWxseSBkbyBub3QgdXNlIEJ1ZmZlci53cml0ZUJpZ1VJbnQ2NEJFIGFuZFxuLy8gQnVmZmVyLnJlYWRCaWdVSW50NjRCRS4gVGhpcyBpcyBiZWNhdXNlIHByb2plY3RzIHVzaW5nIHdlYnBhY2sgdjRcbi8vIGF1dG9tYXRpY2FsbHkgaW5jbHVkZSBhbiBvbGQgdmVyc2lvbiBvZiB0aGUgbnBtIGBidWZmZXJgIHBhY2thZ2UgKHY0LjkuMiBhdFxuLy8gdGhlIHRpbWUgb2Ygd3JpdGluZyksIGFuZCB0aGlzIG9sZCB2ZXJzaW9uIGRvZXMgbm90IGhhdmUgdGhlc2UgbWV0aG9kcy5cbi8qKlxuICogZW5jb2RlVWludDY0IGNvbnZlcnRzIGFuIGludGVnZXIgdG8gaXRzIGJpbmFyeSByZXByZXNlbnRhdGlvbi5cbiAqIEBwYXJhbSBudW0gLSBUaGUgbnVtYmVyIHRvIGNvbnZlcnQuIFRoaXMgbXVzdCBiZSBhbiB1bnNpZ25lZCBpbnRlZ2VyIGxlc3MgdGhhblxuICogICAyXjY0LlxuICogQHJldHVybnMgQW4gOC1ieXRlIHR5cGVkIGFycmF5IGNvbnRhaW5pbmcgdGhlIGJpZy1lbmRpYW4gZW5jb2Rpbmcgb2YgdGhlIGlucHV0XG4gKiAgIGludGVnZXIuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBlbmNvZGVVaW50NjQobnVtKSB7XG4gICAgY29uc3QgaXNJbnRlZ2VyID0gdHlwZW9mIG51bSA9PT0gJ2JpZ2ludCcgfHwgTnVtYmVyLmlzSW50ZWdlcihudW0pO1xuICAgIGlmICghaXNJbnRlZ2VyIHx8IG51bSA8IDAgfHwgbnVtID4gQmlnSW50KCcweGZmZmZmZmZmZmZmZmZmZmYnKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0lucHV0IGlzIG5vdCBhIDY0LWJpdCB1bnNpZ25lZCBpbnRlZ2VyJyk7XG4gICAgfVxuICAgIGNvbnN0IGVuY29kaW5nID0gbmV3IFVpbnQ4QXJyYXkoOCk7XG4gICAgY29uc3QgdmlldyA9IG5ldyBEYXRhVmlldyhlbmNvZGluZy5idWZmZXIpO1xuICAgIHZpZXcuc2V0QmlnVWludDY0KDAsIEJpZ0ludChudW0pKTtcbiAgICByZXR1cm4gZW5jb2Rpbmc7XG59XG5leHBvcnQgZnVuY3Rpb24gZGVjb2RlVWludDY0KGRhdGEsIGRlY29kaW5nTW9kZSA9ICdzYWZlJykge1xuICAgIGlmIChkZWNvZGluZ01vZGUgIT09ICdzYWZlJyAmJlxuICAgICAgICBkZWNvZGluZ01vZGUgIT09ICdtaXhlZCcgJiZcbiAgICAgICAgZGVjb2RpbmdNb2RlICE9PSAnYmlnaW50Jykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVua25vd24gZGVjb2RpbmdNb2RlIG9wdGlvbjogJHtkZWNvZGluZ01vZGV9YCk7XG4gICAgfVxuICAgIGlmIChkYXRhLmJ5dGVMZW5ndGggPT09IDAgfHwgZGF0YS5ieXRlTGVuZ3RoID4gOCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYERhdGEgaGFzIHVuYWNjZXB0YWJsZSBsZW5ndGguIEV4cGVjdGVkIGxlbmd0aCBpcyBiZXR3ZWVuIDEgYW5kIDgsIGdvdCAke2RhdGEuYnl0ZUxlbmd0aH1gKTtcbiAgICB9XG4gICAgLy8gaW5zZXJ0IDBzIGF0IHRoZSBiZWdpbm5pbmcgaWYgZGF0YSBpcyBzbWFsbGVyIHRoYW4gOCBieXRlc1xuICAgIGNvbnN0IHBhZGRpbmcgPSBuZXcgVWludDhBcnJheSg4IC0gZGF0YS5ieXRlTGVuZ3RoKTtcbiAgICBjb25zdCBlbmNvZGluZyA9IGNvbmNhdEFycmF5cyhwYWRkaW5nLCBkYXRhKTtcbiAgICBjb25zdCB2aWV3ID0gbmV3IERhdGFWaWV3KGVuY29kaW5nLmJ1ZmZlcik7XG4gICAgY29uc3QgbnVtID0gdmlldy5nZXRCaWdVaW50NjQoMCk7XG4gICAgY29uc3QgaXNCaWcgPSBudW0gPiBCaWdJbnQoTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIpO1xuICAgIGlmIChkZWNvZGluZ01vZGUgPT09ICdzYWZlJykge1xuICAgICAgICBpZiAoaXNCaWcpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgSW50ZWdlciBleGNlZWRzIG1heGltdW0gc2FmZSBpbnRlZ2VyOiAke251bS50b1N0cmluZygpfS4gVHJ5IGRlY29kaW5nIHdpdGggXCJtaXhlZFwiIG9yIFwic2FmZVwiIGRlY29kaW5nTW9kZS5gKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gTnVtYmVyKG51bSk7XG4gICAgfVxuICAgIGlmIChkZWNvZGluZ01vZGUgPT09ICdtaXhlZCcgJiYgIWlzQmlnKSB7XG4gICAgICAgIHJldHVybiBOdW1iZXIobnVtKTtcbiAgICB9XG4gICAgcmV0dXJuIG51bTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVpbnQ2NC5qcy5tYXAiXSwibmFtZXMiOlsiY29uY2F0QXJyYXlzIiwiZW5jb2RlVWludDY0IiwibnVtIiwiaXNJbnRlZ2VyIiwiTnVtYmVyIiwiQmlnSW50IiwiRXJyb3IiLCJlbmNvZGluZyIsIlVpbnQ4QXJyYXkiLCJ2aWV3IiwiRGF0YVZpZXciLCJidWZmZXIiLCJzZXRCaWdVaW50NjQiLCJkZWNvZGVVaW50NjQiLCJkYXRhIiwiZGVjb2RpbmdNb2RlIiwiYnl0ZUxlbmd0aCIsInBhZGRpbmciLCJnZXRCaWdVaW50NjQiLCJpc0JpZyIsIk1BWF9TQUZFX0lOVEVHRVIiLCJ0b1N0cmluZyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/encoding/uint64.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/group.js":
/*!************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/group.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   assignGroupID: () => (/* binding */ assignGroupID),\n/* harmony export */   computeGroupID: () => (/* binding */ computeGroupID)\n/* harmony export */ });\n/* harmony import */ var _nacl_naclWrappers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./nacl/naclWrappers.js */ \"(ssr)/./node_modules/algosdk/dist/esm/nacl/naclWrappers.js\");\n/* harmony import */ var _encoding_encoding_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./encoding/encoding.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/encoding.js\");\n/* harmony import */ var _utils_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/utils.js */ \"(ssr)/./node_modules/algosdk/dist/esm/utils/utils.js\");\n\n\n\nconst ALGORAND_MAX_TX_GROUP_SIZE = 16;\nconst TX_GROUP_TAG = new TextEncoder().encode(\"TG\");\nfunction txGroupPreimage(txnHashes) {\n    if (txnHashes.length > ALGORAND_MAX_TX_GROUP_SIZE) {\n        throw new Error(`${txnHashes.length} transactions grouped together but max group size is ${ALGORAND_MAX_TX_GROUP_SIZE}`);\n    }\n    if (txnHashes.length === 0) {\n        throw new Error(\"Cannot compute group ID of zero transactions\");\n    }\n    const bytes = (0,_encoding_encoding_js__WEBPACK_IMPORTED_MODULE_1__.msgpackRawEncode)({\n        txlist: txnHashes\n    });\n    return _utils_utils_js__WEBPACK_IMPORTED_MODULE_2__.concatArrays(TX_GROUP_TAG, bytes);\n}\n/**\n * computeGroupID returns group ID for a group of transactions\n * @param txns - array of transactions\n * @returns Uint8Array\n */ function computeGroupID(txns) {\n    const hashes = [];\n    for (const txn of txns){\n        hashes.push(txn.rawTxID());\n    }\n    const toBeHashed = txGroupPreimage(hashes);\n    const gid = _nacl_naclWrappers_js__WEBPACK_IMPORTED_MODULE_0__.genericHash(toBeHashed);\n    return Uint8Array.from(gid);\n}\n/**\n * assignGroupID assigns group id to a given list of unsigned transactions\n * @param txns - array of transactions. The array elements will be modified with the group id\n */ function assignGroupID(txns) {\n    const gid = computeGroupID(txns);\n    for (const txn of txns){\n        txn.group = gid;\n    }\n    return txns;\n} //# sourceMappingURL=group.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9ncm91cC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUErQztBQUNXO0FBQ2hCO0FBQzFDLE1BQU1HLDZCQUE2QjtBQUNuQyxNQUFNQyxlQUFlLElBQUlDLGNBQWNDLE1BQU0sQ0FBQztBQUM5QyxTQUFTQyxnQkFBZ0JDLFNBQVM7SUFDOUIsSUFBSUEsVUFBVUMsTUFBTSxHQUFHTiw0QkFBNEI7UUFDL0MsTUFBTSxJQUFJTyxNQUFNLENBQUMsRUFBRUYsVUFBVUMsTUFBTSxDQUFDLHFEQUFxRCxFQUFFTiwyQkFBMkIsQ0FBQztJQUMzSDtJQUNBLElBQUlLLFVBQVVDLE1BQU0sS0FBSyxHQUFHO1FBQ3hCLE1BQU0sSUFBSUMsTUFBTTtJQUNwQjtJQUNBLE1BQU1DLFFBQVFWLHVFQUFnQkEsQ0FBQztRQUMzQlcsUUFBUUo7SUFDWjtJQUNBLE9BQU9OLHlEQUFrQixDQUFDRSxjQUFjTztBQUM1QztBQUNBOzs7O0NBSUMsR0FDTSxTQUFTRyxlQUFlQyxJQUFJO0lBQy9CLE1BQU1DLFNBQVMsRUFBRTtJQUNqQixLQUFLLE1BQU1DLE9BQU9GLEtBQU07UUFDcEJDLE9BQU9FLElBQUksQ0FBQ0QsSUFBSUUsT0FBTztJQUMzQjtJQUNBLE1BQU1DLGFBQWFiLGdCQUFnQlM7SUFDbkMsTUFBTUssTUFBTXJCLDhEQUFnQixDQUFDb0I7SUFDN0IsT0FBT0csV0FBV0MsSUFBSSxDQUFDSDtBQUMzQjtBQUNBOzs7Q0FHQyxHQUNNLFNBQVNJLGNBQWNWLElBQUk7SUFDOUIsTUFBTU0sTUFBTVAsZUFBZUM7SUFDM0IsS0FBSyxNQUFNRSxPQUFPRixLQUFNO1FBQ3BCRSxJQUFJUyxLQUFLLEdBQUdMO0lBQ2hCO0lBQ0EsT0FBT047QUFDWCxFQUNBLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL2FsZ29yYW5kLWNyb3dkZnVuZGluZy1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9hbGdvc2RrL2Rpc3QvZXNtL2dyb3VwLmpzPzc4MjgiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgbmFjbCBmcm9tICcuL25hY2wvbmFjbFdyYXBwZXJzLmpzJztcbmltcG9ydCB7IG1zZ3BhY2tSYXdFbmNvZGUgfSBmcm9tICcuL2VuY29kaW5nL2VuY29kaW5nLmpzJztcbmltcG9ydCAqIGFzIHV0aWxzIGZyb20gJy4vdXRpbHMvdXRpbHMuanMnO1xuY29uc3QgQUxHT1JBTkRfTUFYX1RYX0dST1VQX1NJWkUgPSAxNjtcbmNvbnN0IFRYX0dST1VQX1RBRyA9IG5ldyBUZXh0RW5jb2RlcigpLmVuY29kZSgnVEcnKTtcbmZ1bmN0aW9uIHR4R3JvdXBQcmVpbWFnZSh0eG5IYXNoZXMpIHtcbiAgICBpZiAodHhuSGFzaGVzLmxlbmd0aCA+IEFMR09SQU5EX01BWF9UWF9HUk9VUF9TSVpFKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgJHt0eG5IYXNoZXMubGVuZ3RofSB0cmFuc2FjdGlvbnMgZ3JvdXBlZCB0b2dldGhlciBidXQgbWF4IGdyb3VwIHNpemUgaXMgJHtBTEdPUkFORF9NQVhfVFhfR1JPVVBfU0laRX1gKTtcbiAgICB9XG4gICAgaWYgKHR4bkhhc2hlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgY29tcHV0ZSBncm91cCBJRCBvZiB6ZXJvIHRyYW5zYWN0aW9ucycpO1xuICAgIH1cbiAgICBjb25zdCBieXRlcyA9IG1zZ3BhY2tSYXdFbmNvZGUoe1xuICAgICAgICB0eGxpc3Q6IHR4bkhhc2hlcyxcbiAgICB9KTtcbiAgICByZXR1cm4gdXRpbHMuY29uY2F0QXJyYXlzKFRYX0dST1VQX1RBRywgYnl0ZXMpO1xufVxuLyoqXG4gKiBjb21wdXRlR3JvdXBJRCByZXR1cm5zIGdyb3VwIElEIGZvciBhIGdyb3VwIG9mIHRyYW5zYWN0aW9uc1xuICogQHBhcmFtIHR4bnMgLSBhcnJheSBvZiB0cmFuc2FjdGlvbnNcbiAqIEByZXR1cm5zIFVpbnQ4QXJyYXlcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbXB1dGVHcm91cElEKHR4bnMpIHtcbiAgICBjb25zdCBoYXNoZXMgPSBbXTtcbiAgICBmb3IgKGNvbnN0IHR4biBvZiB0eG5zKSB7XG4gICAgICAgIGhhc2hlcy5wdXNoKHR4bi5yYXdUeElEKCkpO1xuICAgIH1cbiAgICBjb25zdCB0b0JlSGFzaGVkID0gdHhHcm91cFByZWltYWdlKGhhc2hlcyk7XG4gICAgY29uc3QgZ2lkID0gbmFjbC5nZW5lcmljSGFzaCh0b0JlSGFzaGVkKTtcbiAgICByZXR1cm4gVWludDhBcnJheS5mcm9tKGdpZCk7XG59XG4vKipcbiAqIGFzc2lnbkdyb3VwSUQgYXNzaWducyBncm91cCBpZCB0byBhIGdpdmVuIGxpc3Qgb2YgdW5zaWduZWQgdHJhbnNhY3Rpb25zXG4gKiBAcGFyYW0gdHhucyAtIGFycmF5IG9mIHRyYW5zYWN0aW9ucy4gVGhlIGFycmF5IGVsZW1lbnRzIHdpbGwgYmUgbW9kaWZpZWQgd2l0aCB0aGUgZ3JvdXAgaWRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFzc2lnbkdyb3VwSUQodHhucykge1xuICAgIGNvbnN0IGdpZCA9IGNvbXB1dGVHcm91cElEKHR4bnMpO1xuICAgIGZvciAoY29uc3QgdHhuIG9mIHR4bnMpIHtcbiAgICAgICAgdHhuLmdyb3VwID0gZ2lkO1xuICAgIH1cbiAgICByZXR1cm4gdHhucztcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdyb3VwLmpzLm1hcCJdLCJuYW1lcyI6WyJuYWNsIiwibXNncGFja1Jhd0VuY29kZSIsInV0aWxzIiwiQUxHT1JBTkRfTUFYX1RYX0dST1VQX1NJWkUiLCJUWF9HUk9VUF9UQUciLCJUZXh0RW5jb2RlciIsImVuY29kZSIsInR4R3JvdXBQcmVpbWFnZSIsInR4bkhhc2hlcyIsImxlbmd0aCIsIkVycm9yIiwiYnl0ZXMiLCJ0eGxpc3QiLCJjb25jYXRBcnJheXMiLCJjb21wdXRlR3JvdXBJRCIsInR4bnMiLCJoYXNoZXMiLCJ0eG4iLCJwdXNoIiwicmF3VHhJRCIsInRvQmVIYXNoZWQiLCJnaWQiLCJnZW5lcmljSGFzaCIsIlVpbnQ4QXJyYXkiLCJmcm9tIiwiYXNzaWduR3JvdXBJRCIsImdyb3VwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/group.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/heartbeat.js":
/*!****************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/heartbeat.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Heartbeat: () => (/* binding */ Heartbeat),\n/* harmony export */   HeartbeatProof: () => (/* binding */ HeartbeatProof)\n/* harmony export */ });\n/* harmony import */ var _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./encoding/schema/index.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/schema/index.js\");\n\nclass HeartbeatProof {\n    constructor(params){\n        this.sig = params.sig;\n        this.pk = params.pk;\n        this.pk2 = params.pk2;\n        this.pk1Sig = params.pk1Sig;\n        this.pk2Sig = params.pk2Sig;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return HeartbeatProof.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"s\",\n                this.sig\n            ],\n            [\n                \"p\",\n                this.pk\n            ],\n            [\n                \"p2\",\n                this.pk2\n            ],\n            [\n                \"p1s\",\n                this.pk1Sig\n            ],\n            [\n                \"p2s\",\n                this.pk2Sig\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded HeartbeatProof: ${data}`);\n        }\n        return new HeartbeatProof({\n            sig: data.get(\"s\"),\n            pk: data.get(\"p\"),\n            pk2: data.get(\"p2\"),\n            pk1Sig: data.get(\"p1s\"),\n            pk2Sig: data.get(\"p2s\")\n        });\n    }\n}\nHeartbeatProof.encodingSchema = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.NamedMapSchema((0,_encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.allOmitEmpty)([\n    {\n        key: \"s\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.FixedLengthByteArraySchema(64)\n    },\n    {\n        key: \"p\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.FixedLengthByteArraySchema(32)\n    },\n    {\n        key: \"p2\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.FixedLengthByteArraySchema(32)\n    },\n    {\n        key: \"p1s\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.FixedLengthByteArraySchema(64)\n    },\n    {\n        key: \"p2s\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.FixedLengthByteArraySchema(64)\n    }\n]));\nclass Heartbeat {\n    constructor(params){\n        this.address = params.address;\n        this.proof = params.proof;\n        this.seed = params.seed;\n        this.voteID = params.voteID;\n        this.keyDilution = params.keyDilution;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return Heartbeat.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"a\",\n                this.address\n            ],\n            [\n                \"prf\",\n                this.proof.toEncodingData()\n            ],\n            [\n                \"sd\",\n                this.seed\n            ],\n            [\n                \"vid\",\n                this.voteID\n            ],\n            [\n                \"kd\",\n                this.keyDilution\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded Heartbeat: ${data}`);\n        }\n        return new Heartbeat({\n            address: data.get(\"a\"),\n            proof: HeartbeatProof.fromEncodingData(data.get(\"prf\")),\n            seed: data.get(\"sd\"),\n            voteID: data.get(\"vid\"),\n            keyDilution: data.get(\"kd\")\n        });\n    }\n}\nHeartbeat.encodingSchema = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.NamedMapSchema((0,_encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.allOmitEmpty)([\n    {\n        key: \"a\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.AddressSchema()\n    },\n    {\n        key: \"prf\",\n        valueSchema: HeartbeatProof.encodingSchema\n    },\n    {\n        key: \"sd\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.ByteArraySchema()\n    },\n    {\n        key: \"vid\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.FixedLengthByteArraySchema(32)\n    },\n    {\n        key: \"kd\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.Uint64Schema()\n    }\n])); //# sourceMappingURL=heartbeat.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/heartbeat.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/index.js":
/*!************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/index.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ABIAddressType: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.ABIAddressType),\n/* harmony export */   ABIArrayDynamicType: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.ABIArrayDynamicType),\n/* harmony export */   ABIArrayStaticType: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.ABIArrayStaticType),\n/* harmony export */   ABIBoolType: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.ABIBoolType),\n/* harmony export */   ABIByteType: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.ABIByteType),\n/* harmony export */   ABIContract: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.ABIContract),\n/* harmony export */   ABIInterface: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.ABIInterface),\n/* harmony export */   ABIMethod: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.ABIMethod),\n/* harmony export */   ABIReferenceType: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.ABIReferenceType),\n/* harmony export */   ABIStringType: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.ABIStringType),\n/* harmony export */   ABITransactionType: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.ABITransactionType),\n/* harmony export */   ABITupleType: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.ABITupleType),\n/* harmony export */   ABIType: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.ABIType),\n/* harmony export */   ABIUfixedType: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.ABIUfixedType),\n/* harmony export */   ABIUintType: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.ABIUintType),\n/* harmony export */   ADDR_BYTE_SIZE: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.ADDR_BYTE_SIZE),\n/* harmony export */   ALGORAND_ZERO_ADDRESS_STRING: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.ALGORAND_ZERO_ADDRESS_STRING),\n/* harmony export */   AccountBaseData: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.AccountBaseData),\n/* harmony export */   AccountData: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.AccountData),\n/* harmony export */   AccountDeltas: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.AccountDeltas),\n/* harmony export */   AccountTotals: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.AccountTotals),\n/* harmony export */   Address: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.Address),\n/* harmony export */   AlgoCount: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.AlgoCount),\n/* harmony export */   Algodv2: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.Algodv2),\n/* harmony export */   AppLocalState: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.AppLocalState),\n/* harmony export */   AppLocalStateDelta: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.AppLocalStateDelta),\n/* harmony export */   AppParams: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.AppParams),\n/* harmony export */   AppParamsDelta: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.AppParamsDelta),\n/* harmony export */   AppResourceRecord: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.AppResourceRecord),\n/* harmony export */   ApplyData: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.ApplyData),\n/* harmony export */   AssetHolding: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.AssetHolding),\n/* harmony export */   AssetHoldingDelta: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.AssetHoldingDelta),\n/* harmony export */   AssetParams: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.AssetParams),\n/* harmony export */   AssetParamsDelta: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.AssetParamsDelta),\n/* harmony export */   AssetResourceRecord: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.AssetResourceRecord),\n/* harmony export */   AtomicTransactionComposer: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.AtomicTransactionComposer),\n/* harmony export */   AtomicTransactionComposerStatus: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.AtomicTransactionComposerStatus),\n/* harmony export */   BalanceRecord: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.BalanceRecord),\n/* harmony export */   Block: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.Block),\n/* harmony export */   BlockHeader: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.BlockHeader),\n/* harmony export */   ENCODED_MULTISIG_SCHEMA: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.ENCODED_MULTISIG_SCHEMA),\n/* harmony export */   ENCODED_SUBSIG_SCHEMA: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.ENCODED_SUBSIG_SCHEMA),\n/* harmony export */   ERROR_INVALID_MICROALGOS: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.ERROR_INVALID_MICROALGOS),\n/* harmony export */   ERROR_MULTISIG_BAD_SENDER: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.ERROR_MULTISIG_BAD_SENDER),\n/* harmony export */   EvalDelta: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.EvalDelta),\n/* harmony export */   FalconSignatureStruct: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.FalconSignatureStruct),\n/* harmony export */   FalconVerifier: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.FalconVerifier),\n/* harmony export */   HashFactory: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.HashFactory),\n/* harmony export */   INVALID_MICROALGOS_ERROR_MSG: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.INVALID_MICROALGOS_ERROR_MSG),\n/* harmony export */   IncludedTransactions: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.IncludedTransactions),\n/* harmony export */   Indexer: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.Indexer),\n/* harmony export */   IntDecoding: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.IntDecoding),\n/* harmony export */   Kmd: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.Kmd),\n/* harmony export */   KvValueDelta: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.KvValueDelta),\n/* harmony export */   LENGTH_ENCODE_BYTE_SIZE: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.LENGTH_ENCODE_BYTE_SIZE),\n/* harmony export */   LedgerStateDelta: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.LedgerStateDelta),\n/* harmony export */   LogicSig: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.LogicSig),\n/* harmony export */   LogicSigAccount: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.LogicSigAccount),\n/* harmony export */   MAX_LEN: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.MAX_LEN),\n/* harmony export */   MULTISIG_BAD_SENDER_ERROR_MSG: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.MULTISIG_BAD_SENDER_ERROR_MSG),\n/* harmony export */   MerkleArrayProof: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.MerkleArrayProof),\n/* harmony export */   MerkleSignatureVerifier: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.MerkleSignatureVerifier),\n/* harmony export */   ModifiedCreatable: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.ModifiedCreatable),\n/* harmony export */   OnApplicationComplete: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.OnApplicationComplete),\n/* harmony export */   Participant: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.Participant),\n/* harmony export */   ParticipationUpdates: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.ParticipationUpdates),\n/* harmony export */   ProgramSourceMap: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.ProgramSourceMap),\n/* harmony export */   Reveal: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.Reveal),\n/* harmony export */   RewardState: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.RewardState),\n/* harmony export */   SINGLE_BOOL_SIZE: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.SINGLE_BOOL_SIZE),\n/* harmony export */   SINGLE_BYTE_SIZE: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.SINGLE_BYTE_SIZE),\n/* harmony export */   SignedTransaction: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.SignedTransaction),\n/* harmony export */   SignedTxnInBlock: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.SignedTxnInBlock),\n/* harmony export */   SignedTxnWithAD: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.SignedTxnWithAD),\n/* harmony export */   SigslotCommit: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.SigslotCommit),\n/* harmony export */   StateProof: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.StateProof),\n/* harmony export */   StateProofMessage: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.StateProofMessage),\n/* harmony export */   StateProofTrackingData: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.StateProofTrackingData),\n/* harmony export */   StateSchema: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.StateSchema),\n/* harmony export */   TealValue: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.TealValue),\n/* harmony export */   Transaction: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.Transaction),\n/* harmony export */   TransactionType: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.TransactionType),\n/* harmony export */   TxnCommitments: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.TxnCommitments),\n/* harmony export */   UntypedValue: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.UntypedValue),\n/* harmony export */   UpgradeState: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.UpgradeState),\n/* harmony export */   UpgradeVote: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.UpgradeVote),\n/* harmony export */   ValueDelta: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.ValueDelta),\n/* harmony export */   VotingData: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.VotingData),\n/* harmony export */   abiCheckTransactionType: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.abiCheckTransactionType),\n/* harmony export */   abiTypeIsReference: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.abiTypeIsReference),\n/* harmony export */   abiTypeIsTransaction: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.abiTypeIsTransaction),\n/* harmony export */   algosToMicroalgos: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.algosToMicroalgos),\n/* harmony export */   appendSignMultisigTransaction: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.appendSignMultisigTransaction),\n/* harmony export */   appendSignRawMultisigSignature: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.appendSignRawMultisigSignature),\n/* harmony export */   assignGroupID: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.assignGroupID),\n/* harmony export */   base64ToBytes: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.base64ToBytes),\n/* harmony export */   bigIntToBytes: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.bigIntToBytes),\n/* harmony export */   bytesToBase64: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.bytesToBase64),\n/* harmony export */   bytesToBigInt: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.bytesToBigInt),\n/* harmony export */   bytesToHex: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.bytesToHex),\n/* harmony export */   bytesToString: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.bytesToString),\n/* harmony export */   coerceToBytes: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.coerceToBytes),\n/* harmony export */   computeGroupID: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.computeGroupID),\n/* harmony export */   createDryrun: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.createDryrun),\n/* harmony export */   createMultisigTransaction: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.createMultisigTransaction),\n/* harmony export */   decodeAddress: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.decodeAddress),\n/* harmony export */   decodeJSON: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.decodeJSON),\n/* harmony export */   decodeMsgpack: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.decodeMsgpack),\n/* harmony export */   decodeObj: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.decodeObj),\n/* harmony export */   decodeSignedTransaction: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.decodeSignedTransaction),\n/* harmony export */   decodeUint64: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.decodeUint64),\n/* harmony export */   decodeUnsignedTransaction: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.decodeUnsignedTransaction),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   dryrunTxnResultAppTrace: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.dryrunTxnResultAppTrace),\n/* harmony export */   dryrunTxnResultLogicSigTrace: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.dryrunTxnResultLogicSigTrace),\n/* harmony export */   encodeAddress: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.encodeAddress),\n/* harmony export */   encodeJSON: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.encodeJSON),\n/* harmony export */   encodeMsgpack: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.encodeMsgpack),\n/* harmony export */   encodeObj: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.encodeObj),\n/* harmony export */   encodeUint64: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.encodeUint64),\n/* harmony export */   encodeUnsignedSimulateTransaction: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.encodeUnsignedSimulateTransaction),\n/* harmony export */   encodeUnsignedTransaction: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.encodeUnsignedTransaction),\n/* harmony export */   encodedMultiSigFromEncodingData: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.encodedMultiSigFromEncodingData),\n/* harmony export */   encodedMultiSigToEncodingData: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.encodedMultiSigToEncodingData),\n/* harmony export */   encodedSubsigFromEncodingData: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.encodedSubsigFromEncodingData),\n/* harmony export */   encodedSubsigToEncodingData: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.encodedSubsigToEncodingData),\n/* harmony export */   generateAccount: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.generateAccount),\n/* harmony export */   getApplicationAddress: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.getApplicationAddress),\n/* harmony export */   getMethodByName: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.getMethodByName),\n/* harmony export */   hexToBytes: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.hexToBytes),\n/* harmony export */   indexerModels: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.indexerModels),\n/* harmony export */   isOnApplicationComplete: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.isOnApplicationComplete),\n/* harmony export */   isTransactionType: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.isTransactionType),\n/* harmony export */   isTransactionWithSigner: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.isTransactionWithSigner),\n/* harmony export */   isValidAddress: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.isValidAddress),\n/* harmony export */   logicSigFromByte: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.logicSigFromByte),\n/* harmony export */   makeApplicationCallTxnFromObject: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.makeApplicationCallTxnFromObject),\n/* harmony export */   makeApplicationClearStateTxnFromObject: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.makeApplicationClearStateTxnFromObject),\n/* harmony export */   makeApplicationCloseOutTxnFromObject: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.makeApplicationCloseOutTxnFromObject),\n/* harmony export */   makeApplicationCreateTxnFromObject: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.makeApplicationCreateTxnFromObject),\n/* harmony export */   makeApplicationDeleteTxnFromObject: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.makeApplicationDeleteTxnFromObject),\n/* harmony export */   makeApplicationNoOpTxnFromObject: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.makeApplicationNoOpTxnFromObject),\n/* harmony export */   makeApplicationOptInTxnFromObject: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.makeApplicationOptInTxnFromObject),\n/* harmony export */   makeApplicationUpdateTxnFromObject: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.makeApplicationUpdateTxnFromObject),\n/* harmony export */   makeAssetConfigTxnWithSuggestedParamsFromObject: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.makeAssetConfigTxnWithSuggestedParamsFromObject),\n/* harmony export */   makeAssetCreateTxnWithSuggestedParamsFromObject: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.makeAssetCreateTxnWithSuggestedParamsFromObject),\n/* harmony export */   makeAssetDestroyTxnWithSuggestedParamsFromObject: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.makeAssetDestroyTxnWithSuggestedParamsFromObject),\n/* harmony export */   makeAssetFreezeTxnWithSuggestedParamsFromObject: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.makeAssetFreezeTxnWithSuggestedParamsFromObject),\n/* harmony export */   makeAssetTransferTxnWithSuggestedParamsFromObject: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.makeAssetTransferTxnWithSuggestedParamsFromObject),\n/* harmony export */   makeBaseAssetConfigTxn: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.makeBaseAssetConfigTxn),\n/* harmony export */   makeBasicAccountTransactionSigner: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.makeBasicAccountTransactionSigner),\n/* harmony export */   makeEmptyTransactionSigner: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.makeEmptyTransactionSigner),\n/* harmony export */   makeKeyRegistrationTxnWithSuggestedParamsFromObject: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.makeKeyRegistrationTxnWithSuggestedParamsFromObject),\n/* harmony export */   makeLogicSigAccountTransactionSigner: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.makeLogicSigAccountTransactionSigner),\n/* harmony export */   makeMultiSigAccountTransactionSigner: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.makeMultiSigAccountTransactionSigner),\n/* harmony export */   makePaymentTxnWithSuggestedParamsFromObject: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.makePaymentTxnWithSuggestedParamsFromObject),\n/* harmony export */   masterDerivationKeyToMnemonic: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.masterDerivationKeyToMnemonic),\n/* harmony export */   mergeMultisigTransactions: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.mergeMultisigTransactions),\n/* harmony export */   microalgosToAlgos: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.microalgosToAlgos),\n/* harmony export */   mnemonicFromSeed: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.mnemonicFromSeed),\n/* harmony export */   mnemonicToMasterDerivationKey: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.mnemonicToMasterDerivationKey),\n/* harmony export */   mnemonicToSecretKey: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.mnemonicToSecretKey),\n/* harmony export */   modelsv2: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.modelsv2),\n/* harmony export */   msgpackRawDecode: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.msgpackRawDecode),\n/* harmony export */   msgpackRawDecodeAsMap: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.msgpackRawDecodeAsMap),\n/* harmony export */   msgpackRawEncode: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.msgpackRawEncode),\n/* harmony export */   multisigAddress: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.multisigAddress),\n/* harmony export */   parseJSON: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.parseJSON),\n/* harmony export */   secretKeyToMnemonic: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.secretKeyToMnemonic),\n/* harmony export */   seedFromMnemonic: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.seedFromMnemonic),\n/* harmony export */   signBytes: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.signBytes),\n/* harmony export */   signLogicSigTransaction: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.signLogicSigTransaction),\n/* harmony export */   signLogicSigTransactionObject: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.signLogicSigTransactionObject),\n/* harmony export */   signMultisigTransaction: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.signMultisigTransaction),\n/* harmony export */   signTransaction: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.signTransaction),\n/* harmony export */   stringifyJSON: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.stringifyJSON),\n/* harmony export */   tealSign: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.tealSign),\n/* harmony export */   tealSignFromProgram: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.tealSignFromProgram),\n/* harmony export */   verifyBytes: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.verifyBytes),\n/* harmony export */   verifyMultisig: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.verifyMultisig),\n/* harmony export */   verifyTealSign: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.verifyTealSign),\n/* harmony export */   waitForConfirmation: () => (/* reexport safe */ _main_js__WEBPACK_IMPORTED_MODULE_0__.waitForConfirmation)\n/* harmony export */ });\n/* harmony import */ var _main_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./main.js */ \"(ssr)/./node_modules/algosdk/dist/esm/main.js\");\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_main_js__WEBPACK_IMPORTED_MODULE_0__); //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBcUM7QUFDWDtBQUMxQixpRUFBZUEscUNBQU9BLEVBQUMsQ0FDdkIsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWxnb3JhbmQtY3Jvd2RmdW5kaW5nLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vaW5kZXguanM/OTdiNSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBhbGdvc2RrIGZyb20gJy4vbWFpbi5qcyc7XG5leHBvcnQgKiBmcm9tICcuL21haW4uanMnO1xuZXhwb3J0IGRlZmF1bHQgYWxnb3Nkaztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6WyJhbGdvc2RrIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/logic/sourcemap.js":
/*!**********************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/logic/sourcemap.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ProgramSourceMap: () => (/* binding */ ProgramSourceMap)\n/* harmony export */ });\n/* harmony import */ var vlq__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vlq */ \"(ssr)/./node_modules/vlq/src/index.js\");\n\n/**\n * Contains a mapping from TEAL program PC to source file location.\n */ class ProgramSourceMap {\n    constructor({ version, sources, names, mappings }){\n        this.version = version;\n        this.sources = sources;\n        this.names = names;\n        this.mappings = mappings;\n        if (this.version !== 3) throw new Error(`Only version 3 is supported, got ${this.version}`);\n        if (this.mappings === undefined) throw new Error(\"mapping undefined, cannot build source map without `mapping`\");\n        const pcList = this.mappings.split(\";\").map(vlq__WEBPACK_IMPORTED_MODULE_0__.decode);\n        this.pcToLocation = new Map();\n        this.sourceAndLineToPc = new Map();\n        const lastLocation = {\n            line: 0,\n            column: 0,\n            sourceIndex: 0,\n            nameIndex: 0\n        };\n        for (const [pc, data] of pcList.entries()){\n            if (data.length < 4) continue;\n            const nameDelta = data.length > 4 ? data[4] : undefined;\n            const [, sourceDelta, lineDelta, columnDelta] = data;\n            lastLocation.sourceIndex += sourceDelta;\n            lastLocation.line += lineDelta;\n            lastLocation.column += columnDelta;\n            if (typeof nameDelta !== \"undefined\") {\n                lastLocation.nameIndex += nameDelta;\n            }\n            const sourceAndLineKey = `${lastLocation.sourceIndex}:${lastLocation.line}`;\n            let pcsForSourceAndLine = this.sourceAndLineToPc.get(sourceAndLineKey);\n            if (pcsForSourceAndLine === undefined) {\n                pcsForSourceAndLine = [];\n                this.sourceAndLineToPc.set(sourceAndLineKey, pcsForSourceAndLine);\n            }\n            const pcInLine = {\n                pc,\n                column: lastLocation.column\n            };\n            const pcLocation = {\n                line: lastLocation.line,\n                column: lastLocation.column,\n                sourceIndex: lastLocation.sourceIndex\n            };\n            if (typeof nameDelta !== \"undefined\") {\n                pcInLine.nameIndex = lastLocation.nameIndex;\n                pcLocation.nameIndex = lastLocation.nameIndex;\n            }\n            pcsForSourceAndLine.push(pcInLine);\n            this.pcToLocation.set(pc, pcLocation);\n        }\n    }\n    getPcs() {\n        return Array.from(this.pcToLocation.keys());\n    }\n    getLocationForPc(pc) {\n        return this.pcToLocation.get(pc);\n    }\n    getPcsOnSourceLine(sourceIndex, line) {\n        const pcs = this.sourceAndLineToPc.get(`${sourceIndex}:${line}`);\n        if (pcs === undefined) return [];\n        return pcs;\n    }\n} //# sourceMappingURL=sourcemap.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9sb2dpYy9zb3VyY2VtYXAuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBMkI7QUFDM0I7O0NBRUMsR0FDTSxNQUFNQztJQUNUQyxZQUFZLEVBQUVDLE9BQU8sRUFBRUMsT0FBTyxFQUFFQyxLQUFLLEVBQUVDLFFBQVEsRUFBRyxDQUFFO1FBQ2hELElBQUksQ0FBQ0gsT0FBTyxHQUFHQTtRQUNmLElBQUksQ0FBQ0MsT0FBTyxHQUFHQTtRQUNmLElBQUksQ0FBQ0MsS0FBSyxHQUFHQTtRQUNiLElBQUksQ0FBQ0MsUUFBUSxHQUFHQTtRQUNoQixJQUFJLElBQUksQ0FBQ0gsT0FBTyxLQUFLLEdBQ2pCLE1BQU0sSUFBSUksTUFBTSxDQUFDLGlDQUFpQyxFQUFFLElBQUksQ0FBQ0osT0FBTyxDQUFDLENBQUM7UUFDdEUsSUFBSSxJQUFJLENBQUNHLFFBQVEsS0FBS0UsV0FDbEIsTUFBTSxJQUFJRCxNQUFNO1FBQ3BCLE1BQU1FLFNBQVMsSUFBSSxDQUFDSCxRQUFRLENBQUNJLEtBQUssQ0FBQyxLQUFLQyxHQUFHLENBQUNYLHVDQUFVO1FBQ3RELElBQUksQ0FBQ2EsWUFBWSxHQUFHLElBQUlDO1FBQ3hCLElBQUksQ0FBQ0MsaUJBQWlCLEdBQUcsSUFBSUQ7UUFDN0IsTUFBTUUsZUFBZTtZQUNqQkMsTUFBTTtZQUNOQyxRQUFRO1lBQ1JDLGFBQWE7WUFDYkMsV0FBVztRQUNmO1FBQ0EsS0FBSyxNQUFNLENBQUNDLElBQUlDLEtBQUssSUFBSWIsT0FBT2MsT0FBTyxHQUFJO1lBQ3ZDLElBQUlELEtBQUtFLE1BQU0sR0FBRyxHQUNkO1lBQ0osTUFBTUMsWUFBWUgsS0FBS0UsTUFBTSxHQUFHLElBQUlGLElBQUksQ0FBQyxFQUFFLEdBQUdkO1lBQzlDLE1BQU0sR0FBR2tCLGFBQWFDLFdBQVdDLFlBQVksR0FBR047WUFDaEROLGFBQWFHLFdBQVcsSUFBSU87WUFDNUJWLGFBQWFDLElBQUksSUFBSVU7WUFDckJYLGFBQWFFLE1BQU0sSUFBSVU7WUFDdkIsSUFBSSxPQUFPSCxjQUFjLGFBQWE7Z0JBQ2xDVCxhQUFhSSxTQUFTLElBQUlLO1lBQzlCO1lBQ0EsTUFBTUksbUJBQW1CLENBQUMsRUFBRWIsYUFBYUcsV0FBVyxDQUFDLENBQUMsRUFBRUgsYUFBYUMsSUFBSSxDQUFDLENBQUM7WUFDM0UsSUFBSWEsc0JBQXNCLElBQUksQ0FBQ2YsaUJBQWlCLENBQUNnQixHQUFHLENBQUNGO1lBQ3JELElBQUlDLHdCQUF3QnRCLFdBQVc7Z0JBQ25Dc0Isc0JBQXNCLEVBQUU7Z0JBQ3hCLElBQUksQ0FBQ2YsaUJBQWlCLENBQUNpQixHQUFHLENBQUNILGtCQUFrQkM7WUFDakQ7WUFDQSxNQUFNRyxXQUFXO2dCQUNiWjtnQkFDQUgsUUFBUUYsYUFBYUUsTUFBTTtZQUMvQjtZQUNBLE1BQU1nQixhQUFhO2dCQUNmakIsTUFBTUQsYUFBYUMsSUFBSTtnQkFDdkJDLFFBQVFGLGFBQWFFLE1BQU07Z0JBQzNCQyxhQUFhSCxhQUFhRyxXQUFXO1lBQ3pDO1lBQ0EsSUFBSSxPQUFPTSxjQUFjLGFBQWE7Z0JBQ2xDUSxTQUFTYixTQUFTLEdBQUdKLGFBQWFJLFNBQVM7Z0JBQzNDYyxXQUFXZCxTQUFTLEdBQUdKLGFBQWFJLFNBQVM7WUFDakQ7WUFDQVUsb0JBQW9CSyxJQUFJLENBQUNGO1lBQ3pCLElBQUksQ0FBQ3BCLFlBQVksQ0FBQ21CLEdBQUcsQ0FBQ1gsSUFBSWE7UUFDOUI7SUFDSjtJQUNBRSxTQUFTO1FBQ0wsT0FBT0MsTUFBTUMsSUFBSSxDQUFDLElBQUksQ0FBQ3pCLFlBQVksQ0FBQzBCLElBQUk7SUFDNUM7SUFDQUMsaUJBQWlCbkIsRUFBRSxFQUFFO1FBQ2pCLE9BQU8sSUFBSSxDQUFDUixZQUFZLENBQUNrQixHQUFHLENBQUNWO0lBQ2pDO0lBQ0FvQixtQkFBbUJ0QixXQUFXLEVBQUVGLElBQUksRUFBRTtRQUNsQyxNQUFNeUIsTUFBTSxJQUFJLENBQUMzQixpQkFBaUIsQ0FBQ2dCLEdBQUcsQ0FBQyxDQUFDLEVBQUVaLFlBQVksQ0FBQyxFQUFFRixLQUFLLENBQUM7UUFDL0QsSUFBSXlCLFFBQVFsQyxXQUNSLE9BQU8sRUFBRTtRQUNiLE9BQU9rQztJQUNYO0FBQ0osRUFDQSxxQ0FBcUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hbGdvcmFuZC1jcm93ZGZ1bmRpbmctZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9sb2dpYy9zb3VyY2VtYXAuanM/ZGZiYSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyB2bHEgZnJvbSAndmxxJztcbi8qKlxuICogQ29udGFpbnMgYSBtYXBwaW5nIGZyb20gVEVBTCBwcm9ncmFtIFBDIHRvIHNvdXJjZSBmaWxlIGxvY2F0aW9uLlxuICovXG5leHBvcnQgY2xhc3MgUHJvZ3JhbVNvdXJjZU1hcCB7XG4gICAgY29uc3RydWN0b3IoeyB2ZXJzaW9uLCBzb3VyY2VzLCBuYW1lcywgbWFwcGluZ3MsIH0pIHtcbiAgICAgICAgdGhpcy52ZXJzaW9uID0gdmVyc2lvbjtcbiAgICAgICAgdGhpcy5zb3VyY2VzID0gc291cmNlcztcbiAgICAgICAgdGhpcy5uYW1lcyA9IG5hbWVzO1xuICAgICAgICB0aGlzLm1hcHBpbmdzID0gbWFwcGluZ3M7XG4gICAgICAgIGlmICh0aGlzLnZlcnNpb24gIT09IDMpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYE9ubHkgdmVyc2lvbiAzIGlzIHN1cHBvcnRlZCwgZ290ICR7dGhpcy52ZXJzaW9ufWApO1xuICAgICAgICBpZiAodGhpcy5tYXBwaW5ncyA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdtYXBwaW5nIHVuZGVmaW5lZCwgY2Fubm90IGJ1aWxkIHNvdXJjZSBtYXAgd2l0aG91dCBgbWFwcGluZ2AnKTtcbiAgICAgICAgY29uc3QgcGNMaXN0ID0gdGhpcy5tYXBwaW5ncy5zcGxpdCgnOycpLm1hcCh2bHEuZGVjb2RlKTtcbiAgICAgICAgdGhpcy5wY1RvTG9jYXRpb24gPSBuZXcgTWFwKCk7XG4gICAgICAgIHRoaXMuc291cmNlQW5kTGluZVRvUGMgPSBuZXcgTWFwKCk7XG4gICAgICAgIGNvbnN0IGxhc3RMb2NhdGlvbiA9IHtcbiAgICAgICAgICAgIGxpbmU6IDAsXG4gICAgICAgICAgICBjb2x1bW46IDAsXG4gICAgICAgICAgICBzb3VyY2VJbmRleDogMCxcbiAgICAgICAgICAgIG5hbWVJbmRleDogMCxcbiAgICAgICAgfTtcbiAgICAgICAgZm9yIChjb25zdCBbcGMsIGRhdGFdIG9mIHBjTGlzdC5lbnRyaWVzKCkpIHtcbiAgICAgICAgICAgIGlmIChkYXRhLmxlbmd0aCA8IDQpXG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICBjb25zdCBuYW1lRGVsdGEgPSBkYXRhLmxlbmd0aCA+IDQgPyBkYXRhWzRdIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgY29uc3QgWywgc291cmNlRGVsdGEsIGxpbmVEZWx0YSwgY29sdW1uRGVsdGFdID0gZGF0YTtcbiAgICAgICAgICAgIGxhc3RMb2NhdGlvbi5zb3VyY2VJbmRleCArPSBzb3VyY2VEZWx0YTtcbiAgICAgICAgICAgIGxhc3RMb2NhdGlvbi5saW5lICs9IGxpbmVEZWx0YTtcbiAgICAgICAgICAgIGxhc3RMb2NhdGlvbi5jb2x1bW4gKz0gY29sdW1uRGVsdGE7XG4gICAgICAgICAgICBpZiAodHlwZW9mIG5hbWVEZWx0YSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICBsYXN0TG9jYXRpb24ubmFtZUluZGV4ICs9IG5hbWVEZWx0YTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHNvdXJjZUFuZExpbmVLZXkgPSBgJHtsYXN0TG9jYXRpb24uc291cmNlSW5kZXh9OiR7bGFzdExvY2F0aW9uLmxpbmV9YDtcbiAgICAgICAgICAgIGxldCBwY3NGb3JTb3VyY2VBbmRMaW5lID0gdGhpcy5zb3VyY2VBbmRMaW5lVG9QYy5nZXQoc291cmNlQW5kTGluZUtleSk7XG4gICAgICAgICAgICBpZiAocGNzRm9yU291cmNlQW5kTGluZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgcGNzRm9yU291cmNlQW5kTGluZSA9IFtdO1xuICAgICAgICAgICAgICAgIHRoaXMuc291cmNlQW5kTGluZVRvUGMuc2V0KHNvdXJjZUFuZExpbmVLZXksIHBjc0ZvclNvdXJjZUFuZExpbmUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgcGNJbkxpbmUgPSB7XG4gICAgICAgICAgICAgICAgcGMsXG4gICAgICAgICAgICAgICAgY29sdW1uOiBsYXN0TG9jYXRpb24uY29sdW1uLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IHBjTG9jYXRpb24gPSB7XG4gICAgICAgICAgICAgICAgbGluZTogbGFzdExvY2F0aW9uLmxpbmUsXG4gICAgICAgICAgICAgICAgY29sdW1uOiBsYXN0TG9jYXRpb24uY29sdW1uLFxuICAgICAgICAgICAgICAgIHNvdXJjZUluZGV4OiBsYXN0TG9jYXRpb24uc291cmNlSW5kZXgsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBuYW1lRGVsdGEgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgcGNJbkxpbmUubmFtZUluZGV4ID0gbGFzdExvY2F0aW9uLm5hbWVJbmRleDtcbiAgICAgICAgICAgICAgICBwY0xvY2F0aW9uLm5hbWVJbmRleCA9IGxhc3RMb2NhdGlvbi5uYW1lSW5kZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwY3NGb3JTb3VyY2VBbmRMaW5lLnB1c2gocGNJbkxpbmUpO1xuICAgICAgICAgICAgdGhpcy5wY1RvTG9jYXRpb24uc2V0KHBjLCBwY0xvY2F0aW9uKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXRQY3MoKSB7XG4gICAgICAgIHJldHVybiBBcnJheS5mcm9tKHRoaXMucGNUb0xvY2F0aW9uLmtleXMoKSk7XG4gICAgfVxuICAgIGdldExvY2F0aW9uRm9yUGMocGMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGNUb0xvY2F0aW9uLmdldChwYyk7XG4gICAgfVxuICAgIGdldFBjc09uU291cmNlTGluZShzb3VyY2VJbmRleCwgbGluZSkge1xuICAgICAgICBjb25zdCBwY3MgPSB0aGlzLnNvdXJjZUFuZExpbmVUb1BjLmdldChgJHtzb3VyY2VJbmRleH06JHtsaW5lfWApO1xuICAgICAgICBpZiAocGNzID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIHJldHVybiBwY3M7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c291cmNlbWFwLmpzLm1hcCJdLCJuYW1lcyI6WyJ2bHEiLCJQcm9ncmFtU291cmNlTWFwIiwiY29uc3RydWN0b3IiLCJ2ZXJzaW9uIiwic291cmNlcyIsIm5hbWVzIiwibWFwcGluZ3MiLCJFcnJvciIsInVuZGVmaW5lZCIsInBjTGlzdCIsInNwbGl0IiwibWFwIiwiZGVjb2RlIiwicGNUb0xvY2F0aW9uIiwiTWFwIiwic291cmNlQW5kTGluZVRvUGMiLCJsYXN0TG9jYXRpb24iLCJsaW5lIiwiY29sdW1uIiwic291cmNlSW5kZXgiLCJuYW1lSW5kZXgiLCJwYyIsImRhdGEiLCJlbnRyaWVzIiwibGVuZ3RoIiwibmFtZURlbHRhIiwic291cmNlRGVsdGEiLCJsaW5lRGVsdGEiLCJjb2x1bW5EZWx0YSIsInNvdXJjZUFuZExpbmVLZXkiLCJwY3NGb3JTb3VyY2VBbmRMaW5lIiwiZ2V0Iiwic2V0IiwicGNJbkxpbmUiLCJwY0xvY2F0aW9uIiwicHVzaCIsImdldFBjcyIsIkFycmF5IiwiZnJvbSIsImtleXMiLCJnZXRMb2NhdGlvbkZvclBjIiwiZ2V0UGNzT25Tb3VyY2VMaW5lIiwicGNzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/logic/sourcemap.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/logicsig.js":
/*!***************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/logicsig.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LogicSig: () => (/* binding */ LogicSig),\n/* harmony export */   LogicSigAccount: () => (/* binding */ LogicSigAccount),\n/* harmony export */   logicSigFromByte: () => (/* binding */ logicSigFromByte),\n/* harmony export */   sanityCheckProgram: () => (/* binding */ sanityCheckProgram),\n/* harmony export */   tealSign: () => (/* binding */ tealSign),\n/* harmony export */   tealSignFromProgram: () => (/* binding */ tealSignFromProgram),\n/* harmony export */   verifyTealSign: () => (/* binding */ verifyTealSign)\n/* harmony export */ });\n/* harmony import */ var _nacl_naclWrappers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./nacl/naclWrappers.js */ \"(ssr)/./node_modules/algosdk/dist/esm/nacl/naclWrappers.js\");\n/* harmony import */ var _encoding_address_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./encoding/address.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/address.js\");\n/* harmony import */ var _encoding_encoding_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./encoding/encoding.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/encoding.js\");\n/* harmony import */ var _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./encoding/schema/index.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/schema/index.js\");\n/* harmony import */ var _multisig_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./multisig.js */ \"(ssr)/./node_modules/algosdk/dist/esm/multisig.js\");\n/* harmony import */ var _utils_utils_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils/utils.js */ \"(ssr)/./node_modules/algosdk/dist/esm/utils/utils.js\");\n/* harmony import */ var _types_transactions_encoded_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./types/transactions/encoded.js */ \"(ssr)/./node_modules/algosdk/dist/esm/types/transactions/encoded.js\");\n\n\n\n\n\n\n\n// base64regex is the regex to test for base64 strings\nconst base64regex = /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/;\n/** sanityCheckProgram performs heuristic program validation:\n * check if passed in bytes are Algorand address or is B64 encoded, rather than Teal bytes\n *\n * @param program - Program bytes to check\n */ function sanityCheckProgram(program) {\n    if (!program || program.length === 0) throw new Error(\"empty program\");\n    const lineBreakOrd = \"\\n\".charCodeAt(0);\n    const blankSpaceOrd = \" \".charCodeAt(0);\n    const tildeOrd = \"~\".charCodeAt(0);\n    const isPrintable = (x)=>blankSpaceOrd <= x && x <= tildeOrd;\n    const isAsciiPrintable = program.every((x)=>x === lineBreakOrd || isPrintable(x));\n    if (isAsciiPrintable) {\n        const programStr = new TextDecoder().decode(program);\n        if ((0,_encoding_address_js__WEBPACK_IMPORTED_MODULE_1__.isValidAddress)(programStr)) throw new Error(\"requesting program bytes, get Algorand address\");\n        if (base64regex.test(programStr)) throw new Error(\"program should not be b64 encoded\");\n        throw new Error(\"program bytes are all ASCII printable characters, not looking like Teal byte code\");\n    }\n}\nconst programTag = new TextEncoder().encode(\"Program\");\nconst multisigProgramTag = new TextEncoder().encode(\"MsigProgram\");\n/**\n LogicSig implementation\n\n LogicSig cannot sign transactions in all cases.  Instead, use LogicSigAccount as a safe, general purpose signing mechanism.  Since LogicSig does not track the provided signature's public key, LogicSig cannot sign transactions when delegated to a non-multisig account _and_ the sender is not the delegating account.\n */ class LogicSig {\n    constructor(program, programArgs){\n        if (programArgs && (!Array.isArray(programArgs) || !programArgs.every((arg)=>arg.constructor === Uint8Array))) {\n            throw new TypeError(\"Invalid arguments\");\n        }\n        let args = [];\n        if (programArgs != null) args = programArgs.map((arg)=>new Uint8Array(arg));\n        sanityCheckProgram(program);\n        this.logic = program;\n        this.args = args;\n        this.sig = undefined;\n        this.msig = undefined;\n        this.lmsig = undefined;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return LogicSig.encodingSchema;\n    }\n    toEncodingData() {\n        const data = new Map([\n            [\n                \"l\",\n                this.logic\n            ],\n            [\n                \"arg\",\n                this.args\n            ],\n            [\n                \"sig\",\n                this.sig\n            ]\n        ]);\n        if (this.msig) {\n            data.set(\"msig\", (0,_types_transactions_encoded_js__WEBPACK_IMPORTED_MODULE_6__.encodedMultiSigToEncodingData)(this.msig));\n        }\n        if (this.lmsig) {\n            data.set(\"lmsig\", (0,_types_transactions_encoded_js__WEBPACK_IMPORTED_MODULE_6__.encodedMultiSigToEncodingData)(this.lmsig));\n        }\n        return data;\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded logic sig: ${data}`);\n        }\n        const lsig = new LogicSig(data.get(\"l\"), data.get(\"arg\"));\n        lsig.sig = data.get(\"sig\");\n        if (data.get(\"msig\")) {\n            lsig.msig = (0,_types_transactions_encoded_js__WEBPACK_IMPORTED_MODULE_6__.encodedMultiSigFromEncodingData)(data.get(\"msig\"));\n        }\n        if (data.get(\"lmsig\")) {\n            lsig.lmsig = (0,_types_transactions_encoded_js__WEBPACK_IMPORTED_MODULE_6__.encodedMultiSigFromEncodingData)(data.get(\"lmsig\"));\n        }\n        return lsig;\n    }\n    /**\n     * Performs signature verification\n     * @param publicKey - Verification key (derived from sender address or escrow address)\n     */ verify(publicKey) {\n        const sigCount = [\n            this.sig,\n            this.msig,\n            this.lmsig\n        ].filter(Boolean).length;\n        if (sigCount > 1) {\n            return false;\n        }\n        try {\n            sanityCheckProgram(this.logic);\n        } catch (e) {\n            return false;\n        }\n        const toBeSigned = _utils_utils_js__WEBPACK_IMPORTED_MODULE_5__.concatArrays(programTag, this.logic);\n        if (!this.sig && !this.msig && !this.lmsig) {\n            const hash = _nacl_naclWrappers_js__WEBPACK_IMPORTED_MODULE_0__.genericHash(toBeSigned);\n            return _utils_utils_js__WEBPACK_IMPORTED_MODULE_5__.arrayEqual(hash, publicKey);\n        }\n        if (this.sig) {\n            return _nacl_naclWrappers_js__WEBPACK_IMPORTED_MODULE_0__.verify(toBeSigned, this.sig, publicKey);\n        }\n        if (this.lmsig) {\n            const multisigAddr = (0,_multisig_js__WEBPACK_IMPORTED_MODULE_4__.addressFromMultisigPreImg)({\n                version: this.lmsig.v,\n                threshold: this.lmsig.thr,\n                pks: this.lmsig.subsig.map((subsig)=>subsig.pk)\n            });\n            const lmsigProgram = _utils_utils_js__WEBPACK_IMPORTED_MODULE_5__.concatArrays(multisigProgramTag, multisigAddr.publicKey, this.logic);\n            return (0,_multisig_js__WEBPACK_IMPORTED_MODULE_4__.verifyMultisig)(lmsigProgram, this.lmsig, publicKey);\n        }\n        if (this.msig) {\n            return (0,_multisig_js__WEBPACK_IMPORTED_MODULE_4__.verifyMultisig)(toBeSigned, this.msig, publicKey);\n        }\n        return false;\n    }\n    /**\n     * Compute hash of the logic sig program (that is the same as escrow account address) as string address\n     * @returns String representation of the address\n     */ address() {\n        const toBeSigned = _utils_utils_js__WEBPACK_IMPORTED_MODULE_5__.concatArrays(programTag, this.logic);\n        const hash = _nacl_naclWrappers_js__WEBPACK_IMPORTED_MODULE_0__.genericHash(toBeSigned);\n        return new _encoding_address_js__WEBPACK_IMPORTED_MODULE_1__.Address(Uint8Array.from(hash));\n    }\n    /**\n     * Creates signature (if no msig provided) or multi signature otherwise\n     * @param secretKey - Secret key to sign with\n     * @param msig - Multisig account as \\{version, threshold, addrs\\}\n     */ sign(secretKey, msig) {\n        if (msig == null) {\n            this.sig = this.signProgram(secretKey);\n        } else {\n            const subsigs = (0,_multisig_js__WEBPACK_IMPORTED_MODULE_4__.pksFromAddresses)(msig.addrs).map((pk)=>({\n                    pk\n                }));\n            this.lmsig = {\n                v: msig.version,\n                thr: msig.threshold,\n                subsig: subsigs\n            };\n            const [sig, index] = this.singleSignMultisig(secretKey, this.lmsig);\n            this.lmsig.subsig[index].s = sig;\n        }\n    }\n    /**\n     * Appends a signature to multi signature\n     * @param secretKey - Secret key to sign with\n     */ appendToMultisig(secretKey) {\n        if (this.lmsig === undefined) {\n            throw new Error(\"no multisig present\");\n        }\n        const [sig, index] = this.singleSignMultisig(secretKey, this.lmsig);\n        this.lmsig.subsig[index].s = sig;\n    }\n    signProgram(secretKey) {\n        const toBeSigned = _utils_utils_js__WEBPACK_IMPORTED_MODULE_5__.concatArrays(programTag, this.logic);\n        const sig = _nacl_naclWrappers_js__WEBPACK_IMPORTED_MODULE_0__.sign(toBeSigned, secretKey);\n        return sig;\n    }\n    signProgramMultisig(secretKey, msig) {\n        const multisigAddr = (0,_multisig_js__WEBPACK_IMPORTED_MODULE_4__.addressFromMultisigPreImg)({\n            version: msig.v,\n            threshold: msig.thr,\n            pks: msig.subsig.map((subsig)=>subsig.pk)\n        });\n        const toBeSigned = _utils_utils_js__WEBPACK_IMPORTED_MODULE_5__.concatArrays(multisigProgramTag, multisigAddr.publicKey, this.logic);\n        const sig = _nacl_naclWrappers_js__WEBPACK_IMPORTED_MODULE_0__.sign(toBeSigned, secretKey);\n        return sig;\n    }\n    singleSignMultisig(secretKey, msig) {\n        let index = -1;\n        const myPk = _nacl_naclWrappers_js__WEBPACK_IMPORTED_MODULE_0__.keyPairFromSecretKey(secretKey).publicKey;\n        for(let i = 0; i < msig.subsig.length; i++){\n            const { pk } = msig.subsig[i];\n            if (_utils_utils_js__WEBPACK_IMPORTED_MODULE_5__.arrayEqual(pk, myPk)) {\n                index = i;\n                break;\n            }\n        }\n        if (index === -1) {\n            throw new Error(\"invalid secret key\");\n        }\n        const sig = this.signProgramMultisig(secretKey, msig);\n        return [\n            sig,\n            index\n        ];\n    }\n    toByte() {\n        return _encoding_encoding_js__WEBPACK_IMPORTED_MODULE_2__.encodeMsgpack(this);\n    }\n    static fromByte(encoded) {\n        return _encoding_encoding_js__WEBPACK_IMPORTED_MODULE_2__.decodeMsgpack(encoded, LogicSig);\n    }\n}\nLogicSig.encodingSchema = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_3__.NamedMapSchema((0,_encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_3__.allOmitEmpty)([\n    {\n        key: \"l\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_3__.ByteArraySchema()\n    },\n    {\n        key: \"arg\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_3__.ArraySchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_3__.ByteArraySchema())\n    },\n    {\n        key: \"sig\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_3__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_3__.FixedLengthByteArraySchema(64))\n    },\n    {\n        key: \"msig\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_3__.OptionalSchema(_types_transactions_encoded_js__WEBPACK_IMPORTED_MODULE_6__.ENCODED_MULTISIG_SCHEMA)\n    },\n    {\n        key: \"lmsig\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_3__.OptionalSchema(_types_transactions_encoded_js__WEBPACK_IMPORTED_MODULE_6__.ENCODED_MULTISIG_SCHEMA)\n    }\n]));\n/**\n * Represents an account that can sign with a LogicSig program.\n */ class LogicSigAccount {\n    /**\n     * Create a new LogicSigAccount. By default this will create an escrow\n     * LogicSig account. Call `sign` or `signMultisig` on the newly created\n     * LogicSigAccount to make it a delegated account.\n     *\n     * @param program - The compiled TEAL program which contains the logic for\n     *   this LogicSig.\n     * @param args - An optional array of arguments for the program.\n     */ constructor(program, args){\n        this.lsig = new LogicSig(program, args);\n        this.sigkey = undefined;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return LogicSigAccount.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"lsig\",\n                this.lsig.toEncodingData()\n            ],\n            [\n                \"sigkey\",\n                this.sigkey\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded logic sig account: ${data}`);\n        }\n        const value = data;\n        const lsig = LogicSig.fromEncodingData(value.get(\"lsig\"));\n        const lsigAccount = new LogicSigAccount(lsig.logic, lsig.args);\n        lsigAccount.lsig = lsig; // Restore other properties of the lsig\n        lsigAccount.sigkey = value.get(\"sigkey\");\n        return lsigAccount;\n    }\n    /**\n     * Encode this object into msgpack.\n     */ toByte() {\n        return _encoding_encoding_js__WEBPACK_IMPORTED_MODULE_2__.encodeMsgpack(this);\n    }\n    /**\n     * Decode a msgpack object into a LogicSigAccount.\n     * @param encoded - The encoded LogicSigAccount.\n     */ static fromByte(encoded) {\n        return _encoding_encoding_js__WEBPACK_IMPORTED_MODULE_2__.decodeMsgpack(encoded, LogicSigAccount);\n    }\n    /**\n     * Check if this LogicSigAccount has been delegated to another account with a\n     * signature.\n     *\n     * Note this function only checks for the presence of a delegation signature.\n     * To verify the delegation signature, use `verify`.\n     */ isDelegated() {\n        return !!(this.lsig.sig || this.lsig.msig || this.lsig.lmsig);\n    }\n    /**\n     * Verifies this LogicSig's program and signatures.\n     * @returns true if and only if the LogicSig program and signatures are valid.\n     */ verify() {\n        const addr = this.address();\n        return this.lsig.verify(addr.publicKey);\n    }\n    /**\n     * Get the address of this LogicSigAccount.\n     *\n     * If the LogicSig is delegated to another account, this will return the\n     * address of that account.\n     *\n     * If the LogicSig is not delegated to another account, this will return an\n     *  escrow address that is the hash of the LogicSig's program code.\n     */ address() {\n        const sigCount = [\n            this.lsig.sig,\n            this.lsig.msig,\n            this.lsig.lmsig\n        ].filter(Boolean).length;\n        if (sigCount > 1) {\n            throw new Error(\"LogicSig has too many signatures. At most one of sig, msig, or lmsig may be present\");\n        }\n        if (this.lsig.sig) {\n            if (!this.sigkey) {\n                throw new Error(\"Signing key for delegated account is missing\");\n            }\n            return new _encoding_address_js__WEBPACK_IMPORTED_MODULE_1__.Address(this.sigkey);\n        }\n        const msig = this.lsig.lmsig || this.lsig.msig;\n        if (msig) {\n            const msigMetadata = {\n                version: msig.v,\n                threshold: msig.thr,\n                pks: msig.subsig.map((subsig)=>subsig.pk)\n            };\n            return (0,_multisig_js__WEBPACK_IMPORTED_MODULE_4__.addressFromMultisigPreImg)(msigMetadata);\n        }\n        return this.lsig.address();\n    }\n    /**\n     * Turns this LogicSigAccount into a delegated LogicSig. This type of LogicSig\n     * has the authority to sign transactions on behalf of another account, called\n     * the delegating account. Use this function if the delegating account is a\n     * multisig account.\n     *\n     * @param msig - The multisig delegating account\n     * @param secretKey - The secret key of one of the members of the delegating\n     *   multisig account. Use `appendToMultisig` to add additional signatures\n     *   from other members.\n     */ signMultisig(msig, secretKey) {\n        this.lsig.sign(secretKey, msig);\n    }\n    /**\n     * Adds an additional signature from a member of the delegating multisig\n     * account.\n     *\n     * @param secretKey - The secret key of one of the members of the delegating\n     *   multisig account.\n     */ appendToMultisig(secretKey) {\n        this.lsig.appendToMultisig(secretKey);\n    }\n    /**\n     * Turns this LogicSigAccount into a delegated LogicSig. This type of LogicSig\n     * has the authority to sign transactions on behalf of another account, called\n     * the delegating account. If the delegating account is a multisig account,\n     * use `signMultisig` instead.\n     *\n     * @param secretKey - The secret key of the delegating account.\n     */ sign(secretKey) {\n        this.lsig.sign(secretKey);\n        this.sigkey = _nacl_naclWrappers_js__WEBPACK_IMPORTED_MODULE_0__.keyPairFromSecretKey(secretKey).publicKey;\n    }\n}\nLogicSigAccount.encodingSchema = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_3__.NamedMapSchema((0,_encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_3__.allOmitEmpty)([\n    {\n        key: \"lsig\",\n        valueSchema: LogicSig.encodingSchema\n    },\n    {\n        key: \"sigkey\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_3__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_3__.FixedLengthByteArraySchema(32))\n    }\n]));\n/**\n * logicSigFromByte accepts encoded logic sig bytes and attempts to call logicsig.fromByte on it,\n * returning the result\n */ function logicSigFromByte(encoded) {\n    return _encoding_encoding_js__WEBPACK_IMPORTED_MODULE_2__.decodeMsgpack(encoded, LogicSig);\n}\nconst SIGN_PROGRAM_DATA_PREFIX = new TextEncoder().encode(\"ProgData\");\n/**\n * tealSign creates a signature compatible with ed25519verify opcode from program hash\n * @param sk - Uint8Array with secret key\n * @param data - Uint8Array with data to sign\n * @param programHash - string representation of teal program hash (= contract address for LogicSigs)\n */ function tealSign(sk, data, programHash) {\n    const programAddr = typeof programHash === \"string\" ? _encoding_address_js__WEBPACK_IMPORTED_MODULE_1__.Address.fromString(programHash) : programHash;\n    const parts = _utils_utils_js__WEBPACK_IMPORTED_MODULE_5__.concatArrays(programAddr.publicKey, data);\n    const toBeSigned = _utils_utils_js__WEBPACK_IMPORTED_MODULE_5__.concatArrays(SIGN_PROGRAM_DATA_PREFIX, parts);\n    return _nacl_naclWrappers_js__WEBPACK_IMPORTED_MODULE_0__.sign(toBeSigned, sk);\n}\n/**\n * verifyTealSign verifies a signature as would the ed25519verify opcode\n * @param data - Uint8Array with original signed data\n * @param programHash - string representation of teal program hash (= contract address for LogicSigs)\n * @param sig - uint8array with the signature to verify (produced by tealSign/tealSignFromProgram)\n * @param pk - uint8array with public key to verify against\n */ function verifyTealSign(data, programHash, sig, pk) {\n    const programAddr = typeof programHash === \"string\" ? _encoding_address_js__WEBPACK_IMPORTED_MODULE_1__.Address.fromString(programHash) : programHash;\n    const parts = _utils_utils_js__WEBPACK_IMPORTED_MODULE_5__.concatArrays(programAddr.publicKey, data);\n    const toBeSigned = _utils_utils_js__WEBPACK_IMPORTED_MODULE_5__.concatArrays(SIGN_PROGRAM_DATA_PREFIX, parts);\n    return _nacl_naclWrappers_js__WEBPACK_IMPORTED_MODULE_0__.verify(toBeSigned, sig, pk);\n}\n/**\n * tealSignFromProgram creates a signature compatible with ed25519verify opcode from raw program bytes\n * @param sk - uint8array with secret key\n * @param data - Uint8Array with data to sign\n * @param program - Uint8Array with teal program\n */ function tealSignFromProgram(sk, data, program) {\n    const lsig = new LogicSig(program);\n    const contractAddress = lsig.address();\n    return tealSign(sk, data, contractAddress);\n} //# sourceMappingURL=logicsig.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/logicsig.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/main.js":
/*!***********************************************!*\
  !*** ./node_modules/algosdk/dist/esm/main.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ABIAddressType: () => (/* reexport safe */ _abi_index_js__WEBPACK_IMPORTED_MODULE_34__.ABIAddressType),\n/* harmony export */   ABIArrayDynamicType: () => (/* reexport safe */ _abi_index_js__WEBPACK_IMPORTED_MODULE_34__.ABIArrayDynamicType),\n/* harmony export */   ABIArrayStaticType: () => (/* reexport safe */ _abi_index_js__WEBPACK_IMPORTED_MODULE_34__.ABIArrayStaticType),\n/* harmony export */   ABIBoolType: () => (/* reexport safe */ _abi_index_js__WEBPACK_IMPORTED_MODULE_34__.ABIBoolType),\n/* harmony export */   ABIByteType: () => (/* reexport safe */ _abi_index_js__WEBPACK_IMPORTED_MODULE_34__.ABIByteType),\n/* harmony export */   ABIContract: () => (/* reexport safe */ _abi_index_js__WEBPACK_IMPORTED_MODULE_34__.ABIContract),\n/* harmony export */   ABIInterface: () => (/* reexport safe */ _abi_index_js__WEBPACK_IMPORTED_MODULE_34__.ABIInterface),\n/* harmony export */   ABIMethod: () => (/* reexport safe */ _abi_index_js__WEBPACK_IMPORTED_MODULE_34__.ABIMethod),\n/* harmony export */   ABIReferenceType: () => (/* reexport safe */ _abi_index_js__WEBPACK_IMPORTED_MODULE_34__.ABIReferenceType),\n/* harmony export */   ABIStringType: () => (/* reexport safe */ _abi_index_js__WEBPACK_IMPORTED_MODULE_34__.ABIStringType),\n/* harmony export */   ABITransactionType: () => (/* reexport safe */ _abi_index_js__WEBPACK_IMPORTED_MODULE_34__.ABITransactionType),\n/* harmony export */   ABITupleType: () => (/* reexport safe */ _abi_index_js__WEBPACK_IMPORTED_MODULE_34__.ABITupleType),\n/* harmony export */   ABIType: () => (/* reexport safe */ _abi_index_js__WEBPACK_IMPORTED_MODULE_34__.ABIType),\n/* harmony export */   ABIUfixedType: () => (/* reexport safe */ _abi_index_js__WEBPACK_IMPORTED_MODULE_34__.ABIUfixedType),\n/* harmony export */   ABIUintType: () => (/* reexport safe */ _abi_index_js__WEBPACK_IMPORTED_MODULE_34__.ABIUintType),\n/* harmony export */   ADDR_BYTE_SIZE: () => (/* reexport safe */ _abi_index_js__WEBPACK_IMPORTED_MODULE_34__.ADDR_BYTE_SIZE),\n/* harmony export */   ALGORAND_ZERO_ADDRESS_STRING: () => (/* reexport safe */ _encoding_address_js__WEBPACK_IMPORTED_MODULE_1__.ALGORAND_ZERO_ADDRESS_STRING),\n/* harmony export */   AccountBaseData: () => (/* reexport safe */ _types_statedelta_js__WEBPACK_IMPORTED_MODULE_15__.AccountBaseData),\n/* harmony export */   AccountData: () => (/* reexport safe */ _types_statedelta_js__WEBPACK_IMPORTED_MODULE_15__.AccountData),\n/* harmony export */   AccountDeltas: () => (/* reexport safe */ _types_statedelta_js__WEBPACK_IMPORTED_MODULE_15__.AccountDeltas),\n/* harmony export */   AccountTotals: () => (/* reexport safe */ _types_statedelta_js__WEBPACK_IMPORTED_MODULE_15__.AccountTotals),\n/* harmony export */   Address: () => (/* reexport safe */ _encoding_address_js__WEBPACK_IMPORTED_MODULE_1__.Address),\n/* harmony export */   AlgoCount: () => (/* reexport safe */ _types_statedelta_js__WEBPACK_IMPORTED_MODULE_15__.AlgoCount),\n/* harmony export */   Algodv2: () => (/* reexport safe */ _client_v2_algod_algod_js__WEBPACK_IMPORTED_MODULE_4__.AlgodClient),\n/* harmony export */   AppLocalState: () => (/* reexport safe */ _types_statedelta_js__WEBPACK_IMPORTED_MODULE_15__.AppLocalState),\n/* harmony export */   AppLocalStateDelta: () => (/* reexport safe */ _types_statedelta_js__WEBPACK_IMPORTED_MODULE_15__.AppLocalStateDelta),\n/* harmony export */   AppParams: () => (/* reexport safe */ _types_statedelta_js__WEBPACK_IMPORTED_MODULE_15__.AppParams),\n/* harmony export */   AppParamsDelta: () => (/* reexport safe */ _types_statedelta_js__WEBPACK_IMPORTED_MODULE_15__.AppParamsDelta),\n/* harmony export */   AppResourceRecord: () => (/* reexport safe */ _types_statedelta_js__WEBPACK_IMPORTED_MODULE_15__.AppResourceRecord),\n/* harmony export */   ApplyData: () => (/* reexport safe */ _types_block_js__WEBPACK_IMPORTED_MODULE_14__.ApplyData),\n/* harmony export */   AssetHolding: () => (/* reexport safe */ _types_statedelta_js__WEBPACK_IMPORTED_MODULE_15__.AssetHolding),\n/* harmony export */   AssetHoldingDelta: () => (/* reexport safe */ _types_statedelta_js__WEBPACK_IMPORTED_MODULE_15__.AssetHoldingDelta),\n/* harmony export */   AssetParams: () => (/* reexport safe */ _types_statedelta_js__WEBPACK_IMPORTED_MODULE_15__.AssetParams),\n/* harmony export */   AssetParamsDelta: () => (/* reexport safe */ _types_statedelta_js__WEBPACK_IMPORTED_MODULE_15__.AssetParamsDelta),\n/* harmony export */   AssetResourceRecord: () => (/* reexport safe */ _types_statedelta_js__WEBPACK_IMPORTED_MODULE_15__.AssetResourceRecord),\n/* harmony export */   AtomicTransactionComposer: () => (/* reexport safe */ _composer_js__WEBPACK_IMPORTED_MODULE_32__.AtomicTransactionComposer),\n/* harmony export */   AtomicTransactionComposerStatus: () => (/* reexport safe */ _composer_js__WEBPACK_IMPORTED_MODULE_32__.AtomicTransactionComposerStatus),\n/* harmony export */   BalanceRecord: () => (/* reexport safe */ _types_statedelta_js__WEBPACK_IMPORTED_MODULE_15__.BalanceRecord),\n/* harmony export */   Block: () => (/* reexport safe */ _types_block_js__WEBPACK_IMPORTED_MODULE_14__.Block),\n/* harmony export */   BlockHeader: () => (/* reexport safe */ _types_block_js__WEBPACK_IMPORTED_MODULE_14__.BlockHeader),\n/* harmony export */   ENCODED_MULTISIG_SCHEMA: () => (/* reexport safe */ _types_transactions_index_js__WEBPACK_IMPORTED_MODULE_33__.ENCODED_MULTISIG_SCHEMA),\n/* harmony export */   ENCODED_SUBSIG_SCHEMA: () => (/* reexport safe */ _types_transactions_index_js__WEBPACK_IMPORTED_MODULE_33__.ENCODED_SUBSIG_SCHEMA),\n/* harmony export */   ERROR_INVALID_MICROALGOS: () => (/* binding */ ERROR_INVALID_MICROALGOS),\n/* harmony export */   ERROR_MULTISIG_BAD_SENDER: () => (/* binding */ ERROR_MULTISIG_BAD_SENDER),\n/* harmony export */   EvalDelta: () => (/* reexport safe */ _types_block_js__WEBPACK_IMPORTED_MODULE_14__.EvalDelta),\n/* harmony export */   FalconSignatureStruct: () => (/* reexport safe */ _stateproof_js__WEBPACK_IMPORTED_MODULE_16__.FalconSignatureStruct),\n/* harmony export */   FalconVerifier: () => (/* reexport safe */ _stateproof_js__WEBPACK_IMPORTED_MODULE_16__.FalconVerifier),\n/* harmony export */   HashFactory: () => (/* reexport safe */ _stateproof_js__WEBPACK_IMPORTED_MODULE_16__.HashFactory),\n/* harmony export */   INVALID_MICROALGOS_ERROR_MSG: () => (/* reexport safe */ _convert_js__WEBPACK_IMPORTED_MODULE_2__.INVALID_MICROALGOS_ERROR_MSG),\n/* harmony export */   IncludedTransactions: () => (/* reexport safe */ _types_statedelta_js__WEBPACK_IMPORTED_MODULE_15__.IncludedTransactions),\n/* harmony export */   Indexer: () => (/* reexport safe */ _client_v2_indexer_indexer_js__WEBPACK_IMPORTED_MODULE_7__.IndexerClient),\n/* harmony export */   IntDecoding: () => (/* reexport safe */ _types_intDecoding_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"]),\n/* harmony export */   Kmd: () => (/* reexport safe */ _client_kmd_js__WEBPACK_IMPORTED_MODULE_5__.KmdClient),\n/* harmony export */   KvValueDelta: () => (/* reexport safe */ _types_statedelta_js__WEBPACK_IMPORTED_MODULE_15__.KvValueDelta),\n/* harmony export */   LENGTH_ENCODE_BYTE_SIZE: () => (/* reexport safe */ _abi_index_js__WEBPACK_IMPORTED_MODULE_34__.LENGTH_ENCODE_BYTE_SIZE),\n/* harmony export */   LedgerStateDelta: () => (/* reexport safe */ _types_statedelta_js__WEBPACK_IMPORTED_MODULE_15__.LedgerStateDelta),\n/* harmony export */   LogicSig: () => (/* reexport safe */ _logicsig_js__WEBPACK_IMPORTED_MODULE_24__.LogicSig),\n/* harmony export */   LogicSigAccount: () => (/* reexport safe */ _logicsig_js__WEBPACK_IMPORTED_MODULE_24__.LogicSigAccount),\n/* harmony export */   MAX_LEN: () => (/* reexport safe */ _abi_index_js__WEBPACK_IMPORTED_MODULE_34__.MAX_LEN),\n/* harmony export */   MULTISIG_BAD_SENDER_ERROR_MSG: () => (/* binding */ MULTISIG_BAD_SENDER_ERROR_MSG),\n/* harmony export */   MerkleArrayProof: () => (/* reexport safe */ _stateproof_js__WEBPACK_IMPORTED_MODULE_16__.MerkleArrayProof),\n/* harmony export */   MerkleSignatureVerifier: () => (/* reexport safe */ _stateproof_js__WEBPACK_IMPORTED_MODULE_16__.MerkleSignatureVerifier),\n/* harmony export */   ModifiedCreatable: () => (/* reexport safe */ _types_statedelta_js__WEBPACK_IMPORTED_MODULE_15__.ModifiedCreatable),\n/* harmony export */   OnApplicationComplete: () => (/* reexport safe */ _types_transactions_index_js__WEBPACK_IMPORTED_MODULE_33__.OnApplicationComplete),\n/* harmony export */   Participant: () => (/* reexport safe */ _stateproof_js__WEBPACK_IMPORTED_MODULE_16__.Participant),\n/* harmony export */   ParticipationUpdates: () => (/* reexport safe */ _types_block_js__WEBPACK_IMPORTED_MODULE_14__.ParticipationUpdates),\n/* harmony export */   ProgramSourceMap: () => (/* reexport safe */ _logic_sourcemap_js__WEBPACK_IMPORTED_MODULE_27__.ProgramSourceMap),\n/* harmony export */   Reveal: () => (/* reexport safe */ _stateproof_js__WEBPACK_IMPORTED_MODULE_16__.Reveal),\n/* harmony export */   RewardState: () => (/* reexport safe */ _types_block_js__WEBPACK_IMPORTED_MODULE_14__.RewardState),\n/* harmony export */   SINGLE_BOOL_SIZE: () => (/* reexport safe */ _abi_index_js__WEBPACK_IMPORTED_MODULE_34__.SINGLE_BOOL_SIZE),\n/* harmony export */   SINGLE_BYTE_SIZE: () => (/* reexport safe */ _abi_index_js__WEBPACK_IMPORTED_MODULE_34__.SINGLE_BYTE_SIZE),\n/* harmony export */   SignedTransaction: () => (/* reexport safe */ _signedTransaction_js__WEBPACK_IMPORTED_MODULE_22__.SignedTransaction),\n/* harmony export */   SignedTxnInBlock: () => (/* reexport safe */ _types_block_js__WEBPACK_IMPORTED_MODULE_14__.SignedTxnInBlock),\n/* harmony export */   SignedTxnWithAD: () => (/* reexport safe */ _types_block_js__WEBPACK_IMPORTED_MODULE_14__.SignedTxnWithAD),\n/* harmony export */   SigslotCommit: () => (/* reexport safe */ _stateproof_js__WEBPACK_IMPORTED_MODULE_16__.SigslotCommit),\n/* harmony export */   StateProof: () => (/* reexport safe */ _stateproof_js__WEBPACK_IMPORTED_MODULE_16__.StateProof),\n/* harmony export */   StateProofMessage: () => (/* reexport safe */ _stateproof_js__WEBPACK_IMPORTED_MODULE_16__.StateProofMessage),\n/* harmony export */   StateProofTrackingData: () => (/* reexport safe */ _types_block_js__WEBPACK_IMPORTED_MODULE_14__.StateProofTrackingData),\n/* harmony export */   StateSchema: () => (/* reexport safe */ _types_statedelta_js__WEBPACK_IMPORTED_MODULE_15__.StateSchema),\n/* harmony export */   TealValue: () => (/* reexport safe */ _types_statedelta_js__WEBPACK_IMPORTED_MODULE_15__.TealValue),\n/* harmony export */   Transaction: () => (/* reexport safe */ _transaction_js__WEBPACK_IMPORTED_MODULE_30__.Transaction),\n/* harmony export */   TransactionType: () => (/* reexport safe */ _types_transactions_index_js__WEBPACK_IMPORTED_MODULE_33__.TransactionType),\n/* harmony export */   TxnCommitments: () => (/* reexport safe */ _types_block_js__WEBPACK_IMPORTED_MODULE_14__.TxnCommitments),\n/* harmony export */   UntypedValue: () => (/* reexport safe */ _client_v2_untypedmodel_js__WEBPACK_IMPORTED_MODULE_17__.UntypedValue),\n/* harmony export */   UpgradeState: () => (/* reexport safe */ _types_block_js__WEBPACK_IMPORTED_MODULE_14__.UpgradeState),\n/* harmony export */   UpgradeVote: () => (/* reexport safe */ _types_block_js__WEBPACK_IMPORTED_MODULE_14__.UpgradeVote),\n/* harmony export */   ValueDelta: () => (/* reexport safe */ _types_block_js__WEBPACK_IMPORTED_MODULE_14__.ValueDelta),\n/* harmony export */   VotingData: () => (/* reexport safe */ _types_statedelta_js__WEBPACK_IMPORTED_MODULE_15__.VotingData),\n/* harmony export */   abiCheckTransactionType: () => (/* reexport safe */ _abi_index_js__WEBPACK_IMPORTED_MODULE_34__.abiCheckTransactionType),\n/* harmony export */   abiTypeIsReference: () => (/* reexport safe */ _abi_index_js__WEBPACK_IMPORTED_MODULE_34__.abiTypeIsReference),\n/* harmony export */   abiTypeIsTransaction: () => (/* reexport safe */ _abi_index_js__WEBPACK_IMPORTED_MODULE_34__.abiTypeIsTransaction),\n/* harmony export */   algosToMicroalgos: () => (/* reexport safe */ _convert_js__WEBPACK_IMPORTED_MODULE_2__.algosToMicroalgos),\n/* harmony export */   appendSignMultisigTransaction: () => (/* reexport safe */ _multisigSigning_js__WEBPACK_IMPORTED_MODULE_26__.appendSignMultisigTransaction),\n/* harmony export */   appendSignRawMultisigSignature: () => (/* reexport safe */ _multisigSigning_js__WEBPACK_IMPORTED_MODULE_26__.appendSignRawMultisigSignature),\n/* harmony export */   assignGroupID: () => (/* reexport safe */ _group_js__WEBPACK_IMPORTED_MODULE_21__.assignGroupID),\n/* harmony export */   base64ToBytes: () => (/* reexport safe */ _encoding_binarydata_js__WEBPACK_IMPORTED_MODULE_11__.base64ToBytes),\n/* harmony export */   bigIntToBytes: () => (/* reexport safe */ _encoding_bigint_js__WEBPACK_IMPORTED_MODULE_10__.bigIntToBytes),\n/* harmony export */   bytesToBase64: () => (/* reexport safe */ _encoding_binarydata_js__WEBPACK_IMPORTED_MODULE_11__.bytesToBase64),\n/* harmony export */   bytesToBigInt: () => (/* reexport safe */ _encoding_bigint_js__WEBPACK_IMPORTED_MODULE_10__.bytesToBigInt),\n/* harmony export */   bytesToHex: () => (/* reexport safe */ _encoding_binarydata_js__WEBPACK_IMPORTED_MODULE_11__.bytesToHex),\n/* harmony export */   bytesToString: () => (/* reexport safe */ _encoding_binarydata_js__WEBPACK_IMPORTED_MODULE_11__.bytesToString),\n/* harmony export */   coerceToBytes: () => (/* reexport safe */ _encoding_binarydata_js__WEBPACK_IMPORTED_MODULE_11__.coerceToBytes),\n/* harmony export */   computeGroupID: () => (/* reexport safe */ _group_js__WEBPACK_IMPORTED_MODULE_21__.computeGroupID),\n/* harmony export */   createDryrun: () => (/* reexport safe */ _dryrun_js__WEBPACK_IMPORTED_MODULE_28__.createDryrun),\n/* harmony export */   createMultisigTransaction: () => (/* reexport safe */ _multisigSigning_js__WEBPACK_IMPORTED_MODULE_26__.createMultisigTransaction),\n/* harmony export */   decodeAddress: () => (/* reexport safe */ _encoding_address_js__WEBPACK_IMPORTED_MODULE_1__.decodeAddress),\n/* harmony export */   decodeJSON: () => (/* reexport safe */ _encoding_encoding_js__WEBPACK_IMPORTED_MODULE_9__.decodeJSON),\n/* harmony export */   decodeMsgpack: () => (/* reexport safe */ _encoding_encoding_js__WEBPACK_IMPORTED_MODULE_9__.decodeMsgpack),\n/* harmony export */   decodeObj: () => (/* reexport safe */ _encoding_encoding_js__WEBPACK_IMPORTED_MODULE_9__.decodeObj),\n/* harmony export */   decodeSignedTransaction: () => (/* reexport safe */ _signedTransaction_js__WEBPACK_IMPORTED_MODULE_22__.decodeSignedTransaction),\n/* harmony export */   decodeUint64: () => (/* reexport safe */ _encoding_uint64_js__WEBPACK_IMPORTED_MODULE_12__.decodeUint64),\n/* harmony export */   decodeUnsignedTransaction: () => (/* reexport safe */ _transaction_js__WEBPACK_IMPORTED_MODULE_30__.decodeUnsignedTransaction),\n/* harmony export */   dryrunTxnResultAppTrace: () => (/* reexport safe */ _dryrun_js__WEBPACK_IMPORTED_MODULE_28__.dryrunTxnResultAppTrace),\n/* harmony export */   dryrunTxnResultLogicSigTrace: () => (/* reexport safe */ _dryrun_js__WEBPACK_IMPORTED_MODULE_28__.dryrunTxnResultLogicSigTrace),\n/* harmony export */   encodeAddress: () => (/* reexport safe */ _encoding_address_js__WEBPACK_IMPORTED_MODULE_1__.encodeAddress),\n/* harmony export */   encodeJSON: () => (/* reexport safe */ _encoding_encoding_js__WEBPACK_IMPORTED_MODULE_9__.encodeJSON),\n/* harmony export */   encodeMsgpack: () => (/* reexport safe */ _encoding_encoding_js__WEBPACK_IMPORTED_MODULE_9__.encodeMsgpack),\n/* harmony export */   encodeObj: () => (/* reexport safe */ _encoding_encoding_js__WEBPACK_IMPORTED_MODULE_9__.encodeObj),\n/* harmony export */   encodeUint64: () => (/* reexport safe */ _encoding_uint64_js__WEBPACK_IMPORTED_MODULE_12__.encodeUint64),\n/* harmony export */   encodeUnsignedSimulateTransaction: () => (/* reexport safe */ _signedTransaction_js__WEBPACK_IMPORTED_MODULE_22__.encodeUnsignedSimulateTransaction),\n/* harmony export */   encodeUnsignedTransaction: () => (/* reexport safe */ _transaction_js__WEBPACK_IMPORTED_MODULE_30__.encodeUnsignedTransaction),\n/* harmony export */   encodedMultiSigFromEncodingData: () => (/* reexport safe */ _types_transactions_index_js__WEBPACK_IMPORTED_MODULE_33__.encodedMultiSigFromEncodingData),\n/* harmony export */   encodedMultiSigToEncodingData: () => (/* reexport safe */ _types_transactions_index_js__WEBPACK_IMPORTED_MODULE_33__.encodedMultiSigToEncodingData),\n/* harmony export */   encodedSubsigFromEncodingData: () => (/* reexport safe */ _types_transactions_index_js__WEBPACK_IMPORTED_MODULE_33__.encodedSubsigFromEncodingData),\n/* harmony export */   encodedSubsigToEncodingData: () => (/* reexport safe */ _types_transactions_index_js__WEBPACK_IMPORTED_MODULE_33__.encodedSubsigToEncodingData),\n/* harmony export */   generateAccount: () => (/* reexport safe */ _account_js__WEBPACK_IMPORTED_MODULE_13__[\"default\"]),\n/* harmony export */   getApplicationAddress: () => (/* reexport safe */ _encoding_address_js__WEBPACK_IMPORTED_MODULE_1__.getApplicationAddress),\n/* harmony export */   getMethodByName: () => (/* reexport safe */ _abi_index_js__WEBPACK_IMPORTED_MODULE_34__.getMethodByName),\n/* harmony export */   hexToBytes: () => (/* reexport safe */ _encoding_binarydata_js__WEBPACK_IMPORTED_MODULE_11__.hexToBytes),\n/* harmony export */   indexerModels: () => (/* reexport module object */ _client_v2_indexer_models_types_js__WEBPACK_IMPORTED_MODULE_19__),\n/* harmony export */   isOnApplicationComplete: () => (/* reexport safe */ _types_transactions_index_js__WEBPACK_IMPORTED_MODULE_33__.isOnApplicationComplete),\n/* harmony export */   isTransactionType: () => (/* reexport safe */ _types_transactions_index_js__WEBPACK_IMPORTED_MODULE_33__.isTransactionType),\n/* harmony export */   isTransactionWithSigner: () => (/* reexport safe */ _signer_js__WEBPACK_IMPORTED_MODULE_31__.isTransactionWithSigner),\n/* harmony export */   isValidAddress: () => (/* reexport safe */ _encoding_address_js__WEBPACK_IMPORTED_MODULE_1__.isValidAddress),\n/* harmony export */   logicSigFromByte: () => (/* reexport safe */ _logicsig_js__WEBPACK_IMPORTED_MODULE_24__.logicSigFromByte),\n/* harmony export */   makeApplicationCallTxnFromObject: () => (/* reexport safe */ _makeTxn_js__WEBPACK_IMPORTED_MODULE_29__.makeApplicationCallTxnFromObject),\n/* harmony export */   makeApplicationClearStateTxnFromObject: () => (/* reexport safe */ _makeTxn_js__WEBPACK_IMPORTED_MODULE_29__.makeApplicationClearStateTxnFromObject),\n/* harmony export */   makeApplicationCloseOutTxnFromObject: () => (/* reexport safe */ _makeTxn_js__WEBPACK_IMPORTED_MODULE_29__.makeApplicationCloseOutTxnFromObject),\n/* harmony export */   makeApplicationCreateTxnFromObject: () => (/* reexport safe */ _makeTxn_js__WEBPACK_IMPORTED_MODULE_29__.makeApplicationCreateTxnFromObject),\n/* harmony export */   makeApplicationDeleteTxnFromObject: () => (/* reexport safe */ _makeTxn_js__WEBPACK_IMPORTED_MODULE_29__.makeApplicationDeleteTxnFromObject),\n/* harmony export */   makeApplicationNoOpTxnFromObject: () => (/* reexport safe */ _makeTxn_js__WEBPACK_IMPORTED_MODULE_29__.makeApplicationNoOpTxnFromObject),\n/* harmony export */   makeApplicationOptInTxnFromObject: () => (/* reexport safe */ _makeTxn_js__WEBPACK_IMPORTED_MODULE_29__.makeApplicationOptInTxnFromObject),\n/* harmony export */   makeApplicationUpdateTxnFromObject: () => (/* reexport safe */ _makeTxn_js__WEBPACK_IMPORTED_MODULE_29__.makeApplicationUpdateTxnFromObject),\n/* harmony export */   makeAssetConfigTxnWithSuggestedParamsFromObject: () => (/* reexport safe */ _makeTxn_js__WEBPACK_IMPORTED_MODULE_29__.makeAssetConfigTxnWithSuggestedParamsFromObject),\n/* harmony export */   makeAssetCreateTxnWithSuggestedParamsFromObject: () => (/* reexport safe */ _makeTxn_js__WEBPACK_IMPORTED_MODULE_29__.makeAssetCreateTxnWithSuggestedParamsFromObject),\n/* harmony export */   makeAssetDestroyTxnWithSuggestedParamsFromObject: () => (/* reexport safe */ _makeTxn_js__WEBPACK_IMPORTED_MODULE_29__.makeAssetDestroyTxnWithSuggestedParamsFromObject),\n/* harmony export */   makeAssetFreezeTxnWithSuggestedParamsFromObject: () => (/* reexport safe */ _makeTxn_js__WEBPACK_IMPORTED_MODULE_29__.makeAssetFreezeTxnWithSuggestedParamsFromObject),\n/* harmony export */   makeAssetTransferTxnWithSuggestedParamsFromObject: () => (/* reexport safe */ _makeTxn_js__WEBPACK_IMPORTED_MODULE_29__.makeAssetTransferTxnWithSuggestedParamsFromObject),\n/* harmony export */   makeBaseAssetConfigTxn: () => (/* reexport safe */ _makeTxn_js__WEBPACK_IMPORTED_MODULE_29__.makeBaseAssetConfigTxn),\n/* harmony export */   makeBasicAccountTransactionSigner: () => (/* reexport safe */ _signer_js__WEBPACK_IMPORTED_MODULE_31__.makeBasicAccountTransactionSigner),\n/* harmony export */   makeEmptyTransactionSigner: () => (/* reexport safe */ _signer_js__WEBPACK_IMPORTED_MODULE_31__.makeEmptyTransactionSigner),\n/* harmony export */   makeKeyRegistrationTxnWithSuggestedParamsFromObject: () => (/* reexport safe */ _makeTxn_js__WEBPACK_IMPORTED_MODULE_29__.makeKeyRegistrationTxnWithSuggestedParamsFromObject),\n/* harmony export */   makeLogicSigAccountTransactionSigner: () => (/* reexport safe */ _signer_js__WEBPACK_IMPORTED_MODULE_31__.makeLogicSigAccountTransactionSigner),\n/* harmony export */   makeMultiSigAccountTransactionSigner: () => (/* reexport safe */ _signer_js__WEBPACK_IMPORTED_MODULE_31__.makeMultiSigAccountTransactionSigner),\n/* harmony export */   makePaymentTxnWithSuggestedParamsFromObject: () => (/* reexport safe */ _makeTxn_js__WEBPACK_IMPORTED_MODULE_29__.makePaymentTxnWithSuggestedParamsFromObject),\n/* harmony export */   masterDerivationKeyToMnemonic: () => (/* reexport safe */ _mnemonic_mnemonic_js__WEBPACK_IMPORTED_MODULE_20__.masterDerivationKeyToMnemonic),\n/* harmony export */   mergeMultisigTransactions: () => (/* reexport safe */ _multisigSigning_js__WEBPACK_IMPORTED_MODULE_26__.mergeMultisigTransactions),\n/* harmony export */   microalgosToAlgos: () => (/* reexport safe */ _convert_js__WEBPACK_IMPORTED_MODULE_2__.microalgosToAlgos),\n/* harmony export */   mnemonicFromSeed: () => (/* reexport safe */ _mnemonic_mnemonic_js__WEBPACK_IMPORTED_MODULE_20__.mnemonicFromSeed),\n/* harmony export */   mnemonicToMasterDerivationKey: () => (/* reexport safe */ _mnemonic_mnemonic_js__WEBPACK_IMPORTED_MODULE_20__.mnemonicToMasterDerivationKey),\n/* harmony export */   mnemonicToSecretKey: () => (/* reexport safe */ _mnemonic_mnemonic_js__WEBPACK_IMPORTED_MODULE_20__.mnemonicToSecretKey),\n/* harmony export */   modelsv2: () => (/* reexport module object */ _client_v2_algod_models_types_js__WEBPACK_IMPORTED_MODULE_18__),\n/* harmony export */   msgpackRawDecode: () => (/* reexport safe */ _encoding_encoding_js__WEBPACK_IMPORTED_MODULE_9__.msgpackRawDecode),\n/* harmony export */   msgpackRawDecodeAsMap: () => (/* reexport safe */ _encoding_encoding_js__WEBPACK_IMPORTED_MODULE_9__.msgpackRawDecodeAsMap),\n/* harmony export */   msgpackRawEncode: () => (/* reexport safe */ _encoding_encoding_js__WEBPACK_IMPORTED_MODULE_9__.msgpackRawEncode),\n/* harmony export */   multisigAddress: () => (/* reexport safe */ _multisig_js__WEBPACK_IMPORTED_MODULE_25__.multisigAddress),\n/* harmony export */   parseJSON: () => (/* reexport safe */ _utils_utils_js__WEBPACK_IMPORTED_MODULE_3__.parseJSON),\n/* harmony export */   secretKeyToMnemonic: () => (/* reexport safe */ _mnemonic_mnemonic_js__WEBPACK_IMPORTED_MODULE_20__.secretKeyToMnemonic),\n/* harmony export */   seedFromMnemonic: () => (/* reexport safe */ _mnemonic_mnemonic_js__WEBPACK_IMPORTED_MODULE_20__.seedFromMnemonic),\n/* harmony export */   signBytes: () => (/* binding */ signBytes),\n/* harmony export */   signLogicSigTransaction: () => (/* reexport safe */ _signing_js__WEBPACK_IMPORTED_MODULE_23__.signLogicSigTransaction),\n/* harmony export */   signLogicSigTransactionObject: () => (/* reexport safe */ _signing_js__WEBPACK_IMPORTED_MODULE_23__.signLogicSigTransactionObject),\n/* harmony export */   signMultisigTransaction: () => (/* reexport safe */ _multisigSigning_js__WEBPACK_IMPORTED_MODULE_26__.signMultisigTransaction),\n/* harmony export */   signTransaction: () => (/* binding */ signTransaction),\n/* harmony export */   stringifyJSON: () => (/* reexport safe */ _utils_utils_js__WEBPACK_IMPORTED_MODULE_3__.stringifyJSON),\n/* harmony export */   tealSign: () => (/* reexport safe */ _logicsig_js__WEBPACK_IMPORTED_MODULE_24__.tealSign),\n/* harmony export */   tealSignFromProgram: () => (/* reexport safe */ _logicsig_js__WEBPACK_IMPORTED_MODULE_24__.tealSignFromProgram),\n/* harmony export */   verifyBytes: () => (/* binding */ verifyBytes),\n/* harmony export */   verifyMultisig: () => (/* reexport safe */ _multisig_js__WEBPACK_IMPORTED_MODULE_25__.verifyMultisig),\n/* harmony export */   verifyTealSign: () => (/* reexport safe */ _logicsig_js__WEBPACK_IMPORTED_MODULE_24__.verifyTealSign),\n/* harmony export */   waitForConfirmation: () => (/* reexport safe */ _wait_js__WEBPACK_IMPORTED_MODULE_8__.waitForConfirmation)\n/* harmony export */ });\n/* harmony import */ var _nacl_naclWrappers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./nacl/naclWrappers.js */ \"(ssr)/./node_modules/algosdk/dist/esm/nacl/naclWrappers.js\");\n/* harmony import */ var _encoding_address_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./encoding/address.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/address.js\");\n/* harmony import */ var _convert_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./convert.js */ \"(ssr)/./node_modules/algosdk/dist/esm/convert.js\");\n/* harmony import */ var _utils_utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/utils.js */ \"(ssr)/./node_modules/algosdk/dist/esm/utils/utils.js\");\n/* harmony import */ var _client_v2_algod_algod_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./client/v2/algod/algod.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/algod.js\");\n/* harmony import */ var _client_kmd_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./client/kmd.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/kmd.js\");\n/* harmony import */ var _types_intDecoding_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./types/intDecoding.js */ \"(ssr)/./node_modules/algosdk/dist/esm/types/intDecoding.js\");\n/* harmony import */ var _client_v2_indexer_indexer_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./client/v2/indexer/indexer.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/indexer/indexer.js\");\n/* harmony import */ var _wait_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./wait.js */ \"(ssr)/./node_modules/algosdk/dist/esm/wait.js\");\n/* harmony import */ var _encoding_encoding_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./encoding/encoding.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/encoding.js\");\n/* harmony import */ var _encoding_bigint_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./encoding/bigint.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/bigint.js\");\n/* harmony import */ var _encoding_binarydata_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./encoding/binarydata.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/binarydata.js\");\n/* harmony import */ var _encoding_uint64_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./encoding/uint64.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/uint64.js\");\n/* harmony import */ var _account_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./account.js */ \"(ssr)/./node_modules/algosdk/dist/esm/account.js\");\n/* harmony import */ var _types_block_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./types/block.js */ \"(ssr)/./node_modules/algosdk/dist/esm/types/block.js\");\n/* harmony import */ var _types_statedelta_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./types/statedelta.js */ \"(ssr)/./node_modules/algosdk/dist/esm/types/statedelta.js\");\n/* harmony import */ var _stateproof_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./stateproof.js */ \"(ssr)/./node_modules/algosdk/dist/esm/stateproof.js\");\n/* harmony import */ var _client_v2_untypedmodel_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./client/v2/untypedmodel.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/untypedmodel.js\");\n/* harmony import */ var _client_v2_algod_models_types_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./client/v2/algod/models/types.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/algod/models/types.js\");\n/* harmony import */ var _client_v2_indexer_models_types_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./client/v2/indexer/models/types.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/indexer/models/types.js\");\n/* harmony import */ var _mnemonic_mnemonic_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./mnemonic/mnemonic.js */ \"(ssr)/./node_modules/algosdk/dist/esm/mnemonic/mnemonic.js\");\n/* harmony import */ var _group_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./group.js */ \"(ssr)/./node_modules/algosdk/dist/esm/group.js\");\n/* harmony import */ var _signedTransaction_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./signedTransaction.js */ \"(ssr)/./node_modules/algosdk/dist/esm/signedTransaction.js\");\n/* harmony import */ var _signing_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./signing.js */ \"(ssr)/./node_modules/algosdk/dist/esm/signing.js\");\n/* harmony import */ var _logicsig_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./logicsig.js */ \"(ssr)/./node_modules/algosdk/dist/esm/logicsig.js\");\n/* harmony import */ var _multisig_js__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./multisig.js */ \"(ssr)/./node_modules/algosdk/dist/esm/multisig.js\");\n/* harmony import */ var _multisigSigning_js__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./multisigSigning.js */ \"(ssr)/./node_modules/algosdk/dist/esm/multisigSigning.js\");\n/* harmony import */ var _logic_sourcemap_js__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./logic/sourcemap.js */ \"(ssr)/./node_modules/algosdk/dist/esm/logic/sourcemap.js\");\n/* harmony import */ var _dryrun_js__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./dryrun.js */ \"(ssr)/./node_modules/algosdk/dist/esm/dryrun.js\");\n/* harmony import */ var _makeTxn_js__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./makeTxn.js */ \"(ssr)/./node_modules/algosdk/dist/esm/makeTxn.js\");\n/* harmony import */ var _transaction_js__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./transaction.js */ \"(ssr)/./node_modules/algosdk/dist/esm/transaction.js\");\n/* harmony import */ var _signer_js__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./signer.js */ \"(ssr)/./node_modules/algosdk/dist/esm/signer.js\");\n/* harmony import */ var _composer_js__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./composer.js */ \"(ssr)/./node_modules/algosdk/dist/esm/composer.js\");\n/* harmony import */ var _types_transactions_index_js__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./types/transactions/index.js */ \"(ssr)/./node_modules/algosdk/dist/esm/types/transactions/index.js\");\n/* harmony import */ var _abi_index_js__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ./abi/index.js */ \"(ssr)/./node_modules/algosdk/dist/esm/abi/index.js\");\n\n\n\n\nconst SIGN_BYTES_PREFIX = Uint8Array.from([\n    77,\n    88\n]); // \"MX\"\n// Errors\nconst MULTISIG_BAD_SENDER_ERROR_MSG = \"The transaction sender address and multisig preimage do not match.\";\n/**\n * signTransaction takes an object with either payment or key registration fields and\n * a secret key and returns a signed blob.\n *\n * Payment transaction fields: from, to, amount, fee, firstValid, lastValid, genesisHash,\n * note(optional), GenesisID(optional), closeRemainderTo(optional)\n *\n * Key registration fields: fee, firstValid, lastValid, voteKey, selectionKey, voteFirst,\n * voteLast, voteKeyDilution, genesisHash, note(optional), GenesisID(optional)\n *\n * If flatFee is not set and the final calculated fee is lower than the protocol minimum fee, the fee will be increased to match the minimum.\n * @param txn - object with either payment or key registration fields\n * @param sk - Algorand Secret Key\n * @returns object contains the binary signed transaction and its txID\n */ function signTransaction(txn, sk) {\n    return {\n        txID: txn.txID(),\n        blob: txn.signTxn(sk)\n    };\n}\n/**\n * signBytes takes arbitrary bytes and a secret key, prepends the bytes with \"MX\" for domain separation, signs the bytes\n * with the private key, and returns the signature.\n * @param bytes - Uint8array\n * @param sk - Algorand secret key\n * @returns binary signature\n */ function signBytes(bytes, sk) {\n    const toBeSigned = _utils_utils_js__WEBPACK_IMPORTED_MODULE_3__.concatArrays(SIGN_BYTES_PREFIX, bytes);\n    const sig = _nacl_naclWrappers_js__WEBPACK_IMPORTED_MODULE_0__.sign(toBeSigned, sk);\n    return sig;\n}\n/**\n * verifyBytes takes array of bytes, an address, and a signature and verifies if the signature is correct for the public\n * key and the bytes (the bytes should have been signed with \"MX\" prepended for domain separation).\n * @param bytes - Uint8Array\n * @param signature - binary signature\n * @param addr - string address\n * @returns bool\n */ function verifyBytes(bytes, signature, addr) {\n    const toBeVerified = _utils_utils_js__WEBPACK_IMPORTED_MODULE_3__.concatArrays(SIGN_BYTES_PREFIX, bytes);\n    const addrObj = typeof addr === \"string\" ? _encoding_address_js__WEBPACK_IMPORTED_MODULE_1__.Address.fromString(addr) : addr;\n    return _nacl_naclWrappers_js__WEBPACK_IMPORTED_MODULE_0__.verify(toBeVerified, signature, addrObj.publicKey);\n}\nconst ERROR_MULTISIG_BAD_SENDER = new Error(MULTISIG_BAD_SENDER_ERROR_MSG);\nconst ERROR_INVALID_MICROALGOS = new Error(_convert_js__WEBPACK_IMPORTED_MODULE_2__.INVALID_MICROALGOS_ERROR_MSG);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n //# sourceMappingURL=main.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9tYWluLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUErQztBQUNDO0FBQ1I7QUFDRTtBQUMxQyxNQUFNSSxvQkFBb0JDLFdBQVdDLElBQUksQ0FBQztJQUFDO0lBQUk7Q0FBRyxHQUFHLE9BQU87QUFDNUQsU0FBUztBQUNGLE1BQU1DLGdDQUFnQyxxRUFBcUU7QUFDbEg7Ozs7Ozs7Ozs7Ozs7O0NBY0MsR0FDTSxTQUFTQyxnQkFBZ0JDLEdBQUcsRUFBRUMsRUFBRTtJQUNuQyxPQUFPO1FBQ0hDLE1BQU1GLElBQUlFLElBQUk7UUFDZEMsTUFBTUgsSUFBSUksT0FBTyxDQUFDSDtJQUN0QjtBQUNKO0FBQ0E7Ozs7OztDQU1DLEdBQ00sU0FBU0ksVUFBVUMsS0FBSyxFQUFFTCxFQUFFO0lBQy9CLE1BQU1NLGFBQWFiLHlEQUFrQixDQUFDQyxtQkFBbUJXO0lBQ3pELE1BQU1HLE1BQU1sQix1REFBUyxDQUFDZ0IsWUFBWU47SUFDbEMsT0FBT1E7QUFDWDtBQUNBOzs7Ozs7O0NBT0MsR0FDTSxTQUFTRSxZQUFZTCxLQUFLLEVBQUVNLFNBQVMsRUFBRUMsSUFBSTtJQUM5QyxNQUFNQyxlQUFlcEIseURBQWtCLENBQUNDLG1CQUFtQlc7SUFDM0QsTUFBTVMsVUFBVSxPQUFPRixTQUFTLFdBQVdyQix5REFBT0EsQ0FBQ3dCLFVBQVUsQ0FBQ0gsUUFBUUE7SUFDdEUsT0FBT3RCLHlEQUFXLENBQUN1QixjQUFjRixXQUFXRyxRQUFRRyxTQUFTO0FBQ2pFO0FBQ08sTUFBTUMsNEJBQTRCLElBQUlDLE1BQU10QiwrQkFBK0I7QUFDM0UsTUFBTXVCLDJCQUEyQixJQUFJRCxNQUFNM0IscUVBQW9DLEVBQUU7QUFDcEI7QUFDakI7QUFDYTtBQUNVO0FBQzFCO0FBQ2dJO0FBQzVCO0FBQ2hGO0FBQzJEO0FBQzdEO0FBQ047QUFDRjtBQUN6QjtBQUNLO0FBQ047QUFDMkI7QUFDSztBQUM5QjtBQUNxQztBQUMzQjtBQUN5STtBQUNsRjtBQUN4QztBQUM2RDtBQUNqQztBQUNxQztBQUMzRDtBQUNvSDtBQUM1SDtBQUM3QjtBQUNDO0FBQ0k7QUFDTDtBQUNFO0FBQ2dCO0FBQ2YsQ0FDL0IsZ0NBQWdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWxnb3JhbmQtY3Jvd2RmdW5kaW5nLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vbWFpbi5qcz85NDliIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIG5hY2wgZnJvbSAnLi9uYWNsL25hY2xXcmFwcGVycy5qcyc7XG5pbXBvcnQgeyBBZGRyZXNzIH0gZnJvbSAnLi9lbmNvZGluZy9hZGRyZXNzLmpzJztcbmltcG9ydCAqIGFzIGNvbnZlcnQgZnJvbSAnLi9jb252ZXJ0LmpzJztcbmltcG9ydCAqIGFzIHV0aWxzIGZyb20gJy4vdXRpbHMvdXRpbHMuanMnO1xuY29uc3QgU0lHTl9CWVRFU19QUkVGSVggPSBVaW50OEFycmF5LmZyb20oWzc3LCA4OF0pOyAvLyBcIk1YXCJcbi8vIEVycm9yc1xuZXhwb3J0IGNvbnN0IE1VTFRJU0lHX0JBRF9TRU5ERVJfRVJST1JfTVNHID0gJ1RoZSB0cmFuc2FjdGlvbiBzZW5kZXIgYWRkcmVzcyBhbmQgbXVsdGlzaWcgcHJlaW1hZ2UgZG8gbm90IG1hdGNoLic7XG4vKipcbiAqIHNpZ25UcmFuc2FjdGlvbiB0YWtlcyBhbiBvYmplY3Qgd2l0aCBlaXRoZXIgcGF5bWVudCBvciBrZXkgcmVnaXN0cmF0aW9uIGZpZWxkcyBhbmRcbiAqIGEgc2VjcmV0IGtleSBhbmQgcmV0dXJucyBhIHNpZ25lZCBibG9iLlxuICpcbiAqIFBheW1lbnQgdHJhbnNhY3Rpb24gZmllbGRzOiBmcm9tLCB0bywgYW1vdW50LCBmZWUsIGZpcnN0VmFsaWQsIGxhc3RWYWxpZCwgZ2VuZXNpc0hhc2gsXG4gKiBub3RlKG9wdGlvbmFsKSwgR2VuZXNpc0lEKG9wdGlvbmFsKSwgY2xvc2VSZW1haW5kZXJUbyhvcHRpb25hbClcbiAqXG4gKiBLZXkgcmVnaXN0cmF0aW9uIGZpZWxkczogZmVlLCBmaXJzdFZhbGlkLCBsYXN0VmFsaWQsIHZvdGVLZXksIHNlbGVjdGlvbktleSwgdm90ZUZpcnN0LFxuICogdm90ZUxhc3QsIHZvdGVLZXlEaWx1dGlvbiwgZ2VuZXNpc0hhc2gsIG5vdGUob3B0aW9uYWwpLCBHZW5lc2lzSUQob3B0aW9uYWwpXG4gKlxuICogSWYgZmxhdEZlZSBpcyBub3Qgc2V0IGFuZCB0aGUgZmluYWwgY2FsY3VsYXRlZCBmZWUgaXMgbG93ZXIgdGhhbiB0aGUgcHJvdG9jb2wgbWluaW11bSBmZWUsIHRoZSBmZWUgd2lsbCBiZSBpbmNyZWFzZWQgdG8gbWF0Y2ggdGhlIG1pbmltdW0uXG4gKiBAcGFyYW0gdHhuIC0gb2JqZWN0IHdpdGggZWl0aGVyIHBheW1lbnQgb3Iga2V5IHJlZ2lzdHJhdGlvbiBmaWVsZHNcbiAqIEBwYXJhbSBzayAtIEFsZ29yYW5kIFNlY3JldCBLZXlcbiAqIEByZXR1cm5zIG9iamVjdCBjb250YWlucyB0aGUgYmluYXJ5IHNpZ25lZCB0cmFuc2FjdGlvbiBhbmQgaXRzIHR4SURcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNpZ25UcmFuc2FjdGlvbih0eG4sIHNrKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHhJRDogdHhuLnR4SUQoKSxcbiAgICAgICAgYmxvYjogdHhuLnNpZ25UeG4oc2spLFxuICAgIH07XG59XG4vKipcbiAqIHNpZ25CeXRlcyB0YWtlcyBhcmJpdHJhcnkgYnl0ZXMgYW5kIGEgc2VjcmV0IGtleSwgcHJlcGVuZHMgdGhlIGJ5dGVzIHdpdGggXCJNWFwiIGZvciBkb21haW4gc2VwYXJhdGlvbiwgc2lnbnMgdGhlIGJ5dGVzXG4gKiB3aXRoIHRoZSBwcml2YXRlIGtleSwgYW5kIHJldHVybnMgdGhlIHNpZ25hdHVyZS5cbiAqIEBwYXJhbSBieXRlcyAtIFVpbnQ4YXJyYXlcbiAqIEBwYXJhbSBzayAtIEFsZ29yYW5kIHNlY3JldCBrZXlcbiAqIEByZXR1cm5zIGJpbmFyeSBzaWduYXR1cmVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNpZ25CeXRlcyhieXRlcywgc2spIHtcbiAgICBjb25zdCB0b0JlU2lnbmVkID0gdXRpbHMuY29uY2F0QXJyYXlzKFNJR05fQllURVNfUFJFRklYLCBieXRlcyk7XG4gICAgY29uc3Qgc2lnID0gbmFjbC5zaWduKHRvQmVTaWduZWQsIHNrKTtcbiAgICByZXR1cm4gc2lnO1xufVxuLyoqXG4gKiB2ZXJpZnlCeXRlcyB0YWtlcyBhcnJheSBvZiBieXRlcywgYW4gYWRkcmVzcywgYW5kIGEgc2lnbmF0dXJlIGFuZCB2ZXJpZmllcyBpZiB0aGUgc2lnbmF0dXJlIGlzIGNvcnJlY3QgZm9yIHRoZSBwdWJsaWNcbiAqIGtleSBhbmQgdGhlIGJ5dGVzICh0aGUgYnl0ZXMgc2hvdWxkIGhhdmUgYmVlbiBzaWduZWQgd2l0aCBcIk1YXCIgcHJlcGVuZGVkIGZvciBkb21haW4gc2VwYXJhdGlvbikuXG4gKiBAcGFyYW0gYnl0ZXMgLSBVaW50OEFycmF5XG4gKiBAcGFyYW0gc2lnbmF0dXJlIC0gYmluYXJ5IHNpZ25hdHVyZVxuICogQHBhcmFtIGFkZHIgLSBzdHJpbmcgYWRkcmVzc1xuICogQHJldHVybnMgYm9vbFxuICovXG5leHBvcnQgZnVuY3Rpb24gdmVyaWZ5Qnl0ZXMoYnl0ZXMsIHNpZ25hdHVyZSwgYWRkcikge1xuICAgIGNvbnN0IHRvQmVWZXJpZmllZCA9IHV0aWxzLmNvbmNhdEFycmF5cyhTSUdOX0JZVEVTX1BSRUZJWCwgYnl0ZXMpO1xuICAgIGNvbnN0IGFkZHJPYmogPSB0eXBlb2YgYWRkciA9PT0gJ3N0cmluZycgPyBBZGRyZXNzLmZyb21TdHJpbmcoYWRkcikgOiBhZGRyO1xuICAgIHJldHVybiBuYWNsLnZlcmlmeSh0b0JlVmVyaWZpZWQsIHNpZ25hdHVyZSwgYWRkck9iai5wdWJsaWNLZXkpO1xufVxuZXhwb3J0IGNvbnN0IEVSUk9SX01VTFRJU0lHX0JBRF9TRU5ERVIgPSBuZXcgRXJyb3IoTVVMVElTSUdfQkFEX1NFTkRFUl9FUlJPUl9NU0cpO1xuZXhwb3J0IGNvbnN0IEVSUk9SX0lOVkFMSURfTUlDUk9BTEdPUyA9IG5ldyBFcnJvcihjb252ZXJ0LklOVkFMSURfTUlDUk9BTEdPU19FUlJPUl9NU0cpO1xuZXhwb3J0IHsgQWxnb2RDbGllbnQgYXMgQWxnb2R2MiB9IGZyb20gJy4vY2xpZW50L3YyL2FsZ29kL2FsZ29kLmpzJztcbmV4cG9ydCB7IEttZENsaWVudCBhcyBLbWQgfSBmcm9tICcuL2NsaWVudC9rbWQuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBJbnREZWNvZGluZyB9IGZyb20gJy4vdHlwZXMvaW50RGVjb2RpbmcuanMnO1xuZXhwb3J0IHsgSW5kZXhlckNsaWVudCBhcyBJbmRleGVyIH0gZnJvbSAnLi9jbGllbnQvdjIvaW5kZXhlci9pbmRleGVyLmpzJztcbmV4cG9ydCB7IHdhaXRGb3JDb25maXJtYXRpb24gfSBmcm9tICcuL3dhaXQuanMnO1xuZXhwb3J0IHsgZW5jb2RlT2JqLCBkZWNvZGVPYmosIG1zZ3BhY2tSYXdFbmNvZGUsIG1zZ3BhY2tSYXdEZWNvZGUsIG1zZ3BhY2tSYXdEZWNvZGVBc01hcCwgZW5jb2RlTXNncGFjaywgZGVjb2RlTXNncGFjaywgZW5jb2RlSlNPTiwgZGVjb2RlSlNPTiwgfSBmcm9tICcuL2VuY29kaW5nL2VuY29kaW5nLmpzJztcbmV4cG9ydCB7IEFkZHJlc3MsIGlzVmFsaWRBZGRyZXNzLCBlbmNvZGVBZGRyZXNzLCBkZWNvZGVBZGRyZXNzLCBnZXRBcHBsaWNhdGlvbkFkZHJlc3MsIEFMR09SQU5EX1pFUk9fQUREUkVTU19TVFJJTkcsIH0gZnJvbSAnLi9lbmNvZGluZy9hZGRyZXNzLmpzJztcbmV4cG9ydCB7IGJ5dGVzVG9CaWdJbnQsIGJpZ0ludFRvQnl0ZXMgfSBmcm9tICcuL2VuY29kaW5nL2JpZ2ludC5qcyc7XG5leHBvcnQgeyBiYXNlNjRUb0J5dGVzLCBieXRlc1RvQmFzZTY0LCBieXRlc1RvU3RyaW5nLCBjb2VyY2VUb0J5dGVzLCBieXRlc1RvSGV4LCBoZXhUb0J5dGVzLCB9IGZyb20gJy4vZW5jb2RpbmcvYmluYXJ5ZGF0YS5qcyc7XG5leHBvcnQgeyBlbmNvZGVVaW50NjQsIGRlY29kZVVpbnQ2NCB9IGZyb20gJy4vZW5jb2RpbmcvdWludDY0LmpzJztcbmV4cG9ydCB7IHBhcnNlSlNPTiwgc3RyaW5naWZ5SlNPTiB9IGZyb20gJy4vdXRpbHMvdXRpbHMuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBnZW5lcmF0ZUFjY291bnQgfSBmcm9tICcuL2FjY291bnQuanMnO1xuZXhwb3J0ICogZnJvbSAnLi90eXBlcy9ibG9jay5qcyc7XG5leHBvcnQgKiBmcm9tICcuL3R5cGVzL3N0YXRlZGVsdGEuanMnO1xuZXhwb3J0ICogZnJvbSAnLi9zdGF0ZXByb29mLmpzJztcbmV4cG9ydCB7IFVudHlwZWRWYWx1ZSB9IGZyb20gJy4vY2xpZW50L3YyL3VudHlwZWRtb2RlbC5qcyc7XG5pbXBvcnQgKiBhcyBtb2RlbHN2Ml8xIGZyb20gJy4vY2xpZW50L3YyL2FsZ29kL21vZGVscy90eXBlcy5qcyc7XG5leHBvcnQgeyBtb2RlbHN2Ml8xIGFzIG1vZGVsc3YyIH07XG5pbXBvcnQgKiBhcyBpbmRleGVyTW9kZWxzXzEgZnJvbSAnLi9jbGllbnQvdjIvaW5kZXhlci9tb2RlbHMvdHlwZXMuanMnO1xuZXhwb3J0IHsgaW5kZXhlck1vZGVsc18xIGFzIGluZGV4ZXJNb2RlbHMgfTtcbmV4cG9ydCB7IG1uZW1vbmljVG9NYXN0ZXJEZXJpdmF0aW9uS2V5LCBtYXN0ZXJEZXJpdmF0aW9uS2V5VG9NbmVtb25pYywgc2VjcmV0S2V5VG9NbmVtb25pYywgbW5lbW9uaWNUb1NlY3JldEtleSwgc2VlZEZyb21NbmVtb25pYywgbW5lbW9uaWNGcm9tU2VlZCwgfSBmcm9tICcuL21uZW1vbmljL21uZW1vbmljLmpzJztcbmV4cG9ydCB7IG1pY3JvYWxnb3NUb0FsZ29zLCBhbGdvc1RvTWljcm9hbGdvcywgSU5WQUxJRF9NSUNST0FMR09TX0VSUk9SX01TRywgfSBmcm9tICcuL2NvbnZlcnQuanMnO1xuZXhwb3J0IHsgY29tcHV0ZUdyb3VwSUQsIGFzc2lnbkdyb3VwSUQgfSBmcm9tICcuL2dyb3VwLmpzJztcbmV4cG9ydCB7IFNpZ25lZFRyYW5zYWN0aW9uLCBkZWNvZGVTaWduZWRUcmFuc2FjdGlvbiwgZW5jb2RlVW5zaWduZWRTaW11bGF0ZVRyYW5zYWN0aW9uLCB9IGZyb20gJy4vc2lnbmVkVHJhbnNhY3Rpb24uanMnO1xuZXhwb3J0IHsgc2lnbkxvZ2ljU2lnVHJhbnNhY3Rpb24sIHNpZ25Mb2dpY1NpZ1RyYW5zYWN0aW9uT2JqZWN0LCB9IGZyb20gJy4vc2lnbmluZy5qcyc7XG5leHBvcnQgeyBMb2dpY1NpZywgTG9naWNTaWdBY2NvdW50LCBsb2dpY1NpZ0Zyb21CeXRlLCB0ZWFsU2lnbiwgdGVhbFNpZ25Gcm9tUHJvZ3JhbSwgdmVyaWZ5VGVhbFNpZ24sIH0gZnJvbSAnLi9sb2dpY3NpZy5qcyc7XG5leHBvcnQgeyB2ZXJpZnlNdWx0aXNpZywgbXVsdGlzaWdBZGRyZXNzLCB9IGZyb20gJy4vbXVsdGlzaWcuanMnO1xuZXhwb3J0IHsgc2lnbk11bHRpc2lnVHJhbnNhY3Rpb24sIG1lcmdlTXVsdGlzaWdUcmFuc2FjdGlvbnMsIGFwcGVuZFNpZ25NdWx0aXNpZ1RyYW5zYWN0aW9uLCBjcmVhdGVNdWx0aXNpZ1RyYW5zYWN0aW9uLCBhcHBlbmRTaWduUmF3TXVsdGlzaWdTaWduYXR1cmUsIH0gZnJvbSAnLi9tdWx0aXNpZ1NpZ25pbmcuanMnO1xuZXhwb3J0IHsgUHJvZ3JhbVNvdXJjZU1hcCwgfSBmcm9tICcuL2xvZ2ljL3NvdXJjZW1hcC5qcyc7XG5leHBvcnQgKiBmcm9tICcuL2RyeXJ1bi5qcyc7XG5leHBvcnQgKiBmcm9tICcuL21ha2VUeG4uanMnO1xuZXhwb3J0ICogZnJvbSAnLi90cmFuc2FjdGlvbi5qcyc7XG5leHBvcnQgKiBmcm9tICcuL3NpZ25lci5qcyc7XG5leHBvcnQgKiBmcm9tICcuL2NvbXBvc2VyLmpzJztcbmV4cG9ydCAqIGZyb20gJy4vdHlwZXMvdHJhbnNhY3Rpb25zL2luZGV4LmpzJztcbmV4cG9ydCAqIGZyb20gJy4vYWJpL2luZGV4LmpzJztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1haW4uanMubWFwIl0sIm5hbWVzIjpbIm5hY2wiLCJBZGRyZXNzIiwiY29udmVydCIsInV0aWxzIiwiU0lHTl9CWVRFU19QUkVGSVgiLCJVaW50OEFycmF5IiwiZnJvbSIsIk1VTFRJU0lHX0JBRF9TRU5ERVJfRVJST1JfTVNHIiwic2lnblRyYW5zYWN0aW9uIiwidHhuIiwic2siLCJ0eElEIiwiYmxvYiIsInNpZ25UeG4iLCJzaWduQnl0ZXMiLCJieXRlcyIsInRvQmVTaWduZWQiLCJjb25jYXRBcnJheXMiLCJzaWciLCJzaWduIiwidmVyaWZ5Qnl0ZXMiLCJzaWduYXR1cmUiLCJhZGRyIiwidG9CZVZlcmlmaWVkIiwiYWRkck9iaiIsImZyb21TdHJpbmciLCJ2ZXJpZnkiLCJwdWJsaWNLZXkiLCJFUlJPUl9NVUxUSVNJR19CQURfU0VOREVSIiwiRXJyb3IiLCJFUlJPUl9JTlZBTElEX01JQ1JPQUxHT1MiLCJJTlZBTElEX01JQ1JPQUxHT1NfRVJST1JfTVNHIiwiQWxnb2RDbGllbnQiLCJBbGdvZHYyIiwiS21kQ2xpZW50IiwiS21kIiwiZGVmYXVsdCIsIkludERlY29kaW5nIiwiSW5kZXhlckNsaWVudCIsIkluZGV4ZXIiLCJ3YWl0Rm9yQ29uZmlybWF0aW9uIiwiZW5jb2RlT2JqIiwiZGVjb2RlT2JqIiwibXNncGFja1Jhd0VuY29kZSIsIm1zZ3BhY2tSYXdEZWNvZGUiLCJtc2dwYWNrUmF3RGVjb2RlQXNNYXAiLCJlbmNvZGVNc2dwYWNrIiwiZGVjb2RlTXNncGFjayIsImVuY29kZUpTT04iLCJkZWNvZGVKU09OIiwiaXNWYWxpZEFkZHJlc3MiLCJlbmNvZGVBZGRyZXNzIiwiZGVjb2RlQWRkcmVzcyIsImdldEFwcGxpY2F0aW9uQWRkcmVzcyIsIkFMR09SQU5EX1pFUk9fQUREUkVTU19TVFJJTkciLCJieXRlc1RvQmlnSW50IiwiYmlnSW50VG9CeXRlcyIsImJhc2U2NFRvQnl0ZXMiLCJieXRlc1RvQmFzZTY0IiwiYnl0ZXNUb1N0cmluZyIsImNvZXJjZVRvQnl0ZXMiLCJieXRlc1RvSGV4IiwiaGV4VG9CeXRlcyIsImVuY29kZVVpbnQ2NCIsImRlY29kZVVpbnQ2NCIsInBhcnNlSlNPTiIsInN0cmluZ2lmeUpTT04iLCJnZW5lcmF0ZUFjY291bnQiLCJVbnR5cGVkVmFsdWUiLCJtb2RlbHN2Ml8xIiwibW9kZWxzdjIiLCJpbmRleGVyTW9kZWxzXzEiLCJpbmRleGVyTW9kZWxzIiwibW5lbW9uaWNUb01hc3RlckRlcml2YXRpb25LZXkiLCJtYXN0ZXJEZXJpdmF0aW9uS2V5VG9NbmVtb25pYyIsInNlY3JldEtleVRvTW5lbW9uaWMiLCJtbmVtb25pY1RvU2VjcmV0S2V5Iiwic2VlZEZyb21NbmVtb25pYyIsIm1uZW1vbmljRnJvbVNlZWQiLCJtaWNyb2FsZ29zVG9BbGdvcyIsImFsZ29zVG9NaWNyb2FsZ29zIiwiY29tcHV0ZUdyb3VwSUQiLCJhc3NpZ25Hcm91cElEIiwiU2lnbmVkVHJhbnNhY3Rpb24iLCJkZWNvZGVTaWduZWRUcmFuc2FjdGlvbiIsImVuY29kZVVuc2lnbmVkU2ltdWxhdGVUcmFuc2FjdGlvbiIsInNpZ25Mb2dpY1NpZ1RyYW5zYWN0aW9uIiwic2lnbkxvZ2ljU2lnVHJhbnNhY3Rpb25PYmplY3QiLCJMb2dpY1NpZyIsIkxvZ2ljU2lnQWNjb3VudCIsImxvZ2ljU2lnRnJvbUJ5dGUiLCJ0ZWFsU2lnbiIsInRlYWxTaWduRnJvbVByb2dyYW0iLCJ2ZXJpZnlUZWFsU2lnbiIsInZlcmlmeU11bHRpc2lnIiwibXVsdGlzaWdBZGRyZXNzIiwic2lnbk11bHRpc2lnVHJhbnNhY3Rpb24iLCJtZXJnZU11bHRpc2lnVHJhbnNhY3Rpb25zIiwiYXBwZW5kU2lnbk11bHRpc2lnVHJhbnNhY3Rpb24iLCJjcmVhdGVNdWx0aXNpZ1RyYW5zYWN0aW9uIiwiYXBwZW5kU2lnblJhd011bHRpc2lnU2lnbmF0dXJlIiwiUHJvZ3JhbVNvdXJjZU1hcCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/main.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/makeTxn.js":
/*!**************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/makeTxn.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   makeApplicationCallTxnFromObject: () => (/* binding */ makeApplicationCallTxnFromObject),\n/* harmony export */   makeApplicationClearStateTxnFromObject: () => (/* binding */ makeApplicationClearStateTxnFromObject),\n/* harmony export */   makeApplicationCloseOutTxnFromObject: () => (/* binding */ makeApplicationCloseOutTxnFromObject),\n/* harmony export */   makeApplicationCreateTxnFromObject: () => (/* binding */ makeApplicationCreateTxnFromObject),\n/* harmony export */   makeApplicationDeleteTxnFromObject: () => (/* binding */ makeApplicationDeleteTxnFromObject),\n/* harmony export */   makeApplicationNoOpTxnFromObject: () => (/* binding */ makeApplicationNoOpTxnFromObject),\n/* harmony export */   makeApplicationOptInTxnFromObject: () => (/* binding */ makeApplicationOptInTxnFromObject),\n/* harmony export */   makeApplicationUpdateTxnFromObject: () => (/* binding */ makeApplicationUpdateTxnFromObject),\n/* harmony export */   makeAssetConfigTxnWithSuggestedParamsFromObject: () => (/* binding */ makeAssetConfigTxnWithSuggestedParamsFromObject),\n/* harmony export */   makeAssetCreateTxnWithSuggestedParamsFromObject: () => (/* binding */ makeAssetCreateTxnWithSuggestedParamsFromObject),\n/* harmony export */   makeAssetDestroyTxnWithSuggestedParamsFromObject: () => (/* binding */ makeAssetDestroyTxnWithSuggestedParamsFromObject),\n/* harmony export */   makeAssetFreezeTxnWithSuggestedParamsFromObject: () => (/* binding */ makeAssetFreezeTxnWithSuggestedParamsFromObject),\n/* harmony export */   makeAssetTransferTxnWithSuggestedParamsFromObject: () => (/* binding */ makeAssetTransferTxnWithSuggestedParamsFromObject),\n/* harmony export */   makeBaseAssetConfigTxn: () => (/* binding */ makeBaseAssetConfigTxn),\n/* harmony export */   makeKeyRegistrationTxnWithSuggestedParamsFromObject: () => (/* binding */ makeKeyRegistrationTxnWithSuggestedParamsFromObject),\n/* harmony export */   makePaymentTxnWithSuggestedParamsFromObject: () => (/* binding */ makePaymentTxnWithSuggestedParamsFromObject)\n/* harmony export */ });\n/* harmony import */ var _transaction_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./transaction.js */ \"(ssr)/./node_modules/algosdk/dist/esm/transaction.js\");\n/* harmony import */ var _types_transactions_base_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./types/transactions/base.js */ \"(ssr)/./node_modules/algosdk/dist/esm/types/transactions/base.js\");\n/* harmony import */ var _appAccess_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./appAccess.js */ \"(ssr)/./node_modules/algosdk/dist/esm/appAccess.js\");\n\n\n\n/**\n * Create a new payment transaction\n *\n * @param options - Payment transaction parameters\n */ function makePaymentTxnWithSuggestedParamsFromObject({ sender, receiver, amount, closeRemainderTo, suggestedParams, note, lease, rekeyTo }) {\n    return new _transaction_js__WEBPACK_IMPORTED_MODULE_0__.Transaction({\n        type: _types_transactions_base_js__WEBPACK_IMPORTED_MODULE_1__.TransactionType.pay,\n        sender,\n        note,\n        lease,\n        rekeyTo,\n        suggestedParams,\n        paymentParams: {\n            receiver,\n            amount,\n            closeRemainderTo\n        }\n    });\n}\n/**\n * Create a new key registration transaction\n *\n * @param options - Key registration transaction parameters\n */ function makeKeyRegistrationTxnWithSuggestedParamsFromObject({ sender, voteKey, selectionKey, stateProofKey, voteFirst, voteLast, voteKeyDilution, nonParticipation, suggestedParams, note, lease, rekeyTo }) {\n    return new _transaction_js__WEBPACK_IMPORTED_MODULE_0__.Transaction({\n        type: _types_transactions_base_js__WEBPACK_IMPORTED_MODULE_1__.TransactionType.keyreg,\n        sender,\n        note,\n        lease,\n        rekeyTo,\n        suggestedParams,\n        keyregParams: {\n            voteKey,\n            selectionKey,\n            stateProofKey,\n            voteFirst,\n            voteLast,\n            voteKeyDilution,\n            nonParticipation\n        }\n    });\n}\n/**\n * Base function for creating any type of asset config transaction.\n *\n * @param options - Asset config transaction parameters\n */ function makeBaseAssetConfigTxn({ sender, assetIndex, total, decimals, defaultFrozen, manager, reserve, freeze, clawback, unitName, assetName, assetURL, assetMetadataHash, note, lease, rekeyTo, suggestedParams }) {\n    return new _transaction_js__WEBPACK_IMPORTED_MODULE_0__.Transaction({\n        type: _types_transactions_base_js__WEBPACK_IMPORTED_MODULE_1__.TransactionType.acfg,\n        sender,\n        note,\n        lease,\n        rekeyTo,\n        suggestedParams,\n        assetConfigParams: {\n            assetIndex,\n            total,\n            decimals,\n            defaultFrozen,\n            manager,\n            reserve,\n            freeze,\n            clawback,\n            unitName,\n            assetName,\n            assetURL,\n            assetMetadataHash\n        }\n    });\n}\n/**\n * Create a new asset creation transaction\n *\n * @param options - Asset creation transaction parameters\n */ function makeAssetCreateTxnWithSuggestedParamsFromObject({ sender, total, decimals, defaultFrozen, manager, reserve, freeze, clawback, unitName, assetName, assetURL, assetMetadataHash, note, lease, rekeyTo, suggestedParams }) {\n    return makeBaseAssetConfigTxn({\n        sender,\n        total,\n        decimals,\n        defaultFrozen,\n        manager,\n        reserve,\n        freeze,\n        clawback,\n        unitName,\n        assetName,\n        assetURL,\n        assetMetadataHash,\n        note,\n        lease,\n        rekeyTo,\n        suggestedParams\n    });\n}\n/**\n * Create a new asset config transaction. This transaction can be issued by the asset manager to\n * change the manager, reserve, freeze, or clawback address.\n *\n * You must respecify existing addresses to keep them the same; leaving a field blank is the same as\n * turning that feature off for this asset.\n *\n * @param options - Asset modification transaction parameters\n */ function makeAssetConfigTxnWithSuggestedParamsFromObject({ sender, assetIndex, manager, reserve, freeze, clawback, strictEmptyAddressChecking, note, lease, rekeyTo, suggestedParams }) {\n    if (!assetIndex) {\n        throw Error(\"assetIndex must be provided\");\n    }\n    const strictChecking = strictEmptyAddressChecking ?? true;\n    if (strictChecking && (manager == null || reserve == null || freeze == null || clawback == null)) {\n        throw Error(\"strictEmptyAddressChecking is enabled, but an address is empty. If this is intentional, set strictEmptyAddressChecking to false.\");\n    }\n    return makeBaseAssetConfigTxn({\n        sender,\n        assetIndex,\n        manager,\n        reserve,\n        freeze,\n        clawback,\n        note,\n        lease,\n        rekeyTo,\n        suggestedParams\n    });\n}\n/**\n * Create a new asset destroy transaction. This will allow the asset's manager to remove this asset\n * from the ledger, provided all outstanding assets are held by the creator.\n *\n * @param options - Asset destroy transaction parameters\n */ function makeAssetDestroyTxnWithSuggestedParamsFromObject({ sender, assetIndex, note, lease, rekeyTo, suggestedParams }) {\n    if (!assetIndex) {\n        throw Error(\"assetIndex must be provided\");\n    }\n    return makeBaseAssetConfigTxn({\n        sender,\n        assetIndex,\n        note,\n        lease,\n        rekeyTo,\n        suggestedParams\n    });\n}\n/**\n * Create a new asset freeze transaction. This transaction allows the asset's freeze manager to\n * freeze or un-freeze an account, blocking or allowing asset transfers to and from the targeted\n * account.\n *\n * @param options - Asset freeze transaction parameters\n */ function makeAssetFreezeTxnWithSuggestedParamsFromObject({ sender, assetIndex, freezeTarget, frozen, suggestedParams, note, lease, rekeyTo }) {\n    return new _transaction_js__WEBPACK_IMPORTED_MODULE_0__.Transaction({\n        type: _types_transactions_base_js__WEBPACK_IMPORTED_MODULE_1__.TransactionType.afrz,\n        sender,\n        note,\n        lease,\n        rekeyTo,\n        suggestedParams,\n        assetFreezeParams: {\n            assetIndex,\n            freezeTarget,\n            frozen\n        }\n    });\n}\n/**\n * Create a new asset transfer transaction.\n *\n * Special case: to opt into an assets, set amount=0 and sender=receiver.\n *\n * @param options - Asset transfer transaction parameters\n */ function makeAssetTransferTxnWithSuggestedParamsFromObject({ sender, receiver, amount, closeRemainderTo, assetSender, note, assetIndex, suggestedParams, rekeyTo, lease }) {\n    if (!assetIndex) {\n        throw Error(\"assetIndex must be provided\");\n    }\n    return new _transaction_js__WEBPACK_IMPORTED_MODULE_0__.Transaction({\n        type: _types_transactions_base_js__WEBPACK_IMPORTED_MODULE_1__.TransactionType.axfer,\n        sender,\n        note,\n        lease,\n        rekeyTo,\n        suggestedParams,\n        assetTransferParams: {\n            assetIndex,\n            receiver,\n            amount,\n            assetSender,\n            closeRemainderTo\n        }\n    });\n}\n/**\n * Base function for creating any application call transaction.\n *\n * @param options - Application call transaction parameters\n */ function makeApplicationCallTxnFromObject({ sender, appIndex, onComplete, appArgs, accounts, foreignApps, foreignAssets, boxes, convertToAccess, holdings, locals, access, approvalProgram, clearProgram, numLocalInts, numLocalByteSlices, numGlobalInts, numGlobalByteSlices, extraPages, note, lease, rekeyTo, suggestedParams }) {\n    if (onComplete == null) {\n        throw Error(\"onComplete must be provided\");\n    }\n    if (access && (accounts || foreignApps || foreignAssets || boxes || holdings || locals)) {\n        throw Error(\"cannot specify both access and other access fields\");\n    }\n    let accounts2 = accounts;\n    let foreignApps2 = foreignApps;\n    let foreignAssets2 = foreignAssets;\n    let boxes2 = boxes;\n    let access2 = access;\n    if (convertToAccess) {\n        access2 = (0,_appAccess_js__WEBPACK_IMPORTED_MODULE_2__.foreignArraysToResourceReferences)({\n            appIndex,\n            accounts,\n            foreignApps,\n            foreignAssets,\n            holdings,\n            locals,\n            boxes\n        });\n        accounts2 = undefined;\n        foreignApps2 = undefined;\n        foreignAssets2 = undefined;\n        boxes2 = undefined;\n    }\n    return new _transaction_js__WEBPACK_IMPORTED_MODULE_0__.Transaction({\n        type: _types_transactions_base_js__WEBPACK_IMPORTED_MODULE_1__.TransactionType.appl,\n        sender,\n        note,\n        lease,\n        rekeyTo,\n        suggestedParams,\n        appCallParams: {\n            appIndex,\n            onComplete,\n            appArgs,\n            accounts: accounts2,\n            foreignAssets: foreignAssets2,\n            foreignApps: foreignApps2,\n            boxes: boxes2,\n            access: access2,\n            approvalProgram,\n            clearProgram,\n            numLocalInts,\n            numLocalByteSlices,\n            numGlobalInts,\n            numGlobalByteSlices,\n            extraPages\n        }\n    });\n}\n/**\n * Make a transaction that will create an application.\n *\n * @param options - Application creation transaction parameters\n */ function makeApplicationCreateTxnFromObject({ sender, onComplete, appArgs, accounts, foreignApps, foreignAssets, boxes, convertToAccess, holdings, locals, access, approvalProgram, clearProgram, numLocalInts, numLocalByteSlices, numGlobalInts, numGlobalByteSlices, extraPages, note, lease, rekeyTo, suggestedParams }) {\n    if (!approvalProgram || !clearProgram) {\n        throw Error(\"approvalProgram and clearProgram must be provided\");\n    }\n    if (onComplete == null) {\n        throw Error(\"onComplete must be provided\");\n    }\n    return makeApplicationCallTxnFromObject({\n        sender,\n        appIndex: 0,\n        onComplete,\n        appArgs,\n        accounts,\n        foreignApps,\n        foreignAssets,\n        boxes,\n        convertToAccess,\n        holdings,\n        locals,\n        access,\n        approvalProgram,\n        clearProgram,\n        numLocalInts,\n        numLocalByteSlices,\n        numGlobalInts,\n        numGlobalByteSlices,\n        extraPages,\n        note,\n        lease,\n        rekeyTo,\n        suggestedParams\n    });\n}\n/**\n * Make a transaction that changes an application's approval and clear programs\n *\n * @param options - Application update transaction parameters\n */ function makeApplicationUpdateTxnFromObject({ sender, appIndex, appArgs, accounts, foreignApps, foreignAssets, boxes, convertToAccess, holdings, locals, access, approvalProgram, clearProgram, note, lease, rekeyTo, suggestedParams }) {\n    if (!appIndex) {\n        throw Error(\"appIndex must be provided\");\n    }\n    if (!approvalProgram || !clearProgram) {\n        throw Error(\"approvalProgram and clearProgram must be provided\");\n    }\n    return makeApplicationCallTxnFromObject({\n        sender,\n        appIndex,\n        onComplete: _types_transactions_base_js__WEBPACK_IMPORTED_MODULE_1__.OnApplicationComplete.UpdateApplicationOC,\n        appArgs,\n        accounts,\n        foreignApps,\n        foreignAssets,\n        boxes,\n        convertToAccess,\n        holdings,\n        locals,\n        access,\n        approvalProgram,\n        clearProgram,\n        note,\n        lease,\n        rekeyTo,\n        suggestedParams\n    });\n}\n/**\n * Make a transaction that deletes an application\n *\n * @param options - Application deletion transaction parameters\n */ function makeApplicationDeleteTxnFromObject({ sender, appIndex, appArgs, accounts, foreignApps, foreignAssets, boxes, convertToAccess, holdings, locals, access, note, lease, rekeyTo, suggestedParams }) {\n    if (!appIndex) {\n        throw Error(\"appIndex must be provided\");\n    }\n    return makeApplicationCallTxnFromObject({\n        sender,\n        appIndex,\n        onComplete: _types_transactions_base_js__WEBPACK_IMPORTED_MODULE_1__.OnApplicationComplete.DeleteApplicationOC,\n        appArgs,\n        accounts,\n        foreignApps,\n        foreignAssets,\n        boxes,\n        convertToAccess,\n        holdings,\n        locals,\n        access,\n        note,\n        lease,\n        rekeyTo,\n        suggestedParams\n    });\n}\n/**\n * Make a transaction that opts in to use an application\n *\n * @param options - Application opt-in transaction parameters\n */ function makeApplicationOptInTxnFromObject({ sender, appIndex, appArgs, accounts, foreignApps, foreignAssets, boxes, convertToAccess, holdings, locals, access, note, lease, rekeyTo, suggestedParams }) {\n    if (!appIndex) {\n        throw Error(\"appIndex must be provided\");\n    }\n    return makeApplicationCallTxnFromObject({\n        sender,\n        appIndex,\n        onComplete: _types_transactions_base_js__WEBPACK_IMPORTED_MODULE_1__.OnApplicationComplete.OptInOC,\n        appArgs,\n        accounts,\n        foreignApps,\n        foreignAssets,\n        boxes,\n        note,\n        convertToAccess,\n        holdings,\n        locals,\n        access,\n        lease,\n        rekeyTo,\n        suggestedParams\n    });\n}\n/**\n * Make a transaction that closes out a user's state in an application\n *\n * @param options - Application close-out transaction parameters\n */ function makeApplicationCloseOutTxnFromObject({ sender, appIndex, appArgs, accounts, foreignApps, foreignAssets, boxes, convertToAccess, holdings, locals, access, note, lease, rekeyTo, suggestedParams }) {\n    if (!appIndex) {\n        throw Error(\"appIndex must be provided\");\n    }\n    return makeApplicationCallTxnFromObject({\n        sender,\n        appIndex,\n        onComplete: _types_transactions_base_js__WEBPACK_IMPORTED_MODULE_1__.OnApplicationComplete.CloseOutOC,\n        appArgs,\n        accounts,\n        foreignApps,\n        foreignAssets,\n        boxes,\n        convertToAccess,\n        holdings,\n        locals,\n        access,\n        note,\n        lease,\n        rekeyTo,\n        suggestedParams\n    });\n}\n/**\n * Make a transaction that clears a user's state in an application\n *\n * @param options - Application clear state transaction parameters\n */ function makeApplicationClearStateTxnFromObject({ sender, appIndex, appArgs, accounts, foreignApps, foreignAssets, boxes, convertToAccess, holdings, locals, access, note, lease, rekeyTo, suggestedParams }) {\n    if (!appIndex) {\n        throw Error(\"appIndex must be provided\");\n    }\n    return makeApplicationCallTxnFromObject({\n        sender,\n        appIndex,\n        onComplete: _types_transactions_base_js__WEBPACK_IMPORTED_MODULE_1__.OnApplicationComplete.ClearStateOC,\n        appArgs,\n        accounts,\n        foreignApps,\n        foreignAssets,\n        boxes,\n        convertToAccess,\n        holdings,\n        locals,\n        access,\n        note,\n        lease,\n        rekeyTo,\n        suggestedParams\n    });\n}\n/**\n * Make a transaction that just calls an application, doing nothing on completion\n *\n * @param options - Application no-op transaction parameters\n */ function makeApplicationNoOpTxnFromObject({ sender, appIndex, appArgs, accounts, foreignApps, foreignAssets, boxes, convertToAccess, holdings, locals, access, note, lease, rekeyTo, suggestedParams }) {\n    if (!appIndex) {\n        throw Error(\"appIndex must be provided\");\n    }\n    return makeApplicationCallTxnFromObject({\n        sender,\n        appIndex,\n        onComplete: _types_transactions_base_js__WEBPACK_IMPORTED_MODULE_1__.OnApplicationComplete.NoOpOC,\n        appArgs,\n        accounts,\n        foreignApps,\n        foreignAssets,\n        boxes,\n        convertToAccess,\n        holdings,\n        locals,\n        access,\n        note,\n        lease,\n        rekeyTo,\n        suggestedParams\n    });\n} //# sourceMappingURL=makeTxn.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/makeTxn.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/mnemonic/mnemonic.js":
/*!************************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/mnemonic/mnemonic.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FAIL_TO_DECODE_MNEMONIC_ERROR_MSG: () => (/* binding */ FAIL_TO_DECODE_MNEMONIC_ERROR_MSG),\n/* harmony export */   NOT_IN_WORDS_LIST_ERROR_MSG: () => (/* binding */ NOT_IN_WORDS_LIST_ERROR_MSG),\n/* harmony export */   masterDerivationKeyToMnemonic: () => (/* binding */ masterDerivationKeyToMnemonic),\n/* harmony export */   mnemonicFromSeed: () => (/* binding */ mnemonicFromSeed),\n/* harmony export */   mnemonicToMasterDerivationKey: () => (/* binding */ mnemonicToMasterDerivationKey),\n/* harmony export */   mnemonicToSecretKey: () => (/* binding */ mnemonicToSecretKey),\n/* harmony export */   secretKeyToMnemonic: () => (/* binding */ secretKeyToMnemonic),\n/* harmony export */   seedFromMnemonic: () => (/* binding */ seedFromMnemonic)\n/* harmony export */ });\n/* harmony import */ var _wordlists_english_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./wordlists/english.js */ \"(ssr)/./node_modules/algosdk/dist/esm/mnemonic/wordlists/english.js\");\n/* harmony import */ var _nacl_naclWrappers_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../nacl/naclWrappers.js */ \"(ssr)/./node_modules/algosdk/dist/esm/nacl/naclWrappers.js\");\n/* harmony import */ var _encoding_address_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../encoding/address.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/address.js\");\n/* eslint-disable no-bitwise */ \n\n\nconst FAIL_TO_DECODE_MNEMONIC_ERROR_MSG = \"failed to decode mnemonic\";\nconst NOT_IN_WORDS_LIST_ERROR_MSG = \"the mnemonic contains a word that is not in the wordlist\";\n// https://stackoverflow.com/a/51452614\nfunction toUint11Array(buffer8) {\n    const buffer11 = [];\n    let acc = 0;\n    let accBits = 0;\n    function add(octet) {\n        acc |= octet << accBits;\n        accBits += 8;\n        if (accBits >= 11) {\n            buffer11.push(acc & 0x7ff);\n            acc >>= 11;\n            accBits -= 11;\n        }\n    }\n    function flush() {\n        if (accBits) {\n            buffer11.push(acc);\n        }\n    }\n    buffer8.forEach(add);\n    flush();\n    return buffer11;\n}\nfunction applyWords(nums) {\n    return nums.map((n)=>_wordlists_english_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"][n]);\n}\nfunction computeChecksum(seed) {\n    const hashBuffer = _nacl_naclWrappers_js__WEBPACK_IMPORTED_MODULE_1__.genericHash(seed);\n    const uint11Hash = toUint11Array(hashBuffer);\n    const words = applyWords(uint11Hash);\n    return words[0];\n}\n/**\n * mnemonicFromSeed converts a 32-byte key into a 25 word mnemonic. The generated mnemonic includes a checksum.\n * Each word in the mnemonic represents 11 bits of data, and the last 11 bits are reserved for the checksum.\n * @param seed - 32 bytes long seed\n * @returns 25 words mnemonic\n */ function mnemonicFromSeed(seed) {\n    // Sanity length check\n    if (seed.length !== _nacl_naclWrappers_js__WEBPACK_IMPORTED_MODULE_1__.SEED_BTYES_LENGTH) {\n        throw new RangeError(`Seed length must be ${_nacl_naclWrappers_js__WEBPACK_IMPORTED_MODULE_1__.SEED_BTYES_LENGTH}`);\n    }\n    const uint11Array = toUint11Array(seed);\n    const words = applyWords(uint11Array);\n    const checksumWord = computeChecksum(seed);\n    return `${words.join(\" \")} ${checksumWord}`;\n}\n// from Uint11Array\n// https://stackoverflow.com/a/51452614\nfunction toUint8Array(buffer11) {\n    const buffer8 = [];\n    let acc = 0;\n    let accBits = 0;\n    function add(ui11) {\n        acc |= ui11 << accBits;\n        accBits += 11;\n        while(accBits >= 8){\n            buffer8.push(acc & 0xff);\n            acc >>= 8;\n            accBits -= 8;\n        }\n    }\n    function flush() {\n        if (accBits) {\n            buffer8.push(acc);\n        }\n    }\n    buffer11.forEach(add);\n    flush();\n    return new Uint8Array(buffer8);\n}\n/**\n * seedFromMnemonic converts a mnemonic generated using this library into the source key used to create it.\n * It returns an error if the passed mnemonic has an incorrect checksum, if the number of words is unexpected, or if one\n * of the passed words is not found in the words list.\n * @param mnemonic - 25 words mnemonic\n * @returns 32 bytes long seed\n */ function seedFromMnemonic(mnemonic) {\n    const words = mnemonic.split(\" \");\n    const key = words.slice(0, 24);\n    // Check that all words are in list\n    for (const w of key){\n        if (_wordlists_english_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].indexOf(w) === -1) throw new Error(NOT_IN_WORDS_LIST_ERROR_MSG);\n    }\n    const checksum = words[words.length - 1];\n    const uint11Array = key.map((word)=>_wordlists_english_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].indexOf(word));\n    // Convert the key to uint8Array\n    let uint8Array = toUint8Array(uint11Array);\n    // We need to chop the last byte -\n    // the short explanation - Since 256 is not divisible by 11, we have an extra 0x0 byte.\n    // The longer explanation - When splitting the 256 bits to chunks of 11, we get 23 words and a left over of 3 bits.\n    // This left gets padded with another 8 bits to the create the 24th word.\n    // While converting back to byte array, our new 264 bits array is divisible by 8 but the last byte is just the padding.\n    // check that we have 33 bytes long array as expected\n    if (uint8Array.length !== 33) throw new Error(FAIL_TO_DECODE_MNEMONIC_ERROR_MSG);\n    // check that the last byte is actually 0x0\n    if (uint8Array[uint8Array.length - 1] !== 0x0) throw new Error(FAIL_TO_DECODE_MNEMONIC_ERROR_MSG);\n    // chop it !\n    uint8Array = uint8Array.slice(0, uint8Array.length - 1);\n    // compute checksum\n    const cs = computeChecksum(uint8Array);\n    // success!\n    if (cs === checksum) return uint8Array;\n    throw new Error(FAIL_TO_DECODE_MNEMONIC_ERROR_MSG);\n}\n/**\n * mnemonicToSecretKey takes a mnemonic string and returns the corresponding Algorand address and its secret key.\n * @param mn - 25 words Algorand mnemonic\n * @throws error if fails to decode the mnemonic\n */ function mnemonicToSecretKey(mn) {\n    const seed = seedFromMnemonic(mn);\n    const keys = _nacl_naclWrappers_js__WEBPACK_IMPORTED_MODULE_1__.keyPairFromSeed(seed);\n    const addr = new _encoding_address_js__WEBPACK_IMPORTED_MODULE_2__.Address(keys.publicKey);\n    return {\n        addr,\n        sk: keys.secretKey\n    };\n}\n/**\n * secretKeyToMnemonic takes an Algorand secret key and returns the corresponding mnemonic.\n * @param sk - Algorand secret key\n * @returns Secret key's associated mnemonic\n */ function secretKeyToMnemonic(sk) {\n    // get the seed from the sk\n    const seed = sk.slice(0, _nacl_naclWrappers_js__WEBPACK_IMPORTED_MODULE_1__.SEED_BTYES_LENGTH);\n    return mnemonicFromSeed(seed);\n}\n/**\n * mnemonicToMasterDerivationKey takes a mnemonic string and returns the corresponding master derivation key.\n * @param mn - 25 words Algorand mnemonic\n * @returns Uint8Array\n * @throws error if fails to decode the mnemonic\n */ function mnemonicToMasterDerivationKey(mn) {\n    return seedFromMnemonic(mn);\n}\n/**\n * masterDerivationKeyToMnemonic takes a master derivation key and returns the corresponding mnemonic.\n * @param mdk - Uint8Array\n * @returns string mnemonic\n */ function masterDerivationKeyToMnemonic(mdk) {\n    return mnemonicFromSeed(mdk);\n} //# sourceMappingURL=mnemonic.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/mnemonic/mnemonic.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/mnemonic/wordlists/english.js":
/*!*********************************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/mnemonic/wordlists/english.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nconst english = [\n    \"abandon\",\n    \"ability\",\n    \"able\",\n    \"about\",\n    \"above\",\n    \"absent\",\n    \"absorb\",\n    \"abstract\",\n    \"absurd\",\n    \"abuse\",\n    \"access\",\n    \"accident\",\n    \"account\",\n    \"accuse\",\n    \"achieve\",\n    \"acid\",\n    \"acoustic\",\n    \"acquire\",\n    \"across\",\n    \"act\",\n    \"action\",\n    \"actor\",\n    \"actress\",\n    \"actual\",\n    \"adapt\",\n    \"add\",\n    \"addict\",\n    \"address\",\n    \"adjust\",\n    \"admit\",\n    \"adult\",\n    \"advance\",\n    \"advice\",\n    \"aerobic\",\n    \"affair\",\n    \"afford\",\n    \"afraid\",\n    \"again\",\n    \"age\",\n    \"agent\",\n    \"agree\",\n    \"ahead\",\n    \"aim\",\n    \"air\",\n    \"airport\",\n    \"aisle\",\n    \"alarm\",\n    \"album\",\n    \"alcohol\",\n    \"alert\",\n    \"alien\",\n    \"all\",\n    \"alley\",\n    \"allow\",\n    \"almost\",\n    \"alone\",\n    \"alpha\",\n    \"already\",\n    \"also\",\n    \"alter\",\n    \"always\",\n    \"amateur\",\n    \"amazing\",\n    \"among\",\n    \"amount\",\n    \"amused\",\n    \"analyst\",\n    \"anchor\",\n    \"ancient\",\n    \"anger\",\n    \"angle\",\n    \"angry\",\n    \"animal\",\n    \"ankle\",\n    \"announce\",\n    \"annual\",\n    \"another\",\n    \"answer\",\n    \"antenna\",\n    \"antique\",\n    \"anxiety\",\n    \"any\",\n    \"apart\",\n    \"apology\",\n    \"appear\",\n    \"apple\",\n    \"approve\",\n    \"april\",\n    \"arch\",\n    \"arctic\",\n    \"area\",\n    \"arena\",\n    \"argue\",\n    \"arm\",\n    \"armed\",\n    \"armor\",\n    \"army\",\n    \"around\",\n    \"arrange\",\n    \"arrest\",\n    \"arrive\",\n    \"arrow\",\n    \"art\",\n    \"artefact\",\n    \"artist\",\n    \"artwork\",\n    \"ask\",\n    \"aspect\",\n    \"assault\",\n    \"asset\",\n    \"assist\",\n    \"assume\",\n    \"asthma\",\n    \"athlete\",\n    \"atom\",\n    \"attack\",\n    \"attend\",\n    \"attitude\",\n    \"attract\",\n    \"auction\",\n    \"audit\",\n    \"august\",\n    \"aunt\",\n    \"author\",\n    \"auto\",\n    \"autumn\",\n    \"average\",\n    \"avocado\",\n    \"avoid\",\n    \"awake\",\n    \"aware\",\n    \"away\",\n    \"awesome\",\n    \"awful\",\n    \"awkward\",\n    \"axis\",\n    \"baby\",\n    \"bachelor\",\n    \"bacon\",\n    \"badge\",\n    \"bag\",\n    \"balance\",\n    \"balcony\",\n    \"ball\",\n    \"bamboo\",\n    \"banana\",\n    \"banner\",\n    \"bar\",\n    \"barely\",\n    \"bargain\",\n    \"barrel\",\n    \"base\",\n    \"basic\",\n    \"basket\",\n    \"battle\",\n    \"beach\",\n    \"bean\",\n    \"beauty\",\n    \"because\",\n    \"become\",\n    \"beef\",\n    \"before\",\n    \"begin\",\n    \"behave\",\n    \"behind\",\n    \"believe\",\n    \"below\",\n    \"belt\",\n    \"bench\",\n    \"benefit\",\n    \"best\",\n    \"betray\",\n    \"better\",\n    \"between\",\n    \"beyond\",\n    \"bicycle\",\n    \"bid\",\n    \"bike\",\n    \"bind\",\n    \"biology\",\n    \"bird\",\n    \"birth\",\n    \"bitter\",\n    \"black\",\n    \"blade\",\n    \"blame\",\n    \"blanket\",\n    \"blast\",\n    \"bleak\",\n    \"bless\",\n    \"blind\",\n    \"blood\",\n    \"blossom\",\n    \"blouse\",\n    \"blue\",\n    \"blur\",\n    \"blush\",\n    \"board\",\n    \"boat\",\n    \"body\",\n    \"boil\",\n    \"bomb\",\n    \"bone\",\n    \"bonus\",\n    \"book\",\n    \"boost\",\n    \"border\",\n    \"boring\",\n    \"borrow\",\n    \"boss\",\n    \"bottom\",\n    \"bounce\",\n    \"box\",\n    \"boy\",\n    \"bracket\",\n    \"brain\",\n    \"brand\",\n    \"brass\",\n    \"brave\",\n    \"bread\",\n    \"breeze\",\n    \"brick\",\n    \"bridge\",\n    \"brief\",\n    \"bright\",\n    \"bring\",\n    \"brisk\",\n    \"broccoli\",\n    \"broken\",\n    \"bronze\",\n    \"broom\",\n    \"brother\",\n    \"brown\",\n    \"brush\",\n    \"bubble\",\n    \"buddy\",\n    \"budget\",\n    \"buffalo\",\n    \"build\",\n    \"bulb\",\n    \"bulk\",\n    \"bullet\",\n    \"bundle\",\n    \"bunker\",\n    \"burden\",\n    \"burger\",\n    \"burst\",\n    \"bus\",\n    \"business\",\n    \"busy\",\n    \"butter\",\n    \"buyer\",\n    \"buzz\",\n    \"cabbage\",\n    \"cabin\",\n    \"cable\",\n    \"cactus\",\n    \"cage\",\n    \"cake\",\n    \"call\",\n    \"calm\",\n    \"camera\",\n    \"camp\",\n    \"can\",\n    \"canal\",\n    \"cancel\",\n    \"candy\",\n    \"cannon\",\n    \"canoe\",\n    \"canvas\",\n    \"canyon\",\n    \"capable\",\n    \"capital\",\n    \"captain\",\n    \"car\",\n    \"carbon\",\n    \"card\",\n    \"cargo\",\n    \"carpet\",\n    \"carry\",\n    \"cart\",\n    \"case\",\n    \"cash\",\n    \"casino\",\n    \"castle\",\n    \"casual\",\n    \"cat\",\n    \"catalog\",\n    \"catch\",\n    \"category\",\n    \"cattle\",\n    \"caught\",\n    \"cause\",\n    \"caution\",\n    \"cave\",\n    \"ceiling\",\n    \"celery\",\n    \"cement\",\n    \"census\",\n    \"century\",\n    \"cereal\",\n    \"certain\",\n    \"chair\",\n    \"chalk\",\n    \"champion\",\n    \"change\",\n    \"chaos\",\n    \"chapter\",\n    \"charge\",\n    \"chase\",\n    \"chat\",\n    \"cheap\",\n    \"check\",\n    \"cheese\",\n    \"chef\",\n    \"cherry\",\n    \"chest\",\n    \"chicken\",\n    \"chief\",\n    \"child\",\n    \"chimney\",\n    \"choice\",\n    \"choose\",\n    \"chronic\",\n    \"chuckle\",\n    \"chunk\",\n    \"churn\",\n    \"cigar\",\n    \"cinnamon\",\n    \"circle\",\n    \"citizen\",\n    \"city\",\n    \"civil\",\n    \"claim\",\n    \"clap\",\n    \"clarify\",\n    \"claw\",\n    \"clay\",\n    \"clean\",\n    \"clerk\",\n    \"clever\",\n    \"click\",\n    \"client\",\n    \"cliff\",\n    \"climb\",\n    \"clinic\",\n    \"clip\",\n    \"clock\",\n    \"clog\",\n    \"close\",\n    \"cloth\",\n    \"cloud\",\n    \"clown\",\n    \"club\",\n    \"clump\",\n    \"cluster\",\n    \"clutch\",\n    \"coach\",\n    \"coast\",\n    \"coconut\",\n    \"code\",\n    \"coffee\",\n    \"coil\",\n    \"coin\",\n    \"collect\",\n    \"color\",\n    \"column\",\n    \"combine\",\n    \"come\",\n    \"comfort\",\n    \"comic\",\n    \"common\",\n    \"company\",\n    \"concert\",\n    \"conduct\",\n    \"confirm\",\n    \"congress\",\n    \"connect\",\n    \"consider\",\n    \"control\",\n    \"convince\",\n    \"cook\",\n    \"cool\",\n    \"copper\",\n    \"copy\",\n    \"coral\",\n    \"core\",\n    \"corn\",\n    \"correct\",\n    \"cost\",\n    \"cotton\",\n    \"couch\",\n    \"country\",\n    \"couple\",\n    \"course\",\n    \"cousin\",\n    \"cover\",\n    \"coyote\",\n    \"crack\",\n    \"cradle\",\n    \"craft\",\n    \"cram\",\n    \"crane\",\n    \"crash\",\n    \"crater\",\n    \"crawl\",\n    \"crazy\",\n    \"cream\",\n    \"credit\",\n    \"creek\",\n    \"crew\",\n    \"cricket\",\n    \"crime\",\n    \"crisp\",\n    \"critic\",\n    \"crop\",\n    \"cross\",\n    \"crouch\",\n    \"crowd\",\n    \"crucial\",\n    \"cruel\",\n    \"cruise\",\n    \"crumble\",\n    \"crunch\",\n    \"crush\",\n    \"cry\",\n    \"crystal\",\n    \"cube\",\n    \"culture\",\n    \"cup\",\n    \"cupboard\",\n    \"curious\",\n    \"current\",\n    \"curtain\",\n    \"curve\",\n    \"cushion\",\n    \"custom\",\n    \"cute\",\n    \"cycle\",\n    \"dad\",\n    \"damage\",\n    \"damp\",\n    \"dance\",\n    \"danger\",\n    \"daring\",\n    \"dash\",\n    \"daughter\",\n    \"dawn\",\n    \"day\",\n    \"deal\",\n    \"debate\",\n    \"debris\",\n    \"decade\",\n    \"december\",\n    \"decide\",\n    \"decline\",\n    \"decorate\",\n    \"decrease\",\n    \"deer\",\n    \"defense\",\n    \"define\",\n    \"defy\",\n    \"degree\",\n    \"delay\",\n    \"deliver\",\n    \"demand\",\n    \"demise\",\n    \"denial\",\n    \"dentist\",\n    \"deny\",\n    \"depart\",\n    \"depend\",\n    \"deposit\",\n    \"depth\",\n    \"deputy\",\n    \"derive\",\n    \"describe\",\n    \"desert\",\n    \"design\",\n    \"desk\",\n    \"despair\",\n    \"destroy\",\n    \"detail\",\n    \"detect\",\n    \"develop\",\n    \"device\",\n    \"devote\",\n    \"diagram\",\n    \"dial\",\n    \"diamond\",\n    \"diary\",\n    \"dice\",\n    \"diesel\",\n    \"diet\",\n    \"differ\",\n    \"digital\",\n    \"dignity\",\n    \"dilemma\",\n    \"dinner\",\n    \"dinosaur\",\n    \"direct\",\n    \"dirt\",\n    \"disagree\",\n    \"discover\",\n    \"disease\",\n    \"dish\",\n    \"dismiss\",\n    \"disorder\",\n    \"display\",\n    \"distance\",\n    \"divert\",\n    \"divide\",\n    \"divorce\",\n    \"dizzy\",\n    \"doctor\",\n    \"document\",\n    \"dog\",\n    \"doll\",\n    \"dolphin\",\n    \"domain\",\n    \"donate\",\n    \"donkey\",\n    \"donor\",\n    \"door\",\n    \"dose\",\n    \"double\",\n    \"dove\",\n    \"draft\",\n    \"dragon\",\n    \"drama\",\n    \"drastic\",\n    \"draw\",\n    \"dream\",\n    \"dress\",\n    \"drift\",\n    \"drill\",\n    \"drink\",\n    \"drip\",\n    \"drive\",\n    \"drop\",\n    \"drum\",\n    \"dry\",\n    \"duck\",\n    \"dumb\",\n    \"dune\",\n    \"during\",\n    \"dust\",\n    \"dutch\",\n    \"duty\",\n    \"dwarf\",\n    \"dynamic\",\n    \"eager\",\n    \"eagle\",\n    \"early\",\n    \"earn\",\n    \"earth\",\n    \"easily\",\n    \"east\",\n    \"easy\",\n    \"echo\",\n    \"ecology\",\n    \"economy\",\n    \"edge\",\n    \"edit\",\n    \"educate\",\n    \"effort\",\n    \"egg\",\n    \"eight\",\n    \"either\",\n    \"elbow\",\n    \"elder\",\n    \"electric\",\n    \"elegant\",\n    \"element\",\n    \"elephant\",\n    \"elevator\",\n    \"elite\",\n    \"else\",\n    \"embark\",\n    \"embody\",\n    \"embrace\",\n    \"emerge\",\n    \"emotion\",\n    \"employ\",\n    \"empower\",\n    \"empty\",\n    \"enable\",\n    \"enact\",\n    \"end\",\n    \"endless\",\n    \"endorse\",\n    \"enemy\",\n    \"energy\",\n    \"enforce\",\n    \"engage\",\n    \"engine\",\n    \"enhance\",\n    \"enjoy\",\n    \"enlist\",\n    \"enough\",\n    \"enrich\",\n    \"enroll\",\n    \"ensure\",\n    \"enter\",\n    \"entire\",\n    \"entry\",\n    \"envelope\",\n    \"episode\",\n    \"equal\",\n    \"equip\",\n    \"era\",\n    \"erase\",\n    \"erode\",\n    \"erosion\",\n    \"error\",\n    \"erupt\",\n    \"escape\",\n    \"essay\",\n    \"essence\",\n    \"estate\",\n    \"eternal\",\n    \"ethics\",\n    \"evidence\",\n    \"evil\",\n    \"evoke\",\n    \"evolve\",\n    \"exact\",\n    \"example\",\n    \"excess\",\n    \"exchange\",\n    \"excite\",\n    \"exclude\",\n    \"excuse\",\n    \"execute\",\n    \"exercise\",\n    \"exhaust\",\n    \"exhibit\",\n    \"exile\",\n    \"exist\",\n    \"exit\",\n    \"exotic\",\n    \"expand\",\n    \"expect\",\n    \"expire\",\n    \"explain\",\n    \"expose\",\n    \"express\",\n    \"extend\",\n    \"extra\",\n    \"eye\",\n    \"eyebrow\",\n    \"fabric\",\n    \"face\",\n    \"faculty\",\n    \"fade\",\n    \"faint\",\n    \"faith\",\n    \"fall\",\n    \"false\",\n    \"fame\",\n    \"family\",\n    \"famous\",\n    \"fan\",\n    \"fancy\",\n    \"fantasy\",\n    \"farm\",\n    \"fashion\",\n    \"fat\",\n    \"fatal\",\n    \"father\",\n    \"fatigue\",\n    \"fault\",\n    \"favorite\",\n    \"feature\",\n    \"february\",\n    \"federal\",\n    \"fee\",\n    \"feed\",\n    \"feel\",\n    \"female\",\n    \"fence\",\n    \"festival\",\n    \"fetch\",\n    \"fever\",\n    \"few\",\n    \"fiber\",\n    \"fiction\",\n    \"field\",\n    \"figure\",\n    \"file\",\n    \"film\",\n    \"filter\",\n    \"final\",\n    \"find\",\n    \"fine\",\n    \"finger\",\n    \"finish\",\n    \"fire\",\n    \"firm\",\n    \"first\",\n    \"fiscal\",\n    \"fish\",\n    \"fit\",\n    \"fitness\",\n    \"fix\",\n    \"flag\",\n    \"flame\",\n    \"flash\",\n    \"flat\",\n    \"flavor\",\n    \"flee\",\n    \"flight\",\n    \"flip\",\n    \"float\",\n    \"flock\",\n    \"floor\",\n    \"flower\",\n    \"fluid\",\n    \"flush\",\n    \"fly\",\n    \"foam\",\n    \"focus\",\n    \"fog\",\n    \"foil\",\n    \"fold\",\n    \"follow\",\n    \"food\",\n    \"foot\",\n    \"force\",\n    \"forest\",\n    \"forget\",\n    \"fork\",\n    \"fortune\",\n    \"forum\",\n    \"forward\",\n    \"fossil\",\n    \"foster\",\n    \"found\",\n    \"fox\",\n    \"fragile\",\n    \"frame\",\n    \"frequent\",\n    \"fresh\",\n    \"friend\",\n    \"fringe\",\n    \"frog\",\n    \"front\",\n    \"frost\",\n    \"frown\",\n    \"frozen\",\n    \"fruit\",\n    \"fuel\",\n    \"fun\",\n    \"funny\",\n    \"furnace\",\n    \"fury\",\n    \"future\",\n    \"gadget\",\n    \"gain\",\n    \"galaxy\",\n    \"gallery\",\n    \"game\",\n    \"gap\",\n    \"garage\",\n    \"garbage\",\n    \"garden\",\n    \"garlic\",\n    \"garment\",\n    \"gas\",\n    \"gasp\",\n    \"gate\",\n    \"gather\",\n    \"gauge\",\n    \"gaze\",\n    \"general\",\n    \"genius\",\n    \"genre\",\n    \"gentle\",\n    \"genuine\",\n    \"gesture\",\n    \"ghost\",\n    \"giant\",\n    \"gift\",\n    \"giggle\",\n    \"ginger\",\n    \"giraffe\",\n    \"girl\",\n    \"give\",\n    \"glad\",\n    \"glance\",\n    \"glare\",\n    \"glass\",\n    \"glide\",\n    \"glimpse\",\n    \"globe\",\n    \"gloom\",\n    \"glory\",\n    \"glove\",\n    \"glow\",\n    \"glue\",\n    \"goat\",\n    \"goddess\",\n    \"gold\",\n    \"good\",\n    \"goose\",\n    \"gorilla\",\n    \"gospel\",\n    \"gossip\",\n    \"govern\",\n    \"gown\",\n    \"grab\",\n    \"grace\",\n    \"grain\",\n    \"grant\",\n    \"grape\",\n    \"grass\",\n    \"gravity\",\n    \"great\",\n    \"green\",\n    \"grid\",\n    \"grief\",\n    \"grit\",\n    \"grocery\",\n    \"group\",\n    \"grow\",\n    \"grunt\",\n    \"guard\",\n    \"guess\",\n    \"guide\",\n    \"guilt\",\n    \"guitar\",\n    \"gun\",\n    \"gym\",\n    \"habit\",\n    \"hair\",\n    \"half\",\n    \"hammer\",\n    \"hamster\",\n    \"hand\",\n    \"happy\",\n    \"harbor\",\n    \"hard\",\n    \"harsh\",\n    \"harvest\",\n    \"hat\",\n    \"have\",\n    \"hawk\",\n    \"hazard\",\n    \"head\",\n    \"health\",\n    \"heart\",\n    \"heavy\",\n    \"hedgehog\",\n    \"height\",\n    \"hello\",\n    \"helmet\",\n    \"help\",\n    \"hen\",\n    \"hero\",\n    \"hidden\",\n    \"high\",\n    \"hill\",\n    \"hint\",\n    \"hip\",\n    \"hire\",\n    \"history\",\n    \"hobby\",\n    \"hockey\",\n    \"hold\",\n    \"hole\",\n    \"holiday\",\n    \"hollow\",\n    \"home\",\n    \"honey\",\n    \"hood\",\n    \"hope\",\n    \"horn\",\n    \"horror\",\n    \"horse\",\n    \"hospital\",\n    \"host\",\n    \"hotel\",\n    \"hour\",\n    \"hover\",\n    \"hub\",\n    \"huge\",\n    \"human\",\n    \"humble\",\n    \"humor\",\n    \"hundred\",\n    \"hungry\",\n    \"hunt\",\n    \"hurdle\",\n    \"hurry\",\n    \"hurt\",\n    \"husband\",\n    \"hybrid\",\n    \"ice\",\n    \"icon\",\n    \"idea\",\n    \"identify\",\n    \"idle\",\n    \"ignore\",\n    \"ill\",\n    \"illegal\",\n    \"illness\",\n    \"image\",\n    \"imitate\",\n    \"immense\",\n    \"immune\",\n    \"impact\",\n    \"impose\",\n    \"improve\",\n    \"impulse\",\n    \"inch\",\n    \"include\",\n    \"income\",\n    \"increase\",\n    \"index\",\n    \"indicate\",\n    \"indoor\",\n    \"industry\",\n    \"infant\",\n    \"inflict\",\n    \"inform\",\n    \"inhale\",\n    \"inherit\",\n    \"initial\",\n    \"inject\",\n    \"injury\",\n    \"inmate\",\n    \"inner\",\n    \"innocent\",\n    \"input\",\n    \"inquiry\",\n    \"insane\",\n    \"insect\",\n    \"inside\",\n    \"inspire\",\n    \"install\",\n    \"intact\",\n    \"interest\",\n    \"into\",\n    \"invest\",\n    \"invite\",\n    \"involve\",\n    \"iron\",\n    \"island\",\n    \"isolate\",\n    \"issue\",\n    \"item\",\n    \"ivory\",\n    \"jacket\",\n    \"jaguar\",\n    \"jar\",\n    \"jazz\",\n    \"jealous\",\n    \"jeans\",\n    \"jelly\",\n    \"jewel\",\n    \"job\",\n    \"join\",\n    \"joke\",\n    \"journey\",\n    \"joy\",\n    \"judge\",\n    \"juice\",\n    \"jump\",\n    \"jungle\",\n    \"junior\",\n    \"junk\",\n    \"just\",\n    \"kangaroo\",\n    \"keen\",\n    \"keep\",\n    \"ketchup\",\n    \"key\",\n    \"kick\",\n    \"kid\",\n    \"kidney\",\n    \"kind\",\n    \"kingdom\",\n    \"kiss\",\n    \"kit\",\n    \"kitchen\",\n    \"kite\",\n    \"kitten\",\n    \"kiwi\",\n    \"knee\",\n    \"knife\",\n    \"knock\",\n    \"know\",\n    \"lab\",\n    \"label\",\n    \"labor\",\n    \"ladder\",\n    \"lady\",\n    \"lake\",\n    \"lamp\",\n    \"language\",\n    \"laptop\",\n    \"large\",\n    \"later\",\n    \"latin\",\n    \"laugh\",\n    \"laundry\",\n    \"lava\",\n    \"law\",\n    \"lawn\",\n    \"lawsuit\",\n    \"layer\",\n    \"lazy\",\n    \"leader\",\n    \"leaf\",\n    \"learn\",\n    \"leave\",\n    \"lecture\",\n    \"left\",\n    \"leg\",\n    \"legal\",\n    \"legend\",\n    \"leisure\",\n    \"lemon\",\n    \"lend\",\n    \"length\",\n    \"lens\",\n    \"leopard\",\n    \"lesson\",\n    \"letter\",\n    \"level\",\n    \"liar\",\n    \"liberty\",\n    \"library\",\n    \"license\",\n    \"life\",\n    \"lift\",\n    \"light\",\n    \"like\",\n    \"limb\",\n    \"limit\",\n    \"link\",\n    \"lion\",\n    \"liquid\",\n    \"list\",\n    \"little\",\n    \"live\",\n    \"lizard\",\n    \"load\",\n    \"loan\",\n    \"lobster\",\n    \"local\",\n    \"lock\",\n    \"logic\",\n    \"lonely\",\n    \"long\",\n    \"loop\",\n    \"lottery\",\n    \"loud\",\n    \"lounge\",\n    \"love\",\n    \"loyal\",\n    \"lucky\",\n    \"luggage\",\n    \"lumber\",\n    \"lunar\",\n    \"lunch\",\n    \"luxury\",\n    \"lyrics\",\n    \"machine\",\n    \"mad\",\n    \"magic\",\n    \"magnet\",\n    \"maid\",\n    \"mail\",\n    \"main\",\n    \"major\",\n    \"make\",\n    \"mammal\",\n    \"man\",\n    \"manage\",\n    \"mandate\",\n    \"mango\",\n    \"mansion\",\n    \"manual\",\n    \"maple\",\n    \"marble\",\n    \"march\",\n    \"margin\",\n    \"marine\",\n    \"market\",\n    \"marriage\",\n    \"mask\",\n    \"mass\",\n    \"master\",\n    \"match\",\n    \"material\",\n    \"math\",\n    \"matrix\",\n    \"matter\",\n    \"maximum\",\n    \"maze\",\n    \"meadow\",\n    \"mean\",\n    \"measure\",\n    \"meat\",\n    \"mechanic\",\n    \"medal\",\n    \"media\",\n    \"melody\",\n    \"melt\",\n    \"member\",\n    \"memory\",\n    \"mention\",\n    \"menu\",\n    \"mercy\",\n    \"merge\",\n    \"merit\",\n    \"merry\",\n    \"mesh\",\n    \"message\",\n    \"metal\",\n    \"method\",\n    \"middle\",\n    \"midnight\",\n    \"milk\",\n    \"million\",\n    \"mimic\",\n    \"mind\",\n    \"minimum\",\n    \"minor\",\n    \"minute\",\n    \"miracle\",\n    \"mirror\",\n    \"misery\",\n    \"miss\",\n    \"mistake\",\n    \"mix\",\n    \"mixed\",\n    \"mixture\",\n    \"mobile\",\n    \"model\",\n    \"modify\",\n    \"mom\",\n    \"moment\",\n    \"monitor\",\n    \"monkey\",\n    \"monster\",\n    \"month\",\n    \"moon\",\n    \"moral\",\n    \"more\",\n    \"morning\",\n    \"mosquito\",\n    \"mother\",\n    \"motion\",\n    \"motor\",\n    \"mountain\",\n    \"mouse\",\n    \"move\",\n    \"movie\",\n    \"much\",\n    \"muffin\",\n    \"mule\",\n    \"multiply\",\n    \"muscle\",\n    \"museum\",\n    \"mushroom\",\n    \"music\",\n    \"must\",\n    \"mutual\",\n    \"myself\",\n    \"mystery\",\n    \"myth\",\n    \"naive\",\n    \"name\",\n    \"napkin\",\n    \"narrow\",\n    \"nasty\",\n    \"nation\",\n    \"nature\",\n    \"near\",\n    \"neck\",\n    \"need\",\n    \"negative\",\n    \"neglect\",\n    \"neither\",\n    \"nephew\",\n    \"nerve\",\n    \"nest\",\n    \"net\",\n    \"network\",\n    \"neutral\",\n    \"never\",\n    \"news\",\n    \"next\",\n    \"nice\",\n    \"night\",\n    \"noble\",\n    \"noise\",\n    \"nominee\",\n    \"noodle\",\n    \"normal\",\n    \"north\",\n    \"nose\",\n    \"notable\",\n    \"note\",\n    \"nothing\",\n    \"notice\",\n    \"novel\",\n    \"now\",\n    \"nuclear\",\n    \"number\",\n    \"nurse\",\n    \"nut\",\n    \"oak\",\n    \"obey\",\n    \"object\",\n    \"oblige\",\n    \"obscure\",\n    \"observe\",\n    \"obtain\",\n    \"obvious\",\n    \"occur\",\n    \"ocean\",\n    \"october\",\n    \"odor\",\n    \"off\",\n    \"offer\",\n    \"office\",\n    \"often\",\n    \"oil\",\n    \"okay\",\n    \"old\",\n    \"olive\",\n    \"olympic\",\n    \"omit\",\n    \"once\",\n    \"one\",\n    \"onion\",\n    \"online\",\n    \"only\",\n    \"open\",\n    \"opera\",\n    \"opinion\",\n    \"oppose\",\n    \"option\",\n    \"orange\",\n    \"orbit\",\n    \"orchard\",\n    \"order\",\n    \"ordinary\",\n    \"organ\",\n    \"orient\",\n    \"original\",\n    \"orphan\",\n    \"ostrich\",\n    \"other\",\n    \"outdoor\",\n    \"outer\",\n    \"output\",\n    \"outside\",\n    \"oval\",\n    \"oven\",\n    \"over\",\n    \"own\",\n    \"owner\",\n    \"oxygen\",\n    \"oyster\",\n    \"ozone\",\n    \"pact\",\n    \"paddle\",\n    \"page\",\n    \"pair\",\n    \"palace\",\n    \"palm\",\n    \"panda\",\n    \"panel\",\n    \"panic\",\n    \"panther\",\n    \"paper\",\n    \"parade\",\n    \"parent\",\n    \"park\",\n    \"parrot\",\n    \"party\",\n    \"pass\",\n    \"patch\",\n    \"path\",\n    \"patient\",\n    \"patrol\",\n    \"pattern\",\n    \"pause\",\n    \"pave\",\n    \"payment\",\n    \"peace\",\n    \"peanut\",\n    \"pear\",\n    \"peasant\",\n    \"pelican\",\n    \"pen\",\n    \"penalty\",\n    \"pencil\",\n    \"people\",\n    \"pepper\",\n    \"perfect\",\n    \"permit\",\n    \"person\",\n    \"pet\",\n    \"phone\",\n    \"photo\",\n    \"phrase\",\n    \"physical\",\n    \"piano\",\n    \"picnic\",\n    \"picture\",\n    \"piece\",\n    \"pig\",\n    \"pigeon\",\n    \"pill\",\n    \"pilot\",\n    \"pink\",\n    \"pioneer\",\n    \"pipe\",\n    \"pistol\",\n    \"pitch\",\n    \"pizza\",\n    \"place\",\n    \"planet\",\n    \"plastic\",\n    \"plate\",\n    \"play\",\n    \"please\",\n    \"pledge\",\n    \"pluck\",\n    \"plug\",\n    \"plunge\",\n    \"poem\",\n    \"poet\",\n    \"point\",\n    \"polar\",\n    \"pole\",\n    \"police\",\n    \"pond\",\n    \"pony\",\n    \"pool\",\n    \"popular\",\n    \"portion\",\n    \"position\",\n    \"possible\",\n    \"post\",\n    \"potato\",\n    \"pottery\",\n    \"poverty\",\n    \"powder\",\n    \"power\",\n    \"practice\",\n    \"praise\",\n    \"predict\",\n    \"prefer\",\n    \"prepare\",\n    \"present\",\n    \"pretty\",\n    \"prevent\",\n    \"price\",\n    \"pride\",\n    \"primary\",\n    \"print\",\n    \"priority\",\n    \"prison\",\n    \"private\",\n    \"prize\",\n    \"problem\",\n    \"process\",\n    \"produce\",\n    \"profit\",\n    \"program\",\n    \"project\",\n    \"promote\",\n    \"proof\",\n    \"property\",\n    \"prosper\",\n    \"protect\",\n    \"proud\",\n    \"provide\",\n    \"public\",\n    \"pudding\",\n    \"pull\",\n    \"pulp\",\n    \"pulse\",\n    \"pumpkin\",\n    \"punch\",\n    \"pupil\",\n    \"puppy\",\n    \"purchase\",\n    \"purity\",\n    \"purpose\",\n    \"purse\",\n    \"push\",\n    \"put\",\n    \"puzzle\",\n    \"pyramid\",\n    \"quality\",\n    \"quantum\",\n    \"quarter\",\n    \"question\",\n    \"quick\",\n    \"quit\",\n    \"quiz\",\n    \"quote\",\n    \"rabbit\",\n    \"raccoon\",\n    \"race\",\n    \"rack\",\n    \"radar\",\n    \"radio\",\n    \"rail\",\n    \"rain\",\n    \"raise\",\n    \"rally\",\n    \"ramp\",\n    \"ranch\",\n    \"random\",\n    \"range\",\n    \"rapid\",\n    \"rare\",\n    \"rate\",\n    \"rather\",\n    \"raven\",\n    \"raw\",\n    \"razor\",\n    \"ready\",\n    \"real\",\n    \"reason\",\n    \"rebel\",\n    \"rebuild\",\n    \"recall\",\n    \"receive\",\n    \"recipe\",\n    \"record\",\n    \"recycle\",\n    \"reduce\",\n    \"reflect\",\n    \"reform\",\n    \"refuse\",\n    \"region\",\n    \"regret\",\n    \"regular\",\n    \"reject\",\n    \"relax\",\n    \"release\",\n    \"relief\",\n    \"rely\",\n    \"remain\",\n    \"remember\",\n    \"remind\",\n    \"remove\",\n    \"render\",\n    \"renew\",\n    \"rent\",\n    \"reopen\",\n    \"repair\",\n    \"repeat\",\n    \"replace\",\n    \"report\",\n    \"require\",\n    \"rescue\",\n    \"resemble\",\n    \"resist\",\n    \"resource\",\n    \"response\",\n    \"result\",\n    \"retire\",\n    \"retreat\",\n    \"return\",\n    \"reunion\",\n    \"reveal\",\n    \"review\",\n    \"reward\",\n    \"rhythm\",\n    \"rib\",\n    \"ribbon\",\n    \"rice\",\n    \"rich\",\n    \"ride\",\n    \"ridge\",\n    \"rifle\",\n    \"right\",\n    \"rigid\",\n    \"ring\",\n    \"riot\",\n    \"ripple\",\n    \"risk\",\n    \"ritual\",\n    \"rival\",\n    \"river\",\n    \"road\",\n    \"roast\",\n    \"robot\",\n    \"robust\",\n    \"rocket\",\n    \"romance\",\n    \"roof\",\n    \"rookie\",\n    \"room\",\n    \"rose\",\n    \"rotate\",\n    \"rough\",\n    \"round\",\n    \"route\",\n    \"royal\",\n    \"rubber\",\n    \"rude\",\n    \"rug\",\n    \"rule\",\n    \"run\",\n    \"runway\",\n    \"rural\",\n    \"sad\",\n    \"saddle\",\n    \"sadness\",\n    \"safe\",\n    \"sail\",\n    \"salad\",\n    \"salmon\",\n    \"salon\",\n    \"salt\",\n    \"salute\",\n    \"same\",\n    \"sample\",\n    \"sand\",\n    \"satisfy\",\n    \"satoshi\",\n    \"sauce\",\n    \"sausage\",\n    \"save\",\n    \"say\",\n    \"scale\",\n    \"scan\",\n    \"scare\",\n    \"scatter\",\n    \"scene\",\n    \"scheme\",\n    \"school\",\n    \"science\",\n    \"scissors\",\n    \"scorpion\",\n    \"scout\",\n    \"scrap\",\n    \"screen\",\n    \"script\",\n    \"scrub\",\n    \"sea\",\n    \"search\",\n    \"season\",\n    \"seat\",\n    \"second\",\n    \"secret\",\n    \"section\",\n    \"security\",\n    \"seed\",\n    \"seek\",\n    \"segment\",\n    \"select\",\n    \"sell\",\n    \"seminar\",\n    \"senior\",\n    \"sense\",\n    \"sentence\",\n    \"series\",\n    \"service\",\n    \"session\",\n    \"settle\",\n    \"setup\",\n    \"seven\",\n    \"shadow\",\n    \"shaft\",\n    \"shallow\",\n    \"share\",\n    \"shed\",\n    \"shell\",\n    \"sheriff\",\n    \"shield\",\n    \"shift\",\n    \"shine\",\n    \"ship\",\n    \"shiver\",\n    \"shock\",\n    \"shoe\",\n    \"shoot\",\n    \"shop\",\n    \"short\",\n    \"shoulder\",\n    \"shove\",\n    \"shrimp\",\n    \"shrug\",\n    \"shuffle\",\n    \"shy\",\n    \"sibling\",\n    \"sick\",\n    \"side\",\n    \"siege\",\n    \"sight\",\n    \"sign\",\n    \"silent\",\n    \"silk\",\n    \"silly\",\n    \"silver\",\n    \"similar\",\n    \"simple\",\n    \"since\",\n    \"sing\",\n    \"siren\",\n    \"sister\",\n    \"situate\",\n    \"six\",\n    \"size\",\n    \"skate\",\n    \"sketch\",\n    \"ski\",\n    \"skill\",\n    \"skin\",\n    \"skirt\",\n    \"skull\",\n    \"slab\",\n    \"slam\",\n    \"sleep\",\n    \"slender\",\n    \"slice\",\n    \"slide\",\n    \"slight\",\n    \"slim\",\n    \"slogan\",\n    \"slot\",\n    \"slow\",\n    \"slush\",\n    \"small\",\n    \"smart\",\n    \"smile\",\n    \"smoke\",\n    \"smooth\",\n    \"snack\",\n    \"snake\",\n    \"snap\",\n    \"sniff\",\n    \"snow\",\n    \"soap\",\n    \"soccer\",\n    \"social\",\n    \"sock\",\n    \"soda\",\n    \"soft\",\n    \"solar\",\n    \"soldier\",\n    \"solid\",\n    \"solution\",\n    \"solve\",\n    \"someone\",\n    \"song\",\n    \"soon\",\n    \"sorry\",\n    \"sort\",\n    \"soul\",\n    \"sound\",\n    \"soup\",\n    \"source\",\n    \"south\",\n    \"space\",\n    \"spare\",\n    \"spatial\",\n    \"spawn\",\n    \"speak\",\n    \"special\",\n    \"speed\",\n    \"spell\",\n    \"spend\",\n    \"sphere\",\n    \"spice\",\n    \"spider\",\n    \"spike\",\n    \"spin\",\n    \"spirit\",\n    \"split\",\n    \"spoil\",\n    \"sponsor\",\n    \"spoon\",\n    \"sport\",\n    \"spot\",\n    \"spray\",\n    \"spread\",\n    \"spring\",\n    \"spy\",\n    \"square\",\n    \"squeeze\",\n    \"squirrel\",\n    \"stable\",\n    \"stadium\",\n    \"staff\",\n    \"stage\",\n    \"stairs\",\n    \"stamp\",\n    \"stand\",\n    \"start\",\n    \"state\",\n    \"stay\",\n    \"steak\",\n    \"steel\",\n    \"stem\",\n    \"step\",\n    \"stereo\",\n    \"stick\",\n    \"still\",\n    \"sting\",\n    \"stock\",\n    \"stomach\",\n    \"stone\",\n    \"stool\",\n    \"story\",\n    \"stove\",\n    \"strategy\",\n    \"street\",\n    \"strike\",\n    \"strong\",\n    \"struggle\",\n    \"student\",\n    \"stuff\",\n    \"stumble\",\n    \"style\",\n    \"subject\",\n    \"submit\",\n    \"subway\",\n    \"success\",\n    \"such\",\n    \"sudden\",\n    \"suffer\",\n    \"sugar\",\n    \"suggest\",\n    \"suit\",\n    \"summer\",\n    \"sun\",\n    \"sunny\",\n    \"sunset\",\n    \"super\",\n    \"supply\",\n    \"supreme\",\n    \"sure\",\n    \"surface\",\n    \"surge\",\n    \"surprise\",\n    \"surround\",\n    \"survey\",\n    \"suspect\",\n    \"sustain\",\n    \"swallow\",\n    \"swamp\",\n    \"swap\",\n    \"swarm\",\n    \"swear\",\n    \"sweet\",\n    \"swift\",\n    \"swim\",\n    \"swing\",\n    \"switch\",\n    \"sword\",\n    \"symbol\",\n    \"symptom\",\n    \"syrup\",\n    \"system\",\n    \"table\",\n    \"tackle\",\n    \"tag\",\n    \"tail\",\n    \"talent\",\n    \"talk\",\n    \"tank\",\n    \"tape\",\n    \"target\",\n    \"task\",\n    \"taste\",\n    \"tattoo\",\n    \"taxi\",\n    \"teach\",\n    \"team\",\n    \"tell\",\n    \"ten\",\n    \"tenant\",\n    \"tennis\",\n    \"tent\",\n    \"term\",\n    \"test\",\n    \"text\",\n    \"thank\",\n    \"that\",\n    \"theme\",\n    \"then\",\n    \"theory\",\n    \"there\",\n    \"they\",\n    \"thing\",\n    \"this\",\n    \"thought\",\n    \"three\",\n    \"thrive\",\n    \"throw\",\n    \"thumb\",\n    \"thunder\",\n    \"ticket\",\n    \"tide\",\n    \"tiger\",\n    \"tilt\",\n    \"timber\",\n    \"time\",\n    \"tiny\",\n    \"tip\",\n    \"tired\",\n    \"tissue\",\n    \"title\",\n    \"toast\",\n    \"tobacco\",\n    \"today\",\n    \"toddler\",\n    \"toe\",\n    \"together\",\n    \"toilet\",\n    \"token\",\n    \"tomato\",\n    \"tomorrow\",\n    \"tone\",\n    \"tongue\",\n    \"tonight\",\n    \"tool\",\n    \"tooth\",\n    \"top\",\n    \"topic\",\n    \"topple\",\n    \"torch\",\n    \"tornado\",\n    \"tortoise\",\n    \"toss\",\n    \"total\",\n    \"tourist\",\n    \"toward\",\n    \"tower\",\n    \"town\",\n    \"toy\",\n    \"track\",\n    \"trade\",\n    \"traffic\",\n    \"tragic\",\n    \"train\",\n    \"transfer\",\n    \"trap\",\n    \"trash\",\n    \"travel\",\n    \"tray\",\n    \"treat\",\n    \"tree\",\n    \"trend\",\n    \"trial\",\n    \"tribe\",\n    \"trick\",\n    \"trigger\",\n    \"trim\",\n    \"trip\",\n    \"trophy\",\n    \"trouble\",\n    \"truck\",\n    \"true\",\n    \"truly\",\n    \"trumpet\",\n    \"trust\",\n    \"truth\",\n    \"try\",\n    \"tube\",\n    \"tuition\",\n    \"tumble\",\n    \"tuna\",\n    \"tunnel\",\n    \"turkey\",\n    \"turn\",\n    \"turtle\",\n    \"twelve\",\n    \"twenty\",\n    \"twice\",\n    \"twin\",\n    \"twist\",\n    \"two\",\n    \"type\",\n    \"typical\",\n    \"ugly\",\n    \"umbrella\",\n    \"unable\",\n    \"unaware\",\n    \"uncle\",\n    \"uncover\",\n    \"under\",\n    \"undo\",\n    \"unfair\",\n    \"unfold\",\n    \"unhappy\",\n    \"uniform\",\n    \"unique\",\n    \"unit\",\n    \"universe\",\n    \"unknown\",\n    \"unlock\",\n    \"until\",\n    \"unusual\",\n    \"unveil\",\n    \"update\",\n    \"upgrade\",\n    \"uphold\",\n    \"upon\",\n    \"upper\",\n    \"upset\",\n    \"urban\",\n    \"urge\",\n    \"usage\",\n    \"use\",\n    \"used\",\n    \"useful\",\n    \"useless\",\n    \"usual\",\n    \"utility\",\n    \"vacant\",\n    \"vacuum\",\n    \"vague\",\n    \"valid\",\n    \"valley\",\n    \"valve\",\n    \"van\",\n    \"vanish\",\n    \"vapor\",\n    \"various\",\n    \"vast\",\n    \"vault\",\n    \"vehicle\",\n    \"velvet\",\n    \"vendor\",\n    \"venture\",\n    \"venue\",\n    \"verb\",\n    \"verify\",\n    \"version\",\n    \"very\",\n    \"vessel\",\n    \"veteran\",\n    \"viable\",\n    \"vibrant\",\n    \"vicious\",\n    \"victory\",\n    \"video\",\n    \"view\",\n    \"village\",\n    \"vintage\",\n    \"violin\",\n    \"virtual\",\n    \"virus\",\n    \"visa\",\n    \"visit\",\n    \"visual\",\n    \"vital\",\n    \"vivid\",\n    \"vocal\",\n    \"voice\",\n    \"void\",\n    \"volcano\",\n    \"volume\",\n    \"vote\",\n    \"voyage\",\n    \"wage\",\n    \"wagon\",\n    \"wait\",\n    \"walk\",\n    \"wall\",\n    \"walnut\",\n    \"want\",\n    \"warfare\",\n    \"warm\",\n    \"warrior\",\n    \"wash\",\n    \"wasp\",\n    \"waste\",\n    \"water\",\n    \"wave\",\n    \"way\",\n    \"wealth\",\n    \"weapon\",\n    \"wear\",\n    \"weasel\",\n    \"weather\",\n    \"web\",\n    \"wedding\",\n    \"weekend\",\n    \"weird\",\n    \"welcome\",\n    \"west\",\n    \"wet\",\n    \"whale\",\n    \"what\",\n    \"wheat\",\n    \"wheel\",\n    \"when\",\n    \"where\",\n    \"whip\",\n    \"whisper\",\n    \"wide\",\n    \"width\",\n    \"wife\",\n    \"wild\",\n    \"will\",\n    \"win\",\n    \"window\",\n    \"wine\",\n    \"wing\",\n    \"wink\",\n    \"winner\",\n    \"winter\",\n    \"wire\",\n    \"wisdom\",\n    \"wise\",\n    \"wish\",\n    \"witness\",\n    \"wolf\",\n    \"woman\",\n    \"wonder\",\n    \"wood\",\n    \"wool\",\n    \"word\",\n    \"work\",\n    \"world\",\n    \"worry\",\n    \"worth\",\n    \"wrap\",\n    \"wreck\",\n    \"wrestle\",\n    \"wrist\",\n    \"write\",\n    \"wrong\",\n    \"yard\",\n    \"year\",\n    \"yellow\",\n    \"you\",\n    \"young\",\n    \"youth\",\n    \"zebra\",\n    \"zero\",\n    \"zone\",\n    \"zoo\"\n];\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (english); //# sourceMappingURL=english.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/mnemonic/wordlists/english.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/multisig.js":
/*!***************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/multisig.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addressFromMultisigPreImg: () => (/* binding */ addressFromMultisigPreImg),\n/* harmony export */   addressFromMultisigPreImgAddrs: () => (/* binding */ addressFromMultisigPreImgAddrs),\n/* harmony export */   multisigAddress: () => (/* binding */ multisigAddress),\n/* harmony export */   pksFromAddresses: () => (/* binding */ pksFromAddresses),\n/* harmony export */   verifyMultisig: () => (/* binding */ verifyMultisig)\n/* harmony export */ });\n/* harmony import */ var _nacl_naclWrappers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./nacl/naclWrappers.js */ \"(ssr)/./node_modules/algosdk/dist/esm/nacl/naclWrappers.js\");\n/* harmony import */ var _encoding_address_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./encoding/address.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/address.js\");\n/* harmony import */ var _utils_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/utils.js */ \"(ssr)/./node_modules/algosdk/dist/esm/utils/utils.js\");\n\n\n\n// Convert \"MultisigAddr\" UTF-8 to byte array\nconst MULTISIG_PREIMG2ADDR_PREFIX = new Uint8Array([\n    77,\n    117,\n    108,\n    116,\n    105,\n    115,\n    105,\n    103,\n    65,\n    100,\n    100,\n    114\n]);\nconst INVALID_MSIG_VERSION_ERROR_MSG = \"invalid multisig version\";\nconst INVALID_MSIG_THRESHOLD_ERROR_MSG = \"bad multisig threshold\";\nconst INVALID_MSIG_PK_ERROR_MSG = \"bad multisig public key - wrong length\";\nconst UNEXPECTED_PK_LEN_ERROR_MSG = \"nacl public key length is not 32 bytes\";\nfunction pksFromAddresses(addrs) {\n    return addrs.map((addr)=>{\n        if (typeof addr === \"string\") {\n            return _encoding_address_js__WEBPACK_IMPORTED_MODULE_1__.Address.fromString(addr).publicKey;\n        }\n        return addr.publicKey;\n    });\n}\n/**\n * fromMultisigPreImg takes multisig parameters and returns a 32 byte typed array public key,\n * representing an address that identifies the \"exact group, version, and public keys\" that are required for signing.\n * Hash(\"MultisigAddr\" || version uint8 || threshold uint8 || PK1 || PK2 || ...)\n * Encoding this output yields a human readable address.\n * @param version - multisig version\n * @param threshold - multisig threshold\n * @param pks - array of typed array public keys\n */ function addressFromMultisigPreImg({ version, threshold, pks }) {\n    if (version !== 1 || version > 255 || version < 0) {\n        // ^ a tad redundant, but in case in the future version != 1, still check for uint8\n        throw new Error(INVALID_MSIG_VERSION_ERROR_MSG);\n    }\n    if (threshold === 0 || pks.length === 0 || threshold > pks.length || threshold > 255) {\n        throw new Error(INVALID_MSIG_THRESHOLD_ERROR_MSG);\n    }\n    const pkLen = _encoding_address_js__WEBPACK_IMPORTED_MODULE_1__.ALGORAND_ADDRESS_BYTE_LENGTH - _encoding_address_js__WEBPACK_IMPORTED_MODULE_1__.ALGORAND_CHECKSUM_BYTE_LENGTH;\n    if (pkLen !== _nacl_naclWrappers_js__WEBPACK_IMPORTED_MODULE_0__.PUBLIC_KEY_LENGTH) {\n        throw new Error(UNEXPECTED_PK_LEN_ERROR_MSG);\n    }\n    const merged = new Uint8Array(MULTISIG_PREIMG2ADDR_PREFIX.length + 2 + pkLen * pks.length);\n    merged.set(MULTISIG_PREIMG2ADDR_PREFIX, 0);\n    merged.set([\n        version\n    ], MULTISIG_PREIMG2ADDR_PREFIX.length);\n    merged.set([\n        threshold\n    ], MULTISIG_PREIMG2ADDR_PREFIX.length + 1);\n    for(let i = 0; i < pks.length; i++){\n        if (pks[i].length !== pkLen) {\n            throw new Error(INVALID_MSIG_PK_ERROR_MSG);\n        }\n        merged.set(pks[i], MULTISIG_PREIMG2ADDR_PREFIX.length + 2 + i * pkLen);\n    }\n    return new _encoding_address_js__WEBPACK_IMPORTED_MODULE_1__.Address(Uint8Array.from(_nacl_naclWrappers_js__WEBPACK_IMPORTED_MODULE_0__.genericHash(merged)));\n}\n/**\n * fromMultisigPreImgAddrs takes multisig parameters and returns a human readable Algorand address.\n * This is equivalent to fromMultisigPreImg, but interfaces with encoded addresses.\n * @param version - multisig version\n * @param threshold - multisig threshold\n * @param addrs - array of encoded addresses\n */ function addressFromMultisigPreImgAddrs({ version, threshold, addrs }) {\n    const pks = pksFromAddresses(addrs);\n    return addressFromMultisigPreImg({\n        version,\n        threshold,\n        pks\n    });\n}\nfunction verifyMultisig(toBeVerified, msig, publicKey) {\n    const version = msig.v;\n    const threshold = msig.thr;\n    const subsigs = msig.subsig;\n    const pks = subsigs.map((subsig)=>subsig.pk);\n    if (msig.subsig.length < threshold) {\n        return false;\n    }\n    let pk;\n    try {\n        pk = addressFromMultisigPreImg({\n            version,\n            threshold,\n            pks\n        }).publicKey;\n    } catch (e) {\n        return false;\n    }\n    if (!_utils_utils_js__WEBPACK_IMPORTED_MODULE_2__.arrayEqual(pk, publicKey)) {\n        return false;\n    }\n    let counter = 0;\n    for (const subsig of subsigs){\n        if (subsig.s !== undefined) {\n            counter += 1;\n        }\n    }\n    if (counter < threshold) {\n        return false;\n    }\n    let verifiedCounter = 0;\n    for (const subsig of subsigs){\n        if (subsig.s !== undefined) {\n            if (_nacl_naclWrappers_js__WEBPACK_IMPORTED_MODULE_0__.verify(toBeVerified, subsig.s, subsig.pk)) {\n                verifiedCounter += 1;\n            }\n        }\n    }\n    if (verifiedCounter < threshold) {\n        return false;\n    }\n    return true;\n}\n/**\n * multisigAddress takes multisig metadata (preimage) and returns the corresponding human readable Algorand address.\n * @param version - multisig version\n * @param threshold - multisig threshold\n * @param addrs - list of Algorand addresses\n */ function multisigAddress({ version, threshold, addrs }) {\n    return addressFromMultisigPreImgAddrs({\n        version,\n        threshold,\n        addrs\n    });\n} //# sourceMappingURL=multisig.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/multisig.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/multisigSigning.js":
/*!**********************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/multisigSigning.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MULTISIG_MERGE_LESSTHANTWO_ERROR_MSG: () => (/* binding */ MULTISIG_MERGE_LESSTHANTWO_ERROR_MSG),\n/* harmony export */   MULTISIG_MERGE_MISMATCH_AUTH_ADDR_MSG: () => (/* binding */ MULTISIG_MERGE_MISMATCH_AUTH_ADDR_MSG),\n/* harmony export */   MULTISIG_MERGE_MISMATCH_ERROR_MSG: () => (/* binding */ MULTISIG_MERGE_MISMATCH_ERROR_MSG),\n/* harmony export */   MULTISIG_MERGE_SIG_MISMATCH_ERROR_MSG: () => (/* binding */ MULTISIG_MERGE_SIG_MISMATCH_ERROR_MSG),\n/* harmony export */   MULTISIG_MERGE_WRONG_PREIMAGE_ERROR_MSG: () => (/* binding */ MULTISIG_MERGE_WRONG_PREIMAGE_ERROR_MSG),\n/* harmony export */   MULTISIG_NO_MUTATE_ERROR_MSG: () => (/* binding */ MULTISIG_NO_MUTATE_ERROR_MSG),\n/* harmony export */   MULTISIG_SIGNATURE_LENGTH_ERROR_MSG: () => (/* binding */ MULTISIG_SIGNATURE_LENGTH_ERROR_MSG),\n/* harmony export */   MULTISIG_USE_PARTIAL_SIGN_ERROR_MSG: () => (/* binding */ MULTISIG_USE_PARTIAL_SIGN_ERROR_MSG),\n/* harmony export */   appendSignMultisigTransaction: () => (/* binding */ appendSignMultisigTransaction),\n/* harmony export */   appendSignRawMultisigSignature: () => (/* binding */ appendSignRawMultisigSignature),\n/* harmony export */   createMultisigTransaction: () => (/* binding */ createMultisigTransaction),\n/* harmony export */   mergeMultisigTransactions: () => (/* binding */ mergeMultisigTransactions),\n/* harmony export */   signMultisigTransaction: () => (/* binding */ signMultisigTransaction)\n/* harmony export */ });\n/* harmony import */ var _nacl_naclWrappers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./nacl/naclWrappers.js */ \"(ssr)/./node_modules/algosdk/dist/esm/nacl/naclWrappers.js\");\n/* harmony import */ var _encoding_address_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./encoding/address.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/address.js\");\n/* harmony import */ var _encoding_encoding_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./encoding/encoding.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/encoding.js\");\n/* harmony import */ var _utils_utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/utils.js */ \"(ssr)/./node_modules/algosdk/dist/esm/utils/utils.js\");\n/* harmony import */ var _signedTransaction_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./signedTransaction.js */ \"(ssr)/./node_modules/algosdk/dist/esm/signedTransaction.js\");\n/* harmony import */ var _multisig_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./multisig.js */ \"(ssr)/./node_modules/algosdk/dist/esm/multisig.js\");\n\n\n\n\n\n\nconst MULTISIG_MERGE_LESSTHANTWO_ERROR_MSG = \"Not enough multisig transactions to merge. Need at least two\";\nconst MULTISIG_MERGE_MISMATCH_ERROR_MSG = \"Cannot merge txs. txIDs differ\";\nconst MULTISIG_MERGE_MISMATCH_AUTH_ADDR_MSG = \"Cannot merge txs. Auth addrs differ\";\nconst MULTISIG_MERGE_WRONG_PREIMAGE_ERROR_MSG = \"Cannot merge txs. Multisig preimages differ\";\nconst MULTISIG_MERGE_SIG_MISMATCH_ERROR_MSG = \"Cannot merge txs. subsigs are mismatched.\";\nconst MULTISIG_NO_MUTATE_ERROR_MSG = \"Cannot mutate a multisig field as it would invalidate all existing signatures.\";\nconst MULTISIG_USE_PARTIAL_SIGN_ERROR_MSG = \"Cannot sign a multisig transaction using `signTxn`. Use `partialSignTxn` instead.\";\nconst MULTISIG_SIGNATURE_LENGTH_ERROR_MSG = \"Cannot add multisig signature. Signature is not of the correct length.\";\nconst MULTISIG_KEY_NOT_EXIST_ERROR_MSG = \"Key does not exist\";\n/**\n * createMultisigTransaction creates a raw, unsigned multisig transaction blob.\n * @param txn - the actual transaction.\n * @param version - multisig version\n * @param threshold - multisig threshold\n * @param pks - ordered list of public keys in this multisig\n * @returns encoded multisig blob\n */ function createMultisigTransaction(txn, { version, threshold, addrs }) {\n    // construct the appendable multisigned transaction format\n    const pks = (0,_multisig_js__WEBPACK_IMPORTED_MODULE_5__.pksFromAddresses)(addrs);\n    const subsigs = pks.map((pk)=>({\n            pk\n        }));\n    const msig = {\n        v: version,\n        thr: threshold,\n        subsig: subsigs\n    };\n    // if the address of this multisig is different from the transaction sender,\n    // we need to add the auth-addr field\n    const msigAddr = (0,_multisig_js__WEBPACK_IMPORTED_MODULE_5__.addressFromMultisigPreImg)({\n        version,\n        threshold,\n        pks\n    });\n    let sgnr;\n    if (!txn.sender.equals(msigAddr)) {\n        sgnr = msigAddr;\n    }\n    const signedTxn = new _signedTransaction_js__WEBPACK_IMPORTED_MODULE_4__.SignedTransaction({\n        txn,\n        msig,\n        sgnr\n    });\n    return _encoding_encoding_js__WEBPACK_IMPORTED_MODULE_2__.encodeMsgpack(signedTxn);\n}\n/**\n * createMultisigTransactionWithSignature creates a multisig transaction blob with an included signature.\n * @param txn - the actual transaction to sign.\n * @param rawSig - a Uint8Array raw signature of that transaction\n * @param myPk - a public key that corresponds with rawSig\n * @param version - multisig version\n * @param threshold - multisig threshold\n * @param pks - ordered list of public keys in this multisig\n * @returns encoded multisig blob\n */ function createMultisigTransactionWithSignature(txn, { rawSig, myPk }, { version, threshold, pks }) {\n    // Create an empty encoded multisig transaction\n    const encodedMsig = createMultisigTransaction(txn, {\n        version,\n        threshold,\n        addrs: pks.map((pk)=>new _encoding_address_js__WEBPACK_IMPORTED_MODULE_1__.Address(pk))\n    });\n    // note: this is not signed yet, but will be shortly\n    const signedTxn = _encoding_encoding_js__WEBPACK_IMPORTED_MODULE_2__.decodeMsgpack(encodedMsig, _signedTransaction_js__WEBPACK_IMPORTED_MODULE_4__.SignedTransaction);\n    let keyExist = false;\n    // append the multisig signature to the corresponding public key in the multisig blob\n    signedTxn.msig.subsig.forEach((subsig, i)=>{\n        if (_nacl_naclWrappers_js__WEBPACK_IMPORTED_MODULE_0__.bytesEqual(subsig.pk, myPk)) {\n            keyExist = true;\n            signedTxn.msig.subsig[i].s = rawSig;\n        }\n    });\n    if (!keyExist) {\n        throw new Error(MULTISIG_KEY_NOT_EXIST_ERROR_MSG);\n    }\n    return _encoding_encoding_js__WEBPACK_IMPORTED_MODULE_2__.encodeMsgpack(signedTxn);\n}\n/**\n * partialSignTxn partially signs this transaction and returns a partially-signed multisig transaction,\n * encoded with msgpack as a typed array.\n * @param transaction - The transaction to sign\n * @param version - multisig version\n * @param threshold - multisig threshold\n * @param pks - multisig public key list, order is important.\n * @param sk - an Algorand secret key to sign with.\n * @returns an encoded, partially signed multisig transaction.\n */ function partialSignTxn(transaction, { version, threshold, pks }, sk) {\n    // get signature verifier\n    const myPk = _nacl_naclWrappers_js__WEBPACK_IMPORTED_MODULE_0__.keyPairFromSecretKey(sk).publicKey;\n    return createMultisigTransactionWithSignature(transaction, {\n        rawSig: transaction.rawSignTxn(sk),\n        myPk\n    }, {\n        version,\n        threshold,\n        pks\n    });\n}\n/**\n * partialSignWithMultisigSignature partially signs this transaction with an external raw multisig signature and returns\n * a partially-signed multisig transaction, encoded with msgpack as a typed array.\n * @param transaction - The transaction to sign\n * @param metadata - multisig metadata\n * @param signerAddr - address of the signer\n * @param signature - raw multisig signature\n * @returns an encoded, partially signed multisig transaction.\n */ function partialSignWithMultisigSignature(transaction, metadata, signerAddr, signature) {\n    if (!_nacl_naclWrappers_js__WEBPACK_IMPORTED_MODULE_0__.isValidSignatureLength(signature.length)) {\n        throw new Error(MULTISIG_SIGNATURE_LENGTH_ERROR_MSG);\n    }\n    const signerAddressObj = typeof signerAddr === \"string\" ? _encoding_address_js__WEBPACK_IMPORTED_MODULE_1__.Address.fromString(signerAddr) : signerAddr;\n    return createMultisigTransactionWithSignature(transaction, {\n        rawSig: signature,\n        myPk: signerAddressObj.publicKey\n    }, metadata);\n}\n/**\n * mergeMultisigTransactions takes a list of multisig transaction blobs, and merges them.\n * @param multisigTxnBlobs - a list of blobs representing encoded multisig txns\n * @returns typed array msg-pack encoded multisig txn\n */ function mergeMultisigTransactions(multisigTxnBlobs) {\n    if (multisigTxnBlobs.length < 2) {\n        throw new Error(MULTISIG_MERGE_LESSTHANTWO_ERROR_MSG);\n    }\n    const refSigTx = _encoding_encoding_js__WEBPACK_IMPORTED_MODULE_2__.decodeMsgpack(multisigTxnBlobs[0], _signedTransaction_js__WEBPACK_IMPORTED_MODULE_4__.SignedTransaction);\n    if (!refSigTx.msig) {\n        throw new Error(\"Invalid multisig transaction, multisig structure missing at index 0\");\n    }\n    const refTxID = refSigTx.txn.txID();\n    const refAuthAddr = refSigTx.sgnr ? refSigTx.sgnr.toString() : undefined;\n    const refPreImage = {\n        version: refSigTx.msig.v,\n        threshold: refSigTx.msig.thr,\n        pks: refSigTx.msig.subsig.map((subsig)=>subsig.pk)\n    };\n    const refMsigAddr = (0,_multisig_js__WEBPACK_IMPORTED_MODULE_5__.addressFromMultisigPreImg)(refPreImage);\n    const newSubsigs = refSigTx.msig.subsig.map((sig)=>({\n            ...sig\n        }));\n    for(let i = 1; i < multisigTxnBlobs.length; i++){\n        const unisig = _encoding_encoding_js__WEBPACK_IMPORTED_MODULE_2__.decodeMsgpack(multisigTxnBlobs[i], _signedTransaction_js__WEBPACK_IMPORTED_MODULE_4__.SignedTransaction);\n        if (!unisig.msig) {\n            throw new Error(`Invalid multisig transaction, multisig structure missing at index ${i}`);\n        }\n        if (unisig.txn.txID() !== refTxID) {\n            throw new Error(MULTISIG_MERGE_MISMATCH_ERROR_MSG);\n        }\n        const authAddr = unisig.sgnr ? unisig.sgnr.toString() : undefined;\n        if (refAuthAddr !== authAddr) {\n            throw new Error(MULTISIG_MERGE_MISMATCH_AUTH_ADDR_MSG);\n        }\n        // check multisig has same preimage as reference\n        if (unisig.msig.subsig.length !== refSigTx.msig.subsig.length) {\n            throw new Error(MULTISIG_MERGE_WRONG_PREIMAGE_ERROR_MSG);\n        }\n        const preimg = {\n            version: unisig.msig.v,\n            threshold: unisig.msig.thr,\n            pks: unisig.msig.subsig.map((subsig)=>subsig.pk)\n        };\n        const msgigAddr = (0,_multisig_js__WEBPACK_IMPORTED_MODULE_5__.addressFromMultisigPreImg)(preimg);\n        if (!refMsigAddr.equals(msgigAddr)) {\n            throw new Error(MULTISIG_MERGE_WRONG_PREIMAGE_ERROR_MSG);\n        }\n        // now, we can merge\n        unisig.msig.subsig.forEach((uniSubsig, index)=>{\n            if (!uniSubsig.s) return;\n            const current = newSubsigs[index];\n            if (current.s && !_utils_utils_js__WEBPACK_IMPORTED_MODULE_3__.arrayEqual(uniSubsig.s, current.s)) {\n                // mismatch\n                throw new Error(MULTISIG_MERGE_SIG_MISMATCH_ERROR_MSG);\n            }\n            current.s = uniSubsig.s;\n        });\n    }\n    const msig = {\n        v: refSigTx.msig.v,\n        thr: refSigTx.msig.thr,\n        subsig: newSubsigs\n    };\n    const refSgnr = typeof refAuthAddr !== \"undefined\" ? refSigTx.sgnr : undefined;\n    const signedTxn = new _signedTransaction_js__WEBPACK_IMPORTED_MODULE_4__.SignedTransaction({\n        msig,\n        txn: refSigTx.txn,\n        sgnr: refSgnr\n    });\n    return _encoding_encoding_js__WEBPACK_IMPORTED_MODULE_2__.encodeMsgpack(signedTxn);\n}\n/**\n * signMultisigTransaction takes a raw transaction (see signTransaction), a multisig preimage, a secret key, and returns\n * a multisig transaction, which is a blob representing a transaction and multisignature account preimage. The returned\n * multisig txn can accumulate additional signatures through mergeMultisigTransactions or appendSignMultisigTransaction.\n * @param txn - object with either payment or key registration fields\n * @param version - multisig version\n * @param threshold - multisig threshold\n * @param addrs - a list of Algorand addresses representing possible signers for this multisig. Order is important.\n * @param sk - Algorand secret key. The corresponding pk should be in the pre image.\n * @returns object containing txID, and blob of partially signed multisig transaction (with multisig preimage information)\n * If the final calculated fee is lower than the protocol minimum fee, the fee will be increased to match the minimum.\n */ function signMultisigTransaction(txn, { version, threshold, addrs }, sk) {\n    // build pks for partialSign\n    const pks = (0,_multisig_js__WEBPACK_IMPORTED_MODULE_5__.pksFromAddresses)(addrs);\n    const blob = partialSignTxn(txn, {\n        version,\n        threshold,\n        pks\n    }, sk);\n    return {\n        txID: txn.txID(),\n        blob\n    };\n}\n/**\n * appendSignMultisigTransaction takes a multisig transaction blob, and appends our signature to it.\n * While we could derive public key preimagery from the partially-signed multisig transaction,\n * we ask the caller to pass it back in, to ensure they know what they are signing.\n * @param multisigTxnBlob - an encoded multisig txn. Supports non-payment txn types.\n * @param version - multisig version\n * @param threshold - multisig threshold\n * @param addrs - a list of Algorand addresses representing possible signers for this multisig. Order is important.\n * @param sk - Algorand secret key\n * @returns object containing txID, and blob representing encoded multisig txn\n */ function appendSignMultisigTransaction(multisigTxnBlob, { version, threshold, addrs }, sk) {\n    const pks = (0,_multisig_js__WEBPACK_IMPORTED_MODULE_5__.pksFromAddresses)(addrs);\n    // obtain underlying txn, sign it, and merge it\n    const multisigTxObj = _encoding_encoding_js__WEBPACK_IMPORTED_MODULE_2__.decodeMsgpack(multisigTxnBlob, _signedTransaction_js__WEBPACK_IMPORTED_MODULE_4__.SignedTransaction);\n    const partialSignedBlob = partialSignTxn(multisigTxObj.txn, {\n        version,\n        threshold,\n        pks\n    }, sk);\n    return {\n        txID: multisigTxObj.txn.txID(),\n        blob: mergeMultisigTransactions([\n            multisigTxnBlob,\n            partialSignedBlob\n        ])\n    };\n}\n/**\n * appendMultisigTransactionSignature takes a multisig transaction blob, and appends a given raw signature to it.\n * This makes it possible to compile a multisig signature using only raw signatures from external methods.\n * @param multisigTxnBlob - an encoded multisig txn. Supports non-payment txn types.\n * @param version - multisig version\n * @param threshold - multisig threshold\n * @param addrs - a list of Algorand addresses representing possible signers for this multisig. Order is important.\n * @param signerAddr - address of the signer\n * @param signature - raw multisig signature\n * @returns object containing txID, and blob representing encoded multisig txn\n */ function appendSignRawMultisigSignature(multisigTxnBlob, { version, threshold, addrs }, signerAddr, signature) {\n    const pks = (0,_multisig_js__WEBPACK_IMPORTED_MODULE_5__.pksFromAddresses)(addrs);\n    // obtain underlying txn, sign it, and merge it\n    const multisigTxObj = _encoding_encoding_js__WEBPACK_IMPORTED_MODULE_2__.decodeMsgpack(multisigTxnBlob, _signedTransaction_js__WEBPACK_IMPORTED_MODULE_4__.SignedTransaction);\n    const partialSignedBlob = partialSignWithMultisigSignature(multisigTxObj.txn, {\n        version,\n        threshold,\n        pks\n    }, signerAddr, signature);\n    return {\n        txID: multisigTxObj.txn.txID(),\n        blob: mergeMultisigTransactions([\n            multisigTxnBlob,\n            partialSignedBlob\n        ])\n    };\n} //# sourceMappingURL=multisigSigning.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/multisigSigning.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/nacl/naclWrappers.js":
/*!************************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/nacl/naclWrappers.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HASH_BYTES_LENGTH: () => (/* binding */ HASH_BYTES_LENGTH),\n/* harmony export */   PUBLIC_KEY_LENGTH: () => (/* binding */ PUBLIC_KEY_LENGTH),\n/* harmony export */   SECRET_KEY_LENGTH: () => (/* binding */ SECRET_KEY_LENGTH),\n/* harmony export */   SEED_BTYES_LENGTH: () => (/* binding */ SEED_BTYES_LENGTH),\n/* harmony export */   bytesEqual: () => (/* binding */ bytesEqual),\n/* harmony export */   genericHash: () => (/* binding */ genericHash),\n/* harmony export */   isValidSignatureLength: () => (/* binding */ isValidSignatureLength),\n/* harmony export */   keyPair: () => (/* binding */ keyPair),\n/* harmony export */   keyPairFromSecretKey: () => (/* binding */ keyPairFromSecretKey),\n/* harmony export */   keyPairFromSeed: () => (/* binding */ keyPairFromSeed),\n/* harmony export */   randomBytes: () => (/* binding */ randomBytes),\n/* harmony export */   sign: () => (/* binding */ sign),\n/* harmony export */   verify: () => (/* binding */ verify)\n/* harmony export */ });\n/* harmony import */ var tweetnacl__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tweetnacl */ \"(ssr)/./node_modules/tweetnacl/nacl-fast.js\");\n/* harmony import */ var js_sha512__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! js-sha512 */ \"(ssr)/./node_modules/js-sha512/src/sha512.js\");\n/* harmony import */ var _utils_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/utils.js */ \"(ssr)/./node_modules/algosdk/dist/esm/utils/utils.js\");\n\n\n\nfunction genericHash(arr) {\n    return js_sha512__WEBPACK_IMPORTED_MODULE_1__.sha512_256.array(arr);\n}\nfunction randomBytes(length) {\n    if ((0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_2__.isReactNative)()) {\n        console.warn(`It looks like you're running in react-native. In order to perform common crypto operations you will need to polyfill common operations such as crypto.getRandomValues`);\n    }\n    return tweetnacl__WEBPACK_IMPORTED_MODULE_0__.randomBytes(length);\n}\nfunction keyPairFromSeed(seed) {\n    return tweetnacl__WEBPACK_IMPORTED_MODULE_0__.sign.keyPair.fromSeed(seed);\n}\nfunction keyPair() {\n    const seed = randomBytes(tweetnacl__WEBPACK_IMPORTED_MODULE_0__.box.secretKeyLength);\n    return keyPairFromSeed(seed);\n}\nfunction isValidSignatureLength(len) {\n    return len === tweetnacl__WEBPACK_IMPORTED_MODULE_0__.sign.signatureLength;\n}\nfunction keyPairFromSecretKey(sk) {\n    return tweetnacl__WEBPACK_IMPORTED_MODULE_0__.sign.keyPair.fromSecretKey(sk);\n}\nfunction sign(msg, secretKey) {\n    return tweetnacl__WEBPACK_IMPORTED_MODULE_0__.sign.detached(msg, secretKey);\n}\nfunction bytesEqual(a, b) {\n    return tweetnacl__WEBPACK_IMPORTED_MODULE_0__.verify(a, b);\n}\nfunction verify(message, signature, verifyKey) {\n    return tweetnacl__WEBPACK_IMPORTED_MODULE_0__.sign.detached.verify(message, signature, verifyKey);\n}\n// constants\nconst PUBLIC_KEY_LENGTH = tweetnacl__WEBPACK_IMPORTED_MODULE_0__.sign.publicKeyLength;\nconst SECRET_KEY_LENGTH = tweetnacl__WEBPACK_IMPORTED_MODULE_0__.sign.secretKeyLength;\nconst HASH_BYTES_LENGTH = 32;\nconst SEED_BTYES_LENGTH = 32; //# sourceMappingURL=naclWrappers.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9uYWNsL25hY2xXcmFwcGVycy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQTZCO0FBQ0U7QUFDbUI7QUFDM0MsU0FBU0csWUFBWUMsR0FBRztJQUMzQixPQUFPSCxpREFBaUIsQ0FBQ0ssS0FBSyxDQUFDRjtBQUNuQztBQUNPLFNBQVNHLFlBQVlDLE1BQU07SUFDOUIsSUFBSU4sOERBQWFBLElBQUk7UUFDakJPLFFBQVFDLElBQUksQ0FBQyxDQUFDLHFLQUFxSyxDQUFDO0lBQ3hMO0lBQ0EsT0FBT1Ysa0RBQWdCLENBQUNRO0FBQzVCO0FBQ08sU0FBU0csZ0JBQWdCQyxJQUFJO0lBQ2hDLE9BQU9aLDJDQUFTLENBQUNjLE9BQU8sQ0FBQ0MsUUFBUSxDQUFDSDtBQUN0QztBQUNPLFNBQVNFO0lBQ1osTUFBTUYsT0FBT0wsWUFBWVAsMENBQVEsQ0FBQ2lCLGVBQWU7SUFDakQsT0FBT04sZ0JBQWdCQztBQUMzQjtBQUNPLFNBQVNNLHVCQUF1QkMsR0FBRztJQUN0QyxPQUFPQSxRQUFRbkIsMkNBQVMsQ0FBQ29CLGVBQWU7QUFDNUM7QUFDTyxTQUFTQyxxQkFBcUJDLEVBQUU7SUFDbkMsT0FBT3RCLDJDQUFTLENBQUNjLE9BQU8sQ0FBQ1MsYUFBYSxDQUFDRDtBQUMzQztBQUNPLFNBQVNULEtBQUtXLEdBQUcsRUFBRUMsU0FBUztJQUMvQixPQUFPekIsMkNBQVMsQ0FBQzBCLFFBQVEsQ0FBQ0YsS0FBS0M7QUFDbkM7QUFDTyxTQUFTRSxXQUFXQyxDQUFDLEVBQUVDLENBQUM7SUFDM0IsT0FBTzdCLDZDQUFXLENBQUM0QixHQUFHQztBQUMxQjtBQUNPLFNBQVNDLE9BQU9DLE9BQU8sRUFBRUMsU0FBUyxFQUFFQyxTQUFTO0lBQ2hELE9BQU9qQywyQ0FBUyxDQUFDMEIsUUFBUSxDQUFDSSxNQUFNLENBQUNDLFNBQVNDLFdBQVdDO0FBQ3pEO0FBQ0EsWUFBWTtBQUNMLE1BQU1DLG9CQUFvQmxDLDJDQUFTLENBQUNtQyxlQUFlLENBQUM7QUFDcEQsTUFBTUMsb0JBQW9CcEMsMkNBQVMsQ0FBQ2lCLGVBQWUsQ0FBQztBQUNwRCxNQUFNb0Isb0JBQW9CLEdBQUc7QUFDN0IsTUFBTUMsb0JBQW9CLEdBQUcsQ0FDcEMsd0NBQXdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWxnb3JhbmQtY3Jvd2RmdW5kaW5nLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vbmFjbC9uYWNsV3JhcHBlcnMuanM/ZGQxZCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbmFjbCBmcm9tICd0d2VldG5hY2wnO1xuaW1wb3J0IHNoYTUxMiBmcm9tICdqcy1zaGE1MTInO1xuaW1wb3J0IHsgaXNSZWFjdE5hdGl2ZSB9IGZyb20gJy4uL3V0aWxzL3V0aWxzLmpzJztcbmV4cG9ydCBmdW5jdGlvbiBnZW5lcmljSGFzaChhcnIpIHtcbiAgICByZXR1cm4gc2hhNTEyLnNoYTUxMl8yNTYuYXJyYXkoYXJyKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiByYW5kb21CeXRlcyhsZW5ndGgpIHtcbiAgICBpZiAoaXNSZWFjdE5hdGl2ZSgpKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihgSXQgbG9va3MgbGlrZSB5b3UncmUgcnVubmluZyBpbiByZWFjdC1uYXRpdmUuIEluIG9yZGVyIHRvIHBlcmZvcm0gY29tbW9uIGNyeXB0byBvcGVyYXRpb25zIHlvdSB3aWxsIG5lZWQgdG8gcG9seWZpbGwgY29tbW9uIG9wZXJhdGlvbnMgc3VjaCBhcyBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzYCk7XG4gICAgfVxuICAgIHJldHVybiBuYWNsLnJhbmRvbUJ5dGVzKGxlbmd0aCk7XG59XG5leHBvcnQgZnVuY3Rpb24ga2V5UGFpckZyb21TZWVkKHNlZWQpIHtcbiAgICByZXR1cm4gbmFjbC5zaWduLmtleVBhaXIuZnJvbVNlZWQoc2VlZCk7XG59XG5leHBvcnQgZnVuY3Rpb24ga2V5UGFpcigpIHtcbiAgICBjb25zdCBzZWVkID0gcmFuZG9tQnl0ZXMobmFjbC5ib3guc2VjcmV0S2V5TGVuZ3RoKTtcbiAgICByZXR1cm4ga2V5UGFpckZyb21TZWVkKHNlZWQpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzVmFsaWRTaWduYXR1cmVMZW5ndGgobGVuKSB7XG4gICAgcmV0dXJuIGxlbiA9PT0gbmFjbC5zaWduLnNpZ25hdHVyZUxlbmd0aDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBrZXlQYWlyRnJvbVNlY3JldEtleShzaykge1xuICAgIHJldHVybiBuYWNsLnNpZ24ua2V5UGFpci5mcm9tU2VjcmV0S2V5KHNrKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBzaWduKG1zZywgc2VjcmV0S2V5KSB7XG4gICAgcmV0dXJuIG5hY2wuc2lnbi5kZXRhY2hlZChtc2csIHNlY3JldEtleSk7XG59XG5leHBvcnQgZnVuY3Rpb24gYnl0ZXNFcXVhbChhLCBiKSB7XG4gICAgcmV0dXJuIG5hY2wudmVyaWZ5KGEsIGIpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHZlcmlmeShtZXNzYWdlLCBzaWduYXR1cmUsIHZlcmlmeUtleSkge1xuICAgIHJldHVybiBuYWNsLnNpZ24uZGV0YWNoZWQudmVyaWZ5KG1lc3NhZ2UsIHNpZ25hdHVyZSwgdmVyaWZ5S2V5KTtcbn1cbi8vIGNvbnN0YW50c1xuZXhwb3J0IGNvbnN0IFBVQkxJQ19LRVlfTEVOR1RIID0gbmFjbC5zaWduLnB1YmxpY0tleUxlbmd0aDtcbmV4cG9ydCBjb25zdCBTRUNSRVRfS0VZX0xFTkdUSCA9IG5hY2wuc2lnbi5zZWNyZXRLZXlMZW5ndGg7XG5leHBvcnQgY29uc3QgSEFTSF9CWVRFU19MRU5HVEggPSAzMjtcbmV4cG9ydCBjb25zdCBTRUVEX0JUWUVTX0xFTkdUSCA9IDMyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bmFjbFdyYXBwZXJzLmpzLm1hcCJdLCJuYW1lcyI6WyJuYWNsIiwic2hhNTEyIiwiaXNSZWFjdE5hdGl2ZSIsImdlbmVyaWNIYXNoIiwiYXJyIiwic2hhNTEyXzI1NiIsImFycmF5IiwicmFuZG9tQnl0ZXMiLCJsZW5ndGgiLCJjb25zb2xlIiwid2FybiIsImtleVBhaXJGcm9tU2VlZCIsInNlZWQiLCJzaWduIiwia2V5UGFpciIsImZyb21TZWVkIiwiYm94Iiwic2VjcmV0S2V5TGVuZ3RoIiwiaXNWYWxpZFNpZ25hdHVyZUxlbmd0aCIsImxlbiIsInNpZ25hdHVyZUxlbmd0aCIsImtleVBhaXJGcm9tU2VjcmV0S2V5Iiwic2siLCJmcm9tU2VjcmV0S2V5IiwibXNnIiwic2VjcmV0S2V5IiwiZGV0YWNoZWQiLCJieXRlc0VxdWFsIiwiYSIsImIiLCJ2ZXJpZnkiLCJtZXNzYWdlIiwic2lnbmF0dXJlIiwidmVyaWZ5S2V5IiwiUFVCTElDX0tFWV9MRU5HVEgiLCJwdWJsaWNLZXlMZW5ndGgiLCJTRUNSRVRfS0VZX0xFTkdUSCIsIkhBU0hfQllURVNfTEVOR1RIIiwiU0VFRF9CVFlFU19MRU5HVEgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/nacl/naclWrappers.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/signedTransaction.js":
/*!************************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/signedTransaction.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SignedTransaction: () => (/* binding */ SignedTransaction),\n/* harmony export */   decodeSignedTransaction: () => (/* binding */ decodeSignedTransaction),\n/* harmony export */   encodeUnsignedSimulateTransaction: () => (/* binding */ encodeUnsignedSimulateTransaction)\n/* harmony export */ });\n/* harmony import */ var _encoding_encoding_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./encoding/encoding.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/encoding.js\");\n/* harmony import */ var _transaction_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./transaction.js */ \"(ssr)/./node_modules/algosdk/dist/esm/transaction.js\");\n/* harmony import */ var _logicsig_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./logicsig.js */ \"(ssr)/./node_modules/algosdk/dist/esm/logicsig.js\");\n/* harmony import */ var _types_transactions_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./types/transactions/index.js */ \"(ssr)/./node_modules/algosdk/dist/esm/types/transactions/index.js\");\n/* harmony import */ var _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./encoding/schema/index.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/schema/index.js\");\n\n\n\n\n\nclass SignedTransaction {\n    constructor({ txn, sig, msig, lsig, sgnr }){\n        this.txn = txn;\n        this.sig = sig;\n        this.msig = msig;\n        this.lsig = lsig;\n        this.sgnr = sgnr;\n        let numberOfSigs = 0;\n        if (sig) numberOfSigs += 1;\n        if (msig) numberOfSigs += 1;\n        if (lsig) numberOfSigs += 1;\n        if (numberOfSigs > 1) {\n            throw new Error(`SignedTransaction must not have more than 1 signature. Got ${numberOfSigs}`);\n        }\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return SignedTransaction.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"txn\",\n                this.txn.toEncodingData()\n            ],\n            [\n                \"sig\",\n                this.sig\n            ],\n            [\n                \"msig\",\n                this.msig ? (0,_types_transactions_index_js__WEBPACK_IMPORTED_MODULE_3__.encodedMultiSigToEncodingData)(this.msig) : undefined\n            ],\n            [\n                \"lsig\",\n                this.lsig ? this.lsig.toEncodingData() : undefined\n            ],\n            [\n                \"sgnr\",\n                this.sgnr\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded SignedTransaction: ${data}`);\n        }\n        return new SignedTransaction({\n            txn: _transaction_js__WEBPACK_IMPORTED_MODULE_1__.Transaction.fromEncodingData(data.get(\"txn\")),\n            sig: data.get(\"sig\"),\n            msig: data.get(\"msig\") ? (0,_types_transactions_index_js__WEBPACK_IMPORTED_MODULE_3__.encodedMultiSigFromEncodingData)(data.get(\"msig\")) : undefined,\n            lsig: data.get(\"lsig\") ? _logicsig_js__WEBPACK_IMPORTED_MODULE_2__.LogicSig.fromEncodingData(data.get(\"lsig\")) : undefined,\n            sgnr: data.get(\"sgnr\")\n        });\n    }\n}\nSignedTransaction.encodingSchema = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_4__.NamedMapSchema((0,_encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_4__.allOmitEmpty)([\n    {\n        key: \"txn\",\n        valueSchema: _transaction_js__WEBPACK_IMPORTED_MODULE_1__.Transaction.encodingSchema\n    },\n    {\n        key: \"sig\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_4__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_4__.FixedLengthByteArraySchema(64))\n    },\n    {\n        key: \"msig\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_4__.OptionalSchema(_types_transactions_index_js__WEBPACK_IMPORTED_MODULE_3__.ENCODED_MULTISIG_SCHEMA)\n    },\n    {\n        key: \"lsig\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_4__.OptionalSchema(_logicsig_js__WEBPACK_IMPORTED_MODULE_2__.LogicSig.encodingSchema)\n    },\n    {\n        key: \"sgnr\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_4__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_4__.AddressSchema())\n    }\n]));\n/**\n * decodeSignedTransaction takes a Uint8Array (from transaction.signTxn) and converts it to an object\n * containing the Transaction (txn), the signature (sig), and the auth-addr field if applicable (sgnr)\n * @param transactionBuffer - the Uint8Array containing a transaction\n * @returns containing a Transaction, the signature, and possibly an auth-addr field\n */ function decodeSignedTransaction(transactionBuffer) {\n    return (0,_encoding_encoding_js__WEBPACK_IMPORTED_MODULE_0__.decodeMsgpack)(transactionBuffer, SignedTransaction);\n}\n/**\n * encodeUnsignedSimulateTransaction takes a txnBuilder.Transaction object,\n * converts it into a SignedTransaction-like object, and converts it to a Buffer.\n *\n * Note: this function should only be used to simulate unsigned transactions.\n *\n * @param txn - Transaction object to simulate.\n */ function encodeUnsignedSimulateTransaction(txn) {\n    const stxn = new SignedTransaction({\n        txn\n    });\n    return (0,_encoding_encoding_js__WEBPACK_IMPORTED_MODULE_0__.encodeMsgpack)(stxn);\n} //# sourceMappingURL=signedTransaction.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/signedTransaction.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/signer.js":
/*!*************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/signer.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isTransactionWithSigner: () => (/* binding */ isTransactionWithSigner),\n/* harmony export */   makeBasicAccountTransactionSigner: () => (/* binding */ makeBasicAccountTransactionSigner),\n/* harmony export */   makeEmptyTransactionSigner: () => (/* binding */ makeEmptyTransactionSigner),\n/* harmony export */   makeLogicSigAccountTransactionSigner: () => (/* binding */ makeLogicSigAccountTransactionSigner),\n/* harmony export */   makeMultiSigAccountTransactionSigner: () => (/* binding */ makeMultiSigAccountTransactionSigner)\n/* harmony export */ });\n/* harmony import */ var _signedTransaction_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./signedTransaction.js */ \"(ssr)/./node_modules/algosdk/dist/esm/signedTransaction.js\");\n/* harmony import */ var _signing_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./signing.js */ \"(ssr)/./node_modules/algosdk/dist/esm/signing.js\");\n/* harmony import */ var _multisigSigning_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./multisigSigning.js */ \"(ssr)/./node_modules/algosdk/dist/esm/multisigSigning.js\");\n\n\n\n/**\n * Create a TransactionSigner that can sign transactions for the provided basic Account.\n */ function makeBasicAccountTransactionSigner(account) {\n    return (txnGroup, indexesToSign)=>{\n        const signed = [];\n        for (const index of indexesToSign){\n            signed.push(txnGroup[index].signTxn(account.sk));\n        }\n        return Promise.resolve(signed);\n    };\n}\n/**\n * Create a TransactionSigner that can sign transactions for the provided LogicSigAccount.\n */ function makeLogicSigAccountTransactionSigner(account) {\n    return (txnGroup, indexesToSign)=>{\n        const signed = [];\n        for (const index of indexesToSign){\n            const { blob } = (0,_signing_js__WEBPACK_IMPORTED_MODULE_1__.signLogicSigTransactionObject)(txnGroup[index], account);\n            signed.push(blob);\n        }\n        return Promise.resolve(signed);\n    };\n}\n/**\n * Create a TransactionSigner that can sign transactions for the provided Multisig account.\n * @param msig - The Multisig account metadata\n * @param sks - An array of private keys belonging to the msig which should sign the transactions.\n */ function makeMultiSigAccountTransactionSigner(msig, sks) {\n    return (txnGroup, indexesToSign)=>{\n        const signed = [];\n        for (const index of indexesToSign){\n            const txn = txnGroup[index];\n            const partialSigs = [];\n            for (const sk of sks){\n                const { blob } = (0,_multisigSigning_js__WEBPACK_IMPORTED_MODULE_2__.signMultisigTransaction)(txn, msig, sk);\n                partialSigs.push(blob);\n            }\n            if (partialSigs.length > 1) {\n                signed.push((0,_multisigSigning_js__WEBPACK_IMPORTED_MODULE_2__.mergeMultisigTransactions)(partialSigs));\n            } else {\n                signed.push(partialSigs[0]);\n            }\n        }\n        return Promise.resolve(signed);\n    };\n}\n/**\n * Create a makeEmptyTransactionSigner that does not specify any signer or\n * signing capabilities. This should only be used to simulate transactions.\n */ function makeEmptyTransactionSigner() {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    return (txnGroup, indexesToSign)=>{\n        const unsigned = [];\n        for (const index of indexesToSign){\n            unsigned.push((0,_signedTransaction_js__WEBPACK_IMPORTED_MODULE_0__.encodeUnsignedSimulateTransaction)(txnGroup[index]));\n        }\n        return Promise.resolve(unsigned);\n    };\n}\n/**\n * Check if a value conforms to the TransactionWithSigner structure.\n * @param value - The value to check.\n * @returns True if an only if the value has the structure of a TransactionWithSigner.\n */ function isTransactionWithSigner(value) {\n    return typeof value === \"object\" && Object.keys(value).length === 2 && typeof value.txn === \"object\" && typeof value.signer === \"function\";\n} //# sourceMappingURL=signer.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9zaWduZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBMkU7QUFDZDtBQUM4QjtBQUMzRjs7Q0FFQyxHQUNNLFNBQVNJLGtDQUFrQ0MsT0FBTztJQUNyRCxPQUFPLENBQUNDLFVBQVVDO1FBQ2QsTUFBTUMsU0FBUyxFQUFFO1FBQ2pCLEtBQUssTUFBTUMsU0FBU0YsY0FBZTtZQUMvQkMsT0FBT0UsSUFBSSxDQUFDSixRQUFRLENBQUNHLE1BQU0sQ0FBQ0UsT0FBTyxDQUFDTixRQUFRTyxFQUFFO1FBQ2xEO1FBQ0EsT0FBT0MsUUFBUUMsT0FBTyxDQUFDTjtJQUMzQjtBQUNKO0FBQ0E7O0NBRUMsR0FDTSxTQUFTTyxxQ0FBcUNWLE9BQU87SUFDeEQsT0FBTyxDQUFDQyxVQUFVQztRQUNkLE1BQU1DLFNBQVMsRUFBRTtRQUNqQixLQUFLLE1BQU1DLFNBQVNGLGNBQWU7WUFDL0IsTUFBTSxFQUFFUyxJQUFJLEVBQUUsR0FBR2YsMEVBQTZCQSxDQUFDSyxRQUFRLENBQUNHLE1BQU0sRUFBRUo7WUFDaEVHLE9BQU9FLElBQUksQ0FBQ007UUFDaEI7UUFDQSxPQUFPSCxRQUFRQyxPQUFPLENBQUNOO0lBQzNCO0FBQ0o7QUFDQTs7OztDQUlDLEdBQ00sU0FBU1MscUNBQXFDQyxJQUFJLEVBQUVDLEdBQUc7SUFDMUQsT0FBTyxDQUFDYixVQUFVQztRQUNkLE1BQU1DLFNBQVMsRUFBRTtRQUNqQixLQUFLLE1BQU1DLFNBQVNGLGNBQWU7WUFDL0IsTUFBTWEsTUFBTWQsUUFBUSxDQUFDRyxNQUFNO1lBQzNCLE1BQU1ZLGNBQWMsRUFBRTtZQUN0QixLQUFLLE1BQU1ULE1BQU1PLElBQUs7Z0JBQ2xCLE1BQU0sRUFBRUgsSUFBSSxFQUFFLEdBQUdkLDRFQUF1QkEsQ0FBQ2tCLEtBQUtGLE1BQU1OO2dCQUNwRFMsWUFBWVgsSUFBSSxDQUFDTTtZQUNyQjtZQUNBLElBQUlLLFlBQVlDLE1BQU0sR0FBRyxHQUFHO2dCQUN4QmQsT0FBT0UsSUFBSSxDQUFDUCw4RUFBeUJBLENBQUNrQjtZQUMxQyxPQUNLO2dCQUNEYixPQUFPRSxJQUFJLENBQUNXLFdBQVcsQ0FBQyxFQUFFO1lBQzlCO1FBQ0o7UUFDQSxPQUFPUixRQUFRQyxPQUFPLENBQUNOO0lBQzNCO0FBQ0o7QUFDQTs7O0NBR0MsR0FDTSxTQUFTZTtJQUNaLDZEQUE2RDtJQUM3RCxPQUFPLENBQUNqQixVQUFVQztRQUNkLE1BQU1pQixXQUFXLEVBQUU7UUFDbkIsS0FBSyxNQUFNZixTQUFTRixjQUFlO1lBQy9CaUIsU0FBU2QsSUFBSSxDQUFDVix3RkFBaUNBLENBQUNNLFFBQVEsQ0FBQ0csTUFBTTtRQUNuRTtRQUNBLE9BQU9JLFFBQVFDLE9BQU8sQ0FBQ1U7SUFDM0I7QUFDSjtBQUNBOzs7O0NBSUMsR0FDTSxTQUFTQyx3QkFBd0JDLEtBQUs7SUFDekMsT0FBUSxPQUFPQSxVQUFVLFlBQ3JCQyxPQUFPQyxJQUFJLENBQUNGLE9BQU9KLE1BQU0sS0FBSyxLQUM5QixPQUFPSSxNQUFNTixHQUFHLEtBQUssWUFDckIsT0FBT00sTUFBTUcsTUFBTSxLQUFLO0FBQ2hDLEVBQ0Esa0NBQWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWxnb3JhbmQtY3Jvd2RmdW5kaW5nLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vc2lnbmVyLmpzPzcwY2YiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZW5jb2RlVW5zaWduZWRTaW11bGF0ZVRyYW5zYWN0aW9uIH0gZnJvbSAnLi9zaWduZWRUcmFuc2FjdGlvbi5qcyc7XG5pbXBvcnQgeyBzaWduTG9naWNTaWdUcmFuc2FjdGlvbk9iamVjdCB9IGZyb20gJy4vc2lnbmluZy5qcyc7XG5pbXBvcnQgeyBzaWduTXVsdGlzaWdUcmFuc2FjdGlvbiwgbWVyZ2VNdWx0aXNpZ1RyYW5zYWN0aW9ucywgfSBmcm9tICcuL211bHRpc2lnU2lnbmluZy5qcyc7XG4vKipcbiAqIENyZWF0ZSBhIFRyYW5zYWN0aW9uU2lnbmVyIHRoYXQgY2FuIHNpZ24gdHJhbnNhY3Rpb25zIGZvciB0aGUgcHJvdmlkZWQgYmFzaWMgQWNjb3VudC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1ha2VCYXNpY0FjY291bnRUcmFuc2FjdGlvblNpZ25lcihhY2NvdW50KSB7XG4gICAgcmV0dXJuICh0eG5Hcm91cCwgaW5kZXhlc1RvU2lnbikgPT4ge1xuICAgICAgICBjb25zdCBzaWduZWQgPSBbXTtcbiAgICAgICAgZm9yIChjb25zdCBpbmRleCBvZiBpbmRleGVzVG9TaWduKSB7XG4gICAgICAgICAgICBzaWduZWQucHVzaCh0eG5Hcm91cFtpbmRleF0uc2lnblR4bihhY2NvdW50LnNrKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShzaWduZWQpO1xuICAgIH07XG59XG4vKipcbiAqIENyZWF0ZSBhIFRyYW5zYWN0aW9uU2lnbmVyIHRoYXQgY2FuIHNpZ24gdHJhbnNhY3Rpb25zIGZvciB0aGUgcHJvdmlkZWQgTG9naWNTaWdBY2NvdW50LlxuICovXG5leHBvcnQgZnVuY3Rpb24gbWFrZUxvZ2ljU2lnQWNjb3VudFRyYW5zYWN0aW9uU2lnbmVyKGFjY291bnQpIHtcbiAgICByZXR1cm4gKHR4bkdyb3VwLCBpbmRleGVzVG9TaWduKSA9PiB7XG4gICAgICAgIGNvbnN0IHNpZ25lZCA9IFtdO1xuICAgICAgICBmb3IgKGNvbnN0IGluZGV4IG9mIGluZGV4ZXNUb1NpZ24pIHtcbiAgICAgICAgICAgIGNvbnN0IHsgYmxvYiB9ID0gc2lnbkxvZ2ljU2lnVHJhbnNhY3Rpb25PYmplY3QodHhuR3JvdXBbaW5kZXhdLCBhY2NvdW50KTtcbiAgICAgICAgICAgIHNpZ25lZC5wdXNoKGJsb2IpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoc2lnbmVkKTtcbiAgICB9O1xufVxuLyoqXG4gKiBDcmVhdGUgYSBUcmFuc2FjdGlvblNpZ25lciB0aGF0IGNhbiBzaWduIHRyYW5zYWN0aW9ucyBmb3IgdGhlIHByb3ZpZGVkIE11bHRpc2lnIGFjY291bnQuXG4gKiBAcGFyYW0gbXNpZyAtIFRoZSBNdWx0aXNpZyBhY2NvdW50IG1ldGFkYXRhXG4gKiBAcGFyYW0gc2tzIC0gQW4gYXJyYXkgb2YgcHJpdmF0ZSBrZXlzIGJlbG9uZ2luZyB0byB0aGUgbXNpZyB3aGljaCBzaG91bGQgc2lnbiB0aGUgdHJhbnNhY3Rpb25zLlxuICovXG5leHBvcnQgZnVuY3Rpb24gbWFrZU11bHRpU2lnQWNjb3VudFRyYW5zYWN0aW9uU2lnbmVyKG1zaWcsIHNrcykge1xuICAgIHJldHVybiAodHhuR3JvdXAsIGluZGV4ZXNUb1NpZ24pID0+IHtcbiAgICAgICAgY29uc3Qgc2lnbmVkID0gW107XG4gICAgICAgIGZvciAoY29uc3QgaW5kZXggb2YgaW5kZXhlc1RvU2lnbikge1xuICAgICAgICAgICAgY29uc3QgdHhuID0gdHhuR3JvdXBbaW5kZXhdO1xuICAgICAgICAgICAgY29uc3QgcGFydGlhbFNpZ3MgPSBbXTtcbiAgICAgICAgICAgIGZvciAoY29uc3Qgc2sgb2Ygc2tzKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBibG9iIH0gPSBzaWduTXVsdGlzaWdUcmFuc2FjdGlvbih0eG4sIG1zaWcsIHNrKTtcbiAgICAgICAgICAgICAgICBwYXJ0aWFsU2lncy5wdXNoKGJsb2IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHBhcnRpYWxTaWdzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICBzaWduZWQucHVzaChtZXJnZU11bHRpc2lnVHJhbnNhY3Rpb25zKHBhcnRpYWxTaWdzKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBzaWduZWQucHVzaChwYXJ0aWFsU2lnc1swXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShzaWduZWQpO1xuICAgIH07XG59XG4vKipcbiAqIENyZWF0ZSBhIG1ha2VFbXB0eVRyYW5zYWN0aW9uU2lnbmVyIHRoYXQgZG9lcyBub3Qgc3BlY2lmeSBhbnkgc2lnbmVyIG9yXG4gKiBzaWduaW5nIGNhcGFiaWxpdGllcy4gVGhpcyBzaG91bGQgb25seSBiZSB1c2VkIHRvIHNpbXVsYXRlIHRyYW5zYWN0aW9ucy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1ha2VFbXB0eVRyYW5zYWN0aW9uU2lnbmVyKCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnNcbiAgICByZXR1cm4gKHR4bkdyb3VwLCBpbmRleGVzVG9TaWduKSA9PiB7XG4gICAgICAgIGNvbnN0IHVuc2lnbmVkID0gW107XG4gICAgICAgIGZvciAoY29uc3QgaW5kZXggb2YgaW5kZXhlc1RvU2lnbikge1xuICAgICAgICAgICAgdW5zaWduZWQucHVzaChlbmNvZGVVbnNpZ25lZFNpbXVsYXRlVHJhbnNhY3Rpb24odHhuR3JvdXBbaW5kZXhdKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh1bnNpZ25lZCk7XG4gICAgfTtcbn1cbi8qKlxuICogQ2hlY2sgaWYgYSB2YWx1ZSBjb25mb3JtcyB0byB0aGUgVHJhbnNhY3Rpb25XaXRoU2lnbmVyIHN0cnVjdHVyZS5cbiAqIEBwYXJhbSB2YWx1ZSAtIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIFRydWUgaWYgYW4gb25seSBpZiB0aGUgdmFsdWUgaGFzIHRoZSBzdHJ1Y3R1cmUgb2YgYSBUcmFuc2FjdGlvbldpdGhTaWduZXIuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1RyYW5zYWN0aW9uV2l0aFNpZ25lcih2YWx1ZSkge1xuICAgIHJldHVybiAodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJlxuICAgICAgICBPYmplY3Qua2V5cyh2YWx1ZSkubGVuZ3RoID09PSAyICYmXG4gICAgICAgIHR5cGVvZiB2YWx1ZS50eG4gPT09ICdvYmplY3QnICYmXG4gICAgICAgIHR5cGVvZiB2YWx1ZS5zaWduZXIgPT09ICdmdW5jdGlvbicpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2lnbmVyLmpzLm1hcCJdLCJuYW1lcyI6WyJlbmNvZGVVbnNpZ25lZFNpbXVsYXRlVHJhbnNhY3Rpb24iLCJzaWduTG9naWNTaWdUcmFuc2FjdGlvbk9iamVjdCIsInNpZ25NdWx0aXNpZ1RyYW5zYWN0aW9uIiwibWVyZ2VNdWx0aXNpZ1RyYW5zYWN0aW9ucyIsIm1ha2VCYXNpY0FjY291bnRUcmFuc2FjdGlvblNpZ25lciIsImFjY291bnQiLCJ0eG5Hcm91cCIsImluZGV4ZXNUb1NpZ24iLCJzaWduZWQiLCJpbmRleCIsInB1c2giLCJzaWduVHhuIiwic2siLCJQcm9taXNlIiwicmVzb2x2ZSIsIm1ha2VMb2dpY1NpZ0FjY291bnRUcmFuc2FjdGlvblNpZ25lciIsImJsb2IiLCJtYWtlTXVsdGlTaWdBY2NvdW50VHJhbnNhY3Rpb25TaWduZXIiLCJtc2lnIiwic2tzIiwidHhuIiwicGFydGlhbFNpZ3MiLCJsZW5ndGgiLCJtYWtlRW1wdHlUcmFuc2FjdGlvblNpZ25lciIsInVuc2lnbmVkIiwiaXNUcmFuc2FjdGlvbldpdGhTaWduZXIiLCJ2YWx1ZSIsIk9iamVjdCIsImtleXMiLCJzaWduZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/signer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/signing.js":
/*!**************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/signing.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   signLogicSigTransaction: () => (/* binding */ signLogicSigTransaction),\n/* harmony export */   signLogicSigTransactionObject: () => (/* binding */ signLogicSigTransactionObject)\n/* harmony export */ });\n/* harmony import */ var _nacl_naclWrappers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./nacl/naclWrappers.js */ \"(ssr)/./node_modules/algosdk/dist/esm/nacl/naclWrappers.js\");\n/* harmony import */ var _encoding_address_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./encoding/address.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/address.js\");\n/* harmony import */ var _encoding_encoding_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./encoding/encoding.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/encoding.js\");\n/* harmony import */ var _signedTransaction_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./signedTransaction.js */ \"(ssr)/./node_modules/algosdk/dist/esm/signedTransaction.js\");\n/* harmony import */ var _logicsig_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./logicsig.js */ \"(ssr)/./node_modules/algosdk/dist/esm/logicsig.js\");\n/* harmony import */ var _multisig_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./multisig.js */ \"(ssr)/./node_modules/algosdk/dist/esm/multisig.js\");\n\n\n\n\n\n\nfunction signLogicSigTransactionWithAddress(txn, lsig, lsigAddress) {\n    if (!lsig.verify(lsigAddress.publicKey)) {\n        throw new Error(\"Logic signature verification failed. Ensure the program and signature are valid.\");\n    }\n    let sgnr;\n    if (!_nacl_naclWrappers_js__WEBPACK_IMPORTED_MODULE_0__.bytesEqual(lsigAddress.publicKey, txn.sender.publicKey)) {\n        sgnr = lsigAddress;\n    }\n    const signedTxn = new _signedTransaction_js__WEBPACK_IMPORTED_MODULE_3__.SignedTransaction({\n        lsig,\n        txn,\n        sgnr\n    });\n    return {\n        txID: txn.txID(),\n        blob: _encoding_encoding_js__WEBPACK_IMPORTED_MODULE_2__.encodeMsgpack(signedTxn)\n    };\n}\n/**\n * signLogicSigTransactionObject takes a transaction and a LogicSig object and\n * returns a signed transaction.\n *\n * @param txn - The transaction to sign.\n * @param lsigObject - The LogicSig object that will sign the transaction.\n *\n * @returns Object containing txID and blob representing signed transaction.\n */ function signLogicSigTransactionObject(txn, lsigObject) {\n    let lsig;\n    let lsigAddress;\n    if (lsigObject instanceof _logicsig_js__WEBPACK_IMPORTED_MODULE_4__.LogicSigAccount) {\n        lsig = lsigObject.lsig;\n        lsigAddress = lsigObject.address();\n    } else {\n        lsig = lsigObject;\n        if (lsig.sig) {\n            // For a LogicSig with a non-multisig delegating account, we cannot derive\n            // the address of that account from only its signature, so assume the\n            // delegating account is the sender. If that's not the case, the signing\n            // will fail.\n            lsigAddress = new _encoding_address_js__WEBPACK_IMPORTED_MODULE_1__.Address(txn.sender.publicKey);\n        } else if (lsig.lmsig) {\n            const msigMetadata = {\n                version: lsig.lmsig.v,\n                threshold: lsig.lmsig.thr,\n                pks: lsig.lmsig.subsig.map((subsig)=>subsig.pk)\n            };\n            lsigAddress = (0,_multisig_js__WEBPACK_IMPORTED_MODULE_5__.addressFromMultisigPreImg)(msigMetadata);\n        } else {\n            lsigAddress = lsig.address();\n        }\n    }\n    return signLogicSigTransactionWithAddress(txn, lsig, lsigAddress);\n}\n/**\n * signLogicSigTransaction takes a transaction and a LogicSig object and returns\n * a signed transaction.\n *\n * @param txn - The transaction to sign.\n * @param lsigObject - The LogicSig object that will sign the transaction.\n *\n * @returns Object containing txID and blob representing signed transaction.\n * @throws error on failure\n */ function signLogicSigTransaction(txn, lsigObject) {\n    return signLogicSigTransactionObject(txn, lsigObject);\n} //# sourceMappingURL=signing.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS9zaWduaW5nLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQStDO0FBQ0M7QUFDRztBQUNRO0FBQ1g7QUFDVTtBQUMxRCxTQUFTTSxtQ0FBbUNDLEdBQUcsRUFBRUMsSUFBSSxFQUFFQyxXQUFXO0lBQzlELElBQUksQ0FBQ0QsS0FBS0UsTUFBTSxDQUFDRCxZQUFZRSxTQUFTLEdBQUc7UUFDckMsTUFBTSxJQUFJQyxNQUFNO0lBQ3BCO0lBQ0EsSUFBSUM7SUFDSixJQUFJLENBQUNiLDZEQUFlLENBQUNTLFlBQVlFLFNBQVMsRUFBRUosSUFBSVEsTUFBTSxDQUFDSixTQUFTLEdBQUc7UUFDL0RFLE9BQU9KO0lBQ1g7SUFDQSxNQUFNTyxZQUFZLElBQUliLG9FQUFpQkEsQ0FBQztRQUNwQ0s7UUFDQUQ7UUFDQU07SUFDSjtJQUNBLE9BQU87UUFDSEksTUFBTVYsSUFBSVUsSUFBSTtRQUNkQyxNQUFNaEIsZ0VBQXNCLENBQUNjO0lBQ2pDO0FBQ0o7QUFDQTs7Ozs7Ozs7Q0FRQyxHQUNNLFNBQVNJLDhCQUE4QmIsR0FBRyxFQUFFYyxVQUFVO0lBQ3pELElBQUliO0lBQ0osSUFBSUM7SUFDSixJQUFJWSxzQkFBc0JqQix5REFBZUEsRUFBRTtRQUN2Q0ksT0FBT2EsV0FBV2IsSUFBSTtRQUN0QkMsY0FBY1ksV0FBV0MsT0FBTztJQUNwQyxPQUNLO1FBQ0RkLE9BQU9hO1FBQ1AsSUFBSWIsS0FBS2UsR0FBRyxFQUFFO1lBQ1YsMEVBQTBFO1lBQzFFLHFFQUFxRTtZQUNyRSx3RUFBd0U7WUFDeEUsYUFBYTtZQUNiZCxjQUFjLElBQUlSLHlEQUFPQSxDQUFDTSxJQUFJUSxNQUFNLENBQUNKLFNBQVM7UUFDbEQsT0FDSyxJQUFJSCxLQUFLZ0IsS0FBSyxFQUFFO1lBQ2pCLE1BQU1DLGVBQWU7Z0JBQ2pCQyxTQUFTbEIsS0FBS2dCLEtBQUssQ0FBQ0csQ0FBQztnQkFDckJDLFdBQVdwQixLQUFLZ0IsS0FBSyxDQUFDSyxHQUFHO2dCQUN6QkMsS0FBS3RCLEtBQUtnQixLQUFLLENBQUNPLE1BQU0sQ0FBQ0MsR0FBRyxDQUFDLENBQUNELFNBQVdBLE9BQU9FLEVBQUU7WUFDcEQ7WUFDQXhCLGNBQWNKLHVFQUF5QkEsQ0FBQ29CO1FBQzVDLE9BQ0s7WUFDRGhCLGNBQWNELEtBQUtjLE9BQU87UUFDOUI7SUFDSjtJQUNBLE9BQU9oQixtQ0FBbUNDLEtBQUtDLE1BQU1DO0FBQ3pEO0FBQ0E7Ozs7Ozs7OztDQVNDLEdBQ00sU0FBU3lCLHdCQUF3QjNCLEdBQUcsRUFBRWMsVUFBVTtJQUNuRCxPQUFPRCw4QkFBOEJiLEtBQUtjO0FBQzlDLEVBQ0EsbUNBQW1DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWxnb3JhbmQtY3Jvd2RmdW5kaW5nLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vc2lnbmluZy5qcz9mYmI1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIG5hY2wgZnJvbSAnLi9uYWNsL25hY2xXcmFwcGVycy5qcyc7XG5pbXBvcnQgeyBBZGRyZXNzIH0gZnJvbSAnLi9lbmNvZGluZy9hZGRyZXNzLmpzJztcbmltcG9ydCAqIGFzIGVuY29kaW5nIGZyb20gJy4vZW5jb2RpbmcvZW5jb2RpbmcuanMnO1xuaW1wb3J0IHsgU2lnbmVkVHJhbnNhY3Rpb24gfSBmcm9tICcuL3NpZ25lZFRyYW5zYWN0aW9uLmpzJztcbmltcG9ydCB7IExvZ2ljU2lnQWNjb3VudCB9IGZyb20gJy4vbG9naWNzaWcuanMnO1xuaW1wb3J0IHsgYWRkcmVzc0Zyb21NdWx0aXNpZ1ByZUltZyB9IGZyb20gJy4vbXVsdGlzaWcuanMnO1xuZnVuY3Rpb24gc2lnbkxvZ2ljU2lnVHJhbnNhY3Rpb25XaXRoQWRkcmVzcyh0eG4sIGxzaWcsIGxzaWdBZGRyZXNzKSB7XG4gICAgaWYgKCFsc2lnLnZlcmlmeShsc2lnQWRkcmVzcy5wdWJsaWNLZXkpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTG9naWMgc2lnbmF0dXJlIHZlcmlmaWNhdGlvbiBmYWlsZWQuIEVuc3VyZSB0aGUgcHJvZ3JhbSBhbmQgc2lnbmF0dXJlIGFyZSB2YWxpZC4nKTtcbiAgICB9XG4gICAgbGV0IHNnbnI7XG4gICAgaWYgKCFuYWNsLmJ5dGVzRXF1YWwobHNpZ0FkZHJlc3MucHVibGljS2V5LCB0eG4uc2VuZGVyLnB1YmxpY0tleSkpIHtcbiAgICAgICAgc2duciA9IGxzaWdBZGRyZXNzO1xuICAgIH1cbiAgICBjb25zdCBzaWduZWRUeG4gPSBuZXcgU2lnbmVkVHJhbnNhY3Rpb24oe1xuICAgICAgICBsc2lnLFxuICAgICAgICB0eG4sXG4gICAgICAgIHNnbnIsXG4gICAgfSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHhJRDogdHhuLnR4SUQoKSxcbiAgICAgICAgYmxvYjogZW5jb2RpbmcuZW5jb2RlTXNncGFjayhzaWduZWRUeG4pLFxuICAgIH07XG59XG4vKipcbiAqIHNpZ25Mb2dpY1NpZ1RyYW5zYWN0aW9uT2JqZWN0IHRha2VzIGEgdHJhbnNhY3Rpb24gYW5kIGEgTG9naWNTaWcgb2JqZWN0IGFuZFxuICogcmV0dXJucyBhIHNpZ25lZCB0cmFuc2FjdGlvbi5cbiAqXG4gKiBAcGFyYW0gdHhuIC0gVGhlIHRyYW5zYWN0aW9uIHRvIHNpZ24uXG4gKiBAcGFyYW0gbHNpZ09iamVjdCAtIFRoZSBMb2dpY1NpZyBvYmplY3QgdGhhdCB3aWxsIHNpZ24gdGhlIHRyYW5zYWN0aW9uLlxuICpcbiAqIEByZXR1cm5zIE9iamVjdCBjb250YWluaW5nIHR4SUQgYW5kIGJsb2IgcmVwcmVzZW50aW5nIHNpZ25lZCB0cmFuc2FjdGlvbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNpZ25Mb2dpY1NpZ1RyYW5zYWN0aW9uT2JqZWN0KHR4biwgbHNpZ09iamVjdCkge1xuICAgIGxldCBsc2lnO1xuICAgIGxldCBsc2lnQWRkcmVzcztcbiAgICBpZiAobHNpZ09iamVjdCBpbnN0YW5jZW9mIExvZ2ljU2lnQWNjb3VudCkge1xuICAgICAgICBsc2lnID0gbHNpZ09iamVjdC5sc2lnO1xuICAgICAgICBsc2lnQWRkcmVzcyA9IGxzaWdPYmplY3QuYWRkcmVzcygpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgbHNpZyA9IGxzaWdPYmplY3Q7XG4gICAgICAgIGlmIChsc2lnLnNpZykge1xuICAgICAgICAgICAgLy8gRm9yIGEgTG9naWNTaWcgd2l0aCBhIG5vbi1tdWx0aXNpZyBkZWxlZ2F0aW5nIGFjY291bnQsIHdlIGNhbm5vdCBkZXJpdmVcbiAgICAgICAgICAgIC8vIHRoZSBhZGRyZXNzIG9mIHRoYXQgYWNjb3VudCBmcm9tIG9ubHkgaXRzIHNpZ25hdHVyZSwgc28gYXNzdW1lIHRoZVxuICAgICAgICAgICAgLy8gZGVsZWdhdGluZyBhY2NvdW50IGlzIHRoZSBzZW5kZXIuIElmIHRoYXQncyBub3QgdGhlIGNhc2UsIHRoZSBzaWduaW5nXG4gICAgICAgICAgICAvLyB3aWxsIGZhaWwuXG4gICAgICAgICAgICBsc2lnQWRkcmVzcyA9IG5ldyBBZGRyZXNzKHR4bi5zZW5kZXIucHVibGljS2V5KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChsc2lnLmxtc2lnKSB7XG4gICAgICAgICAgICBjb25zdCBtc2lnTWV0YWRhdGEgPSB7XG4gICAgICAgICAgICAgICAgdmVyc2lvbjogbHNpZy5sbXNpZy52LFxuICAgICAgICAgICAgICAgIHRocmVzaG9sZDogbHNpZy5sbXNpZy50aHIsXG4gICAgICAgICAgICAgICAgcGtzOiBsc2lnLmxtc2lnLnN1YnNpZy5tYXAoKHN1YnNpZykgPT4gc3Vic2lnLnBrKSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBsc2lnQWRkcmVzcyA9IGFkZHJlc3NGcm9tTXVsdGlzaWdQcmVJbWcobXNpZ01ldGFkYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGxzaWdBZGRyZXNzID0gbHNpZy5hZGRyZXNzKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHNpZ25Mb2dpY1NpZ1RyYW5zYWN0aW9uV2l0aEFkZHJlc3ModHhuLCBsc2lnLCBsc2lnQWRkcmVzcyk7XG59XG4vKipcbiAqIHNpZ25Mb2dpY1NpZ1RyYW5zYWN0aW9uIHRha2VzIGEgdHJhbnNhY3Rpb24gYW5kIGEgTG9naWNTaWcgb2JqZWN0IGFuZCByZXR1cm5zXG4gKiBhIHNpZ25lZCB0cmFuc2FjdGlvbi5cbiAqXG4gKiBAcGFyYW0gdHhuIC0gVGhlIHRyYW5zYWN0aW9uIHRvIHNpZ24uXG4gKiBAcGFyYW0gbHNpZ09iamVjdCAtIFRoZSBMb2dpY1NpZyBvYmplY3QgdGhhdCB3aWxsIHNpZ24gdGhlIHRyYW5zYWN0aW9uLlxuICpcbiAqIEByZXR1cm5zIE9iamVjdCBjb250YWluaW5nIHR4SUQgYW5kIGJsb2IgcmVwcmVzZW50aW5nIHNpZ25lZCB0cmFuc2FjdGlvbi5cbiAqIEB0aHJvd3MgZXJyb3Igb24gZmFpbHVyZVxuICovXG5leHBvcnQgZnVuY3Rpb24gc2lnbkxvZ2ljU2lnVHJhbnNhY3Rpb24odHhuLCBsc2lnT2JqZWN0KSB7XG4gICAgcmV0dXJuIHNpZ25Mb2dpY1NpZ1RyYW5zYWN0aW9uT2JqZWN0KHR4biwgbHNpZ09iamVjdCk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zaWduaW5nLmpzLm1hcCJdLCJuYW1lcyI6WyJuYWNsIiwiQWRkcmVzcyIsImVuY29kaW5nIiwiU2lnbmVkVHJhbnNhY3Rpb24iLCJMb2dpY1NpZ0FjY291bnQiLCJhZGRyZXNzRnJvbU11bHRpc2lnUHJlSW1nIiwic2lnbkxvZ2ljU2lnVHJhbnNhY3Rpb25XaXRoQWRkcmVzcyIsInR4biIsImxzaWciLCJsc2lnQWRkcmVzcyIsInZlcmlmeSIsInB1YmxpY0tleSIsIkVycm9yIiwic2duciIsImJ5dGVzRXF1YWwiLCJzZW5kZXIiLCJzaWduZWRUeG4iLCJ0eElEIiwiYmxvYiIsImVuY29kZU1zZ3BhY2siLCJzaWduTG9naWNTaWdUcmFuc2FjdGlvbk9iamVjdCIsImxzaWdPYmplY3QiLCJhZGRyZXNzIiwic2lnIiwibG1zaWciLCJtc2lnTWV0YWRhdGEiLCJ2ZXJzaW9uIiwidiIsInRocmVzaG9sZCIsInRociIsInBrcyIsInN1YnNpZyIsIm1hcCIsInBrIiwic2lnbkxvZ2ljU2lnVHJhbnNhY3Rpb24iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/signing.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/stateproof.js":
/*!*****************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/stateproof.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FalconSignatureStruct: () => (/* binding */ FalconSignatureStruct),\n/* harmony export */   FalconVerifier: () => (/* binding */ FalconVerifier),\n/* harmony export */   HashFactory: () => (/* binding */ HashFactory),\n/* harmony export */   MerkleArrayProof: () => (/* binding */ MerkleArrayProof),\n/* harmony export */   MerkleSignatureVerifier: () => (/* binding */ MerkleSignatureVerifier),\n/* harmony export */   Participant: () => (/* binding */ Participant),\n/* harmony export */   Reveal: () => (/* binding */ Reveal),\n/* harmony export */   SigslotCommit: () => (/* binding */ SigslotCommit),\n/* harmony export */   StateProof: () => (/* binding */ StateProof),\n/* harmony export */   StateProofMessage: () => (/* binding */ StateProofMessage)\n/* harmony export */ });\n/* harmony import */ var _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./encoding/schema/index.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/schema/index.js\");\n\nclass HashFactory {\n    constructor(params){\n        this.hashType = params.hashType;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return HashFactory.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"t\",\n                this.hashType\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded HashFactory: ${data}`);\n        }\n        return new HashFactory({\n            hashType: Number(data.get(\"t\"))\n        });\n    }\n}\nHashFactory.encodingSchema = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.NamedMapSchema((0,_encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.allOmitEmpty)([\n    {\n        key: \"t\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.Uint64Schema()\n    }\n]));\nclass MerkleArrayProof {\n    constructor(params){\n        this.path = params.path;\n        this.hashFactory = params.hashFactory;\n        this.treeDepth = params.treeDepth;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return MerkleArrayProof.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"pth\",\n                this.path\n            ],\n            [\n                \"hsh\",\n                this.hashFactory.toEncodingData()\n            ],\n            [\n                \"td\",\n                this.treeDepth\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded MerkleArrayProof: ${data}`);\n        }\n        return new MerkleArrayProof({\n            path: data.get(\"pth\"),\n            hashFactory: HashFactory.fromEncodingData(data.get(\"hsh\")),\n            treeDepth: Number(data.get(\"td\"))\n        });\n    }\n}\nMerkleArrayProof.encodingSchema = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.NamedMapSchema((0,_encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.allOmitEmpty)([\n    {\n        key: \"pth\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.ArraySchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.ByteArraySchema())\n    },\n    {\n        key: \"hsh\",\n        valueSchema: HashFactory.encodingSchema\n    },\n    {\n        key: \"td\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.Uint64Schema()\n    }\n]));\n/**\n * MerkleSignatureVerifier is used to verify a merkle signature.\n */ class MerkleSignatureVerifier {\n    constructor(params){\n        this.commitment = params.commitment;\n        this.keyLifetime = params.keyLifetime;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return MerkleSignatureVerifier.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"cmt\",\n                this.commitment\n            ],\n            [\n                \"lf\",\n                this.keyLifetime\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded MerkleSignatureVerifier: ${data}`);\n        }\n        return new MerkleSignatureVerifier({\n            commitment: data.get(\"cmt\"),\n            keyLifetime: data.get(\"lf\")\n        });\n    }\n}\nMerkleSignatureVerifier.encodingSchema = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.NamedMapSchema((0,_encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.allOmitEmpty)([\n    {\n        key: \"cmt\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.FixedLengthByteArraySchema(64)\n    },\n    {\n        key: \"lf\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.Uint64Schema()\n    }\n]));\n/**\n * A Participant corresponds to an account whose AccountData.Status is Online, and for which the\n * expected sigRound satisfies AccountData.VoteFirstValid <= sigRound <= AccountData.VoteLastValid.\n *\n * In the Algorand ledger, it is possible for multiple accounts to have the same PK. Thus, the PK is\n * not necessarily unique among Participants. However, each account will produce a unique Participant\n * struct, to avoid potential DoS attacks where one account claims to have the same VoteID PK as\n * another account.\n */ class Participant {\n    constructor(params){\n        this.pk = params.pk;\n        this.weight = params.weight;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return Participant.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"p\",\n                this.pk.toEncodingData()\n            ],\n            [\n                \"w\",\n                this.weight\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded Participant: ${data}`);\n        }\n        return new Participant({\n            pk: MerkleSignatureVerifier.fromEncodingData(data.get(\"p\")),\n            weight: data.get(\"w\")\n        });\n    }\n}\nParticipant.encodingSchema = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.NamedMapSchema((0,_encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.allOmitEmpty)([\n    {\n        key: \"p\",\n        valueSchema: MerkleSignatureVerifier.encodingSchema\n    },\n    {\n        key: \"w\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.Uint64Schema()\n    }\n]));\nclass FalconVerifier {\n    constructor(params){\n        this.publicKey = params.publicKey;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return FalconVerifier.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"k\",\n                this.publicKey\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded FalconVerifier: ${data}`);\n        }\n        return new FalconVerifier({\n            publicKey: data.get(\"k\")\n        });\n    }\n}\nFalconVerifier.encodingSchema = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.NamedMapSchema((0,_encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.allOmitEmpty)([\n    {\n        key: \"k\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.FixedLengthByteArraySchema(0x701)\n    }\n]));\n/**\n * FalconSignatureStruct represents a signature in the merkle signature scheme using falcon signatures\n * as an underlying crypto scheme. It consists of an ephemeral public key, a signature, a merkle\n * verification path and an index. The merkle signature considered valid only if the Signature is\n * verified under the ephemeral public key and the Merkle verification path verifies that the\n * ephemeral public key is located at the given index of the tree (for the root given in the\n * long-term public key). More details can be found on Algorand's spec\n */ class FalconSignatureStruct {\n    constructor(params){\n        this.signature = params.signature;\n        this.vectorCommitmentIndex = params.index;\n        this.proof = params.proof;\n        this.verifyingKey = params.verifyingKey;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return FalconSignatureStruct.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"sig\",\n                this.signature\n            ],\n            [\n                \"idx\",\n                this.vectorCommitmentIndex\n            ],\n            [\n                \"prf\",\n                this.proof.toEncodingData()\n            ],\n            [\n                \"vkey\",\n                this.verifyingKey.toEncodingData()\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded FalconSignatureStruct: ${data}`);\n        }\n        return new FalconSignatureStruct({\n            signature: data.get(\"sig\"),\n            index: data.get(\"idx\"),\n            proof: MerkleArrayProof.fromEncodingData(data.get(\"prf\")),\n            verifyingKey: FalconVerifier.fromEncodingData(data.get(\"vkey\"))\n        });\n    }\n}\nFalconSignatureStruct.encodingSchema = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.NamedMapSchema((0,_encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.allOmitEmpty)([\n    {\n        key: \"sig\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.ByteArraySchema()\n    },\n    {\n        key: \"idx\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.Uint64Schema()\n    },\n    {\n        key: \"prf\",\n        valueSchema: MerkleArrayProof.encodingSchema\n    },\n    {\n        key: \"vkey\",\n        valueSchema: FalconVerifier.encodingSchema\n    }\n]));\n/**\n * A SigslotCommit is a single slot in the sigs array that forms the state proof.\n */ class SigslotCommit {\n    constructor(params){\n        this.sig = params.sig;\n        this.l = params.l;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return SigslotCommit.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"s\",\n                this.sig.toEncodingData()\n            ],\n            [\n                \"l\",\n                this.l\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded SigslotCommit: ${data}`);\n        }\n        return new SigslotCommit({\n            sig: FalconSignatureStruct.fromEncodingData(data.get(\"s\")),\n            l: data.get(\"l\")\n        });\n    }\n}\nSigslotCommit.encodingSchema = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.NamedMapSchema((0,_encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.allOmitEmpty)([\n    {\n        key: \"s\",\n        valueSchema: FalconSignatureStruct.encodingSchema\n    },\n    {\n        key: \"l\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.Uint64Schema()\n    }\n]));\n/**\n * Reveal is a single array position revealed as part of a state proof. It reveals an element of the\n * signature array and the corresponding element of the participants array.\n */ class Reveal {\n    constructor(params){\n        this.sigslot = params.sigslot;\n        this.participant = params.participant;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return Reveal.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"s\",\n                this.sigslot.toEncodingData()\n            ],\n            [\n                \"p\",\n                this.participant.toEncodingData()\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded Reveal: ${data}`);\n        }\n        return new Reveal({\n            sigslot: SigslotCommit.fromEncodingData(data.get(\"s\")),\n            participant: Participant.fromEncodingData(data.get(\"p\"))\n        });\n    }\n}\nReveal.encodingSchema = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.NamedMapSchema((0,_encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.allOmitEmpty)([\n    {\n        key: \"s\",\n        valueSchema: SigslotCommit.encodingSchema\n    },\n    {\n        key: \"p\",\n        valueSchema: Participant.encodingSchema\n    }\n]));\nclass StateProof {\n    constructor(params){\n        this.sigCommit = params.sigCommit;\n        this.signedWeight = params.signedWeight;\n        this.sigProofs = params.sigProofs;\n        this.partProofs = params.partProofs;\n        this.merkleSignatureSaltVersion = params.merkleSignatureSaltVersion;\n        this.reveals = params.reveals;\n        this.positionsToReveal = params.positionsToReveal;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return StateProof.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"c\",\n                this.sigCommit\n            ],\n            [\n                \"w\",\n                this.signedWeight\n            ],\n            [\n                \"S\",\n                this.sigProofs.toEncodingData()\n            ],\n            [\n                \"P\",\n                this.partProofs.toEncodingData()\n            ],\n            [\n                \"v\",\n                this.merkleSignatureSaltVersion\n            ],\n            [\n                \"r\",\n                (0,_encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.convertMap)(this.reveals, (key, value)=>[\n                        key,\n                        value.toEncodingData()\n                    ])\n            ],\n            [\n                \"pr\",\n                this.positionsToReveal\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded StateProof: ${data}`);\n        }\n        return new StateProof({\n            sigCommit: data.get(\"c\"),\n            signedWeight: data.get(\"w\"),\n            sigProofs: MerkleArrayProof.fromEncodingData(data.get(\"S\")),\n            partProofs: MerkleArrayProof.fromEncodingData(data.get(\"P\")),\n            merkleSignatureSaltVersion: Number(data.get(\"v\")),\n            reveals: (0,_encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.convertMap)(data.get(\"r\"), (key, value)=>[\n                    key,\n                    Reveal.fromEncodingData(value)\n                ]),\n            positionsToReveal: data.get(\"pr\")\n        });\n    }\n}\nStateProof.encodingSchema = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.NamedMapSchema((0,_encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.allOmitEmpty)([\n    {\n        key: \"c\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.ByteArraySchema()\n    },\n    {\n        key: \"w\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.Uint64Schema()\n    },\n    {\n        key: \"S\",\n        valueSchema: MerkleArrayProof.encodingSchema\n    },\n    {\n        key: \"P\",\n        valueSchema: MerkleArrayProof.encodingSchema\n    },\n    {\n        key: \"v\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.Uint64Schema()\n    },\n    {\n        key: \"r\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.Uint64MapSchema(Reveal.encodingSchema)\n    },\n    {\n        key: \"pr\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.ArraySchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.Uint64Schema())\n    }\n]));\nclass StateProofMessage {\n    constructor(params){\n        this.blockHeadersCommitment = params.blockHeadersCommitment;\n        this.votersCommitment = params.votersCommitment;\n        this.lnProvenWeight = params.lnProvenWeight;\n        this.firstAttestedRound = params.firstAttestedRound;\n        this.lastAttestedRound = params.lastAttestedRound;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return StateProofMessage.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"b\",\n                this.blockHeadersCommitment\n            ],\n            [\n                \"v\",\n                this.votersCommitment\n            ],\n            [\n                \"P\",\n                this.lnProvenWeight\n            ],\n            [\n                \"f\",\n                this.firstAttestedRound\n            ],\n            [\n                \"l\",\n                this.lastAttestedRound\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded StateProofMessage: ${data}`);\n        }\n        return new StateProofMessage({\n            blockHeadersCommitment: data.get(\"b\"),\n            votersCommitment: data.get(\"v\"),\n            lnProvenWeight: data.get(\"P\"),\n            firstAttestedRound: data.get(\"f\"),\n            lastAttestedRound: data.get(\"l\")\n        });\n    }\n    static fromMap(data) {\n        return new StateProofMessage({\n            blockHeadersCommitment: data.get(\"b\"),\n            votersCommitment: data.get(\"v\"),\n            lnProvenWeight: data.get(\"P\"),\n            firstAttestedRound: data.get(\"f\"),\n            lastAttestedRound: data.get(\"l\")\n        });\n    }\n}\nStateProofMessage.encodingSchema = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.NamedMapSchema((0,_encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.allOmitEmpty)([\n    {\n        key: \"b\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.ByteArraySchema()\n    },\n    {\n        key: \"v\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.ByteArraySchema()\n    },\n    {\n        key: \"P\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.Uint64Schema()\n    },\n    {\n        key: \"f\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.Uint64Schema()\n    },\n    {\n        key: \"l\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.Uint64Schema()\n    }\n])); //# sourceMappingURL=stateproof.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/stateproof.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/transaction.js":
/*!******************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/transaction.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Transaction: () => (/* binding */ Transaction),\n/* harmony export */   decodeUnsignedTransaction: () => (/* binding */ decodeUnsignedTransaction),\n/* harmony export */   encodeUnsignedTransaction: () => (/* binding */ encodeUnsignedTransaction)\n/* harmony export */ });\n/* harmony import */ var hi_base32__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! hi-base32 */ \"(ssr)/./node_modules/hi-base32/src/base32.js\");\n/* harmony import */ var _boxStorage_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./boxStorage.js */ \"(ssr)/./node_modules/algosdk/dist/esm/boxStorage.js\");\n/* harmony import */ var _appAccess_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./appAccess.js */ \"(ssr)/./node_modules/algosdk/dist/esm/appAccess.js\");\n/* harmony import */ var _encoding_address_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./encoding/address.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/address.js\");\n/* harmony import */ var _encoding_encoding_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./encoding/encoding.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/encoding.js\");\n/* harmony import */ var _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./encoding/schema/index.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/schema/index.js\");\n/* harmony import */ var _nacl_naclWrappers_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./nacl/naclWrappers.js */ \"(ssr)/./node_modules/algosdk/dist/esm/nacl/naclWrappers.js\");\n/* harmony import */ var _types_transactions_base_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./types/transactions/base.js */ \"(ssr)/./node_modules/algosdk/dist/esm/types/transactions/base.js\");\n/* harmony import */ var _stateproof_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./stateproof.js */ \"(ssr)/./node_modules/algosdk/dist/esm/stateproof.js\");\n/* harmony import */ var _heartbeat_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./heartbeat.js */ \"(ssr)/./node_modules/algosdk/dist/esm/heartbeat.js\");\n/* harmony import */ var _utils_utils_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./utils/utils.js */ \"(ssr)/./node_modules/algosdk/dist/esm/utils/utils.js\");\n\n\n\n\n\n\n\n\n\n\n\nconst ALGORAND_TRANSACTION_LENGTH = 52;\nconst ALGORAND_TRANSACTION_LEASE_LENGTH = 32;\nconst NUM_ADDL_BYTES_AFTER_SIGNING = 75; // NUM_ADDL_BYTES_AFTER_SIGNING is the number of bytes added to a txn after signing it\nconst ASSET_METADATA_HASH_LENGTH = 32;\nconst KEYREG_VOTE_KEY_LENGTH = 32;\nconst KEYREG_SELECTION_KEY_LENGTH = 32;\nconst KEYREG_STATE_PROOF_KEY_LENGTH = 64;\nconst ALGORAND_TRANSACTION_GROUP_LENGTH = 32;\nfunction uint8ArrayIsEmpty(input) {\n    return input.every((value)=>value === 0);\n}\nfunction getKeyregKey(input, inputName, length) {\n    if (input == null) {\n        return undefined;\n    }\n    let inputBytes;\n    if (input instanceof Uint8Array) {\n        inputBytes = input;\n    }\n    if (inputBytes == null || inputBytes.byteLength !== length) {\n        throw Error(`${inputName} must be a ${length} byte Uint8Array`);\n    }\n    return inputBytes;\n}\nfunction ensureAddress(input) {\n    if (input == null) {\n        throw new Error(\"Address must not be null or undefined\");\n    }\n    if (typeof input === \"string\") {\n        return _encoding_address_js__WEBPACK_IMPORTED_MODULE_3__.Address.fromString(input);\n    }\n    if (input instanceof _encoding_address_js__WEBPACK_IMPORTED_MODULE_3__.Address) {\n        return input;\n    }\n    throw new Error(`Not an address: ${input}`);\n}\nfunction optionalAddress(input) {\n    if (input == null) {\n        return undefined;\n    }\n    let addr;\n    if (input instanceof _encoding_address_js__WEBPACK_IMPORTED_MODULE_3__.Address) {\n        addr = input;\n    } else if (typeof input === \"string\") {\n        addr = _encoding_address_js__WEBPACK_IMPORTED_MODULE_3__.Address.fromString(input);\n    } else {\n        throw new Error(`Not an address: ${input}`);\n    }\n    if (uint8ArrayIsEmpty(addr.publicKey)) {\n        // If it's the zero address, throw an error so that the user won't be surprised that this gets dropped\n        throw new Error(\"Invalid use of the zero address. To omit this value, pass in undefined\");\n    }\n    return addr;\n}\nfunction optionalUint8Array(input) {\n    if (typeof input === \"undefined\") {\n        return undefined;\n    }\n    if (input instanceof Uint8Array) {\n        return input;\n    }\n    throw new Error(`Not a Uint8Array: ${input}`);\n}\nfunction ensureUint8Array(input) {\n    if (input instanceof Uint8Array) {\n        return input;\n    }\n    throw new Error(`Not a Uint8Array: ${input}`);\n}\nfunction optionalUint64(input) {\n    if (typeof input === \"undefined\") {\n        return undefined;\n    }\n    return _utils_utils_js__WEBPACK_IMPORTED_MODULE_10__.ensureUint64(input);\n}\nfunction ensureBoolean(input) {\n    if (input === true || input === false) {\n        return input;\n    }\n    throw new Error(`Not a boolean: ${input}`);\n}\nfunction ensureArray(input) {\n    if (Array.isArray(input)) {\n        return input.slice();\n    }\n    throw new Error(`Not an array: ${input}`);\n}\nfunction optionalFixedLengthByteArray(input, length, name) {\n    const bytes = optionalUint8Array(input);\n    if (typeof bytes === \"undefined\") {\n        return undefined;\n    }\n    if (bytes.byteLength !== length) {\n        throw new Error(`${name} must be ${length} bytes long, was ${bytes.byteLength}`);\n    }\n    if (uint8ArrayIsEmpty(bytes)) {\n        // if contains all 0s, omit it\n        return undefined;\n    }\n    return bytes;\n}\nfunction ensureBoxReference(input) {\n    if (input != null && typeof input === \"object\") {\n        const { appIndex, name } = input;\n        return {\n            appIndex: _utils_utils_js__WEBPACK_IMPORTED_MODULE_10__.ensureUint64(appIndex),\n            name: ensureUint8Array(name)\n        };\n    }\n    throw new Error(`Not a box reference: ${input}`);\n}\nfunction ensureHoldingReference(input) {\n    if (input != null && typeof input === \"object\") {\n        const { assetIndex, address } = input;\n        return {\n            assetIndex: _utils_utils_js__WEBPACK_IMPORTED_MODULE_10__.ensureUint64(assetIndex),\n            address: ensureAddress(address)\n        };\n    }\n    throw new Error(`Not a holding reference: ${input}`);\n}\nfunction ensureLocalsReference(input) {\n    if (input != null && typeof input === \"object\") {\n        const { appIndex, address } = input;\n        return {\n            appIndex: _utils_utils_js__WEBPACK_IMPORTED_MODULE_10__.ensureUint64(appIndex),\n            address: ensureAddress(address)\n        };\n    }\n    throw new Error(`Not a locals reference: ${input}`);\n}\nfunction ensureResourceReference(input) {\n    if (input != null && typeof input === \"object\") {\n        const { address, appIndex, assetIndex, holding, locals, box } = input;\n        if (address !== undefined) {\n            return {\n                address: ensureAddress(address)\n            };\n        }\n        if (appIndex !== undefined) {\n            return {\n                appIndex: _utils_utils_js__WEBPACK_IMPORTED_MODULE_10__.ensureUint64(appIndex)\n            };\n        }\n        if (assetIndex !== undefined) {\n            return {\n                assetIndex: _utils_utils_js__WEBPACK_IMPORTED_MODULE_10__.ensureUint64(assetIndex)\n            };\n        }\n        if (holding !== undefined) {\n            return {\n                holding: ensureHoldingReference(holding)\n            };\n        }\n        if (locals !== undefined) {\n            return {\n                locals: ensureLocalsReference(locals)\n            };\n        }\n        if (box !== undefined) {\n            return {\n                box: ensureBoxReference(box)\n            };\n        }\n    }\n    throw new Error(`Not a resource reference: ${input}`);\n}\nconst TX_TAG = new TextEncoder().encode(\"TX\");\n/**\n * Transaction enables construction of Algorand transactions\n * */ class Transaction {\n    constructor(params){\n        if (!(0,_types_transactions_base_js__WEBPACK_IMPORTED_MODULE_7__.isTransactionType)(params.type)) {\n            throw new Error(`Invalid transaction type: ${params.type}`);\n        }\n        // Common fields\n        this.type = params.type; // verified above\n        this.sender = ensureAddress(params.sender);\n        this.note = ensureUint8Array(params.note ?? new Uint8Array());\n        this.lease = optionalFixedLengthByteArray(params.lease, ALGORAND_TRANSACTION_LEASE_LENGTH, \"lease\");\n        this.rekeyTo = optionalAddress(params.rekeyTo);\n        // Group\n        this.group = undefined;\n        // Suggested params fields\n        this.firstValid = _utils_utils_js__WEBPACK_IMPORTED_MODULE_10__.ensureUint64(params.suggestedParams.firstValid);\n        this.lastValid = _utils_utils_js__WEBPACK_IMPORTED_MODULE_10__.ensureUint64(params.suggestedParams.lastValid);\n        if (params.suggestedParams.genesisID) {\n            if (typeof params.suggestedParams.genesisID !== \"string\") {\n                throw new Error(\"Genesis ID must be a string if present\");\n            }\n            this.genesisID = params.suggestedParams.genesisID;\n        }\n        this.genesisHash = optionalUint8Array(params.suggestedParams.genesisHash);\n        // Fee is handled at the end\n        const fieldsPresent = [];\n        if (params.paymentParams) fieldsPresent.push(_types_transactions_base_js__WEBPACK_IMPORTED_MODULE_7__.TransactionType.pay);\n        if (params.keyregParams) fieldsPresent.push(_types_transactions_base_js__WEBPACK_IMPORTED_MODULE_7__.TransactionType.keyreg);\n        if (params.assetConfigParams) fieldsPresent.push(_types_transactions_base_js__WEBPACK_IMPORTED_MODULE_7__.TransactionType.acfg);\n        if (params.assetTransferParams) fieldsPresent.push(_types_transactions_base_js__WEBPACK_IMPORTED_MODULE_7__.TransactionType.axfer);\n        if (params.assetFreezeParams) fieldsPresent.push(_types_transactions_base_js__WEBPACK_IMPORTED_MODULE_7__.TransactionType.afrz);\n        if (params.appCallParams) fieldsPresent.push(_types_transactions_base_js__WEBPACK_IMPORTED_MODULE_7__.TransactionType.appl);\n        if (params.stateProofParams) fieldsPresent.push(_types_transactions_base_js__WEBPACK_IMPORTED_MODULE_7__.TransactionType.stpf);\n        if (params.heartbeatParams) fieldsPresent.push(_types_transactions_base_js__WEBPACK_IMPORTED_MODULE_7__.TransactionType.hb);\n        if (fieldsPresent.length !== 1) {\n            throw new Error(`Transaction has wrong number of type fields present (${fieldsPresent.length}): ${fieldsPresent}`);\n        }\n        if (this.type !== fieldsPresent[0]) {\n            throw new Error(`Transaction has type ${this.type} but fields present for ${fieldsPresent[0]}`);\n        }\n        if (params.paymentParams) {\n            this.payment = {\n                receiver: ensureAddress(params.paymentParams.receiver),\n                amount: _utils_utils_js__WEBPACK_IMPORTED_MODULE_10__.ensureUint64(params.paymentParams.amount),\n                closeRemainderTo: optionalAddress(params.paymentParams.closeRemainderTo)\n            };\n        }\n        if (params.keyregParams) {\n            this.keyreg = {\n                voteKey: getKeyregKey(params.keyregParams.voteKey, \"voteKey\", KEYREG_VOTE_KEY_LENGTH),\n                selectionKey: getKeyregKey(params.keyregParams.selectionKey, \"selectionKey\", KEYREG_SELECTION_KEY_LENGTH),\n                stateProofKey: getKeyregKey(params.keyregParams.stateProofKey, \"stateProofKey\", KEYREG_STATE_PROOF_KEY_LENGTH),\n                voteFirst: optionalUint64(params.keyregParams.voteFirst),\n                voteLast: optionalUint64(params.keyregParams.voteLast),\n                voteKeyDilution: optionalUint64(params.keyregParams.voteKeyDilution),\n                nonParticipation: ensureBoolean(params.keyregParams.nonParticipation ?? false)\n            };\n            // Checking non-participation key registration\n            if (this.keyreg.nonParticipation && (this.keyreg.voteKey || this.keyreg.selectionKey || this.keyreg.stateProofKey || typeof this.keyreg.voteFirst !== \"undefined\" || typeof this.keyreg.voteLast !== \"undefined\" || typeof this.keyreg.voteKeyDilution !== \"undefined\")) {\n                throw new Error(\"nonParticipation is true but participation params are present.\");\n            }\n            // Checking online key registration\n            if (// If we are participating\n            !this.keyreg.nonParticipation && // And *ANY* participating fields are present\n            (this.keyreg.voteKey || this.keyreg.selectionKey || this.keyreg.stateProofKey || typeof this.keyreg.voteFirst !== \"undefined\" || typeof this.keyreg.voteLast !== \"undefined\" || typeof this.keyreg.voteKeyDilution !== \"undefined\") && // Then *ALL* participating fields must be present (with an exception for stateProofKey,\n            // which was introduced later so for backwards compatibility we don't require it)\n            !(this.keyreg.voteKey && this.keyreg.selectionKey && typeof this.keyreg.voteFirst !== \"undefined\" && typeof this.keyreg.voteLast !== \"undefined\" && typeof this.keyreg.voteKeyDilution !== \"undefined\")) {\n                throw new Error(`Online key registration missing at least one of the following fields: voteKey, selectionKey, voteFirst, voteLast, voteKeyDilution`);\n            }\n        // The last option is an offline key registration where all the fields\n        // nonParticipation, voteKey, selectionKey, stateProofKey, voteFirst, voteLast, voteKeyDilution\n        // are all undefined\n        }\n        if (params.assetConfigParams) {\n            this.assetConfig = {\n                assetIndex: _utils_utils_js__WEBPACK_IMPORTED_MODULE_10__.ensureUint64(params.assetConfigParams.assetIndex ?? 0),\n                total: _utils_utils_js__WEBPACK_IMPORTED_MODULE_10__.ensureUint64(params.assetConfigParams.total ?? 0),\n                decimals: _utils_utils_js__WEBPACK_IMPORTED_MODULE_10__.ensureSafeUnsignedInteger(params.assetConfigParams.decimals ?? 0),\n                defaultFrozen: ensureBoolean(params.assetConfigParams.defaultFrozen ?? false),\n                manager: optionalAddress(params.assetConfigParams.manager),\n                reserve: optionalAddress(params.assetConfigParams.reserve),\n                freeze: optionalAddress(params.assetConfigParams.freeze),\n                clawback: optionalAddress(params.assetConfigParams.clawback),\n                unitName: params.assetConfigParams.unitName,\n                assetName: params.assetConfigParams.assetName,\n                assetURL: params.assetConfigParams.assetURL,\n                assetMetadataHash: optionalFixedLengthByteArray(params.assetConfigParams.assetMetadataHash, ASSET_METADATA_HASH_LENGTH, \"assetMetadataHash\")\n            };\n        }\n        if (params.assetTransferParams) {\n            this.assetTransfer = {\n                assetIndex: _utils_utils_js__WEBPACK_IMPORTED_MODULE_10__.ensureUint64(params.assetTransferParams.assetIndex),\n                amount: _utils_utils_js__WEBPACK_IMPORTED_MODULE_10__.ensureUint64(params.assetTransferParams.amount),\n                assetSender: optionalAddress(params.assetTransferParams.assetSender),\n                receiver: ensureAddress(params.assetTransferParams.receiver),\n                closeRemainderTo: optionalAddress(params.assetTransferParams.closeRemainderTo)\n            };\n        }\n        if (params.assetFreezeParams) {\n            this.assetFreeze = {\n                assetIndex: _utils_utils_js__WEBPACK_IMPORTED_MODULE_10__.ensureUint64(params.assetFreezeParams.assetIndex),\n                freezeAccount: ensureAddress(params.assetFreezeParams.freezeTarget),\n                frozen: ensureBoolean(params.assetFreezeParams.frozen)\n            };\n        }\n        if (params.appCallParams) {\n            const { onComplete } = params.appCallParams;\n            if (!(0,_types_transactions_base_js__WEBPACK_IMPORTED_MODULE_7__.isOnApplicationComplete)(onComplete)) {\n                throw new Error(`Invalid onCompletion value: ${onComplete}`);\n            }\n            this.applicationCall = {\n                appIndex: _utils_utils_js__WEBPACK_IMPORTED_MODULE_10__.ensureUint64(params.appCallParams.appIndex),\n                onComplete,\n                numLocalInts: _utils_utils_js__WEBPACK_IMPORTED_MODULE_10__.ensureSafeUnsignedInteger(params.appCallParams.numLocalInts ?? 0),\n                numLocalByteSlices: _utils_utils_js__WEBPACK_IMPORTED_MODULE_10__.ensureSafeUnsignedInteger(params.appCallParams.numLocalByteSlices ?? 0),\n                numGlobalInts: _utils_utils_js__WEBPACK_IMPORTED_MODULE_10__.ensureSafeUnsignedInteger(params.appCallParams.numGlobalInts ?? 0),\n                numGlobalByteSlices: _utils_utils_js__WEBPACK_IMPORTED_MODULE_10__.ensureSafeUnsignedInteger(params.appCallParams.numGlobalByteSlices ?? 0),\n                extraPages: _utils_utils_js__WEBPACK_IMPORTED_MODULE_10__.ensureSafeUnsignedInteger(params.appCallParams.extraPages ?? 0),\n                approvalProgram: ensureUint8Array(params.appCallParams.approvalProgram ?? new Uint8Array()),\n                clearProgram: ensureUint8Array(params.appCallParams.clearProgram ?? new Uint8Array()),\n                appArgs: ensureArray(params.appCallParams.appArgs ?? []).map(ensureUint8Array),\n                accounts: ensureArray(params.appCallParams.accounts ?? []).map(ensureAddress),\n                foreignApps: ensureArray(params.appCallParams.foreignApps ?? []).map(_utils_utils_js__WEBPACK_IMPORTED_MODULE_10__.ensureUint64),\n                foreignAssets: ensureArray(params.appCallParams.foreignAssets ?? []).map(_utils_utils_js__WEBPACK_IMPORTED_MODULE_10__.ensureUint64),\n                boxes: ensureArray(params.appCallParams.boxes ?? []).map(ensureBoxReference),\n                access: ensureArray(params.appCallParams.access ?? []).map(ensureResourceReference)\n            };\n        }\n        if (params.stateProofParams) {\n            this.stateProof = {\n                stateProofType: _utils_utils_js__WEBPACK_IMPORTED_MODULE_10__.ensureSafeUnsignedInteger(params.stateProofParams.stateProofType ?? 0),\n                stateProof: params.stateProofParams.stateProof,\n                message: params.stateProofParams.message\n            };\n        }\n        if (params.heartbeatParams) {\n            this.heartbeat = new _heartbeat_js__WEBPACK_IMPORTED_MODULE_9__.Heartbeat({\n                address: params.heartbeatParams.address,\n                proof: params.heartbeatParams.proof,\n                seed: params.heartbeatParams.seed,\n                voteID: params.heartbeatParams.voteID,\n                keyDilution: params.heartbeatParams.keyDilution\n            });\n        }\n        // Determine fee\n        this.fee = _utils_utils_js__WEBPACK_IMPORTED_MODULE_10__.ensureUint64(params.suggestedParams.fee);\n        const feeDependsOnSize = !ensureBoolean(params.suggestedParams.flatFee ?? false);\n        if (feeDependsOnSize) {\n            const minFee = _utils_utils_js__WEBPACK_IMPORTED_MODULE_10__.ensureUint64(params.suggestedParams.minFee);\n            this.fee *= BigInt(this.estimateSize());\n            // If suggested fee too small and will be rejected, set to min tx fee\n            if (this.fee < minFee) {\n                this.fee = minFee;\n            }\n        }\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return Transaction.encodingSchema;\n    }\n    toEncodingData() {\n        const data = new Map([\n            [\n                \"type\",\n                this.type\n            ],\n            [\n                \"fv\",\n                this.firstValid\n            ],\n            [\n                \"lv\",\n                this.lastValid\n            ],\n            [\n                \"snd\",\n                this.sender\n            ],\n            [\n                \"gen\",\n                this.genesisID\n            ],\n            [\n                \"gh\",\n                this.genesisHash\n            ],\n            [\n                \"fee\",\n                this.fee\n            ],\n            [\n                \"note\",\n                this.note\n            ],\n            [\n                \"lx\",\n                this.lease\n            ],\n            [\n                \"rekey\",\n                this.rekeyTo\n            ],\n            [\n                \"grp\",\n                this.group\n            ]\n        ]);\n        if (this.payment) {\n            data.set(\"amt\", this.payment.amount);\n            data.set(\"rcv\", this.payment.receiver);\n            data.set(\"close\", this.payment.closeRemainderTo);\n            return data;\n        }\n        if (this.keyreg) {\n            data.set(\"votekey\", this.keyreg.voteKey);\n            data.set(\"selkey\", this.keyreg.selectionKey);\n            data.set(\"sprfkey\", this.keyreg.stateProofKey);\n            data.set(\"votefst\", this.keyreg.voteFirst);\n            data.set(\"votelst\", this.keyreg.voteLast);\n            data.set(\"votekd\", this.keyreg.voteKeyDilution);\n            data.set(\"nonpart\", this.keyreg.nonParticipation);\n            return data;\n        }\n        if (this.assetConfig) {\n            data.set(\"caid\", this.assetConfig.assetIndex);\n            const assetParams = new Map([\n                [\n                    \"t\",\n                    this.assetConfig.total\n                ],\n                [\n                    \"dc\",\n                    this.assetConfig.decimals\n                ],\n                [\n                    \"df\",\n                    this.assetConfig.defaultFrozen\n                ],\n                [\n                    \"m\",\n                    this.assetConfig.manager\n                ],\n                [\n                    \"r\",\n                    this.assetConfig.reserve\n                ],\n                [\n                    \"f\",\n                    this.assetConfig.freeze\n                ],\n                [\n                    \"c\",\n                    this.assetConfig.clawback\n                ],\n                [\n                    \"un\",\n                    this.assetConfig.unitName\n                ],\n                [\n                    \"an\",\n                    this.assetConfig.assetName\n                ],\n                [\n                    \"au\",\n                    this.assetConfig.assetURL\n                ],\n                [\n                    \"am\",\n                    this.assetConfig.assetMetadataHash\n                ]\n            ]);\n            data.set(\"apar\", assetParams);\n            return data;\n        }\n        if (this.assetTransfer) {\n            data.set(\"xaid\", this.assetTransfer.assetIndex);\n            data.set(\"aamt\", this.assetTransfer.amount);\n            data.set(\"arcv\", this.assetTransfer.receiver);\n            data.set(\"aclose\", this.assetTransfer.closeRemainderTo);\n            data.set(\"asnd\", this.assetTransfer.assetSender);\n            return data;\n        }\n        if (this.assetFreeze) {\n            data.set(\"faid\", this.assetFreeze.assetIndex);\n            data.set(\"afrz\", this.assetFreeze.frozen);\n            data.set(\"fadd\", this.assetFreeze.freezeAccount);\n            return data;\n        }\n        if (this.applicationCall) {\n            data.set(\"apid\", this.applicationCall.appIndex);\n            data.set(\"apan\", this.applicationCall.onComplete);\n            data.set(\"apaa\", this.applicationCall.appArgs);\n            data.set(\"apat\", this.applicationCall.accounts);\n            data.set(\"apas\", this.applicationCall.foreignAssets);\n            data.set(\"apfa\", this.applicationCall.foreignApps);\n            data.set(\"apbx\", (0,_boxStorage_js__WEBPACK_IMPORTED_MODULE_1__.boxReferencesToEncodingData)(this.applicationCall.boxes, this.applicationCall.foreignApps, this.applicationCall.appIndex));\n            data.set(\"al\", (0,_appAccess_js__WEBPACK_IMPORTED_MODULE_2__.resourceReferencesToEncodingData)(this.applicationCall.appIndex, this.applicationCall.access));\n            data.set(\"apap\", this.applicationCall.approvalProgram);\n            data.set(\"apsu\", this.applicationCall.clearProgram);\n            data.set(\"apls\", new Map([\n                [\n                    \"nui\",\n                    this.applicationCall.numLocalInts\n                ],\n                [\n                    \"nbs\",\n                    this.applicationCall.numLocalByteSlices\n                ]\n            ]));\n            data.set(\"apgs\", new Map([\n                [\n                    \"nui\",\n                    this.applicationCall.numGlobalInts\n                ],\n                [\n                    \"nbs\",\n                    this.applicationCall.numGlobalByteSlices\n                ]\n            ]));\n            data.set(\"apep\", this.applicationCall.extraPages);\n            return data;\n        }\n        if (this.stateProof) {\n            data.set(\"sptype\", this.stateProof.stateProofType);\n            data.set(\"sp\", this.stateProof.stateProof ? this.stateProof.stateProof.toEncodingData() : undefined);\n            data.set(\"spmsg\", this.stateProof.message ? this.stateProof.message.toEncodingData() : undefined);\n            return data;\n        }\n        if (this.heartbeat) {\n            const heartbeat = new _heartbeat_js__WEBPACK_IMPORTED_MODULE_9__.Heartbeat({\n                address: this.heartbeat.address,\n                proof: this.heartbeat.proof,\n                seed: this.heartbeat.seed,\n                voteID: this.heartbeat.voteID,\n                keyDilution: this.heartbeat.keyDilution\n            });\n            data.set(\"hb\", heartbeat.toEncodingData());\n            return data;\n        }\n        throw new Error(`Unexpected transaction type: ${this.type}`);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded logic sig account: ${data}`);\n        }\n        const suggestedParams = {\n            minFee: BigInt(0),\n            flatFee: true,\n            fee: data.get(\"fee\") ?? 0,\n            firstValid: data.get(\"fv\") ?? 0,\n            lastValid: data.get(\"lv\") ?? 0,\n            genesisHash: data.get(\"gh\"),\n            genesisID: data.get(\"gen\")\n        };\n        const txnType = data.get(\"type\");\n        if (!(0,_types_transactions_base_js__WEBPACK_IMPORTED_MODULE_7__.isTransactionType)(txnType)) {\n            throw new Error(`Unrecognized transaction type: ${txnType}`);\n        }\n        const params = {\n            type: txnType,\n            sender: data.get(\"snd\") ?? _encoding_address_js__WEBPACK_IMPORTED_MODULE_3__.Address.zeroAddress(),\n            note: data.get(\"note\"),\n            lease: data.get(\"lx\"),\n            suggestedParams\n        };\n        if (data.get(\"rekey\")) {\n            params.rekeyTo = data.get(\"rekey\");\n        }\n        if (params.type === _types_transactions_base_js__WEBPACK_IMPORTED_MODULE_7__.TransactionType.pay) {\n            const paymentParams = {\n                amount: data.get(\"amt\") ?? 0,\n                receiver: data.get(\"rcv\") ?? _encoding_address_js__WEBPACK_IMPORTED_MODULE_3__.Address.zeroAddress()\n            };\n            if (data.get(\"close\")) {\n                paymentParams.closeRemainderTo = data.get(\"close\");\n            }\n            params.paymentParams = paymentParams;\n        } else if (params.type === _types_transactions_base_js__WEBPACK_IMPORTED_MODULE_7__.TransactionType.keyreg) {\n            const keyregParams = {\n                voteKey: data.get(\"votekey\"),\n                selectionKey: data.get(\"selkey\"),\n                stateProofKey: data.get(\"sprfkey\"),\n                voteFirst: data.get(\"votefst\"),\n                voteLast: data.get(\"votelst\"),\n                voteKeyDilution: data.get(\"votekd\"),\n                nonParticipation: data.get(\"nonpart\")\n            };\n            params.keyregParams = keyregParams;\n        } else if (params.type === _types_transactions_base_js__WEBPACK_IMPORTED_MODULE_7__.TransactionType.acfg) {\n            const assetConfigParams = {\n                assetIndex: data.get(\"caid\")\n            };\n            if (data.get(\"apar\")) {\n                const assetParams = data.get(\"apar\");\n                assetConfigParams.total = assetParams.get(\"t\");\n                assetConfigParams.decimals = assetParams.get(\"dc\");\n                assetConfigParams.defaultFrozen = assetParams.get(\"df\");\n                assetConfigParams.unitName = assetParams.get(\"un\");\n                assetConfigParams.assetName = assetParams.get(\"an\");\n                assetConfigParams.assetURL = assetParams.get(\"au\");\n                assetConfigParams.assetMetadataHash = assetParams.get(\"am\");\n                if (assetParams.get(\"m\")) {\n                    assetConfigParams.manager = assetParams.get(\"m\");\n                }\n                if (assetParams.get(\"r\")) {\n                    assetConfigParams.reserve = assetParams.get(\"r\");\n                }\n                if (assetParams.get(\"f\")) {\n                    assetConfigParams.freeze = assetParams.get(\"f\");\n                }\n                if (assetParams.get(\"c\")) {\n                    assetConfigParams.clawback = assetParams.get(\"c\");\n                }\n            }\n            params.assetConfigParams = assetConfigParams;\n        } else if (params.type === _types_transactions_base_js__WEBPACK_IMPORTED_MODULE_7__.TransactionType.axfer) {\n            const assetTransferParams = {\n                assetIndex: data.get(\"xaid\") ?? 0,\n                amount: data.get(\"aamt\") ?? 0,\n                receiver: data.get(\"arcv\") ?? _encoding_address_js__WEBPACK_IMPORTED_MODULE_3__.Address.zeroAddress()\n            };\n            if (data.get(\"aclose\")) {\n                assetTransferParams.closeRemainderTo = data.get(\"aclose\");\n            }\n            if (data.get(\"asnd\")) {\n                assetTransferParams.assetSender = data.get(\"asnd\");\n            }\n            params.assetTransferParams = assetTransferParams;\n        } else if (params.type === _types_transactions_base_js__WEBPACK_IMPORTED_MODULE_7__.TransactionType.afrz) {\n            const assetFreezeParams = {\n                assetIndex: data.get(\"faid\") ?? 0,\n                freezeTarget: data.get(\"fadd\") ?? _encoding_address_js__WEBPACK_IMPORTED_MODULE_3__.Address.zeroAddress(),\n                frozen: data.get(\"afrz\") ?? false\n            };\n            params.assetFreezeParams = assetFreezeParams;\n        } else if (params.type === _types_transactions_base_js__WEBPACK_IMPORTED_MODULE_7__.TransactionType.appl) {\n            const appCallParams = {\n                appIndex: data.get(\"apid\") ?? 0,\n                onComplete: _utils_utils_js__WEBPACK_IMPORTED_MODULE_10__.ensureSafeUnsignedInteger(data.get(\"apan\") ?? 0),\n                appArgs: data.get(\"apaa\"),\n                accounts: data.get(\"apat\"),\n                foreignAssets: data.get(\"apas\"),\n                foreignApps: data.get(\"apfa\"),\n                approvalProgram: data.get(\"apap\"),\n                clearProgram: data.get(\"apsu\"),\n                extraPages: data.get(\"apep\")\n            };\n            const localSchema = data.get(\"apls\");\n            if (localSchema) {\n                appCallParams.numLocalInts = localSchema.get(\"nui\");\n                appCallParams.numLocalByteSlices = localSchema.get(\"nbs\");\n            }\n            const globalSchema = data.get(\"apgs\");\n            if (globalSchema) {\n                appCallParams.numGlobalInts = globalSchema.get(\"nui\");\n                appCallParams.numGlobalByteSlices = globalSchema.get(\"nbs\");\n            }\n            const boxes = data.get(\"apbx\");\n            if (boxes) {\n                appCallParams.boxes = boxes.map((box)=>{\n                    const index = _utils_utils_js__WEBPACK_IMPORTED_MODULE_10__.ensureSafeUnsignedInteger(box.get(\"i\") ?? 0);\n                    const name = ensureUint8Array(box.get(\"n\") ?? new Uint8Array());\n                    if (index === 0) {\n                        // We return 0 for the app ID so that it's guaranteed translateBoxReferences will\n                        // translate the app index back to 0. If we instead returned the called app ID,\n                        // translateBoxReferences would translate the app index to a nonzero value if the called\n                        // app is also in the foreign app array.\n                        return {\n                            appIndex: 0,\n                            name\n                        };\n                    }\n                    if (!appCallParams.foreignApps || index > appCallParams.foreignApps.length) {\n                        throw new Error(`Cannot find foreign app index ${index} in ${appCallParams.foreignApps}`);\n                    }\n                    return {\n                        appIndex: appCallParams.foreignApps[index - 1],\n                        name\n                    };\n                });\n            }\n            const references = data.get(\"al\");\n            if (references) {\n                appCallParams.access = (0,_appAccess_js__WEBPACK_IMPORTED_MODULE_2__.convertIndicesToResourceReferences)(references);\n            }\n            params.appCallParams = appCallParams;\n        } else if (params.type === _types_transactions_base_js__WEBPACK_IMPORTED_MODULE_7__.TransactionType.stpf) {\n            const stateProofParams = {\n                stateProofType: data.get(\"sptype\"),\n                stateProof: data.get(\"sp\") ? _stateproof_js__WEBPACK_IMPORTED_MODULE_8__.StateProof.fromEncodingData(data.get(\"sp\")) : undefined,\n                message: data.get(\"spmsg\") ? _stateproof_js__WEBPACK_IMPORTED_MODULE_8__.StateProofMessage.fromEncodingData(data.get(\"spmsg\")) : undefined\n            };\n            params.stateProofParams = stateProofParams;\n        } else if (params.type === _types_transactions_base_js__WEBPACK_IMPORTED_MODULE_7__.TransactionType.hb) {\n            const heartbeat = _heartbeat_js__WEBPACK_IMPORTED_MODULE_9__.Heartbeat.fromEncodingData(data.get(\"hb\"));\n            const heartbeatParams = {\n                address: heartbeat.address,\n                proof: heartbeat.proof,\n                seed: heartbeat.seed,\n                voteID: heartbeat.voteID,\n                keyDilution: heartbeat.keyDilution\n            };\n            params.heartbeatParams = heartbeatParams;\n        } else {\n            const exhaustiveCheck = params.type;\n            throw new Error(`Unexpected transaction type: ${exhaustiveCheck}`);\n        }\n        const txn = new Transaction(params);\n        if (data.get(\"grp\")) {\n            const group = ensureUint8Array(data.get(\"grp\"));\n            if (group.byteLength !== ALGORAND_TRANSACTION_GROUP_LENGTH) {\n                throw new Error(`Invalid group length: ${group.byteLength}`);\n            }\n            txn.group = group;\n        }\n        return txn;\n    }\n    estimateSize() {\n        return this.toByte().length + NUM_ADDL_BYTES_AFTER_SIGNING;\n    }\n    bytesToSign() {\n        const encodedMsg = this.toByte();\n        return _utils_utils_js__WEBPACK_IMPORTED_MODULE_10__.concatArrays(TX_TAG, encodedMsg);\n    }\n    toByte() {\n        return _encoding_encoding_js__WEBPACK_IMPORTED_MODULE_4__.encodeMsgpack(this);\n    }\n    // returns the raw signature\n    rawSignTxn(sk) {\n        const toBeSigned = this.bytesToSign();\n        const sig = _nacl_naclWrappers_js__WEBPACK_IMPORTED_MODULE_6__.sign(toBeSigned, sk);\n        return sig;\n    }\n    signTxn(sk) {\n        // TODO: deprecate in favor of SignedTransaction class\n        const keypair = _nacl_naclWrappers_js__WEBPACK_IMPORTED_MODULE_6__.keyPairFromSecretKey(sk);\n        const signerAddr = new _encoding_address_js__WEBPACK_IMPORTED_MODULE_3__.Address(keypair.publicKey);\n        const sig = this.rawSignTxn(sk);\n        return this.attachSignature(signerAddr, sig);\n    }\n    attachSignature(signerAddr, signature) {\n        // TODO: deprecate in favor of SignedTransaction class\n        if (!_nacl_naclWrappers_js__WEBPACK_IMPORTED_MODULE_6__.isValidSignatureLength(signature.length)) {\n            throw new Error(\"Invalid signature length\");\n        }\n        const sTxn = new Map([\n            [\n                \"sig\",\n                signature\n            ],\n            [\n                \"txn\",\n                this.toEncodingData()\n            ]\n        ]);\n        const signerAddrObj = ensureAddress(signerAddr);\n        // add AuthAddr if signing with a different key than From indicates\n        if (!this.sender.equals(signerAddrObj)) {\n            sTxn.set(\"sgnr\", signerAddrObj);\n        }\n        // This is a hack to avoid a circular reference with the SignedTransaction class\n        const stxnSchema = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.NamedMapSchema((0,_encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.allOmitEmpty)([\n            {\n                key: \"txn\",\n                valueSchema: Transaction.encodingSchema\n            },\n            {\n                key: \"sig\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.FixedLengthByteArraySchema(64)\n            },\n            {\n                key: \"sgnr\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.AddressSchema())\n            }\n        ]));\n        return _encoding_encoding_js__WEBPACK_IMPORTED_MODULE_4__.msgpackRawEncode(stxnSchema.prepareMsgpack(sTxn));\n    }\n    rawTxID() {\n        const enMsg = this.toByte();\n        const gh = _utils_utils_js__WEBPACK_IMPORTED_MODULE_10__.concatArrays(TX_TAG, enMsg);\n        return Uint8Array.from(_nacl_naclWrappers_js__WEBPACK_IMPORTED_MODULE_6__.genericHash(gh));\n    }\n    txID() {\n        const hash = this.rawTxID();\n        return hi_base32__WEBPACK_IMPORTED_MODULE_0__.encode(hash).slice(0, ALGORAND_TRANSACTION_LENGTH);\n    }\n}\nTransaction.encodingSchema = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.NamedMapSchema((0,_encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.allOmitEmpty)([\n    // Common\n    {\n        key: \"type\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.StringSchema()\n    },\n    {\n        key: \"snd\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.AddressSchema()\n    },\n    {\n        key: \"lv\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.Uint64Schema()\n    },\n    {\n        key: \"gen\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.StringSchema())\n    },\n    {\n        key: \"gh\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.FixedLengthByteArraySchema(32))\n    },\n    {\n        key: \"fee\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.Uint64Schema()\n    },\n    {\n        key: \"fv\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.Uint64Schema()\n    },\n    {\n        key: \"note\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.ByteArraySchema()\n    },\n    {\n        key: \"lx\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.FixedLengthByteArraySchema(32))\n    },\n    {\n        key: \"rekey\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.AddressSchema())\n    },\n    {\n        key: \"grp\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.FixedLengthByteArraySchema(32))\n    },\n    // We mark all top-level type-specific fields optional because they will not be present when\n    // the transaction is not that type.\n    // Payment\n    {\n        key: \"amt\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.Uint64Schema())\n    },\n    {\n        key: \"rcv\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.AddressSchema())\n    },\n    {\n        key: \"close\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.AddressSchema())\n    },\n    // Keyreg\n    {\n        key: \"votekey\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.FixedLengthByteArraySchema(32))\n    },\n    {\n        key: \"selkey\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.FixedLengthByteArraySchema(32))\n    },\n    {\n        key: \"sprfkey\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.FixedLengthByteArraySchema(64))\n    },\n    {\n        key: \"votefst\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.Uint64Schema())\n    },\n    {\n        key: \"votelst\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.Uint64Schema())\n    },\n    {\n        key: \"votekd\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.Uint64Schema())\n    },\n    {\n        key: \"nonpart\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.BooleanSchema())\n    },\n    // AssetConfig\n    {\n        key: \"caid\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.Uint64Schema())\n    },\n    {\n        key: \"apar\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.NamedMapSchema((0,_encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.allOmitEmpty)([\n            {\n                key: \"t\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.Uint64Schema()\n            },\n            {\n                key: \"dc\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.Uint64Schema()\n            },\n            {\n                key: \"df\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.BooleanSchema()\n            },\n            {\n                key: \"m\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.AddressSchema())\n            },\n            {\n                key: \"r\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.AddressSchema())\n            },\n            {\n                key: \"f\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.AddressSchema())\n            },\n            {\n                key: \"c\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.AddressSchema())\n            },\n            {\n                key: \"un\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.StringSchema())\n            },\n            {\n                key: \"an\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.StringSchema())\n            },\n            {\n                key: \"au\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.StringSchema())\n            },\n            {\n                key: \"am\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.FixedLengthByteArraySchema(32))\n            }\n        ])))\n    },\n    // AssetTransfer\n    {\n        key: \"xaid\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.Uint64Schema())\n    },\n    {\n        key: \"aamt\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.Uint64Schema())\n    },\n    {\n        key: \"arcv\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.AddressSchema())\n    },\n    {\n        key: \"aclose\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.AddressSchema())\n    },\n    {\n        key: \"asnd\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.AddressSchema())\n    },\n    // AssetFreeze\n    {\n        key: \"faid\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.Uint64Schema())\n    },\n    {\n        key: \"afrz\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.BooleanSchema())\n    },\n    {\n        key: \"fadd\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.AddressSchema())\n    },\n    // Application\n    {\n        key: \"apid\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.Uint64Schema())\n    },\n    {\n        key: \"apan\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.Uint64Schema())\n    },\n    {\n        key: \"apaa\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.ArraySchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.ByteArraySchema()))\n    },\n    {\n        key: \"apat\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.ArraySchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.AddressSchema()))\n    },\n    {\n        key: \"apas\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.ArraySchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.Uint64Schema()))\n    },\n    {\n        key: \"apfa\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.ArraySchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.Uint64Schema()))\n    },\n    {\n        key: \"apbx\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.ArraySchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.NamedMapSchema((0,_encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.allOmitEmpty)([\n            {\n                key: \"i\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.Uint64Schema()\n            },\n            {\n                key: \"n\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.ByteArraySchema()\n            }\n        ]))))\n    },\n    {\n        key: \"al\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.ArraySchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.NamedMapSchema((0,_encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.allOmitEmpty)([\n            {\n                key: \"d\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.AddressSchema())\n            },\n            {\n                key: \"s\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.Uint64Schema())\n            },\n            {\n                key: \"p\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.Uint64Schema())\n            },\n            {\n                key: \"h\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.NamedMapSchema((0,_encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.allOmitEmpty)([\n                    {\n                        key: \"d\",\n                        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.Uint64Schema()\n                    },\n                    {\n                        key: \"s\",\n                        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.Uint64Schema()\n                    }\n                ])))\n            },\n            {\n                key: \"l\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.NamedMapSchema((0,_encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.allOmitEmpty)([\n                    {\n                        key: \"d\",\n                        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.Uint64Schema()\n                    },\n                    {\n                        key: \"p\",\n                        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.Uint64Schema()\n                    }\n                ])))\n            },\n            {\n                key: \"b\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.NamedMapSchema((0,_encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.allOmitEmpty)([\n                    {\n                        key: \"i\",\n                        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.Uint64Schema()\n                    },\n                    {\n                        key: \"n\",\n                        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.ByteArraySchema()\n                    }\n                ])))\n            }\n        ]))))\n    },\n    {\n        key: \"apap\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.ByteArraySchema())\n    },\n    {\n        key: \"apsu\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.ByteArraySchema())\n    },\n    {\n        key: \"apls\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.NamedMapSchema((0,_encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.allOmitEmpty)([\n            {\n                key: \"nui\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.Uint64Schema()\n            },\n            {\n                key: \"nbs\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.Uint64Schema()\n            }\n        ])))\n    },\n    {\n        key: \"apgs\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.NamedMapSchema((0,_encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.allOmitEmpty)([\n            {\n                key: \"nui\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.Uint64Schema()\n            },\n            {\n                key: \"nbs\",\n                valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.Uint64Schema()\n            }\n        ])))\n    },\n    {\n        key: \"apep\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.Uint64Schema())\n    },\n    // StateProof\n    {\n        key: \"sptype\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.Uint64Schema())\n    },\n    {\n        key: \"sp\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.OptionalSchema(_stateproof_js__WEBPACK_IMPORTED_MODULE_8__.StateProof.encodingSchema)\n    },\n    {\n        key: \"spmsg\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.OptionalSchema(_stateproof_js__WEBPACK_IMPORTED_MODULE_8__.StateProofMessage.encodingSchema)\n    },\n    // Heartbeat\n    {\n        key: \"hb\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_5__.OptionalSchema(_heartbeat_js__WEBPACK_IMPORTED_MODULE_9__.Heartbeat.encodingSchema)\n    }\n]));\n/**\n * encodeUnsignedTransaction takes a completed txnBuilder.Transaction object, such as from the makeFoo\n * family of transactions, and converts it to a Buffer\n * @param transactionObject - the completed Transaction object\n */ function encodeUnsignedTransaction(transactionObject) {\n    return _encoding_encoding_js__WEBPACK_IMPORTED_MODULE_4__.encodeMsgpack(transactionObject);\n}\n/**\n * decodeUnsignedTransaction takes a Uint8Array (as if from encodeUnsignedTransaction) and converts it to a txnBuilder.Transaction object\n * @param transactionBuffer - the Uint8Array containing a transaction\n */ function decodeUnsignedTransaction(transactionBuffer) {\n    return _encoding_encoding_js__WEBPACK_IMPORTED_MODULE_4__.decodeMsgpack(transactionBuffer, Transaction);\n} //# sourceMappingURL=transaction.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/transaction.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/types/block.js":
/*!******************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/types/block.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ApplyData: () => (/* binding */ ApplyData),\n/* harmony export */   Block: () => (/* binding */ Block),\n/* harmony export */   BlockHeader: () => (/* binding */ BlockHeader),\n/* harmony export */   EvalDelta: () => (/* binding */ EvalDelta),\n/* harmony export */   ParticipationUpdates: () => (/* binding */ ParticipationUpdates),\n/* harmony export */   RewardState: () => (/* binding */ RewardState),\n/* harmony export */   SignedTxnInBlock: () => (/* binding */ SignedTxnInBlock),\n/* harmony export */   SignedTxnWithAD: () => (/* binding */ SignedTxnWithAD),\n/* harmony export */   StateProofTrackingData: () => (/* binding */ StateProofTrackingData),\n/* harmony export */   TxnCommitments: () => (/* binding */ TxnCommitments),\n/* harmony export */   UpgradeState: () => (/* binding */ UpgradeState),\n/* harmony export */   UpgradeVote: () => (/* binding */ UpgradeVote),\n/* harmony export */   ValueDelta: () => (/* binding */ ValueDelta)\n/* harmony export */ });\n/* harmony import */ var _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../encoding/schema/index.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/schema/index.js\");\n/* harmony import */ var _signedTransaction_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../signedTransaction.js */ \"(ssr)/./node_modules/algosdk/dist/esm/signedTransaction.js\");\n\n\n/**\n * StateProofTrackingData tracks the status of state proofs.\n */ class StateProofTrackingData {\n    constructor(params){\n        this.stateProofVotersCommitment = params.stateProofVotersCommitment;\n        this.stateProofOnlineTotalWeight = params.stateProofOnlineTotalWeight;\n        this.stateProofNextRound = params.stateProofNextRound;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return StateProofTrackingData.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"v\",\n                this.stateProofVotersCommitment\n            ],\n            [\n                \"t\",\n                this.stateProofOnlineTotalWeight\n            ],\n            [\n                \"n\",\n                this.stateProofNextRound\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded StateProofTrackingData: ${data}`);\n        }\n        return new StateProofTrackingData({\n            stateProofVotersCommitment: data.get(\"v\"),\n            stateProofOnlineTotalWeight: data.get(\"t\"),\n            stateProofNextRound: data.get(\"n\")\n        });\n    }\n}\nStateProofTrackingData.encodingSchema = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.NamedMapSchema((0,_encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.allOmitEmpty)([\n    {\n        key: \"v\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.ByteArraySchema()\n    },\n    {\n        key: \"t\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.Uint64Schema()\n    },\n    {\n        key: \"n\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.Uint64Schema()\n    }\n]));\n/**\n * TxnCommitments represents the commitments computed from the transactions in the block.\n * It contains multiple commitments based on different algorithms and hash functions, to support\n * different use cases.\n */ class TxnCommitments {\n    constructor(params){\n        this.nativeSha512_256Commitment = params.nativeSha512_256Commitment;\n        this.sha256Commitment = params.sha256Commitment;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return TxnCommitments.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"txn\",\n                this.nativeSha512_256Commitment\n            ],\n            [\n                \"txn256\",\n                this.sha256Commitment\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded TxnCommitments: ${data}`);\n        }\n        return new TxnCommitments({\n            nativeSha512_256Commitment: data.get(\"txn\"),\n            sha256Commitment: data.get(\"txn256\")\n        });\n    }\n}\nTxnCommitments.encodingSchema = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.NamedMapSchema((0,_encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.allOmitEmpty)([\n    {\n        key: \"txn\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.FixedLengthByteArraySchema(32)\n    },\n    {\n        key: \"txn256\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.FixedLengthByteArraySchema(32)\n    }\n]));\n/**\n * RewardsState represents the global parameters controlling the rate at which accounts accrue rewards.\n */ class RewardState {\n    constructor(params){\n        this.feeSink = params.feeSink;\n        this.rewardsPool = params.rewardsPool;\n        this.rewardsLevel = params.rewardsLevel;\n        this.rewardsRate = params.rewardsRate;\n        this.rewardsResidue = params.rewardsResidue;\n        this.rewardsRecalculationRound = params.rewardsRecalculationRound;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return RewardState.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"fees\",\n                this.feeSink\n            ],\n            [\n                \"rwd\",\n                this.rewardsPool\n            ],\n            [\n                \"earn\",\n                this.rewardsLevel\n            ],\n            [\n                \"rate\",\n                this.rewardsRate\n            ],\n            [\n                \"frac\",\n                this.rewardsResidue\n            ],\n            [\n                \"rwcalr\",\n                this.rewardsRecalculationRound\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded RewardState: ${data}`);\n        }\n        return new RewardState({\n            feeSink: data.get(\"fees\"),\n            rewardsPool: data.get(\"rwd\"),\n            rewardsLevel: data.get(\"earn\"),\n            rewardsRate: data.get(\"rate\"),\n            rewardsResidue: data.get(\"frac\"),\n            rewardsRecalculationRound: data.get(\"rwcalr\")\n        });\n    }\n}\nRewardState.encodingSchema = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.NamedMapSchema((0,_encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.allOmitEmpty)([\n    {\n        key: \"fees\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.AddressSchema()\n    },\n    {\n        key: \"rwd\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.AddressSchema()\n    },\n    {\n        key: \"earn\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.Uint64Schema()\n    },\n    {\n        key: \"rate\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.Uint64Schema()\n    },\n    {\n        key: \"frac\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.Uint64Schema()\n    },\n    {\n        key: \"rwcalr\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.Uint64Schema()\n    }\n]));\n/**\n * UpgradeState tracks the protocol upgrade state machine.  It is, strictly speaking, computable from\n * the history of all UpgradeVotes but we keep it in the block for explicitness and convenience\n * (instead of materializing it separately, like balances).\n */ class UpgradeState {\n    constructor(params){\n        this.currentProtocol = params.currentProtocol;\n        this.nextProtocol = params.nextProtocol;\n        this.nextProtocolApprovals = params.nextProtocolApprovals;\n        this.nextProtocolVoteBefore = params.nextProtocolVoteBefore;\n        this.nextProtocolSwitchOn = params.nextProtocolSwitchOn;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return UpgradeState.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"proto\",\n                this.currentProtocol\n            ],\n            [\n                \"nextproto\",\n                this.nextProtocol\n            ],\n            [\n                \"nextyes\",\n                this.nextProtocolApprovals\n            ],\n            [\n                \"nextbefore\",\n                this.nextProtocolVoteBefore\n            ],\n            [\n                \"nextswitch\",\n                this.nextProtocolSwitchOn\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded UpgradeState: ${data}`);\n        }\n        return new UpgradeState({\n            currentProtocol: data.get(\"proto\"),\n            nextProtocol: data.get(\"nextproto\"),\n            nextProtocolApprovals: data.get(\"nextyes\"),\n            nextProtocolVoteBefore: data.get(\"nextbefore\"),\n            nextProtocolSwitchOn: data.get(\"nextswitch\")\n        });\n    }\n}\nUpgradeState.encodingSchema = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.NamedMapSchema((0,_encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.allOmitEmpty)([\n    {\n        key: \"proto\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.StringSchema()\n    },\n    {\n        key: \"nextproto\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.StringSchema()\n    },\n    {\n        key: \"nextyes\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.Uint64Schema()\n    },\n    {\n        key: \"nextbefore\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.Uint64Schema()\n    },\n    {\n        key: \"nextswitch\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.Uint64Schema()\n    }\n]));\n/**\n * UpgradeVote represents the vote of the block proposer with respect to protocol upgrades.\n */ class UpgradeVote {\n    constructor(params){\n        this.upgradePropose = params.upgradePropose;\n        this.upgradeDelay = params.upgradeDelay;\n        this.upgradeApprove = params.upgradeApprove;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return UpgradeVote.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"upgradeprop\",\n                this.upgradePropose\n            ],\n            [\n                \"upgradedelay\",\n                this.upgradeDelay\n            ],\n            [\n                \"upgradeyes\",\n                this.upgradeApprove\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded UpgradeVote: ${data}`);\n        }\n        return new UpgradeVote({\n            upgradePropose: data.get(\"upgradeprop\"),\n            upgradeDelay: data.get(\"upgradedelay\"),\n            upgradeApprove: data.get(\"upgradeyes\")\n        });\n    }\n}\nUpgradeVote.encodingSchema = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.NamedMapSchema((0,_encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.allOmitEmpty)([\n    {\n        key: \"upgradeprop\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.StringSchema()\n    },\n    {\n        key: \"upgradedelay\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.Uint64Schema()\n    },\n    {\n        key: \"upgradeyes\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.BooleanSchema()\n    }\n]));\n/**\n * ParticipationUpdates represents participation account data that needs to be checked/acted on by\n * the network\n */ class ParticipationUpdates {\n    constructor(params){\n        this.expiredParticipationAccounts = params.expiredParticipationAccounts;\n        this.absentParticipationAccounts = params.absentParticipationAccounts;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return ParticipationUpdates.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"partupdrmv\",\n                this.expiredParticipationAccounts\n            ],\n            [\n                \"partupdabs\",\n                this.absentParticipationAccounts\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded ParticipationUpdates: ${data}`);\n        }\n        return new ParticipationUpdates({\n            expiredParticipationAccounts: data.get(\"partupdrmv\"),\n            absentParticipationAccounts: data.get(\"partupdabs\")\n        });\n    }\n}\nParticipationUpdates.encodingSchema = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.NamedMapSchema((0,_encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.allOmitEmpty)([\n    {\n        key: \"partupdrmv\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.ArraySchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.AddressSchema())\n    },\n    {\n        key: \"partupdabs\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.ArraySchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.AddressSchema())\n    }\n]));\n/**\n * Represents the metadata and state of a block.\n *\n * For more information, refer to: https://github.com/algorand/go-algorand/blob/master/data/bookkeeping/block.go\n */ class BlockHeader {\n    constructor(params){\n        this.round = params.round;\n        this.branch = params.branch;\n        this.seed = params.seed;\n        this.txnCommitments = params.txnCommitments;\n        this.timestamp = params.timestamp;\n        this.genesisID = params.genesisID;\n        this.genesisHash = params.genesisHash;\n        this.proposer = params.proposer;\n        this.feesCollected = params.feesCollected;\n        this.bonus = params.bonus;\n        this.proposerPayout = params.proposerPayout;\n        this.rewardState = params.rewardState;\n        this.upgradeState = params.upgradeState;\n        this.upgradeVote = params.upgradeVote;\n        this.txnCounter = params.txnCounter;\n        this.stateproofTracking = params.stateproofTracking;\n        this.participationUpdates = params.participationUpdates;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return BlockHeader.encodingSchema;\n    }\n    toEncodingData() {\n        const data = new Map([\n            [\n                \"rnd\",\n                this.round\n            ],\n            [\n                \"prev\",\n                this.branch\n            ],\n            [\n                \"seed\",\n                this.seed\n            ],\n            [\n                \"ts\",\n                this.timestamp\n            ],\n            [\n                \"gen\",\n                this.genesisID\n            ],\n            [\n                \"gh\",\n                this.genesisHash\n            ],\n            [\n                \"prp\",\n                this.proposer\n            ],\n            [\n                \"fc\",\n                this.feesCollected\n            ],\n            [\n                \"bi\",\n                this.bonus\n            ],\n            [\n                \"pp\",\n                this.proposerPayout\n            ],\n            [\n                \"tc\",\n                this.txnCounter\n            ],\n            [\n                \"spt\",\n                (0,_encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.convertMap)(this.stateproofTracking, (key, value)=>[\n                        key,\n                        value.toEncodingData()\n                    ])\n            ]\n        ]);\n        return (0,_encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.combineMaps)(data, this.txnCommitments.toEncodingData(), this.rewardState.toEncodingData(), this.upgradeState.toEncodingData(), this.upgradeVote.toEncodingData(), this.participationUpdates.toEncodingData());\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded BlockHeader: ${data}`);\n        }\n        return new BlockHeader({\n            round: data.get(\"rnd\"),\n            branch: data.get(\"prev\"),\n            seed: data.get(\"seed\"),\n            txnCommitments: TxnCommitments.fromEncodingData(data),\n            timestamp: data.get(\"ts\"),\n            genesisID: data.get(\"gen\"),\n            genesisHash: data.get(\"gh\"),\n            proposer: data.get(\"prp\"),\n            feesCollected: data.get(\"fc\"),\n            bonus: data.get(\"bi\"),\n            proposerPayout: data.get(\"pp\"),\n            rewardState: RewardState.fromEncodingData(data),\n            upgradeState: UpgradeState.fromEncodingData(data),\n            upgradeVote: UpgradeVote.fromEncodingData(data),\n            txnCounter: data.get(\"tc\"),\n            stateproofTracking: (0,_encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.convertMap)(data.get(\"spt\"), (key, value)=>[\n                    Number(key),\n                    StateProofTrackingData.fromEncodingData(value)\n                ]),\n            participationUpdates: ParticipationUpdates.fromEncodingData(data)\n        });\n    }\n}\nBlockHeader.encodingSchema = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.NamedMapSchema((0,_encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.allOmitEmpty)([\n    {\n        key: \"rnd\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.Uint64Schema()\n    },\n    {\n        key: \"prev\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.BlockHashSchema()\n    },\n    {\n        key: \"seed\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.ByteArraySchema()\n    },\n    {\n        key: \"\",\n        valueSchema: TxnCommitments.encodingSchema,\n        embedded: true\n    },\n    {\n        key: \"ts\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.Uint64Schema()\n    },\n    {\n        key: \"gen\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.StringSchema()\n    },\n    {\n        key: \"gh\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.FixedLengthByteArraySchema(32)\n    },\n    {\n        key: \"prp\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.AddressSchema()\n    },\n    {\n        key: \"fc\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.Uint64Schema()\n    },\n    {\n        key: \"bi\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.Uint64Schema()\n    },\n    {\n        key: \"pp\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.Uint64Schema()\n    },\n    {\n        key: \"\",\n        valueSchema: RewardState.encodingSchema,\n        embedded: true\n    },\n    {\n        key: \"\",\n        valueSchema: UpgradeState.encodingSchema,\n        embedded: true\n    },\n    {\n        key: \"\",\n        valueSchema: UpgradeVote.encodingSchema,\n        embedded: true\n    },\n    {\n        key: \"tc\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.Uint64Schema()\n    },\n    {\n        key: \"spt\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.Uint64MapSchema(StateProofTrackingData.encodingSchema)\n    },\n    {\n        key: \"\",\n        valueSchema: ParticipationUpdates.encodingSchema,\n        embedded: true\n    }\n]));\nclass ValueDelta {\n    constructor(params){\n        this.action = params.action;\n        this.bytes = params.bytes;\n        this.uint = params.uint;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return ValueDelta.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"at\",\n                this.action\n            ],\n            [\n                \"bs\",\n                this.bytes\n            ],\n            [\n                \"ui\",\n                this.uint\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded ValueDelta: ${data}`);\n        }\n        return new ValueDelta({\n            action: Number(data.get(\"at\")),\n            bytes: data.get(\"bs\"),\n            uint: data.get(\"ui\")\n        });\n    }\n}\nValueDelta.encodingSchema = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.NamedMapSchema((0,_encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.allOmitEmpty)([\n    {\n        key: \"at\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.Uint64Schema()\n    },\n    {\n        key: \"bs\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.SpecialCaseBinaryStringSchema()\n    },\n    {\n        key: \"ui\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.Uint64Schema()\n    }\n]));\nclass EvalDelta {\n    static get encodingSchema() {\n        // This is declared like this in order to break the circular dependency of\n        // SignedTxnWithAD -> ApplyData -> EvalDelta -> SignedTxnWithAD\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries(...(0,_encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.allOmitEmpty)([\n                {\n                    key: \"gd\",\n                    valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.SpecialCaseBinaryStringMapSchema(ValueDelta.encodingSchema))\n                },\n                {\n                    key: \"ld\",\n                    valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.Uint64MapSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.SpecialCaseBinaryStringMapSchema(ValueDelta.encodingSchema)))\n                },\n                {\n                    key: \"sa\",\n                    valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.ArraySchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.AddressSchema()))\n                },\n                {\n                    key: \"lg\",\n                    valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.ArraySchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.SpecialCaseBinaryStringSchema()))\n                },\n                {\n                    key: \"itx\",\n                    valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.OptionalSchema(// eslint-disable-next-line no-use-before-define\n                    new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.ArraySchema(SignedTxnWithAD.encodingSchema))\n                }\n            ]));\n        }\n        return this.encodingSchemaValue;\n    }\n    constructor(params){\n        this.globalDelta = params.globalDelta ?? new Map();\n        this.localDeltas = params.localDeltas ?? new Map();\n        this.sharedAccts = params.sharedAccts ?? [];\n        this.logs = params.logs ?? [];\n        this.innerTxns = params.innerTxns ?? [];\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return EvalDelta.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"gd\",\n                (0,_encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.convertMap)(this.globalDelta, (key, value)=>[\n                        key,\n                        value.toEncodingData()\n                    ])\n            ],\n            [\n                \"ld\",\n                (0,_encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.convertMap)(this.localDeltas, (key, value)=>[\n                        key,\n                        (0,_encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.convertMap)(value, (k, v)=>[\n                                k,\n                                v.toEncodingData()\n                            ])\n                    ])\n            ],\n            [\n                \"sa\",\n                this.sharedAccts\n            ],\n            [\n                \"lg\",\n                this.logs\n            ],\n            [\n                \"itx\",\n                this.innerTxns.map((t)=>t.toEncodingData())\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded EvalDelta: ${data}`);\n        }\n        return new EvalDelta({\n            globalDelta: data.get(\"gd\") ? (0,_encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.convertMap)(data.get(\"gd\"), (key, value)=>[\n                    key,\n                    ValueDelta.fromEncodingData(value)\n                ]) : undefined,\n            localDeltas: data.get(\"ld\") ? (0,_encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.convertMap)(data.get(\"ld\"), (key, value)=>[\n                    Number(key),\n                    (0,_encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.convertMap)(value, (k, v)=>[\n                            k,\n                            ValueDelta.fromEncodingData(v)\n                        ])\n                ]) : undefined,\n            sharedAccts: data.get(\"sa\"),\n            logs: data.get(\"lg\"),\n            // eslint-disable-next-line no-use-before-define\n            innerTxns: (data.get(\"itx\") ?? []).map(SignedTxnWithAD.fromEncodingData)\n        });\n    }\n}\nclass ApplyData {\n    static get encodingSchema() {\n        // This is declared like this in order to break the circular dependency of\n        // SignedTxnWithAD -> ApplyData -> EvalDelta -> SignedTxnWithAD\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries(...(0,_encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.allOmitEmpty)([\n                {\n                    key: \"ca\",\n                    valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.Uint64Schema())\n                },\n                {\n                    key: \"aca\",\n                    valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.Uint64Schema())\n                },\n                {\n                    key: \"rs\",\n                    valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.Uint64Schema())\n                },\n                {\n                    key: \"rr\",\n                    valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.Uint64Schema())\n                },\n                {\n                    key: \"rc\",\n                    valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.Uint64Schema())\n                },\n                {\n                    key: \"dt\",\n                    valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.OptionalSchema(EvalDelta.encodingSchema)\n                },\n                {\n                    key: \"caid\",\n                    valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.Uint64Schema())\n                },\n                {\n                    key: \"apid\",\n                    valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.Uint64Schema())\n                }\n            ]));\n        }\n        return this.encodingSchemaValue;\n    }\n    constructor(params){\n        this.closingAmount = params.closingAmount;\n        this.assetClosingAmount = params.assetClosingAmount;\n        this.senderRewards = params.senderRewards;\n        this.receiverRewards = params.receiverRewards;\n        this.closeRewards = params.closeRewards;\n        this.evalDelta = params.evalDelta;\n        this.configAsset = params.configAsset;\n        this.applicationID = params.applicationID;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return ApplyData.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"ca\",\n                this.closingAmount\n            ],\n            [\n                \"aca\",\n                this.assetClosingAmount\n            ],\n            [\n                \"rs\",\n                this.senderRewards\n            ],\n            [\n                \"rr\",\n                this.receiverRewards\n            ],\n            [\n                \"rc\",\n                this.closeRewards\n            ],\n            [\n                \"dt\",\n                this.evalDelta ? this.evalDelta.toEncodingData() : undefined\n            ],\n            [\n                \"caid\",\n                this.configAsset\n            ],\n            [\n                \"apid\",\n                this.applicationID\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded ApplyData: ${data}`);\n        }\n        return new ApplyData({\n            closingAmount: data.get(\"ca\"),\n            assetClosingAmount: data.get(\"aca\"),\n            senderRewards: data.get(\"rs\"),\n            receiverRewards: data.get(\"rr\"),\n            closeRewards: data.get(\"rc\"),\n            evalDelta: data.get(\"dt\") ? EvalDelta.fromEncodingData(data.get(\"dt\")) : undefined,\n            configAsset: data.get(\"caid\"),\n            applicationID: data.get(\"apid\")\n        });\n    }\n}\nclass SignedTxnWithAD {\n    static get encodingSchema() {\n        // This is declared like this in order to break the circular dependency of\n        // SignedTxnWithAD -> ApplyData -> EvalDelta -> SignedTxnWithAD\n        if (!this.encodingSchemaValue) {\n            this.encodingSchemaValue = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.NamedMapSchema([]);\n            this.encodingSchemaValue.pushEntries(...(0,_encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.allOmitEmpty)([\n                {\n                    key: \"\",\n                    valueSchema: _signedTransaction_js__WEBPACK_IMPORTED_MODULE_1__.SignedTransaction.encodingSchema,\n                    embedded: true\n                },\n                {\n                    key: \"\",\n                    valueSchema: ApplyData.encodingSchema,\n                    embedded: true\n                }\n            ]));\n        }\n        return this.encodingSchemaValue;\n    }\n    constructor(params){\n        this.signedTxn = params.signedTxn;\n        this.applyData = params.applyData;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return SignedTxnWithAD.encodingSchema;\n    }\n    toEncodingData() {\n        return (0,_encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.combineMaps)(this.signedTxn.toEncodingData(), this.applyData.toEncodingData());\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded SignedTxnWithAD: ${data}`);\n        }\n        return new SignedTxnWithAD({\n            signedTxn: _signedTransaction_js__WEBPACK_IMPORTED_MODULE_1__.SignedTransaction.fromEncodingData(data),\n            applyData: ApplyData.fromEncodingData(data)\n        });\n    }\n}\n/**\n * SignedTxnInBlock is how a signed transaction is encoded in a block.\n */ class SignedTxnInBlock {\n    constructor(params){\n        this.signedTxn = params.signedTxn;\n        this.hasGenesisID = params.hasGenesisID;\n        this.hasGenesisHash = params.hasGenesisHash;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return SignedTxnInBlock.encodingSchema;\n    }\n    toEncodingData() {\n        const data = new Map([\n            [\n                \"hgi\",\n                this.hasGenesisID\n            ],\n            [\n                \"hgh\",\n                this.hasGenesisHash\n            ]\n        ]);\n        return (0,_encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.combineMaps)(data, this.signedTxn.toEncodingData());\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded SignedTxnInBlock: ${data}`);\n        }\n        return new SignedTxnInBlock({\n            signedTxn: SignedTxnWithAD.fromEncodingData(data),\n            hasGenesisID: data.get(\"hgi\"),\n            hasGenesisHash: data.get(\"hgh\")\n        });\n    }\n}\nSignedTxnInBlock.encodingSchema = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.NamedMapSchema((0,_encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.allOmitEmpty)([\n    {\n        key: \"\",\n        valueSchema: SignedTxnWithAD.encodingSchema,\n        embedded: true\n    },\n    {\n        key: \"hgi\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.BooleanSchema()\n    },\n    {\n        key: \"hgh\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.BooleanSchema()\n    }\n]));\n/**\n * A Block contains the Payset and metadata corresponding to a given Round.\n */ class Block {\n    constructor(params){\n        this.header = params.header;\n        this.payset = params.payset;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return Block.encodingSchema;\n    }\n    toEncodingData() {\n        const data = new Map([\n            [\n                \"txns\",\n                this.payset.map((p)=>p.toEncodingData())\n            ]\n        ]);\n        return (0,_encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.combineMaps)(data, this.header.toEncodingData());\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded BlockHeader: ${data}`);\n        }\n        return new Block({\n            header: BlockHeader.fromEncodingData(data),\n            payset: data.get(\"txns\").map(SignedTxnInBlock.fromEncodingData)\n        });\n    }\n}\nBlock.encodingSchema = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.NamedMapSchema((0,_encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.allOmitEmpty)([\n    {\n        key: \"\",\n        valueSchema: BlockHeader.encodingSchema,\n        embedded: true\n    },\n    {\n        key: \"txns\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.ArraySchema(SignedTxnInBlock.encodingSchema)\n    }\n])); //# sourceMappingURL=block.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/types/block.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/types/intDecoding.js":
/*!************************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/types/intDecoding.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/**\n * Configure how integers in JSON response will be decoded.\n */ var IntDecoding;\n(function(IntDecoding) {\n    /**\n     * All integers will be decoded as Numbers, meaning any values greater than\n     * Number.MAX_SAFE_INTEGER will lose precision.\n     */ IntDecoding[\"UNSAFE\"] = \"unsafe\";\n    /**\n     * All integers will be decoded as Numbers, but if any values are greater than\n     * Number.MAX_SAFE_INTEGER an error will be thrown.\n     */ IntDecoding[\"SAFE\"] = \"safe\";\n    /**\n     * Integers will be decoded as Numbers if they are less than or equal to\n     * Number.MAX_SAFE_INTEGER, otherwise they will be decoded as BigInts.\n     */ IntDecoding[\"MIXED\"] = \"mixed\";\n    /**\n     * All integers will be decoded as BigInts.\n     */ IntDecoding[\"BIGINT\"] = \"bigint\";\n})(IntDecoding || (IntDecoding = {}));\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (IntDecoding); //# sourceMappingURL=intDecoding.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS90eXBlcy9pbnREZWNvZGluZy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7O0NBRUMsR0FDRCxJQUFJQTtBQUNILFVBQVVBLFdBQVc7SUFDbEI7OztLQUdDLEdBQ0RBLFdBQVcsQ0FBQyxTQUFTLEdBQUc7SUFDeEI7OztLQUdDLEdBQ0RBLFdBQVcsQ0FBQyxPQUFPLEdBQUc7SUFDdEI7OztLQUdDLEdBQ0RBLFdBQVcsQ0FBQyxRQUFRLEdBQUc7SUFDdkI7O0tBRUMsR0FDREEsV0FBVyxDQUFDLFNBQVMsR0FBRztBQUM1QixHQUFHQSxlQUFnQkEsQ0FBQUEsY0FBYyxDQUFDO0FBQ2xDLGlFQUFlQSxXQUFXQSxFQUFDLENBQzNCLHVDQUF1QyIsInNvdXJjZXMiOlsid2VicGFjazovL2FsZ29yYW5kLWNyb3dkZnVuZGluZy1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9hbGdvc2RrL2Rpc3QvZXNtL3R5cGVzL2ludERlY29kaW5nLmpzPzMxOTMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb25maWd1cmUgaG93IGludGVnZXJzIGluIEpTT04gcmVzcG9uc2Ugd2lsbCBiZSBkZWNvZGVkLlxuICovXG52YXIgSW50RGVjb2Rpbmc7XG4oZnVuY3Rpb24gKEludERlY29kaW5nKSB7XG4gICAgLyoqXG4gICAgICogQWxsIGludGVnZXJzIHdpbGwgYmUgZGVjb2RlZCBhcyBOdW1iZXJzLCBtZWFuaW5nIGFueSB2YWx1ZXMgZ3JlYXRlciB0aGFuXG4gICAgICogTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIgd2lsbCBsb3NlIHByZWNpc2lvbi5cbiAgICAgKi9cbiAgICBJbnREZWNvZGluZ1tcIlVOU0FGRVwiXSA9IFwidW5zYWZlXCI7XG4gICAgLyoqXG4gICAgICogQWxsIGludGVnZXJzIHdpbGwgYmUgZGVjb2RlZCBhcyBOdW1iZXJzLCBidXQgaWYgYW55IHZhbHVlcyBhcmUgZ3JlYXRlciB0aGFuXG4gICAgICogTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIgYW4gZXJyb3Igd2lsbCBiZSB0aHJvd24uXG4gICAgICovXG4gICAgSW50RGVjb2RpbmdbXCJTQUZFXCJdID0gXCJzYWZlXCI7XG4gICAgLyoqXG4gICAgICogSW50ZWdlcnMgd2lsbCBiZSBkZWNvZGVkIGFzIE51bWJlcnMgaWYgdGhleSBhcmUgbGVzcyB0aGFuIG9yIGVxdWFsIHRvXG4gICAgICogTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIsIG90aGVyd2lzZSB0aGV5IHdpbGwgYmUgZGVjb2RlZCBhcyBCaWdJbnRzLlxuICAgICAqL1xuICAgIEludERlY29kaW5nW1wiTUlYRURcIl0gPSBcIm1peGVkXCI7XG4gICAgLyoqXG4gICAgICogQWxsIGludGVnZXJzIHdpbGwgYmUgZGVjb2RlZCBhcyBCaWdJbnRzLlxuICAgICAqL1xuICAgIEludERlY29kaW5nW1wiQklHSU5UXCJdID0gXCJiaWdpbnRcIjtcbn0pKEludERlY29kaW5nIHx8IChJbnREZWNvZGluZyA9IHt9KSk7XG5leHBvcnQgZGVmYXVsdCBJbnREZWNvZGluZztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWludERlY29kaW5nLmpzLm1hcCJdLCJuYW1lcyI6WyJJbnREZWNvZGluZyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/types/intDecoding.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/types/statedelta.js":
/*!***********************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/types/statedelta.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AccountBaseData: () => (/* binding */ AccountBaseData),\n/* harmony export */   AccountData: () => (/* binding */ AccountData),\n/* harmony export */   AccountDeltas: () => (/* binding */ AccountDeltas),\n/* harmony export */   AccountTotals: () => (/* binding */ AccountTotals),\n/* harmony export */   AlgoCount: () => (/* binding */ AlgoCount),\n/* harmony export */   AppLocalState: () => (/* binding */ AppLocalState),\n/* harmony export */   AppLocalStateDelta: () => (/* binding */ AppLocalStateDelta),\n/* harmony export */   AppParams: () => (/* binding */ AppParams),\n/* harmony export */   AppParamsDelta: () => (/* binding */ AppParamsDelta),\n/* harmony export */   AppResourceRecord: () => (/* binding */ AppResourceRecord),\n/* harmony export */   AssetHolding: () => (/* binding */ AssetHolding),\n/* harmony export */   AssetHoldingDelta: () => (/* binding */ AssetHoldingDelta),\n/* harmony export */   AssetParams: () => (/* binding */ AssetParams),\n/* harmony export */   AssetParamsDelta: () => (/* binding */ AssetParamsDelta),\n/* harmony export */   AssetResourceRecord: () => (/* binding */ AssetResourceRecord),\n/* harmony export */   BalanceRecord: () => (/* binding */ BalanceRecord),\n/* harmony export */   IncludedTransactions: () => (/* binding */ IncludedTransactions),\n/* harmony export */   KvValueDelta: () => (/* binding */ KvValueDelta),\n/* harmony export */   LedgerStateDelta: () => (/* binding */ LedgerStateDelta),\n/* harmony export */   ModifiedCreatable: () => (/* binding */ ModifiedCreatable),\n/* harmony export */   StateSchema: () => (/* binding */ StateSchema),\n/* harmony export */   TealValue: () => (/* binding */ TealValue),\n/* harmony export */   VotingData: () => (/* binding */ VotingData)\n/* harmony export */ });\n/* harmony import */ var _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../encoding/schema/index.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/schema/index.js\");\n/* harmony import */ var _block_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./block.js */ \"(ssr)/./node_modules/algosdk/dist/esm/types/block.js\");\n/* harmony import */ var _client_v2_untypedmodel_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../client/v2/untypedmodel.js */ \"(ssr)/./node_modules/algosdk/dist/esm/client/v2/untypedmodel.js\");\n\n\n\n// TealValue contains type information and a value, representing a value in a TEAL program\nclass TealValue {\n    constructor(params){\n        this.type = params.type;\n        this.bytes = params.bytes;\n        this.uint = params.uint;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return TealValue.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"tt\",\n                this.type\n            ],\n            [\n                \"tb\",\n                this.bytes\n            ],\n            [\n                \"ui\",\n                this.uint\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded TealValue: ${data}`);\n        }\n        return new TealValue({\n            type: Number(data.get(\"tt\")),\n            bytes: data.get(\"tb\"),\n            uint: data.get(\"ui\")\n        });\n    }\n}\nTealValue.encodingSchema = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.NamedMapSchema((0,_encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.allOmitEmpty)([\n    {\n        key: \"tt\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.Uint64Schema()\n    },\n    {\n        key: \"tb\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.SpecialCaseBinaryStringSchema())\n    },\n    {\n        key: \"ui\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.Uint64Schema())\n    }\n]));\n/**\n * StateSchema sets maximums on the number of each type that may be stored\n */ class StateSchema {\n    constructor(params){\n        this.numUints = params.numUints;\n        this.numByteSlices = params.numByteSlices;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return StateSchema.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"nui\",\n                this.numUints\n            ],\n            [\n                \"nbs\",\n                this.numByteSlices\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded StateSchema: ${data}`);\n        }\n        return new StateSchema({\n            numUints: Number(data.get(\"nui\")),\n            numByteSlices: Number(data.get(\"nbs\"))\n        });\n    }\n}\nStateSchema.encodingSchema = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.NamedMapSchema((0,_encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.allOmitEmpty)([\n    {\n        key: \"nui\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.Uint64Schema()\n    },\n    {\n        key: \"nbs\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.Uint64Schema()\n    }\n]));\n/**\n * AppParams stores the global information associated with an application\n */ class AppParams {\n    constructor(params){\n        this.approvalProgram = params.approvalProgram;\n        this.clearStateProgram = params.clearStateProgram;\n        this.globalState = params.globalState;\n        this.localStateSchema = params.localStateSchema;\n        this.globalStateSchema = params.globalStateSchema;\n        this.extraProgramPages = params.extraProgramPages;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return AppParams.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"approv\",\n                this.approvalProgram\n            ],\n            [\n                \"clearp\",\n                this.clearStateProgram\n            ],\n            [\n                \"gs\",\n                (0,_encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.convertMap)(this.globalState, (k, v)=>[\n                        k,\n                        v.toEncodingData()\n                    ])\n            ],\n            [\n                \"lsch\",\n                this.localStateSchema.toEncodingData()\n            ],\n            [\n                \"gsch\",\n                this.globalStateSchema.toEncodingData()\n            ],\n            [\n                \"epp\",\n                this.extraProgramPages\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded AppParams: ${data}`);\n        }\n        return new AppParams({\n            approvalProgram: data.get(\"approv\"),\n            clearStateProgram: data.get(\"clearp\"),\n            globalState: (0,_encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.convertMap)(data.get(\"gs\"), (k, v)=>[\n                    k,\n                    TealValue.fromEncodingData(v)\n                ]),\n            localStateSchema: StateSchema.fromEncodingData(data.get(\"lsch\")),\n            globalStateSchema: StateSchema.fromEncodingData(data.get(\"gsch\")),\n            extraProgramPages: Number(data.get(\"epp\"))\n        });\n    }\n}\nAppParams.encodingSchema = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.NamedMapSchema((0,_encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.allOmitEmpty)([\n    {\n        key: \"approv\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.ByteArraySchema()\n    },\n    {\n        key: \"clearp\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.ByteArraySchema()\n    },\n    {\n        key: \"gs\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.SpecialCaseBinaryStringMapSchema(TealValue.encodingSchema)\n    },\n    {\n        key: \"lsch\",\n        valueSchema: StateSchema.encodingSchema\n    },\n    {\n        key: \"gsch\",\n        valueSchema: StateSchema.encodingSchema\n    },\n    {\n        key: \"epp\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.Uint64Schema()\n    }\n]));\n/**\n * AppLocalState stores the LocalState associated with an application.\n */ class AppLocalState {\n    constructor(params){\n        this.schema = params.schema;\n        this.keyValue = params.keyValue;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return AppLocalState.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"hsch\",\n                this.schema.toEncodingData()\n            ],\n            [\n                \"tkv\",\n                (0,_encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.convertMap)(this.keyValue, (k, v)=>[\n                        k,\n                        v.toEncodingData()\n                    ])\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded AppLocalState: ${data}`);\n        }\n        return new AppLocalState({\n            schema: StateSchema.fromEncodingData(data.get(\"hsch\")),\n            keyValue: (0,_encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.convertMap)(data.get(\"tkv\"), (k, v)=>[\n                    k,\n                    TealValue.fromEncodingData(v)\n                ])\n        });\n    }\n}\nAppLocalState.encodingSchema = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.NamedMapSchema((0,_encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.allOmitEmpty)([\n    {\n        key: \"hsch\",\n        valueSchema: StateSchema.encodingSchema\n    },\n    {\n        key: \"tkv\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.SpecialCaseBinaryStringMapSchema(TealValue.encodingSchema)\n    }\n]));\n/**\n * AppLocalStateDelta tracks a changed AppLocalState, and whether it was deleted\n */ class AppLocalStateDelta {\n    constructor(params){\n        this.localState = params.localState;\n        this.deleted = params.deleted;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return AppLocalStateDelta.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"LocalState\",\n                this.localState ? this.localState.toEncodingData() : undefined\n            ],\n            [\n                \"Deleted\",\n                this.deleted\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded AppLocalStateDelta: ${data}`);\n        }\n        return new AppLocalStateDelta({\n            localState: data.get(\"LocalState\") ? AppLocalState.fromEncodingData(data.get(\"LocalState\")) : undefined,\n            deleted: data.get(\"Deleted\")\n        });\n    }\n}\nAppLocalStateDelta.encodingSchema = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.NamedMapSchema((0,_encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.allOmitEmpty)([\n    {\n        key: \"LocalState\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.OptionalSchema(AppLocalState.encodingSchema)\n    },\n    {\n        key: \"Deleted\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.BooleanSchema()\n    }\n]));\n/**\n * AppParamsDelta tracks a changed AppParams, and whether it was deleted\n */ class AppParamsDelta {\n    constructor(params){\n        this.params = params.params;\n        this.deleted = params.deleted;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return AppParamsDelta.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"Params\",\n                this.params ? this.params.toEncodingData() : undefined\n            ],\n            [\n                \"Deleted\",\n                this.deleted\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded AppParamsDelta: ${data}`);\n        }\n        return new AppParamsDelta({\n            params: data.get(\"Params\") ? AppParams.fromEncodingData(data.get(\"Params\")) : undefined,\n            deleted: data.get(\"Deleted\")\n        });\n    }\n}\nAppParamsDelta.encodingSchema = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.NamedMapSchema((0,_encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.allOmitEmpty)([\n    {\n        key: \"Params\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.OptionalSchema(AppParams.encodingSchema)\n    },\n    {\n        key: \"Deleted\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.BooleanSchema()\n    }\n]));\n/**\n * AppResourceRecord represents AppParams and AppLocalState in deltas\n */ class AppResourceRecord {\n    constructor(params){\n        this.id = params.id;\n        this.address = params.address;\n        this.params = params.params;\n        this.state = params.state;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return AppResourceRecord.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"Aidx\",\n                this.id\n            ],\n            [\n                \"Addr\",\n                this.address\n            ],\n            [\n                \"Params\",\n                this.params.toEncodingData()\n            ],\n            [\n                \"State\",\n                this.state.toEncodingData()\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded AppResourceRecord: ${data}`);\n        }\n        return new AppResourceRecord({\n            id: data.get(\"Aidx\"),\n            address: data.get(\"Addr\"),\n            params: AppParamsDelta.fromEncodingData(data.get(\"Params\")),\n            state: AppLocalStateDelta.fromEncodingData(data.get(\"State\"))\n        });\n    }\n}\nAppResourceRecord.encodingSchema = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.NamedMapSchema((0,_encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.allOmitEmpty)([\n    {\n        key: \"Aidx\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.Uint64Schema()\n    },\n    {\n        key: \"Addr\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.AddressSchema()\n    },\n    {\n        key: \"Params\",\n        valueSchema: AppParamsDelta.encodingSchema\n    },\n    {\n        key: \"State\",\n        valueSchema: AppLocalStateDelta.encodingSchema\n    }\n]));\n/**\n * AssetHolding describes an asset held by an account.\n */ class AssetHolding {\n    constructor(params){\n        this.amount = params.amount;\n        this.frozen = params.frozen;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return AssetHolding.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"a\",\n                this.amount\n            ],\n            [\n                \"f\",\n                this.frozen\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded AssetHolding: ${data}`);\n        }\n        return new AssetHolding({\n            amount: data.get(\"a\"),\n            frozen: data.get(\"f\")\n        });\n    }\n}\nAssetHolding.encodingSchema = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.NamedMapSchema((0,_encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.allOmitEmpty)([\n    {\n        key: \"a\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.Uint64Schema()\n    },\n    {\n        key: \"f\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.BooleanSchema()\n    }\n]));\n/**\n * AssetHoldingDelta records a changed AssetHolding, and whether it was deleted\n */ class AssetHoldingDelta {\n    constructor(params){\n        this.holding = params.holding;\n        this.deleted = params.deleted;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return AssetHoldingDelta.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"Holding\",\n                this.holding ? this.holding.toEncodingData() : undefined\n            ],\n            [\n                \"Deleted\",\n                this.deleted\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded AssetHoldingDelta: ${data}`);\n        }\n        return new AssetHoldingDelta({\n            holding: data.get(\"Holding\") ? AssetHolding.fromEncodingData(data.get(\"Holding\")) : undefined,\n            deleted: data.get(\"Deleted\")\n        });\n    }\n}\nAssetHoldingDelta.encodingSchema = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.NamedMapSchema((0,_encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.allOmitEmpty)([\n    {\n        key: \"Holding\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.OptionalSchema(AssetHolding.encodingSchema)\n    },\n    {\n        key: \"Deleted\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.BooleanSchema()\n    }\n]));\n/**\n * AssetParams describes the parameters of an asset.\n */ class AssetParams {\n    constructor(params){\n        this.total = params.total;\n        this.decimals = params.decimals;\n        this.defaultFrozen = params.defaultFrozen;\n        this.unitName = params.unitName;\n        this.assetName = params.assetName;\n        this.url = params.url;\n        this.metadataHash = params.metadataHash;\n        this.manager = params.manager;\n        this.reserve = params.reserve;\n        this.freeze = params.freeze;\n        this.clawback = params.clawback;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return AssetParams.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"t\",\n                this.total\n            ],\n            [\n                \"dc\",\n                this.decimals\n            ],\n            [\n                \"df\",\n                this.defaultFrozen\n            ],\n            [\n                \"un\",\n                this.unitName\n            ],\n            [\n                \"an\",\n                this.assetName\n            ],\n            [\n                \"au\",\n                this.url\n            ],\n            [\n                \"am\",\n                this.metadataHash\n            ],\n            [\n                \"m\",\n                this.manager\n            ],\n            [\n                \"r\",\n                this.reserve\n            ],\n            [\n                \"f\",\n                this.freeze\n            ],\n            [\n                \"c\",\n                this.clawback\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded AssetParams: ${data}`);\n        }\n        return new AssetParams({\n            total: data.get(\"t\"),\n            decimals: data.get(\"dc\"),\n            defaultFrozen: data.get(\"df\"),\n            unitName: data.get(\"un\"),\n            assetName: data.get(\"an\"),\n            url: data.get(\"au\"),\n            metadataHash: data.get(\"am\"),\n            manager: data.get(\"m\"),\n            reserve: data.get(\"r\"),\n            freeze: data.get(\"f\"),\n            clawback: data.get(\"c\")\n        });\n    }\n}\nAssetParams.encodingSchema = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.NamedMapSchema((0,_encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.allOmitEmpty)([\n    {\n        key: \"t\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.Uint64Schema()\n    },\n    {\n        key: \"dc\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.Uint64Schema()\n    },\n    {\n        key: \"df\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.BooleanSchema()\n    },\n    {\n        key: \"un\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.SpecialCaseBinaryStringSchema())\n    },\n    {\n        key: \"an\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.SpecialCaseBinaryStringSchema())\n    },\n    {\n        key: \"au\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.SpecialCaseBinaryStringSchema())\n    },\n    {\n        key: \"am\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.FixedLengthByteArraySchema(32)\n    },\n    {\n        key: \"m\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.AddressSchema())\n    },\n    {\n        key: \"r\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.AddressSchema())\n    },\n    {\n        key: \"f\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.AddressSchema())\n    },\n    {\n        key: \"c\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.AddressSchema())\n    }\n]));\n/**\n * AssetParamsDelta tracks a changed AssetParams, and whether it was deleted\n */ class AssetParamsDelta {\n    constructor(params){\n        this.params = params.params;\n        this.deleted = params.deleted;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return AssetParamsDelta.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"Params\",\n                this.params ? this.params.toEncodingData() : undefined\n            ],\n            [\n                \"Deleted\",\n                this.deleted\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded AssetParamsDelta: ${data}`);\n        }\n        return new AssetParamsDelta({\n            params: data.get(\"Params\") ? AssetParams.fromEncodingData(data.get(\"Params\")) : undefined,\n            deleted: data.get(\"Deleted\")\n        });\n    }\n}\nAssetParamsDelta.encodingSchema = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.NamedMapSchema((0,_encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.allOmitEmpty)([\n    {\n        key: \"Params\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.OptionalSchema(AssetParams.encodingSchema)\n    },\n    {\n        key: \"Deleted\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.BooleanSchema()\n    }\n]));\n/**\n * AssetResourceRecord represents AssetParams and AssetHolding in deltas\n */ class AssetResourceRecord {\n    constructor(params){\n        this.id = params.id;\n        this.address = params.address;\n        this.params = params.params;\n        this.holding = params.holding;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return AssetResourceRecord.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"Aidx\",\n                this.id\n            ],\n            [\n                \"Addr\",\n                this.address\n            ],\n            [\n                \"Params\",\n                this.params.toEncodingData()\n            ],\n            [\n                \"Holding\",\n                this.holding.toEncodingData()\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded AssetResourceRecord: ${data}`);\n        }\n        return new AssetResourceRecord({\n            id: data.get(\"Aidx\"),\n            address: data.get(\"Addr\"),\n            params: AssetParamsDelta.fromEncodingData(data.get(\"Params\")),\n            holding: AssetHoldingDelta.fromEncodingData(data.get(\"Holding\"))\n        });\n    }\n}\nAssetResourceRecord.encodingSchema = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.NamedMapSchema((0,_encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.allOmitEmpty)([\n    {\n        key: \"Aidx\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.Uint64Schema()\n    },\n    {\n        key: \"Addr\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.AddressSchema()\n    },\n    {\n        key: \"Params\",\n        valueSchema: AssetParamsDelta.encodingSchema\n    },\n    {\n        key: \"Holding\",\n        valueSchema: AssetHoldingDelta.encodingSchema\n    }\n]));\n/**\n * VotingData holds participation information\n */ class VotingData {\n    constructor(params){\n        this.voteID = params.voteID;\n        this.selectionID = params.selectionID;\n        this.stateProofID = params.stateProofID;\n        this.voteFirstValid = params.voteFirstValid;\n        this.voteLastValid = params.voteLastValid;\n        this.voteKeyDilution = params.voteKeyDilution;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return VotingData.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"VoteID\",\n                this.voteID\n            ],\n            [\n                \"SelectionID\",\n                this.selectionID\n            ],\n            [\n                \"StateProofID\",\n                this.stateProofID\n            ],\n            [\n                \"VoteFirstValid\",\n                this.voteFirstValid\n            ],\n            [\n                \"VoteLastValid\",\n                this.voteLastValid\n            ],\n            [\n                \"VoteKeyDilution\",\n                this.voteKeyDilution\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded VotingData: ${data}`);\n        }\n        return new VotingData({\n            voteID: data.get(\"VoteID\"),\n            selectionID: data.get(\"SelectionID\"),\n            stateProofID: data.get(\"StateProofID\"),\n            voteFirstValid: data.get(\"VoteFirstValid\"),\n            voteLastValid: data.get(\"VoteLastValid\"),\n            voteKeyDilution: data.get(\"VoteKeyDilution\")\n        });\n    }\n}\nVotingData.encodingSchema = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.NamedMapSchema((0,_encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.allOmitEmpty)([\n    {\n        key: \"VoteID\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.FixedLengthByteArraySchema(32)\n    },\n    {\n        key: \"SelectionID\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.FixedLengthByteArraySchema(32)\n    },\n    {\n        key: \"StateProofID\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.FixedLengthByteArraySchema(64)\n    },\n    {\n        key: \"VoteFirstValid\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.Uint64Schema()\n    },\n    {\n        key: \"VoteLastValid\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.Uint64Schema()\n    },\n    {\n        key: \"VoteKeyDilution\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.Uint64Schema()\n    }\n]));\n/**\n * AccountBaseData contains base account info like balance, status and total number of resources\n */ class AccountBaseData {\n    constructor(params){\n        this.status = params.status;\n        this.microAlgos = params.microAlgos;\n        this.rewardsBase = params.rewardsBase;\n        this.rewardedMicroAlgos = params.rewardedMicroAlgos;\n        this.authAddr = params.authAddr;\n        this.incentiveEligible = params.incentiveEligible;\n        this.totalAppSchema = params.totalAppSchema;\n        this.totalExtraAppPages = params.totalExtraAppPages;\n        this.totalAppParams = params.totalAppParams;\n        this.totalAppLocalStates = params.totalAppLocalStates;\n        this.totalAssetParams = params.totalAssetParams;\n        this.totalAssets = params.totalAssets;\n        this.totalBoxes = params.totalBoxes;\n        this.totalBoxBytes = params.totalBoxBytes;\n        this.lastProposed = params.lastProposed;\n        this.lastHeartbeat = params.lastHeartbeat;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return AccountBaseData.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"Status\",\n                this.status\n            ],\n            [\n                \"MicroAlgos\",\n                this.microAlgos\n            ],\n            [\n                \"RewardsBase\",\n                this.rewardsBase\n            ],\n            [\n                \"RewardedMicroAlgos\",\n                this.rewardedMicroAlgos\n            ],\n            [\n                \"AuthAddr\",\n                this.authAddr\n            ],\n            [\n                \"IncentiveEligible\",\n                this.incentiveEligible\n            ],\n            [\n                \"TotalAppSchema\",\n                this.totalAppSchema.toEncodingData()\n            ],\n            [\n                \"TotalExtraAppPages\",\n                this.totalExtraAppPages\n            ],\n            [\n                \"TotalAppParams\",\n                this.totalAppParams\n            ],\n            [\n                \"TotalAppLocalStates\",\n                this.totalAppLocalStates\n            ],\n            [\n                \"TotalAssetParams\",\n                this.totalAssetParams\n            ],\n            [\n                \"TotalAssets\",\n                this.totalAssets\n            ],\n            [\n                \"TotalBoxes\",\n                this.totalBoxes\n            ],\n            [\n                \"TotalBoxBytes\",\n                this.totalBoxBytes\n            ],\n            [\n                \"LastProposed\",\n                this.lastProposed\n            ],\n            [\n                \"LastHeartbeat\",\n                this.lastHeartbeat\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded AccountBaseData: ${data}`);\n        }\n        return new AccountBaseData({\n            status: Number(data.get(\"Status\")),\n            microAlgos: data.get(\"MicroAlgos\"),\n            rewardsBase: data.get(\"RewardsBase\"),\n            rewardedMicroAlgos: data.get(\"RewardedMicroAlgos\"),\n            authAddr: data.get(\"AuthAddr\"),\n            incentiveEligible: data.get(\"IncentiveEligible\"),\n            totalAppSchema: StateSchema.fromEncodingData(data.get(\"TotalAppSchema\")),\n            totalExtraAppPages: Number(data.get(\"TotalExtraAppPages\")),\n            totalAppParams: data.get(\"TotalAppParams\"),\n            totalAppLocalStates: data.get(\"TotalAppLocalStates\"),\n            totalAssetParams: data.get(\"TotalAssetParams\"),\n            totalAssets: data.get(\"TotalAssets\"),\n            totalBoxes: data.get(\"TotalBoxes\"),\n            totalBoxBytes: data.get(\"TotalBoxBytes\"),\n            lastProposed: data.get(\"LastProposed\"),\n            lastHeartbeat: data.get(\"LastHeartbeat\")\n        });\n    }\n}\nAccountBaseData.encodingSchema = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.NamedMapSchema((0,_encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.allOmitEmpty)([\n    {\n        key: \"Status\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.Uint64Schema()\n    },\n    {\n        key: \"MicroAlgos\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.Uint64Schema()\n    },\n    {\n        key: \"RewardsBase\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.Uint64Schema()\n    },\n    {\n        key: \"RewardedMicroAlgos\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.Uint64Schema()\n    },\n    {\n        key: \"AuthAddr\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.AddressSchema()\n    },\n    {\n        key: \"IncentiveEligible\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.BooleanSchema()\n    },\n    {\n        key: \"TotalAppSchema\",\n        valueSchema: StateSchema.encodingSchema\n    },\n    {\n        key: \"TotalExtraAppPages\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.Uint64Schema()\n    },\n    {\n        key: \"TotalAppParams\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.Uint64Schema()\n    },\n    {\n        key: \"TotalAppLocalStates\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.Uint64Schema()\n    },\n    {\n        key: \"TotalAssetParams\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.Uint64Schema()\n    },\n    {\n        key: \"TotalAssets\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.Uint64Schema()\n    },\n    {\n        key: \"TotalBoxes\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.Uint64Schema()\n    },\n    {\n        key: \"TotalBoxBytes\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.Uint64Schema()\n    },\n    {\n        key: \"LastProposed\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.Uint64Schema()\n    },\n    {\n        key: \"LastHeartbeat\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.Uint64Schema()\n    }\n]));\n/**\n * AccountData provides per-account data\n */ class AccountData {\n    constructor(params){\n        this.accountBaseData = params.accountBaseData;\n        this.votingData = params.votingData;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return AccountData.encodingSchema;\n    }\n    toEncodingData() {\n        return (0,_encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.combineMaps)(this.accountBaseData.toEncodingData(), this.votingData.toEncodingData());\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded AccountData: ${data}`);\n        }\n        return new AccountData({\n            accountBaseData: AccountBaseData.fromEncodingData(data),\n            votingData: VotingData.fromEncodingData(data)\n        });\n    }\n}\nAccountData.encodingSchema = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.NamedMapSchema((0,_encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.allOmitEmpty)([\n    {\n        key: \"\",\n        valueSchema: AccountBaseData.encodingSchema,\n        embedded: true\n    },\n    {\n        key: \"\",\n        valueSchema: VotingData.encodingSchema,\n        embedded: true\n    }\n]));\nclass BalanceRecord {\n    constructor(params){\n        this.addr = params.addr;\n        this.accountData = params.accountData;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return BalanceRecord.encodingSchema;\n    }\n    toEncodingData() {\n        return (0,_encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.combineMaps)(new Map([\n            [\n                \"Addr\",\n                this.addr\n            ]\n        ]), this.accountData.toEncodingData());\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded BalanceRecord: ${data}`);\n        }\n        return new BalanceRecord({\n            addr: data.get(\"Addr\"),\n            accountData: AccountData.fromEncodingData(data)\n        });\n    }\n}\nBalanceRecord.encodingSchema = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.NamedMapSchema((0,_encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.allOmitEmpty)([\n    {\n        key: \"Addr\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.AddressSchema()\n    },\n    {\n        key: \"\",\n        valueSchema: AccountData.encodingSchema,\n        embedded: true\n    }\n]));\nclass AccountDeltas {\n    constructor(params){\n        this.accounts = params.accounts;\n        this.appResources = params.appResources;\n        this.assetResources = params.assetResources;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return AccountDeltas.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"Accts\",\n                this.accounts.map((account)=>account.toEncodingData())\n            ],\n            [\n                \"AppResources\",\n                this.appResources.length === 0 ? undefined : this.appResources.map((appResource)=>appResource.toEncodingData())\n            ],\n            [\n                \"AssetResources\",\n                this.assetResources.length === 0 ? undefined : this.assetResources.map((assetResource)=>assetResource.toEncodingData())\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded AccountDeltas: ${data}`);\n        }\n        return new AccountDeltas({\n            accounts: (data.get(\"Accts\") ?? []).map(BalanceRecord.fromEncodingData),\n            appResources: (data.get(\"AppResources\") ?? []).map(AppResourceRecord.fromEncodingData),\n            assetResources: (data.get(\"AssetResources\") ?? []).map(AssetResourceRecord.fromEncodingData)\n        });\n    }\n}\nAccountDeltas.encodingSchema = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.NamedMapSchema((0,_encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.allOmitEmpty)([\n    {\n        key: \"Accts\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.ArraySchema(BalanceRecord.encodingSchema)\n    },\n    {\n        key: \"AppResources\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.ArraySchema(AppResourceRecord.encodingSchema))\n    },\n    {\n        key: \"AssetResources\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.ArraySchema(AssetResourceRecord.encodingSchema))\n    }\n]));\n/**\n * A KvValueDelta shows how the Data associated with a key in the kvstore has changed.\n */ class KvValueDelta {\n    constructor(params){\n        this.data = params.data;\n        this.oldData = params.oldData;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return KvValueDelta.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"Data\",\n                this.data\n            ],\n            [\n                \"OldData\",\n                this.oldData\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded KvValueDelta: ${data}`);\n        }\n        return new KvValueDelta({\n            data: data.get(\"Data\"),\n            oldData: data.get(\"OldData\")\n        });\n    }\n}\nKvValueDelta.encodingSchema = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.NamedMapSchema((0,_encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.allOmitEmpty)([\n    {\n        key: \"Data\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.ByteArraySchema())\n    },\n    {\n        key: \"OldData\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.ByteArraySchema())\n    }\n]));\n/**\n * IncludedTransactions defines the transactions included in a block, their index and last valid round.\n */ class IncludedTransactions {\n    constructor(params){\n        this.lastValid = params.lastValid;\n        this.intra = params.intra;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return IncludedTransactions.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"LastValid\",\n                this.lastValid\n            ],\n            [\n                \"Intra\",\n                this.intra\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded IncludedTransactions: ${data}`);\n        }\n        return new IncludedTransactions({\n            lastValid: data.get(\"LastValid\"),\n            intra: Number(data.get(\"Intra\"))\n        });\n    }\n}\nIncludedTransactions.encodingSchema = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.NamedMapSchema((0,_encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.allOmitEmpty)([\n    {\n        key: \"LastValid\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.Uint64Schema()\n    },\n    {\n        key: \"Intra\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.Uint64Schema()\n    }\n]));\n/**\n * ModifiedCreatable represents a change to a single creatable state\n */ class ModifiedCreatable {\n    constructor(params){\n        this.creatableType = params.creatableType;\n        this.created = params.created;\n        this.creator = params.creator;\n        this.ndeltas = params.ndeltas;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return ModifiedCreatable.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"Ctype\",\n                this.creatableType\n            ],\n            [\n                \"Created\",\n                this.created\n            ],\n            [\n                \"Creator\",\n                this.creator\n            ],\n            [\n                \"Ndeltas\",\n                this.ndeltas\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded ModifiedCreatable: ${data}`);\n        }\n        return new ModifiedCreatable({\n            creatableType: Number(data.get(\"Ctype\")),\n            created: data.get(\"Created\"),\n            creator: data.get(\"Creator\"),\n            ndeltas: Number(data.get(\"Ndeltas\"))\n        });\n    }\n}\nModifiedCreatable.encodingSchema = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.NamedMapSchema((0,_encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.allOmitEmpty)([\n    {\n        key: \"Ctype\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.Uint64Schema()\n    },\n    {\n        key: \"Created\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.BooleanSchema()\n    },\n    {\n        key: \"Creator\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.AddressSchema()\n    },\n    {\n        key: \"Ndeltas\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.Uint64Schema()\n    }\n]));\n/**\n * AlgoCount represents a total of algos of a certain class of accounts (split up by their Status value).\n */ class AlgoCount {\n    constructor(params){\n        this.money = params.money;\n        this.rewardUnits = params.rewardUnits;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return AlgoCount.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"mon\",\n                this.money\n            ],\n            [\n                \"rwd\",\n                this.rewardUnits\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded AlgoCount: ${data}`);\n        }\n        return new AlgoCount({\n            money: data.get(\"mon\"),\n            rewardUnits: data.get(\"rwd\")\n        });\n    }\n}\nAlgoCount.encodingSchema = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.NamedMapSchema((0,_encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.allOmitEmpty)([\n    {\n        key: \"mon\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.Uint64Schema()\n    },\n    {\n        key: \"rwd\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.Uint64Schema()\n    }\n]));\n/**\n * AccountTotals represents the totals of algos in the system grouped by different account status values.\n */ class AccountTotals {\n    constructor(params){\n        this.online = params.online;\n        this.offline = params.offline;\n        this.notParticipating = params.notParticipating;\n        this.rewardsLevel = params.rewardsLevel;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return AccountTotals.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"online\",\n                this.online.toEncodingData()\n            ],\n            [\n                \"offline\",\n                this.offline.toEncodingData()\n            ],\n            [\n                \"notpart\",\n                this.notParticipating.toEncodingData()\n            ],\n            [\n                \"rwdlvl\",\n                this.rewardsLevel\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded AccountTotals: ${data}`);\n        }\n        return new AccountTotals({\n            online: AlgoCount.fromEncodingData(data.get(\"online\")),\n            offline: AlgoCount.fromEncodingData(data.get(\"offline\")),\n            notParticipating: AlgoCount.fromEncodingData(data.get(\"notpart\")),\n            rewardsLevel: data.get(\"rwdlvl\")\n        });\n    }\n}\nAccountTotals.encodingSchema = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.NamedMapSchema((0,_encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.allOmitEmpty)([\n    {\n        key: \"online\",\n        valueSchema: AlgoCount.encodingSchema\n    },\n    {\n        key: \"offline\",\n        valueSchema: AlgoCount.encodingSchema\n    },\n    {\n        key: \"notpart\",\n        valueSchema: AlgoCount.encodingSchema\n    },\n    {\n        key: \"rwdlvl\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.Uint64Schema()\n    }\n]));\n/**\n * LedgerStateDelta describes the delta between a given round to the previous round\n */ class LedgerStateDelta {\n    constructor(params){\n        this.accounts = params.accounts;\n        this.kvMods = params.kvMods;\n        this.txids = params.txids;\n        this.txleases = params.txleases;\n        this.creatables = params.creatables;\n        this.blockHeader = params.blockHeader;\n        this.stateProofNext = params.stateProofNext;\n        this.prevTimestamp = params.prevTimestamp;\n        this.totals = params.totals;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getEncodingSchema() {\n        return LedgerStateDelta.encodingSchema;\n    }\n    toEncodingData() {\n        return new Map([\n            [\n                \"Accts\",\n                this.accounts.toEncodingData()\n            ],\n            [\n                \"KvMods\",\n                this.kvMods.size === 0 ? undefined : (0,_encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.convertMap)(this.kvMods, (key, value)=>[\n                        key,\n                        value.toEncodingData()\n                    ])\n            ],\n            [\n                \"Txids\",\n                (0,_encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.convertMap)(this.txids, (key, value)=>[\n                        key,\n                        value.toEncodingData()\n                    ])\n            ],\n            [\n                \"Txleases\",\n                this.txleases.toEncodingData()\n            ],\n            [\n                \"Creatables\",\n                this.creatables.size === 0 ? undefined : (0,_encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.convertMap)(this.creatables, (key, value)=>[\n                        key,\n                        value.toEncodingData()\n                    ])\n            ],\n            [\n                \"Hdr\",\n                this.blockHeader.toEncodingData()\n            ],\n            [\n                \"StateProofNext\",\n                this.stateProofNext\n            ],\n            [\n                \"PrevTimestamp\",\n                this.prevTimestamp\n            ],\n            [\n                \"Totals\",\n                this.totals.toEncodingData()\n            ]\n        ]);\n    }\n    static fromEncodingData(data) {\n        if (!(data instanceof Map)) {\n            throw new Error(`Invalid decoded LedgerStateDelta: ${data}`);\n        }\n        return new LedgerStateDelta({\n            accounts: AccountDeltas.fromEncodingData(data.get(\"Accts\")),\n            kvMods: (0,_encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.convertMap)(data.get(\"KvMods\") ?? new Map(), (key, value)=>[\n                    key,\n                    KvValueDelta.fromEncodingData(value)\n                ]),\n            txids: (0,_encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.convertMap)(data.get(\"Txids\"), (key, value)=>[\n                    key,\n                    IncludedTransactions.fromEncodingData(value)\n                ]),\n            txleases: _client_v2_untypedmodel_js__WEBPACK_IMPORTED_MODULE_2__.UntypedValue.fromEncodingData(data.get(\"Txleases\")),\n            creatables: (0,_encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.convertMap)(data.get(\"Creatables\") ?? new Map(), (key, value)=>[\n                    key,\n                    ModifiedCreatable.fromEncodingData(value)\n                ]),\n            blockHeader: _block_js__WEBPACK_IMPORTED_MODULE_1__.BlockHeader.fromEncodingData(data.get(\"Hdr\")),\n            stateProofNext: data.get(\"StateProofNext\"),\n            prevTimestamp: data.get(\"PrevTimestamp\"),\n            totals: AccountTotals.fromEncodingData(data.get(\"Totals\"))\n        });\n    }\n}\nLedgerStateDelta.encodingSchema = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.NamedMapSchema((0,_encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.allOmitEmpty)([\n    {\n        key: \"Accts\",\n        valueSchema: AccountDeltas.encodingSchema\n    },\n    {\n        key: \"KvMods\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.SpecialCaseBinaryStringMapSchema(KvValueDelta.encodingSchema))\n    },\n    {\n        key: \"Txids\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.ByteArrayMapSchema(IncludedTransactions.encodingSchema)\n    },\n    {\n        key: \"Txleases\",\n        // Note: because txleases is currently just an UntypedSchema and we are expected to decode\n        // null values for this field, we use OptionalSchema to coerce null values to undefined so\n        // that the values can be properly omitted during encoding.\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.UntypedSchema())\n    },\n    {\n        key: \"Creatables\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.Uint64MapSchema(ModifiedCreatable.encodingSchema))\n    },\n    {\n        key: \"Hdr\",\n        valueSchema: _block_js__WEBPACK_IMPORTED_MODULE_1__.BlockHeader.encodingSchema\n    },\n    {\n        key: \"StateProofNext\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.Uint64Schema()\n    },\n    {\n        key: \"PrevTimestamp\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.Uint64Schema()\n    },\n    {\n        key: \"Totals\",\n        valueSchema: AccountTotals.encodingSchema\n    }\n])); //# sourceMappingURL=statedelta.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/types/statedelta.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/types/transactions/base.js":
/*!******************************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/types/transactions/base.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OnApplicationComplete: () => (/* binding */ OnApplicationComplete),\n/* harmony export */   TransactionType: () => (/* binding */ TransactionType),\n/* harmony export */   isOnApplicationComplete: () => (/* binding */ isOnApplicationComplete),\n/* harmony export */   isTransactionType: () => (/* binding */ isTransactionType)\n/* harmony export */ });\n/**\n * Enum for application transaction types.\n */ var TransactionType;\n(function(TransactionType) {\n    /**\n     * Payment transaction\n     */ TransactionType[\"pay\"] = \"pay\";\n    /**\n     * Key registration transaction\n     */ TransactionType[\"keyreg\"] = \"keyreg\";\n    /**\n     * Asset configuration transaction\n     */ TransactionType[\"acfg\"] = \"acfg\";\n    /**\n     * Asset transfer transaction\n     */ TransactionType[\"axfer\"] = \"axfer\";\n    /**\n     * Asset freeze transaction\n     */ TransactionType[\"afrz\"] = \"afrz\";\n    /**\n     * Application transaction\n     */ TransactionType[\"appl\"] = \"appl\";\n    /**\n     * State proof transaction\n     */ TransactionType[\"stpf\"] = \"stpf\";\n    /**\n     * Heartbeat transaction\n     */ TransactionType[\"hb\"] = \"hb\";\n})(TransactionType || (TransactionType = {}));\n/**\n * Check if a string is a valid transaction type\n * @param s - string to check\n * @returns true if s is a valid transaction type\n */ function isTransactionType(s) {\n    return s === TransactionType.pay || s === TransactionType.keyreg || s === TransactionType.acfg || s === TransactionType.axfer || s === TransactionType.afrz || s === TransactionType.appl || s === TransactionType.stpf || s === TransactionType.hb;\n}\n/**\n * Enums for application transactions on-transaction-complete behavior\n */ var OnApplicationComplete;\n(function(OnApplicationComplete) {\n    /**\n     * NoOpOC indicates that an application transaction will simply call its\n     * ApprovalProgram\n     */ OnApplicationComplete[OnApplicationComplete[\"NoOpOC\"] = 0] = \"NoOpOC\";\n    /**\n     * OptInOC indicates that an application transaction will allocate some\n     * LocalState for the application in the sender's account\n     */ OnApplicationComplete[OnApplicationComplete[\"OptInOC\"] = 1] = \"OptInOC\";\n    /**\n     * CloseOutOC indicates that an application transaction will deallocate\n     * some LocalState for the application from the user's account\n     */ OnApplicationComplete[OnApplicationComplete[\"CloseOutOC\"] = 2] = \"CloseOutOC\";\n    /**\n     * ClearStateOC is similar to CloseOutOC, but may never fail. This\n     * allows users to reclaim their minimum balance from an application\n     * they no longer wish to opt in to.\n     */ OnApplicationComplete[OnApplicationComplete[\"ClearStateOC\"] = 3] = \"ClearStateOC\";\n    /**\n     * UpdateApplicationOC indicates that an application transaction will\n     * update the ApprovalProgram and ClearStateProgram for the application\n     */ OnApplicationComplete[OnApplicationComplete[\"UpdateApplicationOC\"] = 4] = \"UpdateApplicationOC\";\n    /**\n     * DeleteApplicationOC indicates that an application transaction will\n     * delete the AppParams for the application from the creator's balance\n     * record\n     */ OnApplicationComplete[OnApplicationComplete[\"DeleteApplicationOC\"] = 5] = \"DeleteApplicationOC\";\n})(OnApplicationComplete || (OnApplicationComplete = {}));\n/**\n * Check if a value is a valid OnApplicationComplete value\n * @param v - value to check\n * @returns true if v is a valid OnApplicationComplete value\n */ function isOnApplicationComplete(v) {\n    return v === OnApplicationComplete.NoOpOC || v === OnApplicationComplete.OptInOC || v === OnApplicationComplete.CloseOutOC || v === OnApplicationComplete.ClearStateOC || v === OnApplicationComplete.UpdateApplicationOC || v === OnApplicationComplete.DeleteApplicationOC;\n} //# sourceMappingURL=base.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS90eXBlcy90cmFuc2FjdGlvbnMvYmFzZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0NBRUMsR0FDTSxJQUFJQSxnQkFBZ0I7QUFDMUIsVUFBVUEsZUFBZTtJQUN0Qjs7S0FFQyxHQUNEQSxlQUFlLENBQUMsTUFBTSxHQUFHO0lBQ3pCOztLQUVDLEdBQ0RBLGVBQWUsQ0FBQyxTQUFTLEdBQUc7SUFDNUI7O0tBRUMsR0FDREEsZUFBZSxDQUFDLE9BQU8sR0FBRztJQUMxQjs7S0FFQyxHQUNEQSxlQUFlLENBQUMsUUFBUSxHQUFHO0lBQzNCOztLQUVDLEdBQ0RBLGVBQWUsQ0FBQyxPQUFPLEdBQUc7SUFDMUI7O0tBRUMsR0FDREEsZUFBZSxDQUFDLE9BQU8sR0FBRztJQUMxQjs7S0FFQyxHQUNEQSxlQUFlLENBQUMsT0FBTyxHQUFHO0lBQzFCOztLQUVDLEdBQ0RBLGVBQWUsQ0FBQyxLQUFLLEdBQUc7QUFDNUIsR0FBR0EsbUJBQW9CQSxDQUFBQSxrQkFBa0IsQ0FBQztBQUMxQzs7OztDQUlDLEdBQ00sU0FBU0Msa0JBQWtCQyxDQUFDO0lBQy9CLE9BQVFBLE1BQU1GLGdCQUFnQkcsR0FBRyxJQUM3QkQsTUFBTUYsZ0JBQWdCSSxNQUFNLElBQzVCRixNQUFNRixnQkFBZ0JLLElBQUksSUFDMUJILE1BQU1GLGdCQUFnQk0sS0FBSyxJQUMzQkosTUFBTUYsZ0JBQWdCTyxJQUFJLElBQzFCTCxNQUFNRixnQkFBZ0JRLElBQUksSUFDMUJOLE1BQU1GLGdCQUFnQlMsSUFBSSxJQUMxQlAsTUFBTUYsZ0JBQWdCVSxFQUFFO0FBQ2hDO0FBQ0E7O0NBRUMsR0FDTSxJQUFJQyxzQkFBc0I7QUFDaEMsVUFBVUEscUJBQXFCO0lBQzVCOzs7S0FHQyxHQUNEQSxxQkFBcUIsQ0FBQ0EscUJBQXFCLENBQUMsU0FBUyxHQUFHLEVBQUUsR0FBRztJQUM3RDs7O0tBR0MsR0FDREEscUJBQXFCLENBQUNBLHFCQUFxQixDQUFDLFVBQVUsR0FBRyxFQUFFLEdBQUc7SUFDOUQ7OztLQUdDLEdBQ0RBLHFCQUFxQixDQUFDQSxxQkFBcUIsQ0FBQyxhQUFhLEdBQUcsRUFBRSxHQUFHO0lBQ2pFOzs7O0tBSUMsR0FDREEscUJBQXFCLENBQUNBLHFCQUFxQixDQUFDLGVBQWUsR0FBRyxFQUFFLEdBQUc7SUFDbkU7OztLQUdDLEdBQ0RBLHFCQUFxQixDQUFDQSxxQkFBcUIsQ0FBQyxzQkFBc0IsR0FBRyxFQUFFLEdBQUc7SUFDMUU7Ozs7S0FJQyxHQUNEQSxxQkFBcUIsQ0FBQ0EscUJBQXFCLENBQUMsc0JBQXNCLEdBQUcsRUFBRSxHQUFHO0FBQzlFLEdBQUdBLHlCQUEwQkEsQ0FBQUEsd0JBQXdCLENBQUM7QUFDdEQ7Ozs7Q0FJQyxHQUNNLFNBQVNDLHdCQUF3QkMsQ0FBQztJQUNyQyxPQUFRQSxNQUFNRixzQkFBc0JHLE1BQU0sSUFDdENELE1BQU1GLHNCQUFzQkksT0FBTyxJQUNuQ0YsTUFBTUYsc0JBQXNCSyxVQUFVLElBQ3RDSCxNQUFNRixzQkFBc0JNLFlBQVksSUFDeENKLE1BQU1GLHNCQUFzQk8sbUJBQW1CLElBQy9DTCxNQUFNRixzQkFBc0JRLG1CQUFtQjtBQUN2RCxFQUNBLGdDQUFnQyIsInNvdXJjZXMiOlsid2VicGFjazovL2FsZ29yYW5kLWNyb3dkZnVuZGluZy1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9hbGdvc2RrL2Rpc3QvZXNtL3R5cGVzL3RyYW5zYWN0aW9ucy9iYXNlLmpzPzYwYmUiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBFbnVtIGZvciBhcHBsaWNhdGlvbiB0cmFuc2FjdGlvbiB0eXBlcy5cbiAqL1xuZXhwb3J0IHZhciBUcmFuc2FjdGlvblR5cGU7XG4oZnVuY3Rpb24gKFRyYW5zYWN0aW9uVHlwZSkge1xuICAgIC8qKlxuICAgICAqIFBheW1lbnQgdHJhbnNhY3Rpb25cbiAgICAgKi9cbiAgICBUcmFuc2FjdGlvblR5cGVbXCJwYXlcIl0gPSBcInBheVwiO1xuICAgIC8qKlxuICAgICAqIEtleSByZWdpc3RyYXRpb24gdHJhbnNhY3Rpb25cbiAgICAgKi9cbiAgICBUcmFuc2FjdGlvblR5cGVbXCJrZXlyZWdcIl0gPSBcImtleXJlZ1wiO1xuICAgIC8qKlxuICAgICAqIEFzc2V0IGNvbmZpZ3VyYXRpb24gdHJhbnNhY3Rpb25cbiAgICAgKi9cbiAgICBUcmFuc2FjdGlvblR5cGVbXCJhY2ZnXCJdID0gXCJhY2ZnXCI7XG4gICAgLyoqXG4gICAgICogQXNzZXQgdHJhbnNmZXIgdHJhbnNhY3Rpb25cbiAgICAgKi9cbiAgICBUcmFuc2FjdGlvblR5cGVbXCJheGZlclwiXSA9IFwiYXhmZXJcIjtcbiAgICAvKipcbiAgICAgKiBBc3NldCBmcmVlemUgdHJhbnNhY3Rpb25cbiAgICAgKi9cbiAgICBUcmFuc2FjdGlvblR5cGVbXCJhZnJ6XCJdID0gXCJhZnJ6XCI7XG4gICAgLyoqXG4gICAgICogQXBwbGljYXRpb24gdHJhbnNhY3Rpb25cbiAgICAgKi9cbiAgICBUcmFuc2FjdGlvblR5cGVbXCJhcHBsXCJdID0gXCJhcHBsXCI7XG4gICAgLyoqXG4gICAgICogU3RhdGUgcHJvb2YgdHJhbnNhY3Rpb25cbiAgICAgKi9cbiAgICBUcmFuc2FjdGlvblR5cGVbXCJzdHBmXCJdID0gXCJzdHBmXCI7XG4gICAgLyoqXG4gICAgICogSGVhcnRiZWF0IHRyYW5zYWN0aW9uXG4gICAgICovXG4gICAgVHJhbnNhY3Rpb25UeXBlW1wiaGJcIl0gPSBcImhiXCI7XG59KShUcmFuc2FjdGlvblR5cGUgfHwgKFRyYW5zYWN0aW9uVHlwZSA9IHt9KSk7XG4vKipcbiAqIENoZWNrIGlmIGEgc3RyaW5nIGlzIGEgdmFsaWQgdHJhbnNhY3Rpb24gdHlwZVxuICogQHBhcmFtIHMgLSBzdHJpbmcgdG8gY2hlY2tcbiAqIEByZXR1cm5zIHRydWUgaWYgcyBpcyBhIHZhbGlkIHRyYW5zYWN0aW9uIHR5cGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzVHJhbnNhY3Rpb25UeXBlKHMpIHtcbiAgICByZXR1cm4gKHMgPT09IFRyYW5zYWN0aW9uVHlwZS5wYXkgfHxcbiAgICAgICAgcyA9PT0gVHJhbnNhY3Rpb25UeXBlLmtleXJlZyB8fFxuICAgICAgICBzID09PSBUcmFuc2FjdGlvblR5cGUuYWNmZyB8fFxuICAgICAgICBzID09PSBUcmFuc2FjdGlvblR5cGUuYXhmZXIgfHxcbiAgICAgICAgcyA9PT0gVHJhbnNhY3Rpb25UeXBlLmFmcnogfHxcbiAgICAgICAgcyA9PT0gVHJhbnNhY3Rpb25UeXBlLmFwcGwgfHxcbiAgICAgICAgcyA9PT0gVHJhbnNhY3Rpb25UeXBlLnN0cGYgfHxcbiAgICAgICAgcyA9PT0gVHJhbnNhY3Rpb25UeXBlLmhiKTtcbn1cbi8qKlxuICogRW51bXMgZm9yIGFwcGxpY2F0aW9uIHRyYW5zYWN0aW9ucyBvbi10cmFuc2FjdGlvbi1jb21wbGV0ZSBiZWhhdmlvclxuICovXG5leHBvcnQgdmFyIE9uQXBwbGljYXRpb25Db21wbGV0ZTtcbihmdW5jdGlvbiAoT25BcHBsaWNhdGlvbkNvbXBsZXRlKSB7XG4gICAgLyoqXG4gICAgICogTm9PcE9DIGluZGljYXRlcyB0aGF0IGFuIGFwcGxpY2F0aW9uIHRyYW5zYWN0aW9uIHdpbGwgc2ltcGx5IGNhbGwgaXRzXG4gICAgICogQXBwcm92YWxQcm9ncmFtXG4gICAgICovXG4gICAgT25BcHBsaWNhdGlvbkNvbXBsZXRlW09uQXBwbGljYXRpb25Db21wbGV0ZVtcIk5vT3BPQ1wiXSA9IDBdID0gXCJOb09wT0NcIjtcbiAgICAvKipcbiAgICAgKiBPcHRJbk9DIGluZGljYXRlcyB0aGF0IGFuIGFwcGxpY2F0aW9uIHRyYW5zYWN0aW9uIHdpbGwgYWxsb2NhdGUgc29tZVxuICAgICAqIExvY2FsU3RhdGUgZm9yIHRoZSBhcHBsaWNhdGlvbiBpbiB0aGUgc2VuZGVyJ3MgYWNjb3VudFxuICAgICAqL1xuICAgIE9uQXBwbGljYXRpb25Db21wbGV0ZVtPbkFwcGxpY2F0aW9uQ29tcGxldGVbXCJPcHRJbk9DXCJdID0gMV0gPSBcIk9wdEluT0NcIjtcbiAgICAvKipcbiAgICAgKiBDbG9zZU91dE9DIGluZGljYXRlcyB0aGF0IGFuIGFwcGxpY2F0aW9uIHRyYW5zYWN0aW9uIHdpbGwgZGVhbGxvY2F0ZVxuICAgICAqIHNvbWUgTG9jYWxTdGF0ZSBmb3IgdGhlIGFwcGxpY2F0aW9uIGZyb20gdGhlIHVzZXIncyBhY2NvdW50XG4gICAgICovXG4gICAgT25BcHBsaWNhdGlvbkNvbXBsZXRlW09uQXBwbGljYXRpb25Db21wbGV0ZVtcIkNsb3NlT3V0T0NcIl0gPSAyXSA9IFwiQ2xvc2VPdXRPQ1wiO1xuICAgIC8qKlxuICAgICAqIENsZWFyU3RhdGVPQyBpcyBzaW1pbGFyIHRvIENsb3NlT3V0T0MsIGJ1dCBtYXkgbmV2ZXIgZmFpbC4gVGhpc1xuICAgICAqIGFsbG93cyB1c2VycyB0byByZWNsYWltIHRoZWlyIG1pbmltdW0gYmFsYW5jZSBmcm9tIGFuIGFwcGxpY2F0aW9uXG4gICAgICogdGhleSBubyBsb25nZXIgd2lzaCB0byBvcHQgaW4gdG8uXG4gICAgICovXG4gICAgT25BcHBsaWNhdGlvbkNvbXBsZXRlW09uQXBwbGljYXRpb25Db21wbGV0ZVtcIkNsZWFyU3RhdGVPQ1wiXSA9IDNdID0gXCJDbGVhclN0YXRlT0NcIjtcbiAgICAvKipcbiAgICAgKiBVcGRhdGVBcHBsaWNhdGlvbk9DIGluZGljYXRlcyB0aGF0IGFuIGFwcGxpY2F0aW9uIHRyYW5zYWN0aW9uIHdpbGxcbiAgICAgKiB1cGRhdGUgdGhlIEFwcHJvdmFsUHJvZ3JhbSBhbmQgQ2xlYXJTdGF0ZVByb2dyYW0gZm9yIHRoZSBhcHBsaWNhdGlvblxuICAgICAqL1xuICAgIE9uQXBwbGljYXRpb25Db21wbGV0ZVtPbkFwcGxpY2F0aW9uQ29tcGxldGVbXCJVcGRhdGVBcHBsaWNhdGlvbk9DXCJdID0gNF0gPSBcIlVwZGF0ZUFwcGxpY2F0aW9uT0NcIjtcbiAgICAvKipcbiAgICAgKiBEZWxldGVBcHBsaWNhdGlvbk9DIGluZGljYXRlcyB0aGF0IGFuIGFwcGxpY2F0aW9uIHRyYW5zYWN0aW9uIHdpbGxcbiAgICAgKiBkZWxldGUgdGhlIEFwcFBhcmFtcyBmb3IgdGhlIGFwcGxpY2F0aW9uIGZyb20gdGhlIGNyZWF0b3IncyBiYWxhbmNlXG4gICAgICogcmVjb3JkXG4gICAgICovXG4gICAgT25BcHBsaWNhdGlvbkNvbXBsZXRlW09uQXBwbGljYXRpb25Db21wbGV0ZVtcIkRlbGV0ZUFwcGxpY2F0aW9uT0NcIl0gPSA1XSA9IFwiRGVsZXRlQXBwbGljYXRpb25PQ1wiO1xufSkoT25BcHBsaWNhdGlvbkNvbXBsZXRlIHx8IChPbkFwcGxpY2F0aW9uQ29tcGxldGUgPSB7fSkpO1xuLyoqXG4gKiBDaGVjayBpZiBhIHZhbHVlIGlzIGEgdmFsaWQgT25BcHBsaWNhdGlvbkNvbXBsZXRlIHZhbHVlXG4gKiBAcGFyYW0gdiAtIHZhbHVlIHRvIGNoZWNrXG4gKiBAcmV0dXJucyB0cnVlIGlmIHYgaXMgYSB2YWxpZCBPbkFwcGxpY2F0aW9uQ29tcGxldGUgdmFsdWVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzT25BcHBsaWNhdGlvbkNvbXBsZXRlKHYpIHtcbiAgICByZXR1cm4gKHYgPT09IE9uQXBwbGljYXRpb25Db21wbGV0ZS5Ob09wT0MgfHxcbiAgICAgICAgdiA9PT0gT25BcHBsaWNhdGlvbkNvbXBsZXRlLk9wdEluT0MgfHxcbiAgICAgICAgdiA9PT0gT25BcHBsaWNhdGlvbkNvbXBsZXRlLkNsb3NlT3V0T0MgfHxcbiAgICAgICAgdiA9PT0gT25BcHBsaWNhdGlvbkNvbXBsZXRlLkNsZWFyU3RhdGVPQyB8fFxuICAgICAgICB2ID09PSBPbkFwcGxpY2F0aW9uQ29tcGxldGUuVXBkYXRlQXBwbGljYXRpb25PQyB8fFxuICAgICAgICB2ID09PSBPbkFwcGxpY2F0aW9uQ29tcGxldGUuRGVsZXRlQXBwbGljYXRpb25PQyk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1iYXNlLmpzLm1hcCJdLCJuYW1lcyI6WyJUcmFuc2FjdGlvblR5cGUiLCJpc1RyYW5zYWN0aW9uVHlwZSIsInMiLCJwYXkiLCJrZXlyZWciLCJhY2ZnIiwiYXhmZXIiLCJhZnJ6IiwiYXBwbCIsInN0cGYiLCJoYiIsIk9uQXBwbGljYXRpb25Db21wbGV0ZSIsImlzT25BcHBsaWNhdGlvbkNvbXBsZXRlIiwidiIsIk5vT3BPQyIsIk9wdEluT0MiLCJDbG9zZU91dE9DIiwiQ2xlYXJTdGF0ZU9DIiwiVXBkYXRlQXBwbGljYXRpb25PQyIsIkRlbGV0ZUFwcGxpY2F0aW9uT0MiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/types/transactions/base.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/types/transactions/encoded.js":
/*!*********************************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/types/transactions/encoded.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ENCODED_MULTISIG_SCHEMA: () => (/* binding */ ENCODED_MULTISIG_SCHEMA),\n/* harmony export */   ENCODED_SUBSIG_SCHEMA: () => (/* binding */ ENCODED_SUBSIG_SCHEMA),\n/* harmony export */   encodedMultiSigFromEncodingData: () => (/* binding */ encodedMultiSigFromEncodingData),\n/* harmony export */   encodedMultiSigToEncodingData: () => (/* binding */ encodedMultiSigToEncodingData),\n/* harmony export */   encodedSubsigFromEncodingData: () => (/* binding */ encodedSubsigFromEncodingData),\n/* harmony export */   encodedSubsigToEncodingData: () => (/* binding */ encodedSubsigToEncodingData)\n/* harmony export */ });\n/* harmony import */ var _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../encoding/schema/index.js */ \"(ssr)/./node_modules/algosdk/dist/esm/encoding/schema/index.js\");\n/* harmony import */ var _utils_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/utils.js */ \"(ssr)/./node_modules/algosdk/dist/esm/utils/utils.js\");\n\n\nconst ENCODED_SUBSIG_SCHEMA = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.NamedMapSchema((0,_encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.allOmitEmpty)([\n    {\n        key: \"pk\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.FixedLengthByteArraySchema(32)\n    },\n    {\n        key: \"s\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.OptionalSchema(new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.FixedLengthByteArraySchema(64))\n    }\n]));\nfunction encodedSubsigFromEncodingData(data) {\n    if (!(data instanceof Map)) {\n        throw new Error(`Invalid decoded EncodedSubsig: ${data}`);\n    }\n    const subsig = {\n        pk: data.get(\"pk\")\n    };\n    if (data.get(\"s\")) {\n        subsig.s = data.get(\"s\");\n    }\n    return subsig;\n}\nfunction encodedSubsigToEncodingData(subsig) {\n    const data = new Map([\n        [\n            \"pk\",\n            subsig.pk\n        ]\n    ]);\n    if (subsig.s) {\n        data.set(\"s\", subsig.s);\n    }\n    return data;\n}\nconst ENCODED_MULTISIG_SCHEMA = new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.NamedMapSchema((0,_encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.allOmitEmpty)([\n    {\n        key: \"v\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.Uint64Schema()\n    },\n    {\n        key: \"thr\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.Uint64Schema()\n    },\n    {\n        key: \"subsig\",\n        valueSchema: new _encoding_schema_index_js__WEBPACK_IMPORTED_MODULE_0__.ArraySchema(ENCODED_SUBSIG_SCHEMA)\n    }\n]));\nfunction encodedMultiSigFromEncodingData(data) {\n    if (!(data instanceof Map)) {\n        throw new Error(`Invalid decoded EncodedMultiSig: ${data}`);\n    }\n    return {\n        v: (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureSafeUnsignedInteger)(data.get(\"v\")),\n        thr: (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureSafeUnsignedInteger)(data.get(\"thr\")),\n        subsig: data.get(\"subsig\").map(encodedSubsigFromEncodingData)\n    };\n}\nfunction encodedMultiSigToEncodingData(msig) {\n    return new Map([\n        [\n            \"v\",\n            msig.v\n        ],\n        [\n            \"thr\",\n            msig.thr\n        ],\n        [\n            \"subsig\",\n            msig.subsig.map(encodedSubsigToEncodingData)\n        ]\n    ]);\n} //# sourceMappingURL=encoded.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS90eXBlcy90cmFuc2FjdGlvbnMvZW5jb2RlZC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFzSjtBQUNyRjtBQUMxRCxNQUFNTyx3QkFBd0IsSUFBSVAscUVBQWNBLENBQUNLLHVFQUFZQSxDQUFDO0lBQ2pFO1FBQ0lHLEtBQUs7UUFDTEMsYUFBYSxJQUFJUixpRkFBMEJBLENBQUM7SUFDaEQ7SUFDQTtRQUNJTyxLQUFLO1FBQ0xDLGFBQWEsSUFBSUwscUVBQWNBLENBQUMsSUFBSUgsaUZBQTBCQSxDQUFDO0lBQ25FO0NBQ0gsR0FBRztBQUNHLFNBQVNTLDhCQUE4QkMsSUFBSTtJQUM5QyxJQUFJLENBQUVBLENBQUFBLGdCQUFnQkMsR0FBRSxHQUFJO1FBQ3hCLE1BQU0sSUFBSUMsTUFBTSxDQUFDLCtCQUErQixFQUFFRixLQUFLLENBQUM7SUFDNUQ7SUFDQSxNQUFNRyxTQUFTO1FBQ1hDLElBQUlKLEtBQUtLLEdBQUcsQ0FBQztJQUNqQjtJQUNBLElBQUlMLEtBQUtLLEdBQUcsQ0FBQyxNQUFNO1FBQ2ZGLE9BQU9HLENBQUMsR0FBR04sS0FBS0ssR0FBRyxDQUFDO0lBQ3hCO0lBQ0EsT0FBT0Y7QUFDWDtBQUNPLFNBQVNJLDRCQUE0QkosTUFBTTtJQUM5QyxNQUFNSCxPQUFPLElBQUlDLElBQUk7UUFBQztZQUFDO1lBQU1FLE9BQU9DLEVBQUU7U0FBQztLQUFDO0lBQ3hDLElBQUlELE9BQU9HLENBQUMsRUFBRTtRQUNWTixLQUFLUSxHQUFHLENBQUMsS0FBS0wsT0FBT0csQ0FBQztJQUMxQjtJQUNBLE9BQU9OO0FBQ1g7QUFDTyxNQUFNUywwQkFBMEIsSUFBSXBCLHFFQUFjQSxDQUFDSyx1RUFBWUEsQ0FBQztJQUNuRTtRQUNJRyxLQUFLO1FBQ0xDLGFBQWEsSUFBSVAsbUVBQVlBO0lBQ2pDO0lBQ0E7UUFDSU0sS0FBSztRQUNMQyxhQUFhLElBQUlQLG1FQUFZQTtJQUNqQztJQUNBO1FBQ0lNLEtBQUs7UUFDTEMsYUFBYSxJQUFJTixrRUFBV0EsQ0FBQ0k7SUFDakM7Q0FDSCxHQUFHO0FBQ0csU0FBU2MsZ0NBQWdDVixJQUFJO0lBQ2hELElBQUksQ0FBRUEsQ0FBQUEsZ0JBQWdCQyxHQUFFLEdBQUk7UUFDeEIsTUFBTSxJQUFJQyxNQUFNLENBQUMsaUNBQWlDLEVBQUVGLEtBQUssQ0FBQztJQUM5RDtJQUNBLE9BQU87UUFDSFcsR0FBR2hCLDBFQUF5QkEsQ0FBQ0ssS0FBS0ssR0FBRyxDQUFDO1FBQ3RDTyxLQUFLakIsMEVBQXlCQSxDQUFDSyxLQUFLSyxHQUFHLENBQUM7UUFDeENGLFFBQVFILEtBQUtLLEdBQUcsQ0FBQyxVQUFVUSxHQUFHLENBQUNkO0lBQ25DO0FBQ0o7QUFDTyxTQUFTZSw4QkFBOEJDLElBQUk7SUFDOUMsT0FBTyxJQUFJZCxJQUFJO1FBQ1g7WUFBQztZQUFLYyxLQUFLSixDQUFDO1NBQUM7UUFDYjtZQUFDO1lBQU9JLEtBQUtILEdBQUc7U0FBQztRQUNqQjtZQUFDO1lBQVVHLEtBQUtaLE1BQU0sQ0FBQ1UsR0FBRyxDQUFDTjtTQUE2QjtLQUMzRDtBQUNMLEVBQ0EsbUNBQW1DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWxnb3JhbmQtY3Jvd2RmdW5kaW5nLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vdHlwZXMvdHJhbnNhY3Rpb25zL2VuY29kZWQuanM/ZTA4ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOYW1lZE1hcFNjaGVtYSwgRml4ZWRMZW5ndGhCeXRlQXJyYXlTY2hlbWEsIFVpbnQ2NFNjaGVtYSwgQXJyYXlTY2hlbWEsIE9wdGlvbmFsU2NoZW1hLCBhbGxPbWl0RW1wdHksIH0gZnJvbSAnLi4vLi4vZW5jb2Rpbmcvc2NoZW1hL2luZGV4LmpzJztcbmltcG9ydCB7IGVuc3VyZVNhZmVVbnNpZ25lZEludGVnZXIgfSBmcm9tICcuLi8uLi91dGlscy91dGlscy5qcyc7XG5leHBvcnQgY29uc3QgRU5DT0RFRF9TVUJTSUdfU0NIRU1BID0gbmV3IE5hbWVkTWFwU2NoZW1hKGFsbE9taXRFbXB0eShbXG4gICAge1xuICAgICAgICBrZXk6ICdwaycsXG4gICAgICAgIHZhbHVlU2NoZW1hOiBuZXcgRml4ZWRMZW5ndGhCeXRlQXJyYXlTY2hlbWEoMzIpLFxuICAgIH0sXG4gICAge1xuICAgICAgICBrZXk6ICdzJyxcbiAgICAgICAgdmFsdWVTY2hlbWE6IG5ldyBPcHRpb25hbFNjaGVtYShuZXcgRml4ZWRMZW5ndGhCeXRlQXJyYXlTY2hlbWEoNjQpKSxcbiAgICB9LFxuXSkpO1xuZXhwb3J0IGZ1bmN0aW9uIGVuY29kZWRTdWJzaWdGcm9tRW5jb2RpbmdEYXRhKGRhdGEpIHtcbiAgICBpZiAoIShkYXRhIGluc3RhbmNlb2YgTWFwKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgZGVjb2RlZCBFbmNvZGVkU3Vic2lnOiAke2RhdGF9YCk7XG4gICAgfVxuICAgIGNvbnN0IHN1YnNpZyA9IHtcbiAgICAgICAgcGs6IGRhdGEuZ2V0KCdwaycpLFxuICAgIH07XG4gICAgaWYgKGRhdGEuZ2V0KCdzJykpIHtcbiAgICAgICAgc3Vic2lnLnMgPSBkYXRhLmdldCgncycpO1xuICAgIH1cbiAgICByZXR1cm4gc3Vic2lnO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGVuY29kZWRTdWJzaWdUb0VuY29kaW5nRGF0YShzdWJzaWcpIHtcbiAgICBjb25zdCBkYXRhID0gbmV3IE1hcChbWydwaycsIHN1YnNpZy5wa11dKTtcbiAgICBpZiAoc3Vic2lnLnMpIHtcbiAgICAgICAgZGF0YS5zZXQoJ3MnLCBzdWJzaWcucyk7XG4gICAgfVxuICAgIHJldHVybiBkYXRhO1xufVxuZXhwb3J0IGNvbnN0IEVOQ09ERURfTVVMVElTSUdfU0NIRU1BID0gbmV3IE5hbWVkTWFwU2NoZW1hKGFsbE9taXRFbXB0eShbXG4gICAge1xuICAgICAgICBrZXk6ICd2JyxcbiAgICAgICAgdmFsdWVTY2hlbWE6IG5ldyBVaW50NjRTY2hlbWEoKSxcbiAgICB9LFxuICAgIHtcbiAgICAgICAga2V5OiAndGhyJyxcbiAgICAgICAgdmFsdWVTY2hlbWE6IG5ldyBVaW50NjRTY2hlbWEoKSxcbiAgICB9LFxuICAgIHtcbiAgICAgICAga2V5OiAnc3Vic2lnJyxcbiAgICAgICAgdmFsdWVTY2hlbWE6IG5ldyBBcnJheVNjaGVtYShFTkNPREVEX1NVQlNJR19TQ0hFTUEpLFxuICAgIH0sXG5dKSk7XG5leHBvcnQgZnVuY3Rpb24gZW5jb2RlZE11bHRpU2lnRnJvbUVuY29kaW5nRGF0YShkYXRhKSB7XG4gICAgaWYgKCEoZGF0YSBpbnN0YW5jZW9mIE1hcCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIGRlY29kZWQgRW5jb2RlZE11bHRpU2lnOiAke2RhdGF9YCk7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHY6IGVuc3VyZVNhZmVVbnNpZ25lZEludGVnZXIoZGF0YS5nZXQoJ3YnKSksXG4gICAgICAgIHRocjogZW5zdXJlU2FmZVVuc2lnbmVkSW50ZWdlcihkYXRhLmdldCgndGhyJykpLFxuICAgICAgICBzdWJzaWc6IGRhdGEuZ2V0KCdzdWJzaWcnKS5tYXAoZW5jb2RlZFN1YnNpZ0Zyb21FbmNvZGluZ0RhdGEpLFxuICAgIH07XG59XG5leHBvcnQgZnVuY3Rpb24gZW5jb2RlZE11bHRpU2lnVG9FbmNvZGluZ0RhdGEobXNpZykge1xuICAgIHJldHVybiBuZXcgTWFwKFtcbiAgICAgICAgWyd2JywgbXNpZy52XSxcbiAgICAgICAgWyd0aHInLCBtc2lnLnRocl0sXG4gICAgICAgIFsnc3Vic2lnJywgbXNpZy5zdWJzaWcubWFwKGVuY29kZWRTdWJzaWdUb0VuY29kaW5nRGF0YSldLFxuICAgIF0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZW5jb2RlZC5qcy5tYXAiXSwibmFtZXMiOlsiTmFtZWRNYXBTY2hlbWEiLCJGaXhlZExlbmd0aEJ5dGVBcnJheVNjaGVtYSIsIlVpbnQ2NFNjaGVtYSIsIkFycmF5U2NoZW1hIiwiT3B0aW9uYWxTY2hlbWEiLCJhbGxPbWl0RW1wdHkiLCJlbnN1cmVTYWZlVW5zaWduZWRJbnRlZ2VyIiwiRU5DT0RFRF9TVUJTSUdfU0NIRU1BIiwia2V5IiwidmFsdWVTY2hlbWEiLCJlbmNvZGVkU3Vic2lnRnJvbUVuY29kaW5nRGF0YSIsImRhdGEiLCJNYXAiLCJFcnJvciIsInN1YnNpZyIsInBrIiwiZ2V0IiwicyIsImVuY29kZWRTdWJzaWdUb0VuY29kaW5nRGF0YSIsInNldCIsIkVOQ09ERURfTVVMVElTSUdfU0NIRU1BIiwiZW5jb2RlZE11bHRpU2lnRnJvbUVuY29kaW5nRGF0YSIsInYiLCJ0aHIiLCJtYXAiLCJlbmNvZGVkTXVsdGlTaWdUb0VuY29kaW5nRGF0YSIsIm1zaWciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/types/transactions/encoded.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/types/transactions/index.js":
/*!*******************************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/types/transactions/index.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ENCODED_MULTISIG_SCHEMA: () => (/* reexport safe */ _encoded_js__WEBPACK_IMPORTED_MODULE_1__.ENCODED_MULTISIG_SCHEMA),\n/* harmony export */   ENCODED_SUBSIG_SCHEMA: () => (/* reexport safe */ _encoded_js__WEBPACK_IMPORTED_MODULE_1__.ENCODED_SUBSIG_SCHEMA),\n/* harmony export */   OnApplicationComplete: () => (/* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_0__.OnApplicationComplete),\n/* harmony export */   TransactionType: () => (/* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_0__.TransactionType),\n/* harmony export */   encodedMultiSigFromEncodingData: () => (/* reexport safe */ _encoded_js__WEBPACK_IMPORTED_MODULE_1__.encodedMultiSigFromEncodingData),\n/* harmony export */   encodedMultiSigToEncodingData: () => (/* reexport safe */ _encoded_js__WEBPACK_IMPORTED_MODULE_1__.encodedMultiSigToEncodingData),\n/* harmony export */   encodedSubsigFromEncodingData: () => (/* reexport safe */ _encoded_js__WEBPACK_IMPORTED_MODULE_1__.encodedSubsigFromEncodingData),\n/* harmony export */   encodedSubsigToEncodingData: () => (/* reexport safe */ _encoded_js__WEBPACK_IMPORTED_MODULE_1__.encodedSubsigToEncodingData),\n/* harmony export */   isOnApplicationComplete: () => (/* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_0__.isOnApplicationComplete),\n/* harmony export */   isTransactionType: () => (/* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_0__.isTransactionType)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(ssr)/./node_modules/algosdk/dist/esm/types/transactions/base.js\");\n/* harmony import */ var _encoded_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./encoded.js */ \"(ssr)/./node_modules/algosdk/dist/esm/types/transactions/encoded.js\");\n\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS90eXBlcy90cmFuc2FjdGlvbnMvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQTBCO0FBQ0csQ0FDN0IsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWxnb3JhbmQtY3Jvd2RmdW5kaW5nLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vdHlwZXMvdHJhbnNhY3Rpb25zL2luZGV4LmpzPzJlOTkiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSAnLi9iYXNlLmpzJztcbmV4cG9ydCAqIGZyb20gJy4vZW5jb2RlZC5qcyc7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/types/transactions/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/utils/utils.js":
/*!******************************************************!*\
  !*** ./node_modules/algosdk/dist/esm/utils/utils.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   arrayEqual: () => (/* binding */ arrayEqual),\n/* harmony export */   concatArrays: () => (/* binding */ concatArrays),\n/* harmony export */   ensureBigInt: () => (/* binding */ ensureBigInt),\n/* harmony export */   ensureSafeInteger: () => (/* binding */ ensureSafeInteger),\n/* harmony export */   ensureSafeUnsignedInteger: () => (/* binding */ ensureSafeUnsignedInteger),\n/* harmony export */   ensureUint64: () => (/* binding */ ensureUint64),\n/* harmony export */   isNode: () => (/* binding */ isNode),\n/* harmony export */   isReactNative: () => (/* binding */ isReactNative),\n/* harmony export */   parseJSON: () => (/* binding */ parseJSON),\n/* harmony export */   removeUndefinedProperties: () => (/* binding */ removeUndefinedProperties),\n/* harmony export */   stringifyJSON: () => (/* binding */ stringifyJSON)\n/* harmony export */ });\n/* harmony import */ var json_bigint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! json-bigint */ \"(ssr)/./node_modules/json-bigint/index.js\");\n/* harmony import */ var _types_intDecoding_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../types/intDecoding.js */ \"(ssr)/./node_modules/algosdk/dist/esm/types/intDecoding.js\");\n\n\nconst JSONbig = json_bigint__WEBPACK_IMPORTED_MODULE_0__({\n    useNativeBigInt: true,\n    strict: true\n});\n/**\n * Parse JSON with additional options.\n * @param str - The JSON string to parse.\n * @param options - Configures how integers in this JSON string will be decoded. See the\n *   `IntDecoding` enum for more details.\n */ function parseJSON(str, { intDecoding }) {\n    if (intDecoding !== _types_intDecoding_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].SAFE && intDecoding !== _types_intDecoding_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].UNSAFE && intDecoding !== _types_intDecoding_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].BIGINT && intDecoding !== _types_intDecoding_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].MIXED) {\n        throw new Error(`Invalid intDecoding option: ${intDecoding}`);\n    }\n    return JSONbig.parse(str, (_, value)=>{\n        if (value != null && typeof value === \"object\" && Object.getPrototypeOf(value) == null) {\n            // JSONbig.parse objects are created with Object.create(null) and thus have a null prototype\n            // let us remedy that\n            Object.setPrototypeOf(value, Object.prototype);\n        }\n        if (typeof value === \"bigint\") {\n            if (intDecoding === _types_intDecoding_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].SAFE && value > Number.MAX_SAFE_INTEGER) {\n                throw new Error(`Integer exceeds maximum safe integer: ${value.toString()}. Try parsing with a different intDecoding option.`);\n            }\n            if (intDecoding === _types_intDecoding_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].BIGINT || intDecoding === _types_intDecoding_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].MIXED && value > Number.MAX_SAFE_INTEGER) {\n                return value;\n            }\n            // JSONbig.parse converts number to BigInts if they are >= 10**15. This is smaller than\n            // Number.MAX_SAFE_INTEGER, so we can convert some BigInts back to normal numbers.\n            return Number(value);\n        }\n        if (typeof value === \"number\") {\n            if (intDecoding === _types_intDecoding_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].BIGINT && Number.isInteger(value)) {\n                return BigInt(value);\n            }\n        }\n        return value;\n    });\n}\n/**\n * Converts a JavaScript value to a JavaScript Object Notation (JSON) string.\n *\n * This functions differs from the built-in JSON.stringify in that it supports serializing BigInts.\n *\n * This function takes the same arguments as the built-in JSON.stringify function.\n *\n * @param value - A JavaScript value, usually an object or array, to be converted.\n * @param replacer - A function that transforms the results.\n * @param space - Adds indentation, white space, and line break characters to the return-value JSON text to make it easier to read.\n */ function stringifyJSON(value, replacer, space) {\n    return JSONbig.stringify(value, replacer, space);\n}\n/**\n * ArrayEqual takes two arrays and return true if equal, false otherwise\n */ function arrayEqual(a, b) {\n    if (a.length !== b.length) {\n        return false;\n    }\n    return Array.from(a).every((val, i)=>val === b[i]);\n}\n/**\n * ConcatArrays takes n number arrays and returns a joint Uint8Array\n * @param arrs - An arbitrary number of n array-like number list arguments\n * @returns [a,b]\n */ function concatArrays(...arrs) {\n    const size = arrs.reduce((sum, arr)=>sum + arr.length, 0);\n    const c = new Uint8Array(size);\n    let offset = 0;\n    for(let i = 0; i < arrs.length; i++){\n        c.set(arrs[i], offset);\n        offset += arrs[i].length;\n    }\n    return c;\n}\n/**\n * Remove undefined properties from an object\n * @param obj - An object, preferably one with some undefined properties\n * @returns A copy of the object with undefined properties removed\n */ function removeUndefinedProperties(obj) {\n    const mutableCopy = {\n        ...obj\n    };\n    Object.keys(mutableCopy).forEach((key)=>{\n        if (typeof mutableCopy[key] === \"undefined\") delete mutableCopy[key];\n    });\n    return mutableCopy;\n}\n/**\n * Check whether the environment is Node.js (as opposed to the browser)\n * @returns True if Node.js environment, false otherwise\n */ function isNode() {\n    return(// @ts-ignore\n    typeof process === \"object\" && // @ts-ignore\n    typeof process.versions === \"object\" && // @ts-ignore\n    typeof process.versions.node !== \"undefined\");\n}\n/**\n * Check whether the environment is ReactNative\n * @returns True if ReactNative, false otherwise\n */ function isReactNative() {\n    const { navigator } = globalThis;\n    if (typeof navigator === \"object\" && navigator.product === \"ReactNative\") {\n        return true;\n    }\n    return false;\n}\nfunction ensureSafeInteger(value) {\n    if (typeof value === \"undefined\") {\n        throw new Error(\"Value is undefined\");\n    }\n    if (typeof value === \"bigint\") {\n        if (value > BigInt(Number.MAX_SAFE_INTEGER) || value < BigInt(Number.MIN_SAFE_INTEGER)) {\n            throw new Error(`BigInt value ${value} is not a safe integer`);\n        }\n        return Number(value);\n    }\n    if (typeof value === \"number\") {\n        if (Number.isSafeInteger(value)) {\n            return value;\n        }\n        throw new Error(`Value ${value} is not a safe integer`);\n    }\n    throw new Error(`Unexpected type ${typeof value}, ${value}`);\n}\nfunction ensureSafeUnsignedInteger(value) {\n    const intValue = ensureSafeInteger(value);\n    if (intValue < 0) {\n        throw new Error(`Value ${intValue} is negative`);\n    }\n    return intValue;\n}\nfunction ensureBigInt(value) {\n    if (typeof value === \"undefined\") {\n        throw new Error(\"Value is undefined\");\n    }\n    if (typeof value === \"bigint\") {\n        return value;\n    }\n    if (typeof value === \"number\") {\n        if (!Number.isSafeInteger(value)) {\n            throw new Error(`Value ${value} is not a safe integer`);\n        }\n        return BigInt(value);\n    }\n    throw new Error(`Unexpected type ${typeof value}, ${value}`);\n}\nfunction ensureUint64(value) {\n    const bigIntValue = ensureBigInt(value);\n    if (bigIntValue < 0 || bigIntValue > BigInt(\"0xffffffffffffffff\")) {\n        throw new Error(`Value ${bigIntValue} is not a uint64`);\n    }\n    return bigIntValue;\n} //# sourceMappingURL=utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS91dGlscy91dGlscy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7O0FBQStDO0FBQ0c7QUFDbEQsTUFBTUUsVUFBVUYsd0NBQW9CQSxDQUFDO0lBQ2pDRyxpQkFBaUI7SUFDakJDLFFBQVE7QUFDWjtBQUNBOzs7OztDQUtDLEdBQ00sU0FBU0MsVUFBVUMsR0FBRyxFQUFFLEVBQUVDLFdBQVcsRUFBRTtJQUMxQyxJQUFJQSxnQkFBZ0JOLDZEQUFXQSxDQUFDTyxJQUFJLElBQ2hDRCxnQkFBZ0JOLDZEQUFXQSxDQUFDUSxNQUFNLElBQ2xDRixnQkFBZ0JOLDZEQUFXQSxDQUFDUyxNQUFNLElBQ2xDSCxnQkFBZ0JOLDZEQUFXQSxDQUFDVSxLQUFLLEVBQUU7UUFDbkMsTUFBTSxJQUFJQyxNQUFNLENBQUMsNEJBQTRCLEVBQUVMLFlBQVksQ0FBQztJQUNoRTtJQUNBLE9BQU9MLFFBQVFXLEtBQUssQ0FBQ1AsS0FBSyxDQUFDUSxHQUFHQztRQUMxQixJQUFJQSxTQUFTLFFBQ1QsT0FBT0EsVUFBVSxZQUNqQkMsT0FBT0MsY0FBYyxDQUFDRixVQUFVLE1BQU07WUFDdEMsNEZBQTRGO1lBQzVGLHFCQUFxQjtZQUNyQkMsT0FBT0UsY0FBYyxDQUFDSCxPQUFPQyxPQUFPRyxTQUFTO1FBQ2pEO1FBQ0EsSUFBSSxPQUFPSixVQUFVLFVBQVU7WUFDM0IsSUFBSVIsZ0JBQWdCTiw2REFBV0EsQ0FBQ08sSUFBSSxJQUFJTyxRQUFRSyxPQUFPQyxnQkFBZ0IsRUFBRTtnQkFDckUsTUFBTSxJQUFJVCxNQUFNLENBQUMsc0NBQXNDLEVBQUVHLE1BQU1PLFFBQVEsR0FBRyxrREFBa0QsQ0FBQztZQUNqSTtZQUNBLElBQUlmLGdCQUFnQk4sNkRBQVdBLENBQUNTLE1BQU0sSUFDakNILGdCQUFnQk4sNkRBQVdBLENBQUNVLEtBQUssSUFBSUksUUFBUUssT0FBT0MsZ0JBQWdCLEVBQUc7Z0JBQ3hFLE9BQU9OO1lBQ1g7WUFDQSx1RkFBdUY7WUFDdkYsa0ZBQWtGO1lBQ2xGLE9BQU9LLE9BQU9MO1FBQ2xCO1FBQ0EsSUFBSSxPQUFPQSxVQUFVLFVBQVU7WUFDM0IsSUFBSVIsZ0JBQWdCTiw2REFBV0EsQ0FBQ1MsTUFBTSxJQUFJVSxPQUFPRyxTQUFTLENBQUNSLFFBQVE7Z0JBQy9ELE9BQU9TLE9BQU9UO1lBQ2xCO1FBQ0o7UUFDQSxPQUFPQTtJQUNYO0FBQ0o7QUFDQTs7Ozs7Ozs7OztDQVVDLEdBQ00sU0FBU1UsY0FBY1YsS0FBSyxFQUFFVyxRQUFRLEVBQUVDLEtBQUs7SUFDaEQsT0FBT3pCLFFBQVEwQixTQUFTLENBQUNiLE9BQU9XLFVBQVVDO0FBQzlDO0FBQ0E7O0NBRUMsR0FDTSxTQUFTRSxXQUFXQyxDQUFDLEVBQUVDLENBQUM7SUFDM0IsSUFBSUQsRUFBRUUsTUFBTSxLQUFLRCxFQUFFQyxNQUFNLEVBQUU7UUFDdkIsT0FBTztJQUNYO0lBQ0EsT0FBT0MsTUFBTUMsSUFBSSxDQUFDSixHQUFHSyxLQUFLLENBQUMsQ0FBQ0MsS0FBS0MsSUFBTUQsUUFBUUwsQ0FBQyxDQUFDTSxFQUFFO0FBQ3ZEO0FBQ0E7Ozs7Q0FJQyxHQUNNLFNBQVNDLGFBQWEsR0FBR0MsSUFBSTtJQUNoQyxNQUFNQyxPQUFPRCxLQUFLRSxNQUFNLENBQUMsQ0FBQ0MsS0FBS0MsTUFBUUQsTUFBTUMsSUFBSVgsTUFBTSxFQUFFO0lBQ3pELE1BQU1ZLElBQUksSUFBSUMsV0FBV0w7SUFDekIsSUFBSU0sU0FBUztJQUNiLElBQUssSUFBSVQsSUFBSSxHQUFHQSxJQUFJRSxLQUFLUCxNQUFNLEVBQUVLLElBQUs7UUFDbENPLEVBQUVHLEdBQUcsQ0FBQ1IsSUFBSSxDQUFDRixFQUFFLEVBQUVTO1FBQ2ZBLFVBQVVQLElBQUksQ0FBQ0YsRUFBRSxDQUFDTCxNQUFNO0lBQzVCO0lBQ0EsT0FBT1k7QUFDWDtBQUNBOzs7O0NBSUMsR0FDTSxTQUFTSSwwQkFBMEJDLEdBQUc7SUFDekMsTUFBTUMsY0FBYztRQUFFLEdBQUdELEdBQUc7SUFBQztJQUM3QmpDLE9BQU9tQyxJQUFJLENBQUNELGFBQWFFLE9BQU8sQ0FBQyxDQUFDQztRQUM5QixJQUFJLE9BQU9ILFdBQVcsQ0FBQ0csSUFBSSxLQUFLLGFBQzVCLE9BQU9ILFdBQVcsQ0FBQ0csSUFBSTtJQUMvQjtJQUNBLE9BQU9IO0FBQ1g7QUFDQTs7O0NBR0MsR0FDTSxTQUFTSTtJQUNaLE9BQ0EsYUFBYTtJQUNiLE9BQU9DLFlBQVksWUFDZixhQUFhO0lBQ2IsT0FBT0EsUUFBUUMsUUFBUSxLQUFLLFlBQzVCLGFBQWE7SUFDYixPQUFPRCxRQUFRQyxRQUFRLENBQUNDLElBQUksS0FBSztBQUN6QztBQUNBOzs7Q0FHQyxHQUNNLFNBQVNDO0lBQ1osTUFBTSxFQUFFQyxTQUFTLEVBQUUsR0FBR0M7SUFDdEIsSUFBSSxPQUFPRCxjQUFjLFlBQVlBLFVBQVVFLE9BQU8sS0FBSyxlQUFlO1FBQ3RFLE9BQU87SUFDWDtJQUNBLE9BQU87QUFDWDtBQUNPLFNBQVNDLGtCQUFrQi9DLEtBQUs7SUFDbkMsSUFBSSxPQUFPQSxVQUFVLGFBQWE7UUFDOUIsTUFBTSxJQUFJSCxNQUFNO0lBQ3BCO0lBQ0EsSUFBSSxPQUFPRyxVQUFVLFVBQVU7UUFDM0IsSUFBSUEsUUFBUVMsT0FBT0osT0FBT0MsZ0JBQWdCLEtBQ3RDTixRQUFRUyxPQUFPSixPQUFPMkMsZ0JBQWdCLEdBQUc7WUFDekMsTUFBTSxJQUFJbkQsTUFBTSxDQUFDLGFBQWEsRUFBRUcsTUFBTSxzQkFBc0IsQ0FBQztRQUNqRTtRQUNBLE9BQU9LLE9BQU9MO0lBQ2xCO0lBQ0EsSUFBSSxPQUFPQSxVQUFVLFVBQVU7UUFDM0IsSUFBSUssT0FBTzRDLGFBQWEsQ0FBQ2pELFFBQVE7WUFDN0IsT0FBT0E7UUFDWDtRQUNBLE1BQU0sSUFBSUgsTUFBTSxDQUFDLE1BQU0sRUFBRUcsTUFBTSxzQkFBc0IsQ0FBQztJQUMxRDtJQUNBLE1BQU0sSUFBSUgsTUFBTSxDQUFDLGdCQUFnQixFQUFFLE9BQU9HLE1BQU0sRUFBRSxFQUFFQSxNQUFNLENBQUM7QUFDL0Q7QUFDTyxTQUFTa0QsMEJBQTBCbEQsS0FBSztJQUMzQyxNQUFNbUQsV0FBV0osa0JBQWtCL0M7SUFDbkMsSUFBSW1ELFdBQVcsR0FBRztRQUNkLE1BQU0sSUFBSXRELE1BQU0sQ0FBQyxNQUFNLEVBQUVzRCxTQUFTLFlBQVksQ0FBQztJQUNuRDtJQUNBLE9BQU9BO0FBQ1g7QUFDTyxTQUFTQyxhQUFhcEQsS0FBSztJQUM5QixJQUFJLE9BQU9BLFVBQVUsYUFBYTtRQUM5QixNQUFNLElBQUlILE1BQU07SUFDcEI7SUFDQSxJQUFJLE9BQU9HLFVBQVUsVUFBVTtRQUMzQixPQUFPQTtJQUNYO0lBQ0EsSUFBSSxPQUFPQSxVQUFVLFVBQVU7UUFDM0IsSUFBSSxDQUFDSyxPQUFPNEMsYUFBYSxDQUFDakQsUUFBUTtZQUM5QixNQUFNLElBQUlILE1BQU0sQ0FBQyxNQUFNLEVBQUVHLE1BQU0sc0JBQXNCLENBQUM7UUFDMUQ7UUFDQSxPQUFPUyxPQUFPVDtJQUNsQjtJQUNBLE1BQU0sSUFBSUgsTUFBTSxDQUFDLGdCQUFnQixFQUFFLE9BQU9HLE1BQU0sRUFBRSxFQUFFQSxNQUFNLENBQUM7QUFDL0Q7QUFDTyxTQUFTcUQsYUFBYXJELEtBQUs7SUFDOUIsTUFBTXNELGNBQWNGLGFBQWFwRDtJQUNqQyxJQUFJc0QsY0FBYyxLQUFLQSxjQUFjN0MsT0FBTyx1QkFBdUI7UUFDL0QsTUFBTSxJQUFJWixNQUFNLENBQUMsTUFBTSxFQUFFeUQsWUFBWSxnQkFBZ0IsQ0FBQztJQUMxRDtJQUNBLE9BQU9BO0FBQ1gsRUFDQSxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hbGdvcmFuZC1jcm93ZGZ1bmRpbmctZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS91dGlscy91dGlscy5qcz9mYTI5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBKU09OYmlnV2l0aG91dENvbmZpZyBmcm9tICdqc29uLWJpZ2ludCc7XG5pbXBvcnQgSW50RGVjb2RpbmcgZnJvbSAnLi4vdHlwZXMvaW50RGVjb2RpbmcuanMnO1xuY29uc3QgSlNPTmJpZyA9IEpTT05iaWdXaXRob3V0Q29uZmlnKHtcbiAgICB1c2VOYXRpdmVCaWdJbnQ6IHRydWUsXG4gICAgc3RyaWN0OiB0cnVlLFxufSk7XG4vKipcbiAqIFBhcnNlIEpTT04gd2l0aCBhZGRpdGlvbmFsIG9wdGlvbnMuXG4gKiBAcGFyYW0gc3RyIC0gVGhlIEpTT04gc3RyaW5nIHRvIHBhcnNlLlxuICogQHBhcmFtIG9wdGlvbnMgLSBDb25maWd1cmVzIGhvdyBpbnRlZ2VycyBpbiB0aGlzIEpTT04gc3RyaW5nIHdpbGwgYmUgZGVjb2RlZC4gU2VlIHRoZVxuICogICBgSW50RGVjb2RpbmdgIGVudW0gZm9yIG1vcmUgZGV0YWlscy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlSlNPTihzdHIsIHsgaW50RGVjb2RpbmcgfSkge1xuICAgIGlmIChpbnREZWNvZGluZyAhPT0gSW50RGVjb2RpbmcuU0FGRSAmJlxuICAgICAgICBpbnREZWNvZGluZyAhPT0gSW50RGVjb2RpbmcuVU5TQUZFICYmXG4gICAgICAgIGludERlY29kaW5nICE9PSBJbnREZWNvZGluZy5CSUdJTlQgJiZcbiAgICAgICAgaW50RGVjb2RpbmcgIT09IEludERlY29kaW5nLk1JWEVEKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBpbnREZWNvZGluZyBvcHRpb246ICR7aW50RGVjb2Rpbmd9YCk7XG4gICAgfVxuICAgIHJldHVybiBKU09OYmlnLnBhcnNlKHN0ciwgKF8sIHZhbHVlKSA9PiB7XG4gICAgICAgIGlmICh2YWx1ZSAhPSBudWxsICYmXG4gICAgICAgICAgICB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmXG4gICAgICAgICAgICBPYmplY3QuZ2V0UHJvdG90eXBlT2YodmFsdWUpID09IG51bGwpIHtcbiAgICAgICAgICAgIC8vIEpTT05iaWcucGFyc2Ugb2JqZWN0cyBhcmUgY3JlYXRlZCB3aXRoIE9iamVjdC5jcmVhdGUobnVsbCkgYW5kIHRodXMgaGF2ZSBhIG51bGwgcHJvdG90eXBlXG4gICAgICAgICAgICAvLyBsZXQgdXMgcmVtZWR5IHRoYXRcbiAgICAgICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih2YWx1ZSwgT2JqZWN0LnByb3RvdHlwZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2JpZ2ludCcpIHtcbiAgICAgICAgICAgIGlmIChpbnREZWNvZGluZyA9PT0gSW50RGVjb2RpbmcuU0FGRSAmJiB2YWx1ZSA+IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnRlZ2VyIGV4Y2VlZHMgbWF4aW11bSBzYWZlIGludGVnZXI6ICR7dmFsdWUudG9TdHJpbmcoKX0uIFRyeSBwYXJzaW5nIHdpdGggYSBkaWZmZXJlbnQgaW50RGVjb2Rpbmcgb3B0aW9uLmApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGludERlY29kaW5nID09PSBJbnREZWNvZGluZy5CSUdJTlQgfHxcbiAgICAgICAgICAgICAgICAoaW50RGVjb2RpbmcgPT09IEludERlY29kaW5nLk1JWEVEICYmIHZhbHVlID4gTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gSlNPTmJpZy5wYXJzZSBjb252ZXJ0cyBudW1iZXIgdG8gQmlnSW50cyBpZiB0aGV5IGFyZSA+PSAxMCoqMTUuIFRoaXMgaXMgc21hbGxlciB0aGFuXG4gICAgICAgICAgICAvLyBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUiwgc28gd2UgY2FuIGNvbnZlcnQgc29tZSBCaWdJbnRzIGJhY2sgdG8gbm9ybWFsIG51bWJlcnMuXG4gICAgICAgICAgICByZXR1cm4gTnVtYmVyKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgaWYgKGludERlY29kaW5nID09PSBJbnREZWNvZGluZy5CSUdJTlQgJiYgTnVtYmVyLmlzSW50ZWdlcih2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gQmlnSW50KHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfSk7XG59XG4vKipcbiAqIENvbnZlcnRzIGEgSmF2YVNjcmlwdCB2YWx1ZSB0byBhIEphdmFTY3JpcHQgT2JqZWN0IE5vdGF0aW9uIChKU09OKSBzdHJpbmcuXG4gKlxuICogVGhpcyBmdW5jdGlvbnMgZGlmZmVycyBmcm9tIHRoZSBidWlsdC1pbiBKU09OLnN0cmluZ2lmeSBpbiB0aGF0IGl0IHN1cHBvcnRzIHNlcmlhbGl6aW5nIEJpZ0ludHMuXG4gKlxuICogVGhpcyBmdW5jdGlvbiB0YWtlcyB0aGUgc2FtZSBhcmd1bWVudHMgYXMgdGhlIGJ1aWx0LWluIEpTT04uc3RyaW5naWZ5IGZ1bmN0aW9uLlxuICpcbiAqIEBwYXJhbSB2YWx1ZSAtIEEgSmF2YVNjcmlwdCB2YWx1ZSwgdXN1YWxseSBhbiBvYmplY3Qgb3IgYXJyYXksIHRvIGJlIGNvbnZlcnRlZC5cbiAqIEBwYXJhbSByZXBsYWNlciAtIEEgZnVuY3Rpb24gdGhhdCB0cmFuc2Zvcm1zIHRoZSByZXN1bHRzLlxuICogQHBhcmFtIHNwYWNlIC0gQWRkcyBpbmRlbnRhdGlvbiwgd2hpdGUgc3BhY2UsIGFuZCBsaW5lIGJyZWFrIGNoYXJhY3RlcnMgdG8gdGhlIHJldHVybi12YWx1ZSBKU09OIHRleHQgdG8gbWFrZSBpdCBlYXNpZXIgdG8gcmVhZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN0cmluZ2lmeUpTT04odmFsdWUsIHJlcGxhY2VyLCBzcGFjZSkge1xuICAgIHJldHVybiBKU09OYmlnLnN0cmluZ2lmeSh2YWx1ZSwgcmVwbGFjZXIsIHNwYWNlKTtcbn1cbi8qKlxuICogQXJyYXlFcXVhbCB0YWtlcyB0d28gYXJyYXlzIGFuZCByZXR1cm4gdHJ1ZSBpZiBlcXVhbCwgZmFsc2Ugb3RoZXJ3aXNlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhcnJheUVxdWFsKGEsIGIpIHtcbiAgICBpZiAoYS5sZW5ndGggIT09IGIubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIEFycmF5LmZyb20oYSkuZXZlcnkoKHZhbCwgaSkgPT4gdmFsID09PSBiW2ldKTtcbn1cbi8qKlxuICogQ29uY2F0QXJyYXlzIHRha2VzIG4gbnVtYmVyIGFycmF5cyBhbmQgcmV0dXJucyBhIGpvaW50IFVpbnQ4QXJyYXlcbiAqIEBwYXJhbSBhcnJzIC0gQW4gYXJiaXRyYXJ5IG51bWJlciBvZiBuIGFycmF5LWxpa2UgbnVtYmVyIGxpc3QgYXJndW1lbnRzXG4gKiBAcmV0dXJucyBbYSxiXVxuICovXG5leHBvcnQgZnVuY3Rpb24gY29uY2F0QXJyYXlzKC4uLmFycnMpIHtcbiAgICBjb25zdCBzaXplID0gYXJycy5yZWR1Y2UoKHN1bSwgYXJyKSA9PiBzdW0gKyBhcnIubGVuZ3RoLCAwKTtcbiAgICBjb25zdCBjID0gbmV3IFVpbnQ4QXJyYXkoc2l6ZSk7XG4gICAgbGV0IG9mZnNldCA9IDA7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcnJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGMuc2V0KGFycnNbaV0sIG9mZnNldCk7XG4gICAgICAgIG9mZnNldCArPSBhcnJzW2ldLmxlbmd0aDtcbiAgICB9XG4gICAgcmV0dXJuIGM7XG59XG4vKipcbiAqIFJlbW92ZSB1bmRlZmluZWQgcHJvcGVydGllcyBmcm9tIGFuIG9iamVjdFxuICogQHBhcmFtIG9iaiAtIEFuIG9iamVjdCwgcHJlZmVyYWJseSBvbmUgd2l0aCBzb21lIHVuZGVmaW5lZCBwcm9wZXJ0aWVzXG4gKiBAcmV0dXJucyBBIGNvcHkgb2YgdGhlIG9iamVjdCB3aXRoIHVuZGVmaW5lZCBwcm9wZXJ0aWVzIHJlbW92ZWRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZVVuZGVmaW5lZFByb3BlcnRpZXMob2JqKSB7XG4gICAgY29uc3QgbXV0YWJsZUNvcHkgPSB7IC4uLm9iaiB9O1xuICAgIE9iamVjdC5rZXlzKG11dGFibGVDb3B5KS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgICAgaWYgKHR5cGVvZiBtdXRhYmxlQ29weVtrZXldID09PSAndW5kZWZpbmVkJylcbiAgICAgICAgICAgIGRlbGV0ZSBtdXRhYmxlQ29weVtrZXldO1xuICAgIH0pO1xuICAgIHJldHVybiBtdXRhYmxlQ29weTtcbn1cbi8qKlxuICogQ2hlY2sgd2hldGhlciB0aGUgZW52aXJvbm1lbnQgaXMgTm9kZS5qcyAoYXMgb3Bwb3NlZCB0byB0aGUgYnJvd3NlcilcbiAqIEByZXR1cm5zIFRydWUgaWYgTm9kZS5qcyBlbnZpcm9ubWVudCwgZmFsc2Ugb3RoZXJ3aXNlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc05vZGUoKSB7XG4gICAgcmV0dXJuIChcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgdHlwZW9mIHByb2Nlc3MgPT09ICdvYmplY3QnICYmXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgdHlwZW9mIHByb2Nlc3MudmVyc2lvbnMgPT09ICdvYmplY3QnICYmXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgdHlwZW9mIHByb2Nlc3MudmVyc2lvbnMubm9kZSAhPT0gJ3VuZGVmaW5lZCcpO1xufVxuLyoqXG4gKiBDaGVjayB3aGV0aGVyIHRoZSBlbnZpcm9ubWVudCBpcyBSZWFjdE5hdGl2ZVxuICogQHJldHVybnMgVHJ1ZSBpZiBSZWFjdE5hdGl2ZSwgZmFsc2Ugb3RoZXJ3aXNlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1JlYWN0TmF0aXZlKCkge1xuICAgIGNvbnN0IHsgbmF2aWdhdG9yIH0gPSBnbG9iYWxUaGlzO1xuICAgIGlmICh0eXBlb2YgbmF2aWdhdG9yID09PSAnb2JqZWN0JyAmJiBuYXZpZ2F0b3IucHJvZHVjdCA9PT0gJ1JlYWN0TmF0aXZlJykge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGVuc3VyZVNhZmVJbnRlZ2VyKHZhbHVlKSB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdWYWx1ZSBpcyB1bmRlZmluZWQnKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2JpZ2ludCcpIHtcbiAgICAgICAgaWYgKHZhbHVlID4gQmlnSW50KE51bWJlci5NQVhfU0FGRV9JTlRFR0VSKSB8fFxuICAgICAgICAgICAgdmFsdWUgPCBCaWdJbnQoTnVtYmVyLk1JTl9TQUZFX0lOVEVHRVIpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEJpZ0ludCB2YWx1ZSAke3ZhbHVlfSBpcyBub3QgYSBzYWZlIGludGVnZXJgKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gTnVtYmVyKHZhbHVlKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgaWYgKE51bWJlci5pc1NhZmVJbnRlZ2VyKHZhbHVlKSkge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgVmFsdWUgJHt2YWx1ZX0gaXMgbm90IGEgc2FmZSBpbnRlZ2VyYCk7XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcihgVW5leHBlY3RlZCB0eXBlICR7dHlwZW9mIHZhbHVlfSwgJHt2YWx1ZX1gKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBlbnN1cmVTYWZlVW5zaWduZWRJbnRlZ2VyKHZhbHVlKSB7XG4gICAgY29uc3QgaW50VmFsdWUgPSBlbnN1cmVTYWZlSW50ZWdlcih2YWx1ZSk7XG4gICAgaWYgKGludFZhbHVlIDwgMCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFZhbHVlICR7aW50VmFsdWV9IGlzIG5lZ2F0aXZlYCk7XG4gICAgfVxuICAgIHJldHVybiBpbnRWYWx1ZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBlbnN1cmVCaWdJbnQodmFsdWUpIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1ZhbHVlIGlzIHVuZGVmaW5lZCcpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnYmlnaW50Jykge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XG4gICAgICAgIGlmICghTnVtYmVyLmlzU2FmZUludGVnZXIodmFsdWUpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFZhbHVlICR7dmFsdWV9IGlzIG5vdCBhIHNhZmUgaW50ZWdlcmApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBCaWdJbnQodmFsdWUpO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoYFVuZXhwZWN0ZWQgdHlwZSAke3R5cGVvZiB2YWx1ZX0sICR7dmFsdWV9YCk7XG59XG5leHBvcnQgZnVuY3Rpb24gZW5zdXJlVWludDY0KHZhbHVlKSB7XG4gICAgY29uc3QgYmlnSW50VmFsdWUgPSBlbnN1cmVCaWdJbnQodmFsdWUpO1xuICAgIGlmIChiaWdJbnRWYWx1ZSA8IDAgfHwgYmlnSW50VmFsdWUgPiBCaWdJbnQoJzB4ZmZmZmZmZmZmZmZmZmZmZicpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgVmFsdWUgJHtiaWdJbnRWYWx1ZX0gaXMgbm90IGEgdWludDY0YCk7XG4gICAgfVxuICAgIHJldHVybiBiaWdJbnRWYWx1ZTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0aWxzLmpzLm1hcCJdLCJuYW1lcyI6WyJKU09OYmlnV2l0aG91dENvbmZpZyIsIkludERlY29kaW5nIiwiSlNPTmJpZyIsInVzZU5hdGl2ZUJpZ0ludCIsInN0cmljdCIsInBhcnNlSlNPTiIsInN0ciIsImludERlY29kaW5nIiwiU0FGRSIsIlVOU0FGRSIsIkJJR0lOVCIsIk1JWEVEIiwiRXJyb3IiLCJwYXJzZSIsIl8iLCJ2YWx1ZSIsIk9iamVjdCIsImdldFByb3RvdHlwZU9mIiwic2V0UHJvdG90eXBlT2YiLCJwcm90b3R5cGUiLCJOdW1iZXIiLCJNQVhfU0FGRV9JTlRFR0VSIiwidG9TdHJpbmciLCJpc0ludGVnZXIiLCJCaWdJbnQiLCJzdHJpbmdpZnlKU09OIiwicmVwbGFjZXIiLCJzcGFjZSIsInN0cmluZ2lmeSIsImFycmF5RXF1YWwiLCJhIiwiYiIsImxlbmd0aCIsIkFycmF5IiwiZnJvbSIsImV2ZXJ5IiwidmFsIiwiaSIsImNvbmNhdEFycmF5cyIsImFycnMiLCJzaXplIiwicmVkdWNlIiwic3VtIiwiYXJyIiwiYyIsIlVpbnQ4QXJyYXkiLCJvZmZzZXQiLCJzZXQiLCJyZW1vdmVVbmRlZmluZWRQcm9wZXJ0aWVzIiwib2JqIiwibXV0YWJsZUNvcHkiLCJrZXlzIiwiZm9yRWFjaCIsImtleSIsImlzTm9kZSIsInByb2Nlc3MiLCJ2ZXJzaW9ucyIsIm5vZGUiLCJpc1JlYWN0TmF0aXZlIiwibmF2aWdhdG9yIiwiZ2xvYmFsVGhpcyIsInByb2R1Y3QiLCJlbnN1cmVTYWZlSW50ZWdlciIsIk1JTl9TQUZFX0lOVEVHRVIiLCJpc1NhZmVJbnRlZ2VyIiwiZW5zdXJlU2FmZVVuc2lnbmVkSW50ZWdlciIsImludFZhbHVlIiwiZW5zdXJlQmlnSW50IiwiZW5zdXJlVWludDY0IiwiYmlnSW50VmFsdWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/utils/utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/esm/wait.js":
/*!***********************************************!*\
  !*** ./node_modules/algosdk/dist/esm/wait.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   waitForConfirmation: () => (/* binding */ waitForConfirmation)\n/* harmony export */ });\n/**\n * Wait until a transaction has been confirmed or rejected by the network, or\n * until 'waitRounds' number of rounds have passed.\n * @param client - An Algodv2 client\n * @param txid - The ID of the transaction to wait for.\n * @param waitRounds - The maximum number of rounds to wait for.\n * @returns A promise that, upon success, will resolve to the output of the\n *   `pendingTransactionInformation` call for the confirmed transaction.\n */ async function waitForConfirmation(client, txid, waitRounds) {\n    // Wait until the transaction is confirmed or rejected, or until 'waitRounds'\n    // number of rounds have passed.\n    const status = await client.status().do();\n    if (typeof status === \"undefined\") {\n        throw new Error(\"Unable to get node status\");\n    }\n    const startRound = status.lastRound + BigInt(1);\n    const stopRound = startRound + BigInt(waitRounds);\n    let currentRound = startRound;\n    /* eslint-disable no-await-in-loop */ while(currentRound < stopRound){\n        let poolError = false;\n        try {\n            const pendingInfo = await client.pendingTransactionInformation(txid).do();\n            if (pendingInfo.confirmedRound) {\n                // Got the completed Transaction\n                return pendingInfo;\n            }\n            if (pendingInfo.poolError) {\n                // If there was a pool error, then the transaction has been rejected\n                poolError = true;\n                throw new Error(`Transaction Rejected: ${pendingInfo.poolError}`);\n            }\n        } catch (err) {\n            // Ignore errors from PendingTransactionInformation, since it may return 404 if the algod\n            // instance is behind a load balancer and the request goes to a different algod than the\n            // one we submitted the transaction to\n            if (poolError) {\n                // Rethrow error only if it's because the transaction was rejected\n                throw err;\n            }\n        }\n        await client.statusAfterBlock(currentRound).do();\n        currentRound += BigInt(1);\n    }\n    /* eslint-enable no-await-in-loop */ throw new Error(`Transaction not confirmed after ${waitRounds} rounds`);\n} //# sourceMappingURL=wait.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2VzbS93YWl0LmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7Ozs7Ozs7Q0FRQyxHQUNNLGVBQWVBLG9CQUFvQkMsTUFBTSxFQUFFQyxJQUFJLEVBQUVDLFVBQVU7SUFDOUQsNkVBQTZFO0lBQzdFLGdDQUFnQztJQUNoQyxNQUFNQyxTQUFTLE1BQU1ILE9BQU9HLE1BQU0sR0FBR0MsRUFBRTtJQUN2QyxJQUFJLE9BQU9ELFdBQVcsYUFBYTtRQUMvQixNQUFNLElBQUlFLE1BQU07SUFDcEI7SUFDQSxNQUFNQyxhQUFhSCxPQUFPSSxTQUFTLEdBQUdDLE9BQU87SUFDN0MsTUFBTUMsWUFBWUgsYUFBYUUsT0FBT047SUFDdEMsSUFBSVEsZUFBZUo7SUFDbkIsbUNBQW1DLEdBQ25DLE1BQU9JLGVBQWVELFVBQVc7UUFDN0IsSUFBSUUsWUFBWTtRQUNoQixJQUFJO1lBQ0EsTUFBTUMsY0FBYyxNQUFNWixPQUFPYSw2QkFBNkIsQ0FBQ1osTUFBTUcsRUFBRTtZQUN2RSxJQUFJUSxZQUFZRSxjQUFjLEVBQUU7Z0JBQzVCLGdDQUFnQztnQkFDaEMsT0FBT0Y7WUFDWDtZQUNBLElBQUlBLFlBQVlELFNBQVMsRUFBRTtnQkFDdkIsb0VBQW9FO2dCQUNwRUEsWUFBWTtnQkFDWixNQUFNLElBQUlOLE1BQU0sQ0FBQyxzQkFBc0IsRUFBRU8sWUFBWUQsU0FBUyxDQUFDLENBQUM7WUFDcEU7UUFDSixFQUNBLE9BQU9JLEtBQUs7WUFDUix5RkFBeUY7WUFDekYsd0ZBQXdGO1lBQ3hGLHNDQUFzQztZQUN0QyxJQUFJSixXQUFXO2dCQUNYLGtFQUFrRTtnQkFDbEUsTUFBTUk7WUFDVjtRQUNKO1FBQ0EsTUFBTWYsT0FBT2dCLGdCQUFnQixDQUFDTixjQUFjTixFQUFFO1FBQzlDTSxnQkFBZ0JGLE9BQU87SUFDM0I7SUFDQSxrQ0FBa0MsR0FDbEMsTUFBTSxJQUFJSCxNQUFNLENBQUMsZ0NBQWdDLEVBQUVILFdBQVcsT0FBTyxDQUFDO0FBQzFFLEVBQ0EsZ0NBQWdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWxnb3JhbmQtY3Jvd2RmdW5kaW5nLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9lc20vd2FpdC5qcz8yN2Q5Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogV2FpdCB1bnRpbCBhIHRyYW5zYWN0aW9uIGhhcyBiZWVuIGNvbmZpcm1lZCBvciByZWplY3RlZCBieSB0aGUgbmV0d29yaywgb3JcbiAqIHVudGlsICd3YWl0Um91bmRzJyBudW1iZXIgb2Ygcm91bmRzIGhhdmUgcGFzc2VkLlxuICogQHBhcmFtIGNsaWVudCAtIEFuIEFsZ29kdjIgY2xpZW50XG4gKiBAcGFyYW0gdHhpZCAtIFRoZSBJRCBvZiB0aGUgdHJhbnNhY3Rpb24gdG8gd2FpdCBmb3IuXG4gKiBAcGFyYW0gd2FpdFJvdW5kcyAtIFRoZSBtYXhpbXVtIG51bWJlciBvZiByb3VuZHMgdG8gd2FpdCBmb3IuXG4gKiBAcmV0dXJucyBBIHByb21pc2UgdGhhdCwgdXBvbiBzdWNjZXNzLCB3aWxsIHJlc29sdmUgdG8gdGhlIG91dHB1dCBvZiB0aGVcbiAqICAgYHBlbmRpbmdUcmFuc2FjdGlvbkluZm9ybWF0aW9uYCBjYWxsIGZvciB0aGUgY29uZmlybWVkIHRyYW5zYWN0aW9uLlxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gd2FpdEZvckNvbmZpcm1hdGlvbihjbGllbnQsIHR4aWQsIHdhaXRSb3VuZHMpIHtcbiAgICAvLyBXYWl0IHVudGlsIHRoZSB0cmFuc2FjdGlvbiBpcyBjb25maXJtZWQgb3IgcmVqZWN0ZWQsIG9yIHVudGlsICd3YWl0Um91bmRzJ1xuICAgIC8vIG51bWJlciBvZiByb3VuZHMgaGF2ZSBwYXNzZWQuXG4gICAgY29uc3Qgc3RhdHVzID0gYXdhaXQgY2xpZW50LnN0YXR1cygpLmRvKCk7XG4gICAgaWYgKHR5cGVvZiBzdGF0dXMgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVW5hYmxlIHRvIGdldCBub2RlIHN0YXR1cycpO1xuICAgIH1cbiAgICBjb25zdCBzdGFydFJvdW5kID0gc3RhdHVzLmxhc3RSb3VuZCArIEJpZ0ludCgxKTtcbiAgICBjb25zdCBzdG9wUm91bmQgPSBzdGFydFJvdW5kICsgQmlnSW50KHdhaXRSb3VuZHMpO1xuICAgIGxldCBjdXJyZW50Um91bmQgPSBzdGFydFJvdW5kO1xuICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLWF3YWl0LWluLWxvb3AgKi9cbiAgICB3aGlsZSAoY3VycmVudFJvdW5kIDwgc3RvcFJvdW5kKSB7XG4gICAgICAgIGxldCBwb29sRXJyb3IgPSBmYWxzZTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHBlbmRpbmdJbmZvID0gYXdhaXQgY2xpZW50LnBlbmRpbmdUcmFuc2FjdGlvbkluZm9ybWF0aW9uKHR4aWQpLmRvKCk7XG4gICAgICAgICAgICBpZiAocGVuZGluZ0luZm8uY29uZmlybWVkUm91bmQpIHtcbiAgICAgICAgICAgICAgICAvLyBHb3QgdGhlIGNvbXBsZXRlZCBUcmFuc2FjdGlvblxuICAgICAgICAgICAgICAgIHJldHVybiBwZW5kaW5nSW5mbztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChwZW5kaW5nSW5mby5wb29sRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAvLyBJZiB0aGVyZSB3YXMgYSBwb29sIGVycm9yLCB0aGVuIHRoZSB0cmFuc2FjdGlvbiBoYXMgYmVlbiByZWplY3RlZFxuICAgICAgICAgICAgICAgIHBvb2xFcnJvciA9IHRydWU7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBUcmFuc2FjdGlvbiBSZWplY3RlZDogJHtwZW5kaW5nSW5mby5wb29sRXJyb3J9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgLy8gSWdub3JlIGVycm9ycyBmcm9tIFBlbmRpbmdUcmFuc2FjdGlvbkluZm9ybWF0aW9uLCBzaW5jZSBpdCBtYXkgcmV0dXJuIDQwNCBpZiB0aGUgYWxnb2RcbiAgICAgICAgICAgIC8vIGluc3RhbmNlIGlzIGJlaGluZCBhIGxvYWQgYmFsYW5jZXIgYW5kIHRoZSByZXF1ZXN0IGdvZXMgdG8gYSBkaWZmZXJlbnQgYWxnb2QgdGhhbiB0aGVcbiAgICAgICAgICAgIC8vIG9uZSB3ZSBzdWJtaXR0ZWQgdGhlIHRyYW5zYWN0aW9uIHRvXG4gICAgICAgICAgICBpZiAocG9vbEVycm9yKSB7XG4gICAgICAgICAgICAgICAgLy8gUmV0aHJvdyBlcnJvciBvbmx5IGlmIGl0J3MgYmVjYXVzZSB0aGUgdHJhbnNhY3Rpb24gd2FzIHJlamVjdGVkXG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGF3YWl0IGNsaWVudC5zdGF0dXNBZnRlckJsb2NrKGN1cnJlbnRSb3VuZCkuZG8oKTtcbiAgICAgICAgY3VycmVudFJvdW5kICs9IEJpZ0ludCgxKTtcbiAgICB9XG4gICAgLyogZXNsaW50LWVuYWJsZSBuby1hd2FpdC1pbi1sb29wICovXG4gICAgdGhyb3cgbmV3IEVycm9yKGBUcmFuc2FjdGlvbiBub3QgY29uZmlybWVkIGFmdGVyICR7d2FpdFJvdW5kc30gcm91bmRzYCk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD13YWl0LmpzLm1hcCJdLCJuYW1lcyI6WyJ3YWl0Rm9yQ29uZmlybWF0aW9uIiwiY2xpZW50IiwidHhpZCIsIndhaXRSb3VuZHMiLCJzdGF0dXMiLCJkbyIsIkVycm9yIiwic3RhcnRSb3VuZCIsImxhc3RSb3VuZCIsIkJpZ0ludCIsInN0b3BSb3VuZCIsImN1cnJlbnRSb3VuZCIsInBvb2xFcnJvciIsInBlbmRpbmdJbmZvIiwicGVuZGluZ1RyYW5zYWN0aW9uSW5mb3JtYXRpb24iLCJjb25maXJtZWRSb3VuZCIsImVyciIsInN0YXR1c0FmdGVyQmxvY2siXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/esm/wait.js\n");

/***/ })

};
;